{"version":3,"sources":["webpack:///0.1fa17be.chunk.js","webpack:///./app/reducers/utils/applyYDomain.js","webpack:///./app/utils/dataFormats/getRangeDomain.js","webpack:///./app/components/Chart/ChartTypes ^\\.\\/.*\\/index$","webpack:///./app/components/Chart/ChartTypes/NVD3Adapter/index.js","webpack:///./app/components/Chart/ChartTypes/NVD3Adapter/nvd3Styles.css","webpack:///./~/nvd3/build/nv.d3.js","webpack:///./~/react-nvd3/dist/react-nvd3.min.js","webpack:///./app/components/Chart/ChartTypes/NVD3Adapter/nvd3Styles.css?9cd2"],"names":["simplechartJsonp","278","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","shouldSetupYDomain","typeConfig","dataFormat","indexOf","modules","settings","applyYDomain","chartOptions","chartData","yDomain","_misc","ownsProperties","getNiceDomain","_getRangeDomain2","_immutabilityHelper2","$set","Object","defineProperty","value","_immutabilityHelper","_getRangeDomain","__REACT_HOT_LOADER__","register","279","getSeriesDomain","series","format","key","values","map","point","_d","min","max","getMultiSeriesDomain","mins","maxs","forEach","singleSeries","domain","push","makeNice","range","scale","linear","nice","getRangeDomain","data","280","webpackContext","req","webpackContextResolve","id","Error","./NVD3Adapter/index","keys","resolve","690","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_extends","assign","target","i","arguments","length","source","hasOwnProperty","_createClass","defineProperties","props","descriptor","protoProps","staticProps","_react","_react2","_propTypes","_propTypes2","_reactNvd","_reactNvd2","_cloneDeep","_cloneDeep2","_chartTypeUtils","_applyYDomain","_applyYDomain2","_applyTickFormatters","_applyTickFormatters2","NVD3Adapter","_Component","_ref","_temp","_this","_ret","this","_len","args","Array","_key","getPrototypeOf","apply","concat","mapToChartProps","_this2","__mapToChartProps__REACT_HOT_LOADER__","_props","options","widget","type","getNvd3Type","chartProps","datum","dataTransform","ref","getChartTypeObject","config","defaultOpts","getChartTypeDefaultOpts","createElement","Math","random","chartType","Component","propTypes","array","isRequired","object","oneOfType","string","bool","defaultProps","_default","691","692","nv","dev","tooltip","utils","models","charts","logs","dom","t","e","d3","dispatch","Function","bind","oThis","aArgs","slice","fToBind","fNOP","fBound","on","startTime","Date","endTime","totalTime","log","window","console","deprecated","name","info","warn","render","step","active","render_start","renderLoop","chart","graph","queue","generate","callback","splice","setTimeout","render_end","addGraph","write","fastdom","mutate","read","measure","interactiveGuideline","layer","selection","each","mouseHandler","d3mouse","mouse","mouseX","mouseY","subtractMargin","mouseOutAnyReason","isMSIE","event","offsetX","offsetY","tagName","className","baseVal","match","margin","left","top","availableWidth","availableHeight","relatedTarget","ownerSVGElement","nvPointerEventsClass","elementMouseout","renderGuideLine","hidden","scaleIsOrdinal","xScale","rangeBands","pointXValue","elementIndex","bisect","rangeBand","invert","elementMousemove","elementDblclick","elementClick","elementMouseDown","elementMouseUp","container","select","width","height","wrap","selectAll","enter","append","attr","svgContainer","guideLine","x","showGuideLine","line","NaNtoZero","String","d","exit","remove","ActiveXObject","duration","hideDelay","_","interactiveBisect","searchVal","xAccessor","_xAccessor","_cmp","v","bisector","index","currentValue","nextIndex","nextValue","abs","nearestValueIndex","threshold","yDistMax","Infinity","indexToHighlight","delta","initTooltip","node","document","body","classes","style","classed","nvtooltip","enabled","dataSeriesExists","newContent","contentGenerator","innerHTML","positionTooltip","floor","gravity","distance","snapDistance","lastPosition","headerEnabled","valueFormatter","headerFormatter","keyFormatter","table","html","tbodyEnter","trowEnter","p","highlight","color","total","filter","percent","opacityScale","outerHTML","footer","position","pos","clientX","clientY","getComputedStyle","transform","client","getBoundingClientRect","isArray","isObject","calcGravityOffset","tmp","offsetHeight","offsetWidth","clientWidth","documentElement","clientHeight","gravityOffset","interrupt","transition","delay","old_translate","new_translate","round","translateInterpolator","interpolateString","is_hidden","styleTween","optionsFunc","_options","get","set","chartContainer","fixedTop","offset","y","initOptions","windowSize","size","innerWidth","innerHeight","compatMode","a","isFunction","isDate","toString","isNumber","isNaN","windowResize","handler","addEventListener","clear","removeEventListener","getColor","defaultColor","color_scale","ordinal","category20","customTheme","dictionary","getKey","defaultColors","defIndex","pjax","links","content","load","href","fragment","parentNode","replaceChild","history","pushState","textContent","preventDefault","state","calcApproxTextWidth","svgTextElem","text","fontSize","parseInt","replace","textLength","n","watchTransition","renderWatch","_duration","renderStack","model","__rendered","m","arg","renderEnd","reset","pop","every","deepExtend","dst","srcObj","_setState","_getState","init","changed","getter","fn","setter","update","_set","JSON","stringify","change","calcTicksX","numTicks","numValues","stream_len","calcTicksY","initOption","_calls","_overrides","ops","getOwnPropertyNames","calls","inheritOptionsD3","d3_source","oplist","_d3options","unshift","rebind","arrayUnique","sort","item","symbolMap","symbol","s","svg","symbolTypes","functor","inheritOptions","inherited","_inherited","d3ops","initSVG","nvd3-svg","sanitizeHeight","sanitizeWidth","bottom","right","noData","opt","noDataText","wrapTicks","word","words","split","reverse","lineNumber","dy","parseFloat","tspan","join","getComputedTextLength","arrayEquals","array1","array2","l","axis","wrapEnter","g","ticks","orient","scale0","fmt","tickFormat","axisLabel","axisLabelText","xLabelMargin","axisMaxMin","w","isOrdinal","showMaxMin","tickPadding","axisLabelDistance","maxTextWidth","textHeight","xTicks","rotateLabelsRule","rotateLabels","box","sin","PI","staggerLabels","rotateYLabel","maxMinRange","err","copy","boxPlot","xDomain","getX","xRange","yData","yMin","yMax","q1","getQ1","q3","getQ3","wl","getWl","wh","getWh","olItems","getOlItems","getOlValue","yScale","yRange","xScale0","yScale0","boxplots","boxEnter","j","hover","f","box_width","maxBoxWidth","box_left","box_right","endpoint","elementMouseover","getQ2","outliers","getOlColor","getOlLabel","label","Q1","Q2","Q3","whisker_low","whisker_high","q2","itemColor","outlierValue","outlierLabel","outlierColor","boxPlotChart","boxplot","showXAxis","xAxis","showYAxis","yAxis","beforeUpdate","clamp","gEnter","defsEnter","rightAlignYAxis","disabled","tickSize","evt","tooltipContent","bullet","sortLabels","labels","lz","b","iA","iB","descending","rangez","ranges","markerz","markers","markerLinez","markerLines","measurez","measures","rangeLabelz","rangeLabels","markerLabelz","markerLabels","markerLineLabelz","markerLineLabels","measureLabelz","measureLabels","x1","extent","merge","forceX","__chart__","il","rangeClassNames","legacyRangeClassNames","xp1","h3","markerData","marker","markerLinesData","defaultRangeLabels","bulletChart","x0","title","subtitle","bulletWrap","tick","tickEnter","tickUpdate","timer","flush","candlestickBar","barWidth","padData","getLow","forceY","getHigh","chartClick","clipEdge","tickGroups","getOpen","getClose","getY","open","close","high","low","interactive","highlightPoint","pointIndex","isHoverOver","clearHighlights","cumulativeLineChart","lines","dragStart","dragMove","dx","updateZero","dragEnd","stateChange","indexLine","oldDuration","stateSetter","stateGetter","defaultState","indexDrag","behavior","drag","rescaleY","seriesDomains","initialDomain","completeDomain","indexify","interactivePointerEvents","showLegend","legend","marginTop","showControls","controlsData","controls","rightAlign","tempDisabled","useInteractiveGuideline","interactiveLayer","display","linesWrap","seriesIndex","avgLineData","average","avgLines","getAvgLineY","yVal","_ticks","newState","singlePoint","pointXLocation","allData","yValue","domainExtent","xValue","idx","indexifyYGetter","indexValue","noErrorCheck","updateState","useVoronoi","discreteBar","seriesData","y0","showValues","groups","bars","barsEnter","element","stopPropagation","elementDblClick","valueFormat","rectClass","discreteBarChart","discretebar","wrapLabels","distribution","naxis","distWrap","dist","getData","focus","resizePath","updateBrushBG","brush","empty","brushExtent","brushBG","leftWidth","rightWidth","onBrush","shouldDispatch","contentWrap","syncBrushing","brushBGenter","gBrush","pointActive","interpolate","xTickFormat","yTickFormat","forceDirectedGraph","nodes","nodeFieldSet","Set","add","force","layout","linkStrength","friction","linkDistance","linkDist","charge","theta","alpha","start","link","sqrt","radius","py","px","nodeColor","field","linkExtras","nodeExtras","furiousLegend","setTextColor","vers","expanded","disengaged","setBGColor","seriesShape","seriesEnter","property","seriesCheckbox","seriesText","legendMouseover","legendMouseout","legendClick","radioButtonMode","userDisabled","engaged","legendDblclick","versPadding","align","seriesWidths","legendText","maxKeyLength","trimmedKey","substring","nodeTextLength","padding","seriesPerRow","legendWidth","columnWidths","k","reduce","prev","cur","xPositions","curX","ceil","xpos","ypos","newxpos","maxwidth","historicalBar","rval","historicalBarChart","bar_model","transitionDuration","tooltipHide","ohlcBarChart","ohlcBar","candlestickBarChart","setBGOpacity","insert","scatter","scatterWrap","strokeWidth","fillOpacity","areaPaths","isArea","area","defined","y1","linePaths","pointSize","pointDomain","lineChart","updateXAxis","updateYAxis","disableTooltip","focusEnable","focusEnter","legendPosition","currentValues","pointYValue","defaultValueFormatter","yPos","x2Axis","y2Axis","focusHeight","focusShowAxisX","focusShowAxisY","focusMargin","lineWithFocusChart","linePlusBarChart","availableHeight2","x2","availableHeight1","bar","focusBarsWrap","dataBars","focusLinesWrap","allDisabled","dataLines","dataLine","switchYAxisOrder","y1Axis","y2","barsOpacity","linesOpacity","y1Opacity","y2Opacity","margin2","y3","lines2","bars2","y4","series1","series2","contextEnter","legendXPosition","originalKey","legendRightAxisHint","legendLeftAxisHint","bars2Wrap","lines2Wrap","y3Axis","y4Axis","getBarsAxis","main","getLinesAxis","multiBar","nonStackableCount","hideable","stacked","parsed","stack","stackOffset","nonStackable","nonStackableSeries","posBase","negBase","groupSpacing","exitTransition","last_datalength","barColor","rgb","darker","barSelection","multiBarChart","multibar","controlWidth","controlLabels","grouped","getTranslate","totalInBetweenTicks","reduceXTicks","multiBarHorizontal","valuePadding","getYerr","xerr","mid","path","yerr","showBarLabels","yErr","multiBarHorizontalChart","multiChart","mouseover_line","yaxis","yAxis2","yAxis1","mouseover_scatter","mouseover_stack","stack1","mouseover_bar","bars1","serieIndex","dataLines1","dataLines2","dataScatters1","dataScatters2","dataBars1","dataBars2","dataStack1","dataStack2","color_array","lines1","scatters1","scatters2","stack2","lines1Wrap","scatters1Wrap","bars1Wrap","stack1Wrap","scatters2Wrap","stack2Wrap","extraValue1","aVal","extraValue2","yScale1","yDomain1","yScale2","yDomain2","stackedArea","parallelCoordinates","enabledDimensions","displayMissingValuesline","axisWithUndefinedValues","newscale","missingValuesline","missingValueslineText","restoreBrush","visible","filters","brushDomain","dimension","hasOnlyNaN","oldDomainMaxValue","hasNaN","dimensions","updateTicks","brushstart","displayBrush","actives","dimensionNames","extents","foreground","isActive","brushend","hasActiveBrush","brushEnd","currentTicks","tickValues","dragging","__origin__","background","dimensionPosition","currentPosition","dimensionsOrder","newData","val","dataValues","dimensionData","rangePoints","onlyUndefinedValues","tension","lineTension","axisDrag","lineData","undefinedValuesLabel","dimensionsEnter","formerActive","activeChanged","dimensionFormats","parallelCoordinatesChart","originalPosition","isSorted","nanValue","str","tp","dim","dd","pie","arcTween","endAngle","startAngle","donut","innerRadius","_current","arcs","arcsRadiusOuter","arcsRadiusInner","arcsRadius","outer","inner","donutRatio","growOnHover","g_pie","arcsOver","arc","outerRadius","arcOver","cornerRadius","padAngle","titleOffset","slices","pieLabels","ae","attrTween","showLabels","labelsArc","labelsOutside","group","labelSunbeamLayout","rotateAngle","centroid","labelLocationHash","createHashKey","coordinates","getSlicePercentage","center","labelThreshold","hashKey","labelType","pieLabelsOutside","donutLabelsOutside","labelFormat","pieChart","pieWrap","showTooltipPercent","sankey","computeNodeLinks","sourceLinks","targetLinks","computeNodeValues","sum","computeNodeBreadths","nextNodes","remainingNodes","nodeWidth","sinksRight","moveSinksRight","scaleNodeBreadths","kx","computeNodeDepths","iterations","resolveCollisions","nodesByBreadth","ascendingDepth","nodePadding","nest","sortKeys","ascending","entries","ky","computeLinkDepths","weightedTarget","ty","weightedSource","sy","breadth","ascendingSourceDepth","ascendingTargetDepth","relayout","xi","interpolateNumber","curvature","x3","sankeyChart","dragmove","testData","isDataValid","dataAvailable","error","showError","linkTitle","origin","appendChild","nodeFillColor","nodeStrokeColor","nodeTitle","units","formatNumber","message","nodeStyle","fillColor","strokeColor","getCache","_cache","delCache","getDiffs","cache","diffs","updateInteractiveLayer","needsUpdate","vertices","groupIndex","pX","pY","pointArray","bounds","geom","polygon","voronoi","clip","pointPaths","vPointPaths","showVoronoi","clipVoronoi","clipRadius","mouseEventCallback","el","mDispatch","scrollTop","pageYOffset","scrollLeft","pageXOffset","relativePos","logScale","sizeDomain","getSize","padDataOuter","z","forceSize","sizeRange","_sizeRange_def","z0","scaleDiff","width0","height0","sizeDiff","pointBorderColor","points","getShape","titles","interactiveUpdateDelay","clearTimeout","timeoutID","shape","notActive","pointScale","pointRange","forcePoint","pointShape","scatterChart","showDistX","distX","showDistY","distY","regWrap","regLine","intercept","slope","sparkline","paths","result","yValues","maxPoint","lastIndexOf","minPoint","currentPoint","showMinMaxPoints","showCurrentPoint","animate","sparklinePlus","updateValueLine","paused","hoverValue","hoverEnter","sparklineHover","closestIndex","sparklineWrap","showLastValue","valueWrap","rightAlignValue","alignValue","dataRaw","aseries","dataFiltered","order","out","zeroArea","areaMouseover","pageX","pageY","areaMouseout","areaClick","d3_stackedOffset_stackPercent","stackData","o","stackedAreaChart","currentFormat","oldYTickFormat","percentFormatter","xAxisHeight","legendTop","metaKey","stream","stack_percent","controlOptions","requiredTop","stackedWrap","valueSum","allNullValues","tooltipValue","showTotalInTooltip","stackedY0","stackedY","totalLabel","oldValueFormatter","stackedAreaWithFocusChart","sunburst","rotationToAvoidUpsideDown","computeCenterAngle","computeNodePercentage","labelThresholdMatched","arcTweenZoom","xd","yd","yr","arcTweenUpdate","ipo","dx0","dy0","updatePrevPosition","prevPositions","pP","storeRetrievePrevPositions","zoomClick","depth","getBBox","centerAngle","rotation","partition","modes","mode","count","cG","groupColorByParent","children","parent","d1","d2","sunburstChart","version","693","r","loaded","c","u","h","O","S","P","F","renderChart","isCallable","ready","resizeHandler","rendering","renderStart","parsedProps","bindFunctions","context","getValueFunction","pick","propsByPrefix","configureComponents","without","configure","refs","isPlainObject","containerStyle","G","B","W","__g","__e","Symbol","getKeys","getSymbols","isEnum","getProto","propertyIsEnumerable","getDesc","getOwnPropertyDescriptor","setDesc","setDescs","getNames","getOwnPropertySymbols","E","M","C","D","N","T","q","_k","A","V","H","I","J","K","R","U","for","keyFor","useSetter","useSimple","check","substr","includes","negate","filterObject","694","locals"],"mappings":"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","file":"0.1fa17be.chunk.js","sourcesContent":["simplechartJsonp([0],{\n\n/***/ 278:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldSetupYDomain = shouldSetupYDomain;\nexports.default = applyYDomain;\n\nvar _immutabilityHelper = __webpack_require__(9);\n\nvar _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);\n\nvar _getRangeDomain = __webpack_require__(279);\n\nvar _getRangeDomain2 = _interopRequireDefault(_getRangeDomain);\n\nvar _misc = __webpack_require__(16);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Need to setup yDomain for NVD3 chart that requires YAXis\n * @param {Object} typeConfig Chart type config\n * @return {Boolean}\n */\nfunction shouldSetupYDomain(typeConfig) {\n  return 0 === typeConfig.dataFormat.indexOf('nvd3') && -1 !== typeConfig.modules.settings.indexOf('YAxis');\n}\n\n/**\n * add nicely rounded yDomain to chart options, if chart has a yAxis\n * @param {Object} chartOptions\n * @param {Object} typeConfig\n * @param {Object[]}  chartData\n * @return {Object} Cloned chart options object with new yDomain\n */\nfunction applyYDomain(chartOptions, typeConfig, chartData) {\n  if (!shouldSetupYDomain(typeConfig)) {\n    return chartOptions;\n  }\n\n  var yDomain = void 0;\n  if (chartOptions.yDomain) {\n    yDomain = chartOptions.yDomain;\n  } else if ((0, _misc.ownsProperties)(typeConfig, ['getNiceDomain'])) {\n    yDomain = typeConfig.getNiceDomain(typeConfig.dataFormat, chartData);\n  } else {\n    yDomain = (0, _getRangeDomain2.default)(typeConfig.dataFormat, chartData);\n  }\n\n  /**\n   * @todo Recalculate yDomain when series visibility is toggled by clicking on dots in the legend\n   */\n  return (0, _immutabilityHelper2.default)(chartOptions, { yDomain: { $set: yDomain } });\n}\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(shouldSetupYDomain, 'shouldSetupYDomain', '/Users/joshkadis/Repos/_tmp_simplechart/_app/app/reducers/utils/applyYDomain.js');\n\n  __REACT_HOT_LOADER__.register(applyYDomain, 'applyYDomain', '/Users/joshkadis/Repos/_tmp_simplechart/_app/app/reducers/utils/applyYDomain.js');\n}();\n\n;\n\n/***/ }),\n\n/***/ 279:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getRangeDomain;\n\nvar _d = __webpack_require__(97);\n\n/**\n * Get [min, max] array for data series in nvd3SingleSeries or nvd3MultiSeries format\n *\n * @param {Array} series Data series\n * @param {String} format Data format\n * @return {Array} Range of [min, max] for series\n */\nfunction getSeriesDomain(series, format) {\n  var key = 'nvd3SingleSeries' === format ? 'value' : 'y';\n  var values = series.map(function (point) {\n    return point[key];\n  });\n  return [(0, _d.min)(values), (0, _d.max)(values)];\n}\n\nfunction getMultiSeriesDomain(series, format) {\n  var mins = [];\n  var maxs = [];\n  series.forEach(function (singleSeries) {\n    var domain = getSeriesDomain(singleSeries.values, format);\n    mins.push(domain[0]);\n    maxs.push(domain[1]);\n  });\n  return [(0, _d.min)(mins), (0, _d.max)(maxs)];\n}\n\nfunction makeNice(range) {\n  return _d.scale.linear().domain(range).nice().domain();\n}\n\n/**\n * Get \"nice\" rounded domain from dataset\n *\n * @param {String} format Data format from chart config object\n * @param {Object[]} data Chart data transformed for data format\n * @return {Array} Domain array of [min, max] values\n */\nfunction getRangeDomain(format, data) {\n  var domain = 'nvd3SingleSeries' === format ? getSeriesDomain(data, format) : getMultiSeriesDomain(data, format);\n  return makeNice(domain);\n}\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(getSeriesDomain, 'getSeriesDomain', '/Users/joshkadis/Repos/_tmp_simplechart/_app/app/utils/dataFormats/getRangeDomain.js');\n\n  __REACT_HOT_LOADER__.register(getMultiSeriesDomain, 'getMultiSeriesDomain', '/Users/joshkadis/Repos/_tmp_simplechart/_app/app/utils/dataFormats/getRangeDomain.js');\n\n  __REACT_HOT_LOADER__.register(makeNice, 'makeNice', '/Users/joshkadis/Repos/_tmp_simplechart/_app/app/utils/dataFormats/getRangeDomain.js');\n\n  __REACT_HOT_LOADER__.register(getRangeDomain, 'getRangeDomain', '/Users/joshkadis/Repos/_tmp_simplechart/_app/app/utils/dataFormats/getRangeDomain.js');\n}();\n\n;\n\n/***/ }),\n\n/***/ 280:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar map = {\n\t\"./NVD3Adapter/index\": 690\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 280;\n\n/***/ }),\n\n/***/ 690:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(5);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactNvd = __webpack_require__(693);\n\nvar _reactNvd2 = _interopRequireDefault(_reactNvd);\n\nvar _immutabilityHelper = __webpack_require__(9);\n\nvar _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);\n\nvar _cloneDeep = __webpack_require__(166);\n\nvar _cloneDeep2 = _interopRequireDefault(_cloneDeep);\n\nvar _chartTypeUtils = __webpack_require__(31);\n\nvar _applyYDomain = __webpack_require__(278);\n\nvar _applyYDomain2 = _interopRequireDefault(_applyYDomain);\n\nvar _applyTickFormatters = __webpack_require__(67);\n\nvar _applyTickFormatters2 = _interopRequireDefault(_applyTickFormatters);\n\n__webpack_require__(694);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar NVD3Adapter = function (_Component) {\n  _inherits(NVD3Adapter, _Component);\n\n  function NVD3Adapter() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, NVD3Adapter);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = NVD3Adapter.__proto__ || Object.getPrototypeOf(NVD3Adapter)).call.apply(_ref, [this].concat(args))), _this), _this.mapToChartProps = function () {\n      var _this2;\n\n      return (_this2 = _this).__mapToChartProps__REACT_HOT_LOADER__.apply(_this2, arguments);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(NVD3Adapter, [{\n    key: '__mapToChartProps__REACT_HOT_LOADER__',\n    value: function __mapToChartProps__REACT_HOT_LOADER__() {\n      var _props = this.props,\n          options = _props.options,\n          data = _props.data,\n          widget = _props.widget;\n\n      var type = (0, _chartTypeUtils.getNvd3Type)(options.type);\n      var chartProps = (0, _immutabilityHelper2.default)(options, {\n        type: { $set: type },\n        datum: { $set: NVD3Adapter.dataTransform(options.type, data) },\n        ref: { $set: 'chartNode' }\n      });\n\n      if (!widget) {\n        return chartProps;\n      }\n\n      // TODO: This isn't an ideal place for this logic, and it's also duplicated within middleware/reducers.\n      // Widgets need to recreate function-based options\n      var typeConfig = (0, _chartTypeUtils.getChartTypeObject)(options.type).config;\n      var defaultOpts = (0, _chartTypeUtils.getChartTypeDefaultOpts)(options.type);\n      chartProps = Object.assign({}, defaultOpts, chartProps, typeConfig, { type: type });\n      chartProps = (0, _applyYDomain2.default)(chartProps, typeConfig, data);\n\n      return (0, _applyTickFormatters2.default)(chartProps, typeConfig);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // We clone the props, because nvd3 will mutate the datum that you pass to it.\n      var chartProps = (0, _cloneDeep2.default)(this.mapToChartProps());\n\n      // Key prop is for forcing re-render of the chart to avoid chart refresh issue when the chart type changes.\n      // https://github.com/NuCivic/react-nvd3/issues/59\n      return _react2.default.createElement(_reactNvd2.default, _extends({ key: Math.random() }, chartProps));\n    }\n  }], [{\n    key: 'dataTransform',\n\n\n    /**\n     * Apply any special formatting specfic to a chart type\n     */\n    value: function dataTransform(chartType, data) {\n      switch (chartType) {\n        case 'discreteBarChart':\n          return [{\n            key: '',\n            values: data\n          }];\n\n        default:\n          return data;\n      }\n    }\n\n    /**\n     * In editor, merge data into options and add a ref\n     * In widget, also recreate function-based options that can't be sent as JSON\n     */\n\n  }]);\n\n  return NVD3Adapter;\n}(_react.Component);\n\nNVD3Adapter.propTypes = {\n  data: _propTypes2.default.array.isRequired,\n  options: _propTypes2.default.object.isRequired,\n  widget: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool])\n};\nNVD3Adapter.defaultProps = {\n  widget: false\n};\nvar _default = NVD3Adapter;\nexports.default = _default;\n;\n\nvar _temp2 = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(NVD3Adapter, 'NVD3Adapter', '/Users/joshkadis/Repos/_tmp_simplechart/_app/app/components/Chart/ChartTypes/NVD3Adapter/index.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/Users/joshkadis/Repos/_tmp_simplechart/_app/app/components/Chart/ChartTypes/NVD3Adapter/index.js');\n}();\n\n;\n\n/***/ }),\n\n/***/ 691:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(12)();\n// imports\n\n\n// module\nexports.push([module.i, \".nv-stackedAreaChart .nv-legend .nv-series{cursor:default}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 692:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* nvd3 version 1.8.5 (https://github.com/novus/nvd3) 2016-12-01 */\n(function(){\n\n// set up main nv object\nvar nv = {};\n\n// the major global objects under the nv namespace\nnv.dev = false; //set false when in production\nnv.tooltip = nv.tooltip || {}; // For the tooltip system\nnv.utils = nv.utils || {}; // Utility subsystem\nnv.models = nv.models || {}; //stores all the possible models/components\nnv.charts = {}; //stores all the ready to use charts\nnv.logs = {}; //stores some statistics and potential error messages\nnv.dom = {}; //DOM manipulation functions\n\n// Node/CommonJS - require D3\nif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined' && typeof(d3) == 'undefined') {\n    d3 = __webpack_require__(97);\n}\n\nnv.dispatch = d3.dispatch('render_start', 'render_end');\n\n// Function bind polyfill\n// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment\n// https://github.com/ariya/phantomjs/issues/10522\n// http://kangax.github.io/compat-table/es5/#Function.prototype.bind\n// phantomJS is used for running the test suite\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== \"function\") {\n            // closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP = function () {},\n            fBound = function () {\n                return fToBind.apply(this instanceof fNOP && oThis\n                        ? this\n                        : oThis,\n                    aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n        return fBound;\n    };\n}\n\n//  Development render timers - disabled if dev = false\nif (nv.dev) {\n    nv.dispatch.on('render_start', function(e) {\n        nv.logs.startTime = +new Date();\n    });\n\n    nv.dispatch.on('render_end', function(e) {\n        nv.logs.endTime = +new Date();\n        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n    });\n}\n\n// Logs all arguments, and returns the last so you can test things in place\n// Note: in IE8 console.log is an object not a function, and if modernizr is used\n// then calling Function.prototype.bind with with anything other than a function\n// causes a TypeError to be thrown.\nnv.log = function() {\n    if (nv.dev && window.console && console.log && console.log.apply)\n        console.log.apply(console, arguments);\n    else if (nv.dev && window.console && typeof console.log == \"function\" && Function.prototype.bind) {\n        var log = Function.prototype.bind.call(console.log, console);\n        log.apply(console, arguments);\n    }\n    return arguments[arguments.length - 1];\n};\n\n// print console warning, should be used by deprecated functions\nnv.deprecated = function(name, info) {\n    if (console && console.warn) {\n        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');\n    }\n};\n\n// The nv.render function is used to queue up chart rendering\n// in non-blocking async functions.\n// When all queued charts are done rendering, nv.dispatch.render_end is invoked.\nnv.render = function render(step) {\n    // number of graphs to generate in each timeout loop\n    step = step || 1;\n\n    nv.render.active = true;\n    nv.dispatch.render_start();\n\n    var renderLoop = function() {\n        var chart, graph;\n\n        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n            chart = graph.generate();\n            if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n        }\n\n        nv.render.queue.splice(0, i);\n\n        if (nv.render.queue.length) {\n            setTimeout(renderLoop);\n        }\n        else {\n            nv.dispatch.render_end();\n            nv.render.active = false;\n        }\n    };\n\n    setTimeout(renderLoop);\n};\n\nnv.render.active = false;\nnv.render.queue = [];\n\n/*\nAdds a chart to the async rendering queue. This method can take arguments in two forms:\nnv.addGraph({\n    generate: <Function>\n    callback: <Function>\n})\n\nor\n\nnv.addGraph(<generate Function>, <callback Function>)\n\nThe generate function should contain code that creates the NVD3 model, sets options\non it, adds data to an SVG element, and invokes the chart model. The generate function\nshould return the chart model.  See examples/lineChart.html for a usage example.\n\nThe callback function is optional, and it is called when the generate function completes.\n*/\nnv.addGraph = function(obj) {\n    if (typeof arguments[0] === typeof(Function)) {\n        obj = {generate: arguments[0], callback: arguments[1]};\n    }\n\n    nv.render.queue.push(obj);\n\n    if (!nv.render.active) {\n        nv.render();\n    }\n};\n\n// Node/CommonJS exports\nif (true) {\n  module.exports = nv;\n}\n\nif (typeof(window) !== 'undefined') {\n  window.nv = nv;\n}\n/* Facade for queueing DOM write operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.write = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.mutate(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n\r\n/* Facade for queueing DOM read operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.read = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.measure(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n/* Utility class to handle creation of an interactive layer.\n This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\n containing the X-coordinate. It can also render a vertical line where the mouse is located.\n\n dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\n the rectangle. The dispatch is given one object which contains the mouseX/Y location.\n It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n */\nnv.interactiveGuideline = function() {\n    \"use strict\";\n\n    var margin = { left: 0, top: 0 } //Pass the chart's top and left magins. Used to calculate the mouseX/Y.\n        ,   width = null\n        ,   height = null\n        ,   xScale = d3.scale.linear()\n        ,   dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp')\n        ,   showGuideLine = true\n        ,   svgContainer = null // Must pass the chart's svg, we'll use its mousemove event.\n        ,   tooltip = nv.models.tooltip()\n        ,   isMSIE =  window.ActiveXObject// Checkt if IE by looking for activeX. (excludes IE11)\n    ;\n\n    tooltip\n        .duration(0)\n        .hideDelay(0)\n        .hidden(false);\n\n    function layer(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this);\n            var availableWidth = (width || 960), availableHeight = (height || 400);\n            var wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\")\n                .data([data]);\n            var wrapEnter = wrap.enter()\n                .append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n            wrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\n            if (!svgContainer) {\n                return;\n            }\n\n            function mouseHandler() {\n                var d3mouse = d3.mouse(this);\n                var mouseX = d3mouse[0];\n                var mouseY = d3mouse[1];\n                var subtractMargin = true;\n                var mouseOutAnyReason = false;\n                if (isMSIE) {\n                    /*\n                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n                     over a rect in IE 10.\n                     However, d3.event.offsetX/Y also returns the mouse coordinates\n                     relative to the triggering <rect>. So we use offsetX/Y on IE.\n                     */\n                    mouseX = d3.event.offsetX;\n                    mouseY = d3.event.offsetY;\n\n                    /*\n                     On IE, if you attach a mouse event listener to the <svg> container,\n                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n                     When this happens on IE, the offsetX/Y is set to where ever the child element\n                     is located.\n                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n                     position under this scenario. Removing the line below *will* cause\n                     the interactive layer to not work right on IE.\n                     */\n                    if(d3.event.target.tagName !== \"svg\") {\n                        subtractMargin = false;\n                    }\n\n                    if (d3.event.target.className.baseVal.match(\"nv-legend\")) {\n                        mouseOutAnyReason = true;\n                    }\n\n                }\n\n                if(subtractMargin) {\n                    mouseX -= margin.left;\n                    mouseY -= margin.top;\n                }\n\n                /* If mouseX/Y is outside of the chart's bounds,\n                 trigger a mouseOut event.\n                 */\n                if (d3.event.type === 'mouseout'\n                    || mouseX < 0 || mouseY < 0\n                    || mouseX > availableWidth || mouseY > availableHeight\n                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n                    || mouseOutAnyReason\n                    ) {\n\n                    if (isMSIE) {\n                        if (d3.event.relatedTarget\n                            && d3.event.relatedTarget.ownerSVGElement === undefined\n                            && (d3.event.relatedTarget.className === undefined\n                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {\n\n                            return;\n                        }\n                    }\n                    dispatch.elementMouseout({\n                        mouseX: mouseX,\n                        mouseY: mouseY\n                    });\n                    layer.renderGuideLine(null); //hide the guideline\n                    tooltip.hidden(true);\n                    return;\n                } else {\n                    tooltip.hidden(false);\n                }\n\n\n                var scaleIsOrdinal = typeof xScale.rangeBands === 'function';\n                var pointXValue = undefined;\n\n                // Ordinal scale has no invert method\n                if (scaleIsOrdinal) {\n                    var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;\n                    // Check if mouseX is in the range band\n                    if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {\n                        pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];\n                    }\n                    else {\n                        dispatch.elementMouseout({\n                            mouseX: mouseX,\n                            mouseY: mouseY\n                        });\n                        layer.renderGuideLine(null); //hide the guideline\n                        tooltip.hidden(true);\n                        return;\n                    }\n                }\n                else {\n                    pointXValue = xScale.invert(mouseX);\n                }\n\n                dispatch.elementMousemove({\n                    mouseX: mouseX,\n                    mouseY: mouseY,\n                    pointXValue: pointXValue\n                });\n\n                //If user double clicks the layer, fire a elementDblclick\n                if (d3.event.type === \"dblclick\") {\n                    dispatch.elementDblclick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user single clicks the layer, fire elementClick\n                if (d3.event.type === 'click') {\n                    dispatch.elementClick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user presses mouse down the layer, fire elementMouseDown\n                if (d3.event.type === 'mousedown') {\n                \tdispatch.elementMouseDown({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n\n                // if user presses mouse down the layer, fire elementMouseUp\n                if (d3.event.type === 'mouseup') {\n                \tdispatch.elementMouseUp({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n            }\n\n            svgContainer\n                .on(\"touchmove\",mouseHandler)\n                .on(\"mousemove\",mouseHandler, true)\n                .on(\"mouseout\" ,mouseHandler,true)\n                .on(\"mousedown\" ,mouseHandler,true)\n                .on(\"mouseup\" ,mouseHandler,true)\n                .on(\"dblclick\" ,mouseHandler)\n                .on(\"click\", mouseHandler)\n            ;\n\n            layer.guideLine = null;\n            //Draws a vertical guideline at the given X postion.\n            layer.renderGuideLine = function(x) {\n                if (!showGuideLine) return;\n                if (layer.guideLine && layer.guideLine.attr(\"x1\") === x) return;\n                nv.dom.write(function() {\n                    var line = wrap.select(\".nv-interactiveGuideLine\")\n                        .selectAll(\"line\")\n                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n                    line.enter()\n                        .append(\"line\")\n                        .attr(\"class\", \"nv-guideline\")\n                        .attr(\"x1\", function(d) { return d;})\n                        .attr(\"x2\", function(d) { return d;})\n                        .attr(\"y1\", availableHeight)\n                        .attr(\"y2\",0);\n                    line.exit().remove();\n                });\n            }\n        });\n    }\n\n    layer.dispatch = dispatch;\n    layer.tooltip = tooltip;\n\n    layer.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return layer;\n    };\n\n    layer.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return layer;\n    };\n\n    layer.height = function(_) {\n        if (!arguments.length) return height;\n        height = _;\n        return layer;\n    };\n\n    layer.xScale = function(_) {\n        if (!arguments.length) return xScale;\n        xScale = _;\n        return layer;\n    };\n\n    layer.showGuideLine = function(_) {\n        if (!arguments.length) return showGuideLine;\n        showGuideLine = _;\n        return layer;\n    };\n\n    layer.svgContainer = function(_) {\n        if (!arguments.length) return svgContainer;\n        svgContainer = _;\n        return layer;\n    };\n\n    return layer;\n};\n\n/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\n This is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\n For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.\n Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\n because 28 is closer to 30 than 10.\n\n Unit tests can be found in: interactiveBisectTest.html\n\n Has the following known issues:\n * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n * Won't work if there are duplicate x coordinate values.\n */\nnv.interactiveBisect = function (values, searchVal, xAccessor) {\n    \"use strict\";\n    if (! (values instanceof Array)) {\n        return null;\n    }\n    var _xAccessor;\n    if (typeof xAccessor !== 'function') {\n        _xAccessor = function(d) {\n            return d.x;\n        }\n    } else {\n        _xAccessor = xAccessor;\n    }\n    var _cmp = function(d, v) {\n        // Accessors are no longer passed the index of the element along with\n        // the element itself when invoked by d3.bisector.\n        //\n        // Starting at D3 v3.4.4, d3.bisector() started inspecting the\n        // function passed to determine if it should consider it an accessor\n        // or a comparator. This meant that accessors that take two arguments\n        // (expecting an index as the second parameter) are treated as\n        // comparators where the second argument is the search value against\n        // which the first argument is compared.\n        return _xAccessor(d) - v;\n    };\n\n    var bisect = d3.bisector(_cmp).left;\n    var index = d3.max([0, bisect(values,searchVal) - 1]);\n    var currentValue = _xAccessor(values[index]);\n\n    if (typeof currentValue === 'undefined') {\n        currentValue = index;\n    }\n\n    if (currentValue === searchVal) {\n        return index; //found exact match\n    }\n\n    var nextIndex = d3.min([index+1, values.length - 1]);\n    var nextValue = _xAccessor(values[nextIndex]);\n\n    if (typeof nextValue === 'undefined') {\n        nextValue = nextIndex;\n    }\n\n    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {\n        return index;\n    } else {\n        return nextIndex\n    }\n};\n\n/*\n Returns the index in the array \"values\" that is closest to searchVal.\n Only returns an index if searchVal is within some \"threshold\".\n Otherwise, returns null.\n */\nnv.nearestValueIndex = function (values, searchVal, threshold) {\n    \"use strict\";\n    var yDistMax = Infinity, indexToHighlight = null;\n    values.forEach(function(d,i) {\n        var delta = Math.abs(searchVal - d);\n        if ( d != null && delta <= yDistMax && delta < threshold) {\n            yDistMax = delta;\n            indexToHighlight = i;\n        }\n    });\n    return indexToHighlight;\n};\n\n/* Model which can be instantiated to handle tooltip rendering.\n Example usage:\n var tip = nv.models.tooltip().gravity('w').distance(23)\n .data(myDataObject);\n\n tip();    //just invoke the returned function to render tooltip.\n */\nnv.models.tooltip = function() {\n    \"use strict\";\n\n    /*\n    Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n    Example Format of data:\n    {\n        key: \"Date\",\n        value: \"August 2009\",\n        series: [\n            {key: \"Series 1\", value: \"Value 1\", color: \"#000\"},\n            {key: \"Series 2\", value: \"Value 2\", color: \"#00f\"}\n        ]\n    }\n    */\n    var id = \"nvtooltip-\" + Math.floor(Math.random() * 100000) // Generates a unique id when you create a new tooltip() object.\n        ,   data = null\n        ,   gravity = 'w'   // Can be 'n','s','e','w'. Determines how tooltip is positioned.\n        ,   distance = 25 // Distance to offset tooltip from the mouse location.\n        ,   snapDistance = 0   // Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n        ,   classes = null  // Attaches additional CSS classes to the tooltip DIV that is created.\n        ,   hidden = true  // Start off hidden, toggle with hide/show functions below.\n        ,   hideDelay = 200  // Delay (in ms) before the tooltip hides after calling hide().\n        ,   tooltip = null // d3 select of the tooltip div.\n        ,   lastPosition = { left: null, top: null } // Last position the tooltip was in.\n        ,   enabled = true  // True -> tooltips are rendered. False -> don't render tooltips.\n        ,   duration = 100 // Tooltip movement duration, in ms.\n        ,   headerEnabled = true // If is to show the tooltip header.\n        ,   nvPointerEventsClass = \"nv-pointer-events-none\" // CSS class to specify whether element should not have mouse events.\n    ;\n\n    // Format function for the tooltip values column.\n    var valueFormatter = function(d, i) {\n        return d;\n    };\n\n    // Format function for the tooltip header value.\n    var headerFormatter = function(d) {\n        return d;\n    };\n\n    var keyFormatter = function(d, i) {\n        return d;\n    };\n\n    // By default, the tooltip model renders a beautiful table inside a DIV.\n    // You can override this function if a custom tooltip is desired.\n    var contentGenerator = function(d) {\n        if (d === null) {\n            return '';\n        }\n\n        var table = d3.select(document.createElement(\"table\"));\n        if (headerEnabled) {\n            var theadEnter = table.selectAll(\"thead\")\n                .data([d])\n                .enter().append(\"thead\");\n\n            theadEnter.append(\"tr\")\n                .append(\"td\")\n                .attr(\"colspan\", 3)\n                .append(\"strong\")\n                .classed(\"x-value\", true)\n                .html(headerFormatter(d.value));\n        }\n\n        var tbodyEnter = table.selectAll(\"tbody\")\n            .data([d])\n            .enter().append(\"tbody\");\n\n        var trowEnter = tbodyEnter.selectAll(\"tr\")\n                .data(function(p) { return p.series})\n                .enter()\n                .append(\"tr\")\n                .classed(\"highlight\", function(p) { return p.highlight});\n\n        trowEnter.append(\"td\")\n            .classed(\"legend-color-guide\",true)\n            .append(\"div\")\n            .style(\"background-color\", function(p) { return p.color});\n\n        trowEnter.append(\"td\")\n            .classed(\"key\",true)\n            .classed(\"total\",function(p) { return !!p.total})\n            .html(function(p, i) { return keyFormatter(p.key, i)});\n\n        trowEnter.append(\"td\")\n            .classed(\"value\",true)\n            .html(function(p, i) { return valueFormatter(p.value, i) });\n\n        trowEnter.filter(function (p,i) { return p.percent !== undefined }).append(\"td\")\n            .classed(\"percent\", true)\n            .html(function(p, i) { return \"(\" + d3.format('%')(p.percent) + \")\" });\n\n        trowEnter.selectAll(\"td\").each(function(p) {\n            if (p.highlight) {\n                var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n                var opacity = 0.6;\n                d3.select(this)\n                    .style(\"border-bottom-color\", opacityScale(opacity))\n                    .style(\"border-top-color\", opacityScale(opacity))\n                ;\n            }\n        });\n\n        var html = table.node().outerHTML;\n        if (d.footer !== undefined)\n            html += \"<div class='footer'>\" + d.footer + \"</div>\";\n        return html;\n\n    };\n\n    /*\n     Function that returns the position (relative to the viewport/document.body)\n     the tooltip should be placed in.\n     Should return: {\n        left: <leftPos>,\n        top: <topPos>\n     }\n     */\n    var position = function() {\n        var pos = {\n            left: d3.event !== null ? d3.event.clientX : 0,\n            top: d3.event !== null ? d3.event.clientY : 0\n        };\n\n        if(getComputedStyle(document.body).transform != 'none') {\n            // Take the offset into account, as now the tooltip is relative\n            // to document.body.\n            var client = document.body.getBoundingClientRect();\n            pos.left -= client.left;\n            pos.top -= client.top;\n        }\n\n        return pos;\n    };\n\n    var dataSeriesExists = function(d) {\n        if (d && d.series) {\n            if (nv.utils.isArray(d.series)) {\n                return true;\n            }\n            // if object, it's okay just convert to array of the object\n            if (nv.utils.isObject(d.series)) {\n                d.series = [d.series];\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Calculates the gravity offset of the tooltip. Parameter is position of tooltip\n    // relative to the viewport.\n    var calcGravityOffset = function(pos) {\n        var height = tooltip.node().offsetHeight,\n            width = tooltip.node().offsetWidth,\n            clientWidth = document.documentElement.clientWidth, // Don't want scrollbars.\n            clientHeight = document.documentElement.clientHeight, // Don't want scrollbars.\n            left, top, tmp;\n\n        // calculate position based on gravity\n        switch (gravity) {\n            case 'e':\n                left = - width - distance;\n                top = - (height / 2);\n                if(pos.left + left < 0) left = distance;\n                if((tmp = pos.top + top) < 0) top -= tmp;\n                if((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'w':\n                left = distance;\n                top = - (height / 2);\n                if (pos.left + left + width > clientWidth) left = - width - distance;\n                if ((tmp = pos.top + top) < 0) top -= tmp;\n                if ((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'n':\n                left = - (width / 2) - 5; // - 5 is an approximation of the mouse's height.\n                top = distance;\n                if (pos.top + top + height > clientHeight) top = - height - distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 's':\n                left = - (width / 2);\n                top = - height - distance;\n                if (pos.top + top < 0) top = distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 'center':\n                left = - (width / 2);\n                top = - (height / 2);\n                break;\n            default:\n                left = 0;\n                top = 0;\n                break;\n        }\n\n        return { 'left': left, 'top': top };\n    };\n\n    /*\n     Positions the tooltip in the correct place, as given by the position() function.\n     */\n    var positionTooltip = function() {\n        nv.dom.read(function() {\n            var pos = position(),\n                gravityOffset = calcGravityOffset(pos),\n                left = pos.left + gravityOffset.left,\n                top = pos.top + gravityOffset.top;\n\n            // delay hiding a bit to avoid flickering\n            if (hidden) {\n                tooltip\n                    .interrupt()\n                    .transition()\n                    .delay(hideDelay)\n                    .duration(0)\n                    .style('opacity', 0);\n            } else {\n                // using tooltip.style('transform') returns values un-usable for tween\n                var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';\n                var new_translate = 'translate(' + Math.round(left) + 'px, ' + Math.round(top) + 'px)';\n                var translateInterpolator = d3.interpolateString(old_translate, new_translate);\n                var is_hidden = tooltip.style('opacity') < 0.1;\n\n                tooltip\n                    .interrupt() // cancel running transitions\n                    .transition()\n                    .duration(is_hidden ? 0 : duration)\n                    // using tween since some versions of d3 can't auto-tween a translate on a div\n                    .styleTween('transform', function (d) {\n                        return translateInterpolator;\n                    }, 'important')\n                    // Safari has its own `-webkit-transform` and does not support `transform`\n                    .styleTween('-webkit-transform', function (d) {\n                        return translateInterpolator;\n                    })\n                    .style('-ms-transform', new_translate)\n                    .style('opacity', 1);\n            }\n\n            lastPosition.left = left;\n            lastPosition.top = top;\n        });\n    };\n\n    // Creates new tooltip container, or uses existing one on DOM.\n    function initTooltip() {\n        if (!tooltip || !tooltip.node()) {\n            // Create new tooltip div if it doesn't exist on DOM.\n\n            var data = [1];\n            tooltip = d3.select(document.body).select('#'+id).data(data);\n\n            tooltip.enter().append('div')\n                   .attr(\"class\", \"nvtooltip \" + (classes ? classes : \"xy-tooltip\"))\n                   .attr(\"id\", id)\n                   .style(\"top\", 0).style(\"left\", 0)\n                   .style('opacity', 0)\n                   .style('position', 'fixed')\n                   .selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass, true)\n                   .classed(nvPointerEventsClass, true);\n\n            tooltip.exit().remove()\n        }\n    }\n\n    // Draw the tooltip onto the DOM.\n    function nvtooltip() {\n        if (!enabled) return;\n        if (!dataSeriesExists(data)) return;\n\n        nv.dom.write(function () {\n            initTooltip();\n            // Generate data and set it into tooltip.\n            // Bonus - If you override contentGenerator and return falsey you can use something like\n            //         React or Knockout to bind the data for your tooltip.\n            var newContent = contentGenerator(data);\n            if (newContent) {\n                tooltip.node().innerHTML = newContent;\n            }\n\n            positionTooltip();\n        });\n\n        return nvtooltip;\n    }\n\n    nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n    nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);\n\n    nvtooltip._options = Object.create({}, {\n        // simple read/write options\n        duration: {get: function(){return duration;}, set: function(_){duration=_;}},\n        gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        distance: {get: function(){return distance;}, set: function(_){distance=_;}},\n        snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},\n        classes: {get: function(){return classes;}, set: function(_){classes=_;}},\n        enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},\n        hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},\n        contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},\n        valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},\n        headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},\n        keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        headerEnabled: {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},\n        position: {get: function(){return position;}, set: function(_){position=_;}},\n\n        // Deprecated options\n        chartContainer: {get: function(){return document.body;}, set: function(_){\n            // deprecated after 1.8.3\n            nv.deprecated('chartContainer', 'feature removed after 1.8.3');\n        }},\n        fixedTop: {get: function(){return null;}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('fixedTop', 'feature removed after 1.8.1');\n        }},\n        offset: {get: function(){return {left: 0, top: 0};}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('offset', 'use chart.tooltip.distance() instead');\n        }},\n\n        // options with extra logic\n        hidden: {get: function(){return hidden;}, set: function(_){\n            if (hidden != _) {\n                hidden = !!_;\n                nvtooltip();\n            }\n        }},\n        data: {get: function(){return data;}, set: function(_){\n            // if showing a single data point, adjust data format with that\n            if (_.point) {\n                _.value = _.point.x;\n                _.series = _.series || {};\n                _.series.value = _.point.y;\n                _.series.color = _.point.color || _.series.color;\n            }\n            data = _;\n        }},\n\n        // read only properties\n        node: {get: function(){return tooltip.node();}, set: function(_){}},\n        id: {get: function(){return id;}, set: function(_){}}\n    });\n\n    nv.utils.initOptions(nvtooltip);\n    return nvtooltip;\n};\n\n\n/*\nGets the browser window size\n\nReturns object with height and width properties\n */\nnv.utils.windowSize = function() {\n    // Sane defaults\n    var size = {width: 640, height: 480};\n\n    // Most recent browsers use\n    if (window.innerWidth && window.innerHeight) {\n        size.width = window.innerWidth;\n        size.height = window.innerHeight;\n        return (size);\n    }\n\n    // IE can use depending on mode it is in\n    if (document.compatMode=='CSS1Compat' &&\n        document.documentElement &&\n        document.documentElement.offsetWidth ) {\n\n        size.width = document.documentElement.offsetWidth;\n        size.height = document.documentElement.offsetHeight;\n        return (size);\n    }\n\n    // Earlier IE uses Doc.body\n    if (document.body && document.body.offsetWidth) {\n        size.width = document.body.offsetWidth;\n        size.height = document.body.offsetHeight;\n        return (size);\n    }\n\n    return (size);\n};\n\n\n/* handle dumb browser quirks...  isinstance breaks if you use frames\ntypeof returns 'object' for null, NaN is a number, etc.\n */\nnv.utils.isArray = Array.isArray;\nnv.utils.isObject = function(a) {\n    return a !== null && typeof a === 'object';\n};\nnv.utils.isFunction = function(a) {\n    return typeof a === 'function';\n};\nnv.utils.isDate = function(a) {\n    return toString.call(a) === '[object Date]';\n};\nnv.utils.isNumber = function(a) {\n    return !isNaN(a) && typeof a === 'number';\n};\n\n\n/*\nBinds callback function to run when window is resized\n */\nnv.utils.windowResize = function(handler) {\n    if (window.addEventListener) {\n        window.addEventListener('resize', handler);\n    } else {\n        nv.log(\"ERROR: Failed to bind to window.resize with: \", handler);\n    }\n    // return object with clear function to remove the single added callback.\n    return {\n        callback: handler,\n        clear: function() {\n            window.removeEventListener('resize', handler);\n        }\n    }\n};\n\n\n/*\nBackwards compatible way to implement more d3-like coloring of graphs.\nCan take in nothing, an array, or a function/scale\nTo use a normal scale, get the range and pass that because we must be able\nto take two arguments and use the index to keep backward compatibility\n*/\nnv.utils.getColor = function(color) {\n    //if you pass in nothing, get default colors back\n    if (color === undefined) {\n        return nv.utils.defaultColor();\n\n    //if passed an array, turn it into a color scale\n    } else if(nv.utils.isArray(color)) {\n        var color_scale = d3.scale.ordinal().range(color);\n        return function(d, i) {\n            var key = i === undefined ? d : i;\n            return d.color || color_scale(key);\n        };\n\n    //if passed a function or scale, return it, or whatever it may be\n    //external libs, such as angularjs-nvd3-directives use this\n    } else {\n        //can't really help it if someone passes rubbish as color\n        return color;\n    }\n};\n\n\n/*\nDefault color chooser uses a color scale of 20 colors from D3\n https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors\n */\nnv.utils.defaultColor = function() {\n    // get range of the scale so we'll turn it into our own function.\n    return nv.utils.getColor(d3.scale.category20().range());\n};\n\n\n/*\nReturns a color function that takes the result of 'getKey' for each series and\nlooks for a corresponding color from the dictionary\n*/\nnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n    // use default series.key if getKey is undefined\n    getKey = getKey || function(series) { return series.key };\n    defaultColors = defaultColors || d3.scale.category20().range();\n\n    // start at end of default color list and walk back to index 0\n    var defIndex = defaultColors.length;\n\n    return function(series, index) {\n        var key = getKey(series);\n        if (nv.utils.isFunction(dictionary[key])) {\n            return dictionary[key]();\n        } else if (dictionary[key] !== undefined) {\n            return dictionary[key];\n        } else {\n            // no match in dictionary, use a default color\n            if (!defIndex) {\n                // used all the default colors, start over\n                defIndex = defaultColors.length;\n            }\n            defIndex = defIndex - 1;\n            return defaultColors[defIndex];\n        }\n    };\n};\n\n\n/*\nFrom the PJAX example on d3js.org, while this is not really directly needed\nit's a very cool method for doing pjax, I may expand upon it a little bit,\nopen to suggestions on anything that may be useful\n*/\nnv.utils.pjax = function(links, content) {\n\n    var load = function(href) {\n        d3.html(href, function(fragment) {\n            var target = d3.select(content).node();\n            target.parentNode.replaceChild(\n                d3.select(fragment).select(content).node(),\n                target);\n            nv.utils.pjax(links, content);\n        });\n    };\n\n    d3.selectAll(links).on(\"click\", function() {\n        history.pushState(this.href, this.textContent, this.href);\n        load(this.href);\n        d3.event.preventDefault();\n    });\n\n    d3.select(window).on(\"popstate\", function() {\n        if (d3.event.state) {\n            load(d3.event.state);\n        }\n    });\n};\n\n\n/*\nFor when we want to approximate the width in pixels for an SVG:text element.\nMost common instance is when the element is in a display:none; container.\nForumla is : text.length * font-size * constant_factor\n*/\nnv.utils.calcApproxTextWidth = function (svgTextElem) {\n    if (nv.utils.isFunction(svgTextElem.style) && nv.utils.isFunction(svgTextElem.text)) {\n        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"), 10);\n        var textLength = svgTextElem.text().length;\n        return nv.utils.NaNtoZero(textLength * fontSize * 0.5);\n    }\n    return 0;\n};\n\n\n/*\nNumbers that are undefined, null or NaN, convert them to zeros.\n*/\nnv.utils.NaNtoZero = function(n) {\n    if (!nv.utils.isNumber(n)\n        || isNaN(n)\n        || n === null\n        || n === Infinity\n        || n === -Infinity) {\n\n        return 0;\n    }\n    return n;\n};\n\n/*\nAdd a way to watch for d3 transition ends to d3\n*/\nd3.selection.prototype.watchTransition = function(renderWatch){\n    var args = [this].concat([].slice.call(arguments, 1));\n    return renderWatch.transition.apply(renderWatch, args);\n};\n\n\n/*\nHelper object to watch when d3 has rendered something\n*/\nnv.utils.renderWatch = function(dispatch, duration) {\n    if (!(this instanceof nv.utils.renderWatch)) {\n        return new nv.utils.renderWatch(dispatch, duration);\n    }\n\n    var _duration = duration !== undefined ? duration : 250;\n    var renderStack = [];\n    var self = this;\n\n    this.models = function(models) {\n        models = [].slice.call(arguments, 0);\n        models.forEach(function(model){\n            model.__rendered = false;\n            (function(m){\n                m.dispatch.on('renderEnd', function(arg){\n                    m.__rendered = true;\n                    self.renderEnd('model');\n                });\n            })(model);\n\n            if (renderStack.indexOf(model) < 0) {\n                renderStack.push(model);\n            }\n        });\n    return this;\n    };\n\n    this.reset = function(duration) {\n        if (duration !== undefined) {\n            _duration = duration;\n        }\n        renderStack = [];\n    };\n\n    this.transition = function(selection, args, duration) {\n        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n\n        if (args.length > 1) {\n            duration = args.pop();\n        } else {\n            duration = _duration !== undefined ? _duration : 250;\n        }\n        selection.__rendered = false;\n\n        if (renderStack.indexOf(selection) < 0) {\n            renderStack.push(selection);\n        }\n\n        if (duration === 0) {\n            selection.__rendered = true;\n            selection.delay = function() { return this; };\n            selection.duration = function() { return this; };\n            return selection;\n        } else {\n            if (selection.length === 0) {\n                selection.__rendered = true;\n            } else if (selection.every( function(d){ return !d.length; } )) {\n                selection.__rendered = true;\n            } else {\n                selection.__rendered = false;\n            }\n\n            var n = 0;\n            return selection\n                .transition()\n                .duration(duration)\n                .each(function(){ ++n; })\n                .each('end', function(d, i) {\n                    if (--n === 0) {\n                        selection.__rendered = true;\n                        self.renderEnd.apply(this, args);\n                    }\n                });\n        }\n    };\n\n    this.renderEnd = function() {\n        if (renderStack.every( function(d){ return d.__rendered; } )) {\n            renderStack.forEach( function(d){ d.__rendered = false; });\n            dispatch.renderEnd.apply(this, arguments);\n        }\n    }\n\n};\n\n\n/*\nTakes multiple objects and combines them into the first one (dst)\nexample:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});\ngives:  {a: 2, b: 3, c: 4}\n*/\nnv.utils.deepExtend = function(dst){\n    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n    sources.forEach(function(source) {\n        for (var key in source) {\n            var isArray = nv.utils.isArray(dst[key]);\n            var isObject = nv.utils.isObject(dst[key]);\n            var srcObj = nv.utils.isObject(source[key]);\n\n            if (isObject && !isArray && srcObj) {\n                nv.utils.deepExtend(dst[key], source[key]);\n            } else {\n                dst[key] = source[key];\n            }\n        }\n    });\n};\n\n\n/*\nstate utility object, used to track d3 states in the models\n*/\nnv.utils.state = function(){\n    if (!(this instanceof nv.utils.state)) {\n        return new nv.utils.state();\n    }\n    var state = {};\n    var _self = this;\n    var _setState = function(){};\n    var _getState = function(){ return {}; };\n    var init = null;\n    var changed = null;\n\n    this.dispatch = d3.dispatch('change', 'set');\n\n    this.dispatch.on('set', function(state){\n        _setState(state, true);\n    });\n\n    this.getter = function(fn){\n        _getState = fn;\n        return this;\n    };\n\n    this.setter = function(fn, callback) {\n        if (!callback) {\n            callback = function(){};\n        }\n        _setState = function(state, update){\n            fn(state);\n            if (update) {\n                callback();\n            }\n        };\n        return this;\n    };\n\n    this.init = function(state){\n        init = init || {};\n        nv.utils.deepExtend(init, state);\n    };\n\n    var _set = function(){\n        var settings = _getState();\n\n        if (JSON.stringify(settings) === JSON.stringify(state)) {\n            return false;\n        }\n\n        for (var key in settings) {\n            if (state[key] === undefined) {\n                state[key] = {};\n            }\n            state[key] = settings[key];\n            changed = true;\n        }\n        return true;\n    };\n\n    this.update = function(){\n        if (init) {\n            _setState(init, false);\n            init = null;\n        }\n        if (_set.call(this)) {\n            this.dispatch.change(state);\n        }\n    };\n\n};\n\n\n/*\nSnippet of code you can insert into each nv.models.* to give you the ability to\ndo things like:\nchart.options({\n  showXAxis: true,\n  tooltips: true\n});\n\nTo enable in the chart:\nchart.options = nv.utils.optionsFunc.bind(chart);\n*/\nnv.utils.optionsFunc = function(args) {\n    if (args) {\n        d3.map(args).forEach((function(key,value) {\n            if (nv.utils.isFunction(this[key])) {\n                this[key](value);\n            }\n        }).bind(this));\n    }\n    return this;\n};\n\n\n/*\nnumTicks:  requested number of ticks\ndata:  the chart data\n\nreturns the number of ticks to actually use on X axis, based on chart data\nto avoid duplicate ticks with the same value\n*/\nnv.utils.calcTicksX = function(numTicks, data) {\n    // find max number of values from all data streams\n    var numValues = 1;\n    var i = 0;\n    for (i; i < data.length; i += 1) {\n        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;\n        numValues = stream_len > numValues ? stream_len : numValues;\n    }\n    nv.log(\"Requested number of ticks: \", numTicks);\n    nv.log(\"Calculated max values to be: \", numValues);\n    // make sure we don't have more ticks than values to avoid duplicates\n    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;\n    // make sure we have at least one tick\n    numTicks = numTicks < 1 ? 1 : numTicks;\n    // make sure it's an integer\n    numTicks = Math.floor(numTicks);\n    nv.log(\"Calculating tick count as: \", numTicks);\n    return numTicks;\n};\n\n\n/*\nreturns number of ticks to actually use on Y axis, based on chart data\n*/\nnv.utils.calcTicksY = function(numTicks, data) {\n    // currently uses the same logic but we can adjust here if needed later\n    return nv.utils.calcTicksX(numTicks, data);\n};\n\n\n/*\nAdd a particular option from an options object onto chart\nOptions exposed on a chart are a getter/setter function that returns chart\non set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');\n\noption objects should be generated via Object.create() to provide\nthe option of manipulating data via get/set functions.\n*/\nnv.utils.initOption = function(chart, name) {\n    // if it's a call option, just call it directly, otherwise do get/set\n    if (chart._calls && chart._calls[name]) {\n        chart[name] = chart._calls[name];\n    } else {\n        chart[name] = function (_) {\n            if (!arguments.length) return chart._options[name];\n            chart._overrides[name] = true;\n            chart._options[name] = _;\n            return chart;\n        };\n        // calling the option as _option will ignore if set by option already\n        // so nvd3 can set options internally but the stop if set manually\n        chart['_' + name] = function(_) {\n            if (!arguments.length) return chart._options[name];\n            if (!chart._overrides[name]) {\n                chart._options[name] = _;\n            }\n            return chart;\n        }\n    }\n};\n\n\n/*\nAdd all options in an options object to the chart\n*/\nnv.utils.initOptions = function(chart) {\n    chart._overrides = chart._overrides || {};\n    var ops = Object.getOwnPropertyNames(chart._options || {});\n    var calls = Object.getOwnPropertyNames(chart._calls || {});\n    ops = ops.concat(calls);\n    for (var i in ops) {\n        nv.utils.initOption(chart, ops[i]);\n    }\n};\n\n\n/*\nInherit options from a D3 object\nd3.rebind makes calling the function on target actually call it on source\nAlso use _d3options so we can track what we inherit for documentation and chained inheritance\n*/\nnv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {\n    target._d3options = oplist.concat(target._d3options || []);\n    oplist.unshift(d3_source);\n    oplist.unshift(target);\n    d3.rebind.apply(this, oplist);\n};\n\n\n/*\nRemove duplicates from an array\n*/\nnv.utils.arrayUnique = function(a) {\n    return a.sort().filter(function(item, pos) {\n        return !pos || item != a[pos - 1];\n    });\n};\n\n\n/*\nKeeps a list of custom symbols to draw from in addition to d3.svg.symbol\nNecessary since d3 doesn't let you extend its list -_-\nAdd new symbols by doing nv.utils.symbols.set('name', function(size){...});\n*/\nnv.utils.symbolMap = d3.map();\n\n\n/*\nReplaces d3.svg.symbol so that we can look both there and our own map\n */\nnv.utils.symbol = function() {\n    var type,\n        size = 64;\n    function symbol(d,i) {\n        var t = type.call(this,d,i);\n        var s = size.call(this,d,i);\n        if (d3.svg.symbolTypes.indexOf(t) !== -1) {\n            return d3.svg.symbol().type(t).size(s)();\n        } else {\n            return nv.utils.symbolMap.get(t)(s);\n        }\n    }\n    symbol.type = function(_) {\n        if (!arguments.length) return type;\n        type = d3.functor(_);\n        return symbol;\n    };\n    symbol.size = function(_) {\n        if (!arguments.length) return size;\n        size = d3.functor(_);\n        return symbol;\n    };\n    return symbol;\n};\n\n\n/*\nInherit option getter/setter functions from source to target\nd3.rebind makes calling the function on target actually call it on source\nAlso track via _inherited and _d3options so we can track what we inherit\nfor documentation generation purposes and chained inheritance\n*/\nnv.utils.inheritOptions = function(target, source) {\n    // inherit all the things\n    var ops = Object.getOwnPropertyNames(source._options || {});\n    var calls = Object.getOwnPropertyNames(source._calls || {});\n    var inherited = source._inherited || [];\n    var d3ops = source._d3options || [];\n    var args = ops.concat(calls).concat(inherited).concat(d3ops);\n    args.unshift(source);\n    args.unshift(target);\n    d3.rebind.apply(this, args);\n    // pass along the lists to keep track of them, don't allow duplicates\n    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));\n    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));\n};\n\n\n/*\nRuns common initialize code on the svg before the chart builds\n*/\nnv.utils.initSVG = function(svg) {\n    svg.classed({'nvd3-svg':true});\n};\n\n\n/*\nSanitize and provide default for the container height.\n*/\nnv.utils.sanitizeHeight = function(height, container) {\n    return (height || parseInt(container.style('height'), 10) || 400);\n};\n\n\n/*\nSanitize and provide default for the container width.\n*/\nnv.utils.sanitizeWidth = function(width, container) {\n    return (width || parseInt(container.style('width'), 10) || 960);\n};\n\n\n/*\nCalculate the available height for a chart.\n*/\nnv.utils.availableHeight = function(height, container, margin) {\n    return Math.max(0,nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n};\n\n/*\nCalculate the available width for a chart.\n*/\nnv.utils.availableWidth = function(width, container, margin) {\n    return Math.max(0,nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);\n};\n\n/*\nClear any rendered chart components and display a chart's 'noData' message\n*/\nnv.utils.noData = function(chart, container) {\n    var opt = chart.options(),\n        margin = opt.margin(),\n        noData = opt.noData(),\n        data = (noData == null) ? [\"No Data Available.\"] : [noData],\n        height = nv.utils.availableHeight(null, container, margin),\n        width = nv.utils.availableWidth(null, container, margin),\n        x = margin.left + width/2,\n        y = margin.top + height/2;\n\n    //Remove any previously created chart components\n    container.selectAll('g').remove();\n\n    var noDataText = container.selectAll('.nv-noData').data(data);\n\n    noDataText.enter().append('text')\n        .attr('class', 'nvd3 nv-noData')\n        .attr('dy', '-.7em')\n        .style('text-anchor', 'middle');\n\n    noDataText\n        .attr('x', x)\n        .attr('y', y)\n        .text(function(t){ return t; });\n};\n\n/*\n Wrap long labels.\n */\nnv.utils.wrapTicks = function (text, width) {\n    text.each(function() {\n        var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1,\n            y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(\" \"));\n                line = [word];\n                tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n            }\n        }\n    });\n};\n\n/*\nCheck equality of 2 array\n*/\nnv.utils.arrayEquals = function (array1, array2) {\n    if (array1 === array2)\n        return true;\n\n    if (!array1 || !array2)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (array1.length != array2.length)\n        return false;\n\n    for (var i = 0,\n        l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!nv.arrayEquals(array1[i], array2[i]))\n                return false;\n        } else if (array1[i] != array2[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\nnv.models.axis = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var axis = d3.svg.axis();\n    var scale = d3.scale.linear();\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 75 //only used for tickLabel currently\n        , height = 60 //only used for tickLabel currently\n        , axisLabelText = null\n        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n        , rotateLabels = 0\n        , rotateYLabel = true\n        , staggerLabels = false\n        , isOrdinal = false\n        , ticks = null\n        , axisLabelDistance = 0\n        , fontSize = undefined\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n    axis\n        .scale(scale)\n        .orient('bottom')\n        .tickFormat(function(d) { return d })\n    ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            if (ticks !== null)\n                axis.ticks(ticks);\n            else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\n            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n            g.watchTransition(renderWatch, 'axis').call(axis);\n\n            scale0 = scale0 || axis.scale();\n\n            var fmt = axis.tickFormat();\n            if (fmt == null) {\n                fmt = scale0.tickFormat();\n            }\n\n            var axisLabel = g.selectAll('text.nv-axislabel')\n                .data([axisLabelText || null]);\n            axisLabel.exit().remove();\n\n            //only skip when fontSize is undefined so it can be cleared with a null or blank string\n            if (fontSize !== undefined) {\n                g.selectAll('g').select(\"text\").style('font-size', fontSize);\n            }\n\n            var xLabelMargin;\n            var axisMaxMin;\n            var w;\n            switch (axis.orient()) {\n                case 'top':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                  w = 0;\n                  if (scale.range().length === 1) {\n                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                  } else if (scale.range().length === 2) {\n                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                  } else if ( scale.range().length > 2){\n                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                  };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', 0)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '-0.5em')\n                            .attr('y', -axis.tickPadding())\n                            .attr('text-anchor', 'middle')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max top')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'\n                            });\n                    }\n                    break;\n                case 'bottom':\n                    xLabelMargin = axisLabelDistance + 36;\n                    var maxTextWidth = 30;\n                    var textHeight = 0;\n                    var xTicks = g.selectAll('g').select(\"text\");\n                    var rotateLabelsRule = '';\n                    if (rotateLabels%360) {\n                        //Reset transform on ticks so textHeight can be calculated correctly\n                        xTicks.attr('transform', ''); \n                        //Calculate the longest xTick width\n                        xTicks.each(function(d,i){\n                            var box = this.getBoundingClientRect();\n                            var width = box.width;\n                            textHeight = box.height;\n                            if(width > maxTextWidth) maxTextWidth = width;\n                        });\n                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';\n                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n                        //Rotate all xTicks\n                        xTicks\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n                    } else {\n                        if (staggerLabels) {\n                            xTicks\n                                .attr('transform', function(d,i) {\n                                    return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'\n                                });\n                        } else {\n                            xTicks.attr('transform', \"translate(0,0)\");\n                        }\n                    }\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    w = 0;\n                    if (scale.range().length === 1) {\n                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                    } else if (scale.range().length === 2) {\n                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                    } else if ( scale.range().length > 2){\n                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                    };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', xLabelMargin)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        //if (showMaxMin && !isOrdinal) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            //.data(scale.domain())\n                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '.71em')\n                            .attr('y', axis.tickPadding())\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            });\n                    }\n\n                    break;\n                case 'right':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12 - (axisLabelDistance || 0)) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                       \taxisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', axis.tickPadding())\n                            .style('text-anchor', 'start')\n                            .text(function(d, i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n                case 'left':\n                    /*\n                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n                     var yTicks = g.selectAll('g').select(\"text\");\n                     yTicks.each(function(d,i){\n                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;\n                     if(labelPadding > width) width = labelPadding;\n                     });\n                     */\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)\n                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', -axis.tickPadding())\n                            .attr('text-anchor', 'end')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n            }\n            axisLabel.text(function(d) { return d });\n\n            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n                //check if max and min overlap other values, if so, hide the values that overlap\n                g.selectAll('g') // the g's wrapping each tick\n                    .each(function(d,i) {\n                        d3.select(this).select('text').attr('opacity', 1);\n                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                                d3.select(this).attr('opacity', 0);\n\n                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n                        }\n                    });\n\n                //if Max and Min = 0 only show min, Issue #281\n                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {\n                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {\n                        return !i ? 1 : 0\n                    });\n                }\n            }\n\n            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n                var maxMinRange = [];\n                wrap.selectAll('g.nv-axisMaxMin')\n                    .each(function(d,i) {\n                        try {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)\n                        }catch (err) {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + 4);\n                        }\n                    });\n                // the g's wrapping each tick\n                g.selectAll('g').each(function(d, i) {\n                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                            d3.select(this).remove();\n                        else\n                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n                    }\n                });\n            }\n\n            //Highlight zero tick line\n            g.selectAll('.tick')\n                .filter(function (d) {\n                    /*\n                    The filter needs to return only ticks at or near zero.\n                    Numbers like 0.00001 need to count as zero as well,\n                    and the arithmetic trick below solves that.\n                    */\n                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)\n                }) \n                .classed('zero', true);\n            \n            //store old scales for use in transitions on update\n            scale0 = scale.copy();\n\n        });\n\n        renderWatch.renderEnd('axis immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.axis = axis;\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},\n        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},\n        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},\n        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},\n        height:            {get: function(){return height;}, set: function(_){height=_;}},\n        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        width:             {get: function(){return width;}, set: function(_){width=_;}},\n        fontSize:          {get: function(){return fontSize;}, set: function(_){fontSize=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top !== undefined    ? _.top    : margin.top;\n            margin.right  = _.right !== undefined  ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left !== undefined   ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration=_;\n            renderWatch.reset(duration);\n        }},\n        scale: {get: function(){return scale;}, set: function(_){\n            scale = _;\n            axis.scale(scale);\n            isOrdinal = typeof scale.rangeBands === 'function';\n            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);\n    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n\n    return chart;\n};\nnv.models.boxPlot = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0},\n        width = 960,\n        height = 500,\n        id = Math.floor(Math.random() * 10000), // Create semi-unique ID in case user doesn't select one\n        xScale = d3.scale.ordinal(),\n        yScale = d3.scale.linear(),\n        getX  = function(d) { return d.label }, // Default data model selectors.\n        getQ1 = function(d) { return d.values.Q1 },\n        getQ2 = function(d) { return d.values.Q2 },\n        getQ3 = function(d) { return d.values.Q3 },\n        getWl = function(d) { return d.values.whisker_low },\n        getWh = function(d) { return d.values.whisker_high },\n        getColor = function(d) { return d.color },\n        getOlItems  = function(d) { return d.values.outliers },\n        getOlValue = function(d, i, j) { return d },\n        getOlLabel = function(d, i, j) { return d },\n        getOlColor = function(d, i, j) { return undefined },\n        color = nv.utils.defaultColor(),\n        container = null,\n        xDomain, xRange,\n        yDomain, yRange,\n        dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'),\n        duration = 250,\n        maxBoxWidth = null;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var xScale0, yScale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            xScale.domain(xDomain || data.map(function(d,i) { return getX(d,i); }))\n                .rangeBands(xRange || [0, availableWidth], 0.1);\n\n            // if we know yDomain, no need to calculate\n            var yData = []\n            if (!yDomain) {\n                // (y-range is based on quartiles, whiskers and outliers)\n                var values = [], yMin, yMax;\n                data.forEach(function (d, i) {\n                    var q1 = getQ1(d), q3 = getQ3(d), wl = getWl(d), wh = getWh(d);\n                    var olItems = getOlItems(d);\n                    if (olItems) {\n                        olItems.forEach(function (e, i) {\n                            values.push(getOlValue(e, i, undefined));\n                        });\n                    }\n                    if (wl) { values.push(wl) }\n                    if (q1) { values.push(q1) }\n                    if (q3) { values.push(q3) }\n                    if (wh) { values.push(wh) }\n                });\n                yMin = d3.min(values);\n                yMax = d3.max(values);\n                yData = [ yMin, yMax ] ;\n            }\n\n            yScale.domain(yDomain || yData);\n            yScale.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            xScale0 = xScale0 || xScale;\n            yScale0 = yScale0 || yScale.copy().range([yScale(0),yScale(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });\n            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);\n            boxplots\n                .attr('class', 'nv-boxplot')\n                .attr('transform', function(d,i,j) { return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)'; })\n                .classed('hover', function(d) { return d.hover });\n            boxplots\n                .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', 0.75)\n                .delay(function(d,i) { return i * duration / data.length })\n                .attr('transform', function(d,i) {\n                    return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)';\n                });\n            boxplots.exit().remove();\n\n            // ----- add the SVG elements for each boxPlot -----\n\n            // conditionally append whisker lines\n            boxEnter.each(function(d,i) {\n                var box = d3.select(this);\n                [getWl, getWh].forEach(function (f) {\n                    if (f(d) !== undefined && f(d) !== null) {\n                        var key = (f === getWl) ? 'low' : 'high';\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);\n                    }\n                });\n            });\n\n            var box_width = function() { return (maxBoxWidth === null ? xScale.rangeBand() * 0.9 : Math.min(75, xScale.rangeBand() * 0.9)); };\n            var box_left  = function() { return xScale.rangeBand() * 0.45 - box_width()/2; };\n            var box_right = function() { return xScale.rangeBand() * 0.45 + box_width()/2; };\n\n            // update whisker lines and ticks\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                var endpoint = (f === getWl) ? getQ1 : getQ3;\n                boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', xScale.rangeBand() * 0.45 )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', xScale.rangeBand() * 0.45 )\n                    .attr('y2', function(d,i) { return yScale(endpoint(d)); });\n                boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', box_left )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', box_right )\n                    .attr('y2', function(d,i) { return yScale(f(d)); });\n            });\n\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                boxEnter.selectAll('.nv-boxplot-' + key)\n                  .on('mouseover', function(d,i,j) {\n                      d3.select(this).classed('hover', true);\n                      dispatch.elementMouseover({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mouseout', function(d,i,j) {\n                      d3.select(this).classed('hover', false);\n                      dispatch.elementMouseout({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mousemove', function(d,i) {\n                      dispatch.elementMousemove({e: d3.event});\n                  });\n            });\n\n            // boxes\n            boxEnter.append('rect')\n                .attr('class', 'nv-boxplot-box')\n                // tooltip events\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n\n            // box transitions\n            boxplots.select('rect.nv-boxplot-box')\n              .watchTransition(renderWatch, 'nv-boxplot: boxes')\n                .attr('y', function(d,i) { return yScale(getQ3(d)); })\n                .attr('width', box_width)\n                .attr('x', box_left )\n                .attr('height', function(d,i) { return Math.abs(yScale(getQ3(d)) - yScale(getQ1(d))) || 1 })\n                .style('fill', function(d,i) { return getColor(d) || color(d,i) })\n                .style('stroke', function(d,i) { return getColor(d) || color(d,i) });\n\n            // median line\n            boxEnter.append('line').attr('class', 'nv-boxplot-median');\n\n            boxplots.select('line.nv-boxplot-median')\n              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')\n                .attr('x1', box_left)\n                .attr('y1', function(d,i) { return yScale(getQ2(d)); })\n                .attr('x2', box_right)\n                .attr('y2', function(d,i) { return yScale(getQ2(d)); });\n\n            // outliers\n            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {\n                return getOlItems(d) || [];\n            });\n            outliers.enter().append('circle')\n                .style('fill', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('stroke', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('z-index', 9000)\n                .on('mouseover', function(d,i,j) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i,j) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n            outliers.attr('class', 'nv-boxplot-outlier');\n            outliers\n              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')\n                .attr('cx', xScale.rangeBand() * 0.45)\n                .attr('cy', function(d,i,j) { return yScale(getOlValue(d,i,j)); })\n                .attr('r', '3');\n            outliers.exit().remove();\n\n            //store old scales for use in transitions on update\n            xScale0 = xScale.copy();\n            yScale0 = yScale.copy();\n        });\n\n        renderWatch.renderEnd('nv-boxplot immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:       {get: function(){return width;}, set: function(_){width=_;}},\n        height:      {get: function(){return height;}, set: function(_){height=_;}},\n        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},\n        x:           {get: function(){return getX;}, set: function(_){getX=_;}},\n        q1: {get: function(){return getQ1;}, set: function(_){getQ1=_;}},\n        q2: {get: function(){return getQ2;}, set: function(_){getQ2=_;}},\n        q3: {get: function(){return getQ3;}, set: function(_){getQ3=_;}},\n        wl: {get: function(){return getWl;}, set: function(_){getWl=_;}},\n        wh: {get: function(){return getWh;}, set: function(_){getWh=_;}},\n        itemColor:    {get: function(){return getColor;}, set: function(_){getColor=_;}},\n        outliers:     {get: function(){return getOlItems;}, set: function(_){getOlItems=_;}},\n        outlierValue: {get: function(){return getOlValue;}, set: function(_){getOlValue=_;}},\n        outlierLabel: {get: function(){return getOlLabel;}, set: function(_){getOlLabel=_;}},\n        outlierColor: {get: function(){return getOlColor;}, set: function(_){getOlColor=_;}},\n        xScale:  {get: function(){return xScale;}, set: function(_){xScale=_;}},\n        yScale:  {get: function(){return yScale;}, set: function(_){yScale=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n        y: {\n            get: function() {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n                return {};\n            },\n            set: function(_) {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n            }\n        },\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.boxPlotChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var boxplot = nv.models.boxPlot(),\n        xAxis = nv.models.axis(),\n        yAxis = nv.models.axis();\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60},\n        width = null,\n        height = null,\n        color = nv.utils.getColor(),\n        showXAxis = true,\n        showYAxis = true,\n        rightAlignYAxis = false,\n        staggerLabels = false,\n        tooltip = nv.models.tooltip(),\n        x, y,\n        noData = 'No Data Available.',\n        dispatch = d3.dispatch('beforeUpdate', 'renderEnd'),\n        duration = 250;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip.duration(0);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(boxplot);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this), that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = (width  || parseInt(container.style('width')) || 960) - margin.left - margin.right;\n            var availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // TODO still need to find a way to validate quartile data presence using boxPlot callbacks.\n            // Display No Data message if there's nothing to show. (quartiles required at minimum).\n            if (!data || !data.length) {\n                var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n                noDataText.enter().append('text')\n                    .attr('class', 'nvd3 nv-noData')\n                    .attr('dy', '-.7em')\n                    .style('text-anchor', 'middle');\n\n                noDataText\n                    .attr('x', margin.left + availableWidth / 2)\n                    .attr('y', margin.top + availableHeight / 2)\n                    .text(function(d) { return d });\n\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = boxplot.xScale();\n            y = boxplot.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(' + availableWidth + ',0)');\n            }\n\n            // Main Chart Component(s)\n            boxplot.width(availableWidth).height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n\n            barsWrap.transition().call(boxplot);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + boxplot.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 === 0 ? '5' : '17') + ')' })\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select('.nv-zeroLine line')\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', y(0))\n                .attr('y2', y(0))\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n        });\n\n        renderWatch.renderEnd('nv-boxplot chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip.data(evt).hidden(false);\n    });\n\n    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.data(evt).hidden(true);\n    });\n\n    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.boxplot = boxplot;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            boxplot.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            boxplot.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, boxplot);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\n\nnv.models.bullet = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , orient = 'left' // TODO top & bottom\n        , reverse = false\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , markerLines = function(d) { return d.markerLines ? d.markerLines : [0] }\n        , measures = function(d) { return d.measures }\n        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n        , markerLineLabels = function(d) { return d.markerLineLabels ? d.markerLineLabels : []  }\n        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , width = 380\n        , height = 30\n        , container = null\n        , tickFormat = null\n        , color = nv.utils.getColor(['#1f77b4'])\n        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')\n        , defaultRangeLabels = [\"Maximum\", \"Mean\", \"Minimum\"]\n        , legacyRangeClassNames = [\"Max\", \"Avg\", \"Min\"]\n        , duration = 1000\n        ;\n\n    function sortLabels(labels, values){\n        var lz = labels.slice();\n        labels.sort(function(a, b){\n            var iA = lz.indexOf(a);\n            var iB = lz.indexOf(b);\n            return d3.descending(values[iA], values[iB]);\n        });\n    };\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var rangez = ranges.call(this, d, i).slice(),\n                markerz = markers.call(this, d, i).slice(),\n                markerLinez = markerLines.call(this, d, i).slice(),\n                measurez = measures.call(this, d, i).slice(),\n                rangeLabelz = rangeLabels.call(this, d, i).slice(),\n                markerLabelz = markerLabels.call(this, d, i).slice(),\n                markerLineLabelz = markerLineLabels.call(this, d, i).slice(),\n                measureLabelz = measureLabels.call(this, d, i).slice();\n\n            // Sort labels according to their sorted values\n            sortLabels(rangeLabelz, rangez);\n            sortLabels(markerLabelz, markerz);\n            sortLabels(markerLineLabelz, markerLinez);\n            sortLabels(measureLabelz, measurez);\n\n            // sort values descending\n            rangez.sort(d3.descending);\n            markerz.sort(d3.descending);\n            markerLinez.sort(d3.descending);\n            measurez.sort(d3.descending);\n\n            // Setup Scales\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain( d3.extent(d3.merge([forceX, rangez])) )\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var rangeMin = d3.min(rangez), //rangez[2]\n                rangeMax = d3.max(rangez), //rangez[0]\n                rangeAvg = rangez[1];\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var rangeClassNames = 'nv-range nv-range'+i;\n                if(i <= 2){\n                    rangeClassNames = rangeClassNames + ' nv-range'+legacyRangeClassNames[i];\n                }\n                gEnter.append('rect').attr('class', rangeClassNames);\n            }\n\n            gEnter.append('rect').attr('class', 'nv-measure');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var range = rangez[i];\n                g.select('rect.nv-range'+i)\n                    .datum(range)\n                    .attr('height', availableHeight)\n                    .transition()\n                    .duration(duration)\n                    .attr('width', w1(range))\n                    .attr('x', xp1(range))\n            }\n\n            g.select('rect.nv-measure')\n                .style('fill', color)\n                .attr('height', availableHeight / 3)\n                .attr('y', availableHeight / 3)\n                .on('mouseover', function() {\n                    dispatch.elementMouseover({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function() {\n                    dispatch.elementMouseout({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .transition()\n                .duration(duration)\n                .attr('width', measurez < 0 ?\n                    x1(0) - x1(measurez[0])\n                    : x1(measurez[0]) - x1(0))\n                .attr('x', xp1(measurez));\n\n            var h3 =  availableHeight / 6;\n\n            var markerData = markerz.map( function(marker, index) {\n                return {value: marker, label: markerLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .enter()\n              .append('path')\n              .attr('class', 'nv-markerTriangle')\n              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .transition()\n              .duration(duration)\n              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });\n\n            var markerLinesData = markerLinez.map( function(marker, index) {\n                return {value: marker, label: markerLineLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .enter()\n              .append('line')\n              .attr('cursor', '')\n              .attr('class', 'nv-markerLine')\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('y1', '2')\n              .attr('x2', function(d) { return x1(d.value) })\n              .attr('y2', availableHeight - 2)\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .transition()\n              .duration(duration)\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('x2', function(d) { return x1(d.value) });\n\n            wrap.selectAll('.nv-range')\n                .on('mouseover', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseover({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Previous',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseout({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        duration:    {get: function(){return duration;}, set: function(_){duration=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\n\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\nnv.models.bulletChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bullet = nv.models.bullet();\n    var tooltip = nv.models.tooltip();\n\n    var orient = 'left' // TODO top & bottom\n        , reverse = false\n        , margin = {top: 5, right: 40, bottom: 20, left: 120}\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , measures = function(d) { return d.measures }\n        , width = null\n        , height = 55\n        , tickFormat = null\n        , ticks = null\n        , noData = null\n        , dispatch = d3.dispatch()\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false);\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom,\n                that = this;\n\n            chart.update = function() { chart(selection) };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!d || !ranges.call(this, d, i)) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n                markerz = markers.call(this, d, i).slice().sort(d3.descending),\n                measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bulletWrap');\n            gEnter.append('g').attr('class', 'nv-titles');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain([0, Math.max(rangez[0], (markerz[0] || 0), measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\n            var title = gEnter.select('.nv-titles').append('g')\n                .attr('text-anchor', 'end')\n                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n            title.append('text')\n                .attr('class', 'nv-title')\n                .text(function(d) { return d.title; });\n\n            title.append('text')\n                .attr('class', 'nv-subtitle')\n                .attr('dy', '1em')\n                .text(function(d) { return d.subtitle; });\n\n            bullet\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var bulletWrap = g.select('.nv-bulletWrap');\n            d3.transition(bulletWrap).call(bullet);\n\n            // Compute the tick format.\n            var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\n            // Update the tick groups.\n            var tick = g.selectAll('g.nv-tick')\n                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {\n                    return this.textContent || format(d);\n                });\n\n            // Initialize the ticks with the old scale, x0.\n            var tickEnter = tick.enter().append('g')\n                .attr('class', 'nv-tick')\n                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n                .style('opacity', 1e-6);\n\n            tickEnter.append('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickEnter.append('text')\n                .attr('text-anchor', 'middle')\n                .attr('dy', '1em')\n                .attr('y', availableHeight * 7 / 6)\n                .text(format);\n\n            // Transition the updating ticks to the new scale, x1.\n            var tickUpdate = d3.transition(tick)\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1);\n\n            tickUpdate.select('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickUpdate.select('text')\n                .attr('y', availableHeight * 7 / 6);\n\n            // Transition the exiting ticks to the new scale, x1.\n            d3.transition(tick.exit())\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1e-6)\n                .remove();\n        });\n\n        d3.timer.flush();\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: evt.label,\n            value: evt.value,\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.bullet = bullet;\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bullet);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n\nnv.models.candlestickBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Width of the candlestick bars.\n            var barWidth = (availableWidth / data[0].values.length) * .45;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            var tickGroups = ticks.enter().append('g');\n\n            // The colors are currently controlled by CSS.\n            ticks\n                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});\n\n            var lines = tickGroups.append('line')\n                .attr('class', 'nv-candlestick-lines')\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            var rects = tickGroups.append('rect')\n                .attr('class', 'nv-candlestick-rects nv-bars')\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n\n            ticks.select('.nv-candlestick-lines').transition()\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            ticks.select('.nv-candlestick-rects').transition()\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-candlestickBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-candlestickBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.cumulativeLineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , showControls = true\n        , useInteractiveGuideline = false\n        , rescaleY = true\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , id = lines.id()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , average = function(d) { return d.average }\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        , duration = 250\n        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n        ;\n\n    state.index = 0;\n    state.rescaleY = rescaleY;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var dx = d3.scale.linear()\n        , index = {i: 0, x: 0}\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                index: index.i,\n                rescaleY: rescaleY\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.index !== undefined)\n                index.i = state.index;\n            if (state.rescaleY !== undefined)\n                rescaleY = state.rescaleY;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            container.classed('nv-chart-' + id, true);\n            var that = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart)\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            var indexDrag = d3.behavior.drag()\n                .on('dragstart', dragStart)\n                .on('drag', dragMove)\n                .on('dragend', dragEnd);\n\n\n            function dragStart(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'ew-resize');\n            }\n\n            function dragMove(d,i) {\n                index.x = d3.event.x;\n                index.i = Math.round(dx.invert(index.x));\n                updateZero();\n            }\n\n            function dragEnd(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'auto');\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            if (!rescaleY) {\n                var seriesDomains = data\n                    .filter(function(series) { return !series.disabled })\n                    .map(function(series,i) {\n                        var initialDomain = d3.extent(series.values, lines.y());\n\n                        //account for series being disabled when losing 95% or more\n                        if (initialDomain[0] < -.95) initialDomain[0] = -.95;\n\n                        return [\n                                (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),\n                                (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])\n                        ];\n                    });\n\n                var completeDomain = [\n                    d3.min(seriesDomains, function(d) { return d[0] }),\n                    d3.max(seriesDomains, function(d) { return d[1] })\n                ];\n\n                lines.yDomain(completeDomain);\n            } else {\n                lines.yDomain(null);\n            }\n\n            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length\n                .range([0, availableWidth])\n                .clamp(true);\n\n            var data = indexify(index.i, data);\n\n            // Setup containers and skeleton of chart\n            var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-interactive');\n            gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-background');\n            gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: 'Re-scale y-axis', disabled: !rescaleY }\n                ];\n\n                controls\n                    .width(140)\n                    .color(['#444', '#444', '#444'])\n                    .rightAlign(false)\n                    .margin({top: 5, right: 0, bottom: 5, left: 20})\n                ;\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Show error if series goes below 100%\n            var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\n            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n            if (tempDisabled.length) {\n                wrap.append('text').attr('class', 'tempDisabled')\n                    .attr('x', availableWidth / 2)\n                    .attr('y', '-.71em')\n                    .style('text-anchor', 'end')\n                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left,top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            gEnter.select('.nv-background')\n                .append('rect');\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                //.x(function(d) { return d.x })\n                .y(function(d) { return d.display.y })\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\n            linesWrap.call(lines);\n\n            //Store a series index number in the data array.\n            data.forEach(function(d,i) {\n                d.seriesIndex = i;\n            });\n\n            var avgLineData = data.filter(function(d) {\n                return !d.disabled && !!average(d);\n            });\n\n            var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n                .data(avgLineData, function(d) { return d.key; });\n\n            var getAvgLineY = function(d) {\n                //If average lines go off the svg element, clamp them to the svg bounds.\n                var yVal = y(average(d));\n                if (yVal < 0) return 0;\n                if (yVal > availableHeight) return availableHeight;\n                return yVal;\n            };\n\n            avgLines.enter()\n                .append('line')\n                .style('stroke-width',2)\n                .style('stroke-dasharray','10,10')\n                .style('stroke',function (d,i) {\n                    return lines.color()(d,d.seriesIndex);\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines\n                .style('stroke-opacity',function(d){\n                    //If average lines go offscreen, make them transparent\n                    var yVal = y(average(d));\n                    if (yVal < 0 || yVal > availableHeight) return 0;\n                    return 1;\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines.exit().remove();\n\n            //Create index line\n            var indexLine = linesWrap.selectAll('.nv-indexLine')\n                .data([index]);\n            indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n                .attr('width', 3)\n                .attr('x', -2)\n                .attr('fill', 'red')\n                .attr('fill-opacity', .5)\n                .style(\"pointer-events\",\"all\")\n                .call(indexDrag);\n\n            indexLine\n                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n                .attr('height', availableHeight);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            function updateZero() {\n                indexLine\n                    .data([index]);\n\n                //When dragging the index line, turn off line transitions.\n                // Then turn them back on when done dragging.\n                var oldDuration = chart.duration();\n                chart.duration(0);\n                chart.update();\n                chart.duration(oldDuration);\n            }\n\n            g.select('.nv-background rect')\n                .on('click', function() {\n                    index.x = d3.mouse(this)[0];\n                    index.i = Math.round(dx.invert(index.x));\n\n                    // update state and send stateChange with new index\n                    state.index = index.i;\n                    dispatch.stateChange(state);\n\n                    updateZero();\n                });\n\n            lines.dispatch.on('elementClick', function(e) {\n                index.i = e.pointIndex;\n                index.x = dx(index.i);\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n\n                updateZero();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n                rescaleY = !d.disabled;\n\n                state.rescaleY = rescaleY;\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        lines.highlightPoint(i, pointIndex, true);\n                        var point = series.values[pointIndex];\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex)\n                        });\n                    });\n\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.index !== 'undefined') {\n                    index.i = e.index;\n                    index.x = dx(index.i);\n\n                    state.index = e.index;\n\n                    indexLine\n                        .data([index]);\n                }\n\n                if (typeof e.rescaleY !== 'undefined') {\n                    rescaleY = e.rescaleY;\n                }\n\n                chart.update();\n            });\n\n        });\n\n        renderWatch.renderEnd('cumulativeLineChart immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        var point = {\n            x: chart.x()(evt.point),\n            y: chart.y()(evt.point),\n            color: evt.point.color\n        };\n        evt.point = point;\n        tooltip.data(evt).hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    //============================================================\n    // Functions\n    //------------------------------------------------------------\n\n    var indexifyYGetter = null;\n    /* Normalize the data according to an index point. */\n    function indexify(idx, data) {\n        if (!indexifyYGetter) indexifyYGetter = lines.y();\n        return data.map(function(line, i) {\n            if (!line.values) {\n                return line;\n            }\n            var indexValue = line.values[idx];\n            if (indexValue == null) {\n                return line;\n            }\n            var v = indexifyYGetter(indexValue, idx);\n\n            //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue\n            if (v < -.95 && !noErrorCheck) {\n                //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)\n\n                line.tempDisabled = true;\n                return line;\n            }\n\n            line.tempDisabled = false;\n\n            line.values = line.values.map(function(point, pointIndex) {\n                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / (1 + v) };\n                return point;\n            });\n\n            return line;\n        })\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        rescaleY:     {get: function(){return rescaleY;}, set: function(_){rescaleY=_;}},\n        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        average: {get: function(){return average;}, set: function(_){average=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n                chart.useVoronoi(false);\n            }\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        duration:    {get: function(){return duration;}, set: function(_){\n            duration = _;\n            lines.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating by adding necessary features to multiBar model\nnv.models.discreteBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , showValues = false\n        , valueFormat = d3.format(',.2f')\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , rectClass = 'discreteBar'\n        , duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n                    })\n                });\n\n            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], .1);\n            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\n            // If showValues, pad the Y axis range to account for label height\n            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n            else y.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            x0 = x0 || x;\n            y0 = y0 || y.copy().range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .watchTransition(renderWatch, 'discreteBar: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover });\n            groups\n                .watchTransition(renderWatch, 'discreteBar: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .75);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n                })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            barsEnter.append('rect')\n                .attr('height', 0)\n                .attr('width', x.rangeBand() * .9 / data.length )\n\n            if (showValues) {\n                barsEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                ;\n\n                bars.select('text')\n                    .text(function(d,i) { return valueFormat(getY(d,i)) })\n                    .watchTransition(renderWatch, 'discreteBar: bars text')\n                    .attr('x', x.rangeBand() * .9 / 2)\n                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\n                ;\n            } else {\n                bars.selectAll('text').remove();\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n                .style('fill', function(d,i) { return d.color || color(d,i) })\n                .style('stroke', function(d,i) { return d.color || color(d,i) })\n                .select('rect')\n                .attr('class', rectClass)\n                .watchTransition(renderWatch, 'discreteBar: bars rect')\n                .attr('width', x.rangeBand() * .9 / data.length);\n            bars.watchTransition(renderWatch, 'discreteBar: bars')\n                //.delay(function(d,i) { return i * 1200 / data[0].values.length })\n                .attr('transform', function(d,i) {\n                    var left = x(getX(d,i)) + x.rangeBand() * .05,\n                        top = getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 : //make 1 px positive bars show up above y=0\n                            y(getY(d,i));\n\n                    return 'translate(' + left + ', ' + top + ')'\n                })\n                .select('rect')\n                .attr('height', function(d,i) {\n                    return  Math.max(Math.abs(y(getY(d,i)) - y(0)), 1)\n                });\n\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('discreteBar immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.discreteBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var discretebar = nv.models.discreteBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n\t, legend = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.getColor()\n\t, showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x\n        , y\n        , noData = null\n        , dispatch = d3.dispatch('beforeUpdate','renderEnd')\n        , duration = 250\n        ;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .keyFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(discretebar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = discretebar.xScale();\n            y = discretebar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t    gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            discretebar\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(discretebar);\n\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + discretebar.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n                }\n\n                if (rotateLabels) {\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\",0)\n                .attr(\"x2\",(rightAlignYAxis) ? -availableWidth : availableWidth)\n                .attr(\"y1\", y(0))\n                .attr(\"y2\", y(0))\n            ;\n        });\n\n        renderWatch.renderEnd('discreteBar chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.discretebar = discretebar;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\tshowLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:  {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        wrapLabels:  {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            discretebar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            discretebar.color(color);\n\t    legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, discretebar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\nnv.models.distribution = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 400 //technically width or height depending on x or y....\n        , size = 8\n        , axis = 'x' // 'x' or 'y'... horizontal or vertical\n        , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n        , color = nv.utils.defaultColor()\n        , scale = d3.scale.linear()\n        , domain\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n                naxis = axis == 'x' ? 'y' : 'x',\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //------------------------------------------------------------\n            // Setup Scales\n\n            scale0 = scale0 || scale;\n\n            //------------------------------------------------------------\n\n\n            //------------------------------------------------------------\n            // Setup containers and skeleton of chart\n\n            var wrap = container.selectAll('g.nv-distribution').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            //------------------------------------------------------------\n\n\n            var distWrap = g.selectAll('g.nv-dist')\n                .data(function(d) { return d }, function(d) { return d.key });\n\n            distWrap.enter().append('g');\n            distWrap\n                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n                .style('stroke', function(d,i) { return color(d, i) });\n\n            var dist = distWrap.selectAll('line.nv-dist' + axis)\n                .data(function(d) { return d.values })\n            dist.enter().append('line')\n                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n                .style('stroke-opacity', 0)\n                .remove();\n            dist\n                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n                .attr(naxis + '1', 0)\n                .attr(naxis + '2', size);\n            renderWatch.transition(dist, 'dist')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\n\n            scale0 = scale.copy();\n\n        });\n        renderWatch.renderEnd('distribution immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart.dispatch = dispatch;\n\n    chart.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return chart;\n    };\n\n    chart.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return chart;\n    };\n\n    chart.axis = function(_) {\n        if (!arguments.length) return axis;\n        axis = _;\n        return chart;\n    };\n\n    chart.size = function(_) {\n        if (!arguments.length) return size;\n        size = _;\n        return chart;\n    };\n\n    chart.getData = function(_) {\n        if (!arguments.length) return getData;\n        getData = d3.functor(_);\n        return chart;\n    };\n\n    chart.scale = function(_) {\n        if (!arguments.length) return scale;\n        scale = _;\n        return chart;\n    };\n\n    chart.color = function(_) {\n        if (!arguments.length) return color;\n        color = nv.utils.getColor(_);\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        return chart;\n    };\n    //============================================================\n\n\n    return chart;\n}\nnv.models.focus = function(content) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var content = content || nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , brush = d3.svg.brush()\n        ;\n\n    var margin = {top: 10, right: 0, bottom: 30, left: 0}\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = 70\n        , showXAxis = true\n        , showYAxis = false\n        , rightAlignYAxis = false\n        , ticks = null\n        , x\n        , y\n        , brushExtent = null\n        , duration = 250\n        , dispatch = d3.dispatch('brush', 'onBrush', 'renderEnd')\n        , syncBrushing = true\n        ;\n\n    content.interactive(false);\n    content.pointActive(function(d) { return false; });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(content);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom;\n\n            chart.update = function() { \n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            // Setup Scales\n            x = content.xScale();\n            y = content.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-focus').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-focus').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            gEnter.append('g').attr('class', 'nv-background').append('rect');\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-contentWrap');\n            gEnter.append('g').attr('class', 'nv-brushBackground');\n            gEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n                \n            content\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var contentWrap = g.select('.nv-contentWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            d3.transition(contentWrap).call(content);\n            \n            // Setup Brush\n            brush\n                .x(x)\n                .on('brush', function() {\n                    onBrush(syncBrushing);\n                });\n\n            brush.on('brushend', function () {\n                if (!syncBrushing) {\n                    dispatch.onBrush(brush.empty() ? x.domain() : brush.extent());\n                }\n            });\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n    \n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                .attr('height', availableHeight);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            onBrush(true);\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n  \n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                d3.transition(g.select('.nv-x.nv-axis'))\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                d3.transition(g.select('.nv-y.nv-axis'))\n                    .call(yAxis);\n            }\n            \n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n    \n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n    \n    \n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x(d[0]) - x.range()[0],\n                            rightWidth = availableWidth - x(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n    \n                        d3.select(this).select('.right')\n                            .attr('x', x(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n\n            function onBrush(shouldDispatch) {\n                brushExtent = brush.empty() ? null : brush.extent();\n                var extent = brush.empty() ? x.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n                if (shouldDispatch) {\n                    dispatch.onBrush(extent);\n                }\n            }\n        });\n\n        renderWatch.renderEnd('focus immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.content = content;\n    chart.brush = brush;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        syncBrushing: {get: function(){return syncBrushing;}, set: function(_){syncBrushing=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            content.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            content.color(color);\n        }},\n        interpolate: {get: function(){return content.interpolate();}, set: function(_){\n            content.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n        }},\n        x: {get: function(){return content.x();}, set: function(_){\n            content.x(_);\n        }},\n        y: {get: function(){return content.y();}, set: function(_){\n            content.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, content);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.forceDirectedGraph = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , dispatch = d3.dispatch('renderEnd')\n        , color = nv.utils.getColor(['#000'])\n        , tooltip      = nv.models.tooltip()\n        , noData = null\n        // Force directed graph specific parameters [default values]\n        , linkStrength = 0.1\n        , friction = 0.9\n        , linkDist = 30\n        , charge = -120\n        , gravity = 0.1\n        , theta = 0.8\n        , alpha = 0.1\n        , radius = 5\n        // These functions allow to add extra attributes to ndes and links\n        ,nodeExtras = function(nodes) { /* Do nothing */ }\n        ,linkExtras = function(links) { /* Do nothing */ }\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n          container = d3.select(this);\n          nv.utils.initSVG(container);\n\n          var availableWidth = nv.utils.availableWidth(width, container, margin),\n              availableHeight = nv.utils.availableHeight(height, container, margin);\n\n          container\n                  .attr(\"width\", availableWidth)\n                  .attr(\"height\", availableHeight);\n\n          // Display No Data message if there's nothing to show.\n          if (!data || !data.links || !data.nodes) {\n              nv.utils.noData(chart, container)\n              return chart;\n          } else {\n              container.selectAll('.nv-noData').remove();\n          }\n          container.selectAll('*').remove();\n\n          // Collect names of all fields in the nodes\n          var nodeFieldSet = new Set();\n          data.nodes.forEach(function(node) {\n            var keys = Object.keys(node);\n            keys.forEach(function(key) {\n              nodeFieldSet.add(key);\n            });\n          });\n\n          var force = d3.layout.force()\n                .nodes(data.nodes)\n                .links(data.links)\n                .size([availableWidth, availableHeight])\n                .linkStrength(linkStrength)\n                .friction(friction)\n                .linkDistance(linkDist)\n                .charge(charge)\n                .gravity(gravity)\n                .theta(theta)\n                .alpha(alpha)\n                .start();\n\n          var link = container.selectAll(\".link\")\n                .data(data.links)\n                .enter().append(\"line\")\n                .attr(\"class\", \"nv-force-link\")\n                .style(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\n          var node = container.selectAll(\".node\")\n                .data(data.nodes)\n                .enter()\n                .append(\"g\")\n                .attr(\"class\", \"nv-force-node\")\n                .call(force.drag);\n\n          node\n            .append(\"circle\")\n            .attr(\"r\", radius)\n            .style(\"fill\", function(d) { return color(d) } )\n            .on(\"mouseover\", function(evt) {\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                  .attr('y1', evt.py);\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                  .attr('x2', evt.px);\n\n              // Add 'series' object to\n              var nodeColor = color(evt);\n              evt.series = [];\n              nodeFieldSet.forEach(function(field) {\n                evt.series.push({\n                  color: nodeColor,\n                  key:   field,\n                  value: evt[field]\n                });\n              });\n              tooltip.data(evt).hidden(false);\n            })\n            .on(\"mouseout\",  function(d) {\n              tooltip.hidden(true);\n            });\n\n          tooltip.headerFormatter(function(d) {return \"Node\";});\n\n          // Apply extra attributes to nodes and links (if any)\n          linkExtras(link);\n          nodeExtras(node);\n\n          force.on(\"tick\", function() {\n              link.attr(\"x1\", function(d) { return d.source.x; })\n                  .attr(\"y1\", function(d) { return d.source.y; })\n                  .attr(\"x2\", function(d) { return d.target.x; })\n                  .attr(\"y2\", function(d) { return d.target.y; });\n\n              node.attr(\"transform\", function(d) {\n                return \"translate(\" + d.x + \", \" + d.y + \")\";\n              });\n            });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:     {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n\n        // Force directed graph specific parameters\n        linkStrength:{get: function(){return linkStrength;}, set: function(_){linkStrength=_;}},\n        friction:    {get: function(){return friction;}, set: function(_){friction=_;}},\n        linkDist:    {get: function(){return linkDist;}, set: function(_){linkDist=_;}},\n        charge:      {get: function(){return charge;}, set: function(_){charge=_;}},\n        gravity:     {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        theta:       {get: function(){return theta;}, set: function(_){theta=_;}},\n        alpha:       {get: function(){return alpha;}, set: function(_){alpha=_;}},\n        radius:      {get: function(){return radius;}, set: function(_){radius=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        nodeExtras: {get: function(){return nodeExtras;}, set: function(_){\n            nodeExtras = _;\n        }},\n        linkExtras: {get: function(){return linkExtras;}, set: function(_){\n            linkExtras = _;\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.furiousLegend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 28 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n\n            var seriesShape;\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('circle');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n\n                seriesShape = series.select('rect');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var legendWidth = 0;\n                var columnWidths = [];\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15)\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('stroke', function(d,i) { return d.color || color(d, i) });\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? color(d,i) : '#fff';\n            } else if (!expanded) {\n                return !!d.disabled ? color(d,i) : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#fff' : color(d,i);\n            } else {\n                return !!d.disabled ? '#fff' : color(d,i);\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating and using multibar with single series for this\nnv.models.historicalBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceX = []\n        , forceY = [0]\n        , padData = false\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , interactive = true\n        ;\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n                .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bars');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n                .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n            bars.exit().remove();\n\n            bars.enter().append('rect')\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                .on('mouseover', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n\n                })\n                .on('mouseout', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    if (!interactive) return;\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            bars\n                .attr('fill', function(d,i) { return color(d, i); })\n                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n                .watchTransition(renderWatch, 'bars')\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                //TODO: better width calculations that don't assume always uniform data spacing;w\n                .attr('width', (availableWidth / data[0].values.length) * .9 );\n\n            bars.watchTransition(renderWatch, 'bars')\n                .attr('y', function(d,i) {\n                    var rval = getY(d,i) < 0 ?\n                        y(0) :\n                            y(0) - y(getY(d,i)) < 1 ?\n                        y(0) - 1 :\n                        y(getY(d,i));\n                    return nv.utils.NaNtoZero(rval);\n                })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\n        });\n\n        renderWatch.renderEnd('historicalBar immediate');\n        return chart;\n    }\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        container\n            .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container\n            .select(\".nv-bars .nv-bar.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData: {get: function(){return padData;}, set: function(_){padData=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.historicalBarChart = function(bar_model) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bars = bar_model || nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n\n    var margin = {top: 30, right: 90, bottom: 50, left: 90}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , state = {}\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        ;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n            renderWatch.models(bars);\n            if (showXAxis) renderWatch.models(xAxis);\n            if (showYAxis) renderWatch.models(yAxis);\n\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };\n            chart.container = this;\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = bars.xScale();\n            y = bars.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n            bars\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n            barsWrap.transition().call(bars);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .transition()\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .transition()\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                bars.clearHighlights();\n\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        bars.highlightPoint(pointIndex,true);\n                        var point = series.values[pointIndex];\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex),\n                            data: series.values[pointIndex]\n                        });\n                    });\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data({\n                        value: xValue,\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                dispatch.tooltipHide();\n                bars.clearHighlights();\n            });\n\n            legend.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n\n                if (!data.filter(function(d) { return !d.disabled }).length) {\n                    data.map(function(d) {\n                        d.disabled = false;\n                        wrap.selectAll('.nv-series').classed('disabled', false);\n                        return d;\n                    });\n                }\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                selection.transition().call(chart);\n            });\n\n            legend.dispatch.on('legendDblclick', function(d) {\n                //Double clicking should always enable current series, and disabled all others.\n                data.forEach(function(d) {\n                    d.disabled = true;\n                });\n                d.disabled = false;\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('historicalBarChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.bars = bars;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            bars.color(color);\n        }},\n        duration:    {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration=_;\n            renderWatch.reset(transitionDuration);\n            yAxis.duration(transitionDuration);\n            xAxis.duration(transitionDuration);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bars);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n// ohlcChart is just a historical chart with ohlc bars and some tweaks\nnv.models.ohlcBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\n\n// candlestickChart is just a historical chart with candlestick bars and some tweaks\nnv.models.candlestickBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\nnv.models.legend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 32 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            if (rightAlign)\n                wrap.attr('transform', 'translate(' + (- margin.right) + ',' + margin.top + ')');\n            else\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');\n            var seriesShape;\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('.nv-legend-symbol');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n                seriesShape = series.select('.nv-legend-symbol');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n            var legendWidth = 0;\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var columnWidths = [];\n                legendWidth = 0;\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        if(legendWidth < xpos + maxwidth) {\n                            legendWidth = xpos + maxwidth;\n                        }\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15);\n\n                // The background for the expanded legend (UI)\n                gEnter.insert('rect',':first-child')\n                    .attr('class', 'nv-legend-bg')\n                    .attr('fill', '#eee')\n                    // .attr('stroke', '#444')\n                    .attr('opacity',0);\n\n                var seriesBG = g.select('.nv-legend-bg');\n\n                seriesBG\n                .transition().duration(300)\n                    .attr('x', -versPadding )\n                    .attr('width', legendWidth + versPadding - 12)\n                    .attr('height', height + 10)\n                    .attr('y', -margin.top - 10)\n                    .attr('opacity', expanded ? 1 : 0);\n\n\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('fill-opacity', setBGOpacity)\n                .style('stroke', setBGColor);\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? '#000' : '#fff';\n            } else if (!expanded) {\n                if(!d.color) d.color = color(d,i);\n                return !!d.disabled ? d.color : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#eee' : d.color || color(d,i);\n            } else {\n                return d.color || color(d,i);\n            }\n        }\n\n\n        function setBGOpacity(d,i) {\n            if(expanded && vers == 'furious') {\n                return 1;\n            } else {\n                return !!d.disabled ? 0 : 1;\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.line = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var  scatter = nv.models.scatter()\n        ;\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , container = null\n        , strokeWidth = 1.5\n        , color = nv.utils.defaultColor() // a function that returns a color\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , interpolate = \"linear\" // controls the line interpolation\n        , duration = 250\n        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        ;\n\n    scatter\n        .pointSize(16) // default size\n        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n    ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            scatter\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var scatterWrap = wrap.select('.nv-scatterWrap');\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + scatter.id())\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n            scatterWrap\n                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })\n                .style('fill-opacity', 1e-6);\n\n            groups.exit().remove();\n\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i)});\n            groups.watchTransition(renderWatch, 'line: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', function(d) { return d.fillOpacity || .5});\n\n            var areaPaths = groups.selectAll('path.nv-area')\n                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n            areaPaths.enter().append('path')\n                .attr('class', 'nv-area')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n            groups.exit().selectAll('path.nv-area')\n                .remove();\n\n            areaPaths.watchTransition(renderWatch, 'line: areaPaths')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n\n            var linePaths = groups.selectAll('path.nv-line')\n                .data(function(d) { return [d.values] });\n\n            linePaths.enter().append('path')\n                .attr('class', 'nv-line')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n            );\n\n            linePaths.watchTransition(renderWatch, 'line: linePaths')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            );\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n        });\n        renderWatch.renderEnd('line immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    // Pass through events\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }},\n        isArea: {get: function(){return isArea;}, set: function(_){\n            isArea = d3.functor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            scatter.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            scatter.y(_);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            scatter.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.lineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.line())\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , focusEnable = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , duration = 250\n        ;\n\n    // set options on sub-objects for this chart\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient(rightAlignYAxis ? 'right' : 'left');\n\n    lines.clipEdge(true).duration(0);\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    interactiveLayer.tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled; })\n            };\n        };\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        };\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n            chart.update = function() {\n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled; });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length; }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (legendPosition === 'bottom') {\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + availableHeight +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                }\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n\n            // Setup Main (Focus) Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n              if(showXAxis) {\n                g.select('.nv-focus .nv-x.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(xAxis)\n                ;\n              }\n            }\n\n            function updateYAxis() {\n              if(showYAxis) {\n                g.select('.nv-focus .nv-y.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(yAxis)\n                ;\n              }\n            }\n\n            g.select('.nv-focus .nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                linesWrap.call(lines);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled && !series.disableTooltip;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = focusEnable ? (focus.brush.empty() ? focus.xScale().domain() : focus.brush.extent()) : x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            // Checks if the x point is between the extents, handling case where extent[0] is greater than extent[1]\n                            // (e.g. x domain is manually set to reverse the x-axis)\n                            if(extent[0] <= extent[1]) {\n                                return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                            } else {\n                                return lines.x()(d,i) >= extent[1] && lines.x()(d,i) <= extent[0];\n                            }\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            lines.highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point\n                        });\n                    });\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value;}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var defaultValueFormatter = function(d,i) {\n                    return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                };\n\n                interactiveLayer.tooltip\n                    .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                    .data({\n                        value: chart.x()( singlePoint,pointIndex ),\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on('elementClick', function(e) {\n                var pointXLocation, allData = [];\n\n                data.filter(function(series, i) {\n                    series.seriesIndex = i;\n                    return !series.disabled;\n                }).forEach(function(series) {\n                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                    var point = series.values[pointIndex];\n                    if (typeof point === 'undefined') return;\n                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                    var yPos = chart.yScale()(chart.y()(point,pointIndex));\n                    allData.push({\n                        point: point,\n                        pointIndex: pointIndex,\n                        pos: [pointXLocation, yPos],\n                        seriesIndex: series.seriesIndex,\n                        series: series\n                    });\n                });\n\n                lines.dispatch.elementClick(allData);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                focusLinesWrap.transition().duration(duration).call(lines);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n        });\n\n        renderWatch.renderEnd('lineChart immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        if(!evt.series.disableTooltip){\n            tooltip.data(evt).hidden(false);\n        }\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.focus = focus;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.state = state;\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        // Focus options, mostly passed onto focus model.\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        focusShowAxisX:    {get: function(){return focus.showXAxis();}, set: function(_){focus.showXAxis(_);}},\n        focusShowAxisY:    {get: function(){return focus.showYAxis();}, set: function(_){focus.showYAxis(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            lines.duration(duration);\n            focus.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            lines.color(color);\n            focus.color(color);\n        }},\n        interpolate: {get: function(){return lines.interpolate();}, set: function(_){\n            lines.interpolate(_);\n            focus.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n            focus.xTickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n            focus.yTickFormat(_);\n        }},\n        x: {get: function(){return lines.x();}, set: function(_){\n            lines.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return lines.y();}, set: function(_){\n            lines.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines.interactive(false);\n                lines.useVoronoi(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.lineWithFocusChart = function() {\n  return nv.models.lineChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\nnv.models.linePlusBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , lines2 = nv.models.line()\n        , bars = nv.models.historicalBar()\n        , bars2 = nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , x2Axis = nv.models.axis()\n        , y1Axis = nv.models.axis()\n        , y2Axis = nv.models.axis()\n        , y3Axis = nv.models.axis()\n        , y4Axis = nv.models.axis()\n        , legend = nv.models.legend()\n        , brush = d3.svg.brush()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 30, left: 60}\n        , marginTop = null\n        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n        , width = null\n        , height = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.defaultColor()\n        , showLegend = true\n        , focusEnable = true\n        , focusShowAxisY = false\n        , focusShowAxisX = true\n        , focusHeight = 50\n        , extent\n        , brushExtent = null\n        , x\n        , x2\n        , y1\n        , y2\n        , y3\n        , y4\n        , noData = null\n        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')\n        , transitionDuration = 0\n        , state = nv.utils.state()\n        , defaultState = null\n        , legendLeftAxisHint = ' (left axis)'\n        , legendRightAxisHint = ' (right axis)'\n        , switchYAxisOrder = false\n        ;\n\n    lines.clipEdge(true);\n    lines2.interactive(false);\n    // We don't want any points emitted for the focus chart's scatter graph.\n    lines2.pointActive(function(d) { return false });\n    xAxis.orient('bottom').tickPadding(5);\n    y1Axis.orient('left');\n    y2Axis.orient('right');\n    x2Axis.orient('bottom').tickPadding(5);\n    y3Axis.orient('left');\n    y4Axis.orient('right');\n\n    tooltip.headerEnabled(true).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var getBarsAxis = function() {\n        return switchYAxisOrder\n            ? { main: y2Axis, focus: y4Axis }\n            : { main: y1Axis, focus: y3Axis }\n    }\n\n    var getLinesAxis = function() {\n        return switchYAxisOrder\n            ? { main: y1Axis, focus: y3Axis }\n            : { main: y2Axis, focus: y4Axis }\n    }\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var allDisabled = function(data) {\n      return data.every(function(series) {\n        return series.disabled;\n      });\n    }\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight1 = nv.utils.availableHeight(height, container, margin)\n                    - (focusEnable ? focusHeight : 0),\n                availableHeight2 = focusHeight - margin2.top - margin2.bottom;\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n            if (dataBars.length && !switchYAxisOrder) {\n                x = bars.xScale();\n            } else {\n                x = lines.xScale();\n            }\n\n            x2 = x2Axis.scale();\n\n            // select the scales and series based on the position of the yAxis\n            y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();\n            y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();\n            y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();\n            y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();\n\n            var series1 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            var series2 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            x.range([0, availableWidth]);\n\n            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n                .range([0, availableWidth]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // this is the main chart\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-barsWrap');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n            // context chart is where you can focus in\n            var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n            contextEnter.append('g').attr('class', 'nv-x nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-barsWrap');\n            contextEnter.append('g').attr('class', 'nv-linesWrap');\n            contextEnter.append('g').attr('class', 'nv-brushBackground');\n            contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            //============================================================\n            // Legend\n            //------------------------------------------------------------\n\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        if(switchYAxisOrder) {\n                            series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);\n                        } else {\n                            series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);\n                        }\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    // FIXME: shouldn't this be \"- (focusEnabled ? focusHeight : 0)\"?\n                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //============================================================\n            // Context chart (focus chart) components\n            //------------------------------------------------------------\n\n            // hide or show the focus context chart\n            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');\n\n            bars2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && data[i].bar\n                }));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && !data[i].bar\n                }));\n\n            var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n                .datum(dataBars.length ? dataBars : [\n                    {values: []}\n                ]);\n            var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n                .datum(allDisabled(dataLines) ?\n                       [{values: []}] :\n                       dataLines.filter(function(dataLine) {\n                         return !dataLine.disabled;\n                       }));\n\n            g.select('.nv-context')\n                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');\n\n            bars2Wrap.transition().call(bars2);\n            lines2Wrap.transition().call(lines2);\n\n            // context (focus chart) axis controls\n            if (focusShowAxisX) {\n                x2Axis\n                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))\n                    .tickSize(-availableHeight2, 0);\n                g.select('.nv-context .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n                g.select('.nv-context .nv-x.nv-axis').transition()\n                    .call(x2Axis);\n            }\n\n            if (focusShowAxisY) {\n                y3Axis\n                    .scale(y3)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize( -availableWidth, 0);\n                y4Axis\n                    .scale(y4)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n                g.select('.nv-context .nv-y3.nv-axis')\n                    .style('opacity', dataBars.length ? 1 : 0)\n                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n                g.select('.nv-context .nv-y2.nv-axis')\n                    .style('opacity', dataLines.length ? 1 : 0)\n                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\n                g.select('.nv-context .nv-y1.nv-axis').transition()\n                    .call(y3Axis);\n                g.select('.nv-context .nv-y2.nv-axis').transition()\n                    .call(y4Axis);\n            }\n\n            // Setup Brush\n            brush.x(x2).on('brush', onBrush);\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n\n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                //.attr('y', -5)\n                .attr('height', availableHeight2);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight2 / 3;\n                return 'M' + (.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n\n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x2.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x2(d[0]) - x2.range()[0],\n                            rightWidth = x2.range()[1] - x2(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n                        d3.select(this).select('.right')\n                            .attr('x', x2(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n            function onBrush() {\n                brushExtent = brush.empty() ? null : brush.extent();\n                extent = brush.empty() ? x2.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n\n                // Prepare Main (Focus) Bars and Lines\n                bars\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n                lines\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\n                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n                    .datum(!dataBars.length ? [{values:[]}] :\n                        dataBars\n                            .map(function(d,i) {\n                                return {\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(allDisabled(dataLines) ? [{values:[]}] :\n                           dataLines\n                           .filter(function(dataLine) { return !dataLine.disabled; })\n                           .map(function(d,i) {\n                                return {\n                                    area: d.area,\n                                    fillOpacity: d.fillOpacity,\n                                    strokeWidth: d.strokeWidth,\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                // Update Main (Focus) X Axis\n                if (dataBars.length && !switchYAxisOrder) {\n                    x = bars.xScale();\n                } else {\n                    x = lines.xScale();\n                }\n\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight1, 0);\n\n                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n\n                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)\n                    .call(xAxis);\n\n                // Update Main (Focus) Bars and Lines\n                focusBarsWrap.transition().duration(transitionDuration).call(bars);\n                focusLinesWrap.transition().duration(transitionDuration).call(lines);\n\n                // Setup and Update Main (Focus) Y Axes\n                g.select('.nv-focus .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\n                y1Axis\n                    .scale(y1)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )\n                    .tickSize(-availableWidth, 0);\n                y2Axis\n                    .scale(y2)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) );\n\n                // Show the y2 rules only if y1 has none\n                if(!switchYAxisOrder) {\n                    y2Axis.tickSize(dataBars.length ? 0 : -availableWidth, 0);\n                } else {\n                    y2Axis.tickSize(dataLines.length ? 0 : -availableWidth, 0);\n                }\n\n                // Calculate opacity of the axis\n                var barsOpacity = dataBars.length ? 1 : 0;\n                var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;\n\n                var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;\n                var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;\n\n                g.select('.nv-focus .nv-y1.nv-axis')\n                    .style('opacity', y1Opacity);\n                g.select('.nv-focus .nv-y2.nv-axis')\n                    .style('opacity', y2Opacity)\n                    .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)\n                    .call(y1Axis);\n                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)\n                    .call(y2Axis);\n            }\n\n            onBrush();\n\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip\n            .duration(100)\n            .valueFormatter(function(d, i) {\n                return getLinesAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip\n            .duration(0)\n            .valueFormatter(function(d, i) {\n                return getBarsAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines = lines;\n    chart.lines2 = lines2;\n    chart.bars = bars;\n    chart.bars2 = bars2;\n    chart.xAxis = xAxis;\n    chart.x2Axis = x2Axis;\n    chart.y1Axis = y1Axis;\n    chart.y2Axis = y2Axis;\n    chart.y3Axis = y3Axis;\n    chart.y4Axis = y4Axis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},\n        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},\n        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},\n        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return margin2;}, set: function(_){\n            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;\n            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;\n            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;\n            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;\n        }},\n        duration: {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration = _;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines.x(_);\n            lines2.x(_);\n            bars.x(_);\n            bars2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines.y(_);\n            lines2.y(_);\n            bars.y(_);\n            bars2.y(_);\n        }},\n        switchYAxisOrder:    {get: function(){return switchYAxisOrder;}, set: function(_){\n            // Switch the tick format for the yAxis\n            if(switchYAxisOrder !== _) {\n                var y1 = y1Axis;\n                y1Axis = y2Axis;\n                y2Axis = y1;\n\n                var y3 = y3Axis;\n                y3Axis = y4Axis;\n                y4Axis = y3;\n            }\n            switchYAxisOrder=_;\n\n            y1Axis.orient('left');\n            y2Axis.orient('right');\n            y3Axis.orient('left');\n            y4Axis.orient('right');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , clipEdge = true\n        , stacked = false\n        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n        , color = nv.utils.defaultColor()\n        , hideable = false\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , duration = 500\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var last_datalength = 0;\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n            var nonStackableCount = 0;\n            // This function defines the requirements for render complete\n            var endFn = function(d, i) {\n                if (d.series === data.length - 1 && i === data[0].values.length - 1)\n                    return true;\n                return false;\n            };\n\n            if(hideable && data.length) hideable = [{\n                values: data[0].values.map(function(d) {\n                        return {\n                            x: d.x,\n                            y: 0,\n                            series: d.series,\n                            size: 0.01\n                        };}\n                )}];\n\n            if (stacked) {\n                var parsed = d3.layout.stack()\n                    .offset(stackOffset)\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (!data.length && hideable ? hideable : data);\n\n                parsed.forEach(function(series, i){\n                    // if series is non-stackable, use un-parsed data\n                    if (series.nonStackable) {\n                        data[i].nonStackableSeries = nonStackableCount++;\n                        parsed[i] = data[i];\n                    } else {\n                        // don't stack this seires on top of the nonStackable seriees\n                        if (i > 0 && parsed[i - 1].nonStackable){\n                            parsed[i].values.map(function(d,j){\n                                d.y0 -= parsed[i - 1].values[j].y;\n                                d.y1 = d.y0 + d.y;\n                            });\n                        }\n                    }\n                });\n                data = parsed;\n            }\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked && data.length > 0) {\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d, idx) {\n                        if (!data[idx].nonStackable) {\n                            var f = d.values[i]\n                            f.size = Math.abs(f.y);\n                            if (f.y<0)  {\n                                f.y1 = negBase;\n                                negBase = negBase - f.size;\n                            } else\n                            {\n                                f.y1 = f.size + posBase;\n                                posBase = posBase + f.size;\n                            }\n                        }\n\n                    });\n                });\n            }\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d, idx) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {\n                var domain = d.y;\n                // increase the domain range if this series is stackable\n                if (stacked && !data[d.idx].nonStackable) {\n                    if (d.y > 0){\n                        domain = d.y1\n                    } else {\n                        domain = d.y1 + d.y\n                    }\n                }\n                return domain;\n            }).concat(forceY)))\n            .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n\n            var exitTransition = renderWatch\n                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))\n                .attr('y', function(d, i, j) {\n                    var yVal = y0(0) || 0;\n                    if (stacked) {\n                        if (data[d.series] && !data[d.series].nonStackable) {\n                            yVal = y0(d.y0);\n                        }\n                    }\n                    return yVal;\n                })\n                .attr('height', 0)\n                .remove();\n            if (exitTransition.delay)\n                exitTransition.delay(function(d,i) {\n                    var delay = i * (duration / (last_datalength + 1)) - i;\n                    return delay;\n                });\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('rect.nv-bar')\n                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('rect')\n                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                    .attr('x', function(d,i,j) {\n                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )\n                    })\n                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })\n                    .attr('height', 0)\n                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })\n                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n                ;\n            bars\n                .style('fill', function(d,i,j){ return color(d, j, i);  })\n                .style('stroke', function(d,i,j){ return color(d, j, i); })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            var barSelection =\n                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))\n                    .delay(function(d,i) {\n                        return i * duration / data[0].values.length;\n                    });\n            if (stacked){\n                barSelection\n                    .attr('y', function(d,i,j) {\n                        var yVal = 0;\n                        // if stackable, stack it on top of the previous series\n                        if (!data[j].nonStackable) {\n                            yVal = y(d.y1);\n                        } else {\n                            if (getY(d,i) < 0){\n                                yVal = y(0);\n                            } else {\n                                if (y(0) - y(getY(d,i)) < -1){\n                                    yVal = y(0) - 1;\n                                } else {\n                                    yVal = y(getY(d, i)) || 0;\n                                }\n                            }\n                        }\n                        return yVal;\n                    })\n                    .attr('height', function(d,i,j) {\n                        if (!data[j].nonStackable) {\n                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 0);\n                        } else {\n                            return Math.max(Math.abs(y(getY(d,i)) - y(0)), 0) || 0;\n                        }\n                    })\n                    .attr('x', function(d,i,j) {\n                        var width = 0;\n                        if (data[j].nonStackable) {\n                            width = d.series * x.rangeBand() / data.length;\n                            if (data.length !== nonStackableCount){\n                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);\n                            }\n                        }\n                        return width;\n                    })\n                    .attr('width', function(d,i,j){\n                        if (!data[j].nonStackable) {\n                            return x.rangeBand();\n                        } else {\n                            // if all series are nonStacable, take the full width\n                            var width = (x.rangeBand() / nonStackableCount);\n                            // otherwise, nonStackable graph will be only taking the half-width\n                            // of the x rangeBand\n                            if (data.length !== nonStackableCount) {\n                                width = x.rangeBand()/(nonStackableCount*2);\n                            }\n                            return width;\n                        }\n                    });\n            }\n            else {\n                barSelection\n                    .attr('x', function(d,i) {\n                        return d.series * x.rangeBand() / data.length;\n                    })\n                    .attr('width', x.rangeBand() / data.length)\n                    .attr('y', function(d,i) {\n                        return getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 :\n                            y(getY(d,i)) || 0;\n                    })\n                    .attr('height', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n                    });\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n            // keep track of the last data value length for transition calculations\n            if (data[0] && data[0].values) {\n                last_datalength = data[0].values.length;\n            }\n\n        });\n\n        renderWatch.renderEnd('multibar immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},\n        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity: {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , interactiveLayer = nv.interactiveGuideline()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , reduceXTicks = true // if false a tick will show for every data point\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        , useInteractiveGuideline = false\n        ;\n\n    state.stacked = false // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(false);\n    xAxis\n        .orient('bottom')\n        .tickPadding(7)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function (d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function (d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var stacked = false;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition()\n                        .duration(duration)\n                        .call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text')\n                    .style('opacity', 1)\n\n                if (staggerLabels) {\n                    var getTranslate = function(x,y) {\n                        return \"translate(\" + x + \",\" + y + \")\";\n                    };\n\n                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n                    // Issue #140\n                    xTicks\n                        .selectAll(\"text\")\n                        .attr('transform', function(d,i,j) {\n                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n                        });\n\n                    var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n                    g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n                        .attr(\"transform\", function(d,i) {\n                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n                        });\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n\n                if (reduceXTicks)\n                    xTicks\n                        .filter(function(d,i) {\n                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n                        })\n                        .selectAll('text, line')\n                        .style('opacity', 0);\n\n                if(rotateLabels)\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\n                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n                    .style('opacity', 1);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n                chart.update();\n            });\n\n            if (useInteractiveGuideline) {\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    if (e.pointXValue == undefined) return;\n\n                    var singlePoint, pointIndex, pointXLocation, xValue, allData = [];\n                    data\n                        .filter(function(series, i) {\n                            series.seriesIndex = i;\n                            return !series.disabled;\n                        })\n                        .forEach(function(series,i) {\n                            pointIndex = x.domain().indexOf(e.pointXValue)\n\n                            var point = series.values[pointIndex];\n                            if (point === undefined) return;\n\n                            xValue = point.x;\n                            if (singlePoint === undefined) singlePoint = point;\n                            if (pointXLocation === undefined) pointXLocation = e.mouseX\n                            allData.push({\n                                key: series.key,\n                                value: chart.y()(point, pointIndex),\n                                color: color(series,series.seriesIndex),\n                                data: series.values[pointIndex]\n                            });\n                        });\n\n                    interactiveLayer.tooltip\n                        .data({\n                            value: xValue,\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    interactiveLayer.tooltip.hidden(true);\n                });\n            }\n            else {\n                multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n                    evt.value = chart.x()(evt.data);\n                    evt['series'] = {\n                        key: evt.data.key,\n                        value: chart.y()(evt.data),\n                        color: evt.color\n                    };\n                    tooltip.data(evt).hidden(false);\n                });\n\n                multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n\n                multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        renderWatch.renderEnd('multibarchart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},\n        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        wrapLabels:   {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontal = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getYerr = function(d) { return d.yErr }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , stacked = false\n        , showValues = false\n        , showBarLabels = false\n        , valuePadding = 60\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , valueFormat = d3.format(',.2f')\n        , delay = 1200\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , duration = 250\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0; //used to store previous scales\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            if (stacked)\n                data = d3.layout.stack()\n                    .offset('zero')\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (data);\n\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked)\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d) {\n                        var f = d.values[i]\n                        f.size = Math.abs(f.y);\n                        if (f.y<0)  {\n                            f.y1 = negBase - f.size;\n                            negBase = negBase - f.size;\n                        } else\n                        {\n                            f.y1 = posBase;\n                            posBase = posBase + f.size;\n                        }\n                    });\n                });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableHeight], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\n            if (showValues && !stacked)\n                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n            else\n                y.range(yRange || [0, availableWidth]);\n\n            x0 = x0 || x;\n            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n                });\n\n            barsEnter.append('rect')\n                .attr('width', 0)\n                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\n            bars\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            if (getYerr(data[0],0)) {\n                barsEnter.append('polyline');\n\n                bars.select('polyline')\n                    .attr('fill', 'none')\n                    .attr('points', function(d,i) {\n                        var xerr = getYerr(d,i)\n                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];\n                        xerr = xerr.map(function(e) { return y(e) - y(0); });\n                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];\n                        return a.map(function (path) { return path.join(',') }).join(' ');\n                    })\n                    .attr('transform', function(d,i) {\n                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        return 'translate(' + (getY(d,i) < 0 ? 0 : y(getY(d,i)) - y(0)) + ', ' + mid + ')'\n                    });\n            }\n\n            barsEnter.append('text');\n\n            if (showValues && !stacked) {\n                bars.select('text')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) {\n                        var t = valueFormat(getY(d,i))\n                            , yerr = getYerr(d,i);\n                        if (yerr === undefined)\n                            return t;\n                        if (!yerr.length)\n                            return t + '±' + valueFormat(Math.abs(yerr));\n                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));\n                    });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n            } else {\n                bars.selectAll('text').text('');\n            }\n\n            if (showBarLabels && !stacked) {\n                barsEnter.append('text').classed('nv-bar-label',true);\n                bars.select('text.nv-bar-label')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) { return getX(d,i) });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text.nv-bar-label')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n            }\n            else {\n                bars.selectAll('text.nv-bar-label').text('');\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            if (stacked)\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n                    })\n                    .select('rect')\n                    .attr('width', function(d,i) {\n                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0)) || 0\n                    })\n                    .attr('height', x.rangeBand() );\n            else\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        //TODO: stacked must be all positive or all negative, not both?\n                        return 'translate(' +\n                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n                            + ',' +\n                            (d.series * x.rangeBand() / data.length\n                                +\n                                x(getX(d,i)) )\n                            + ')'\n                    })\n                    .select('rect')\n                    .attr('height', x.rangeBand() / data.length )\n                    .attr('width', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0\n                    });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('multibarHorizontal immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        // this shows the group name, seems pointless?\n        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},\n        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},\n        groupSpacing: {get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity:  {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontalChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBarHorizontal()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend().height(30)\n        , controls = nv.models.legend().height(30)\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , stacked = false\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        ;\n\n    state.stacked = false; // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(stacked);\n\n    xAxis\n        .orient('left')\n        .tickPadding(5)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient('bottom')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(duration).call(chart) };\n            chart.container = this;\n\n            stacked = multibar.stacked();\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )\n                    .tickSize(-availableWidth, 0);\n\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text');\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(0,' + availableHeight + ')');\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\", y(0))\n                .attr(\"x2\", y(0))\n                .attr(\"y1\", 0)\n                .attr(\"y2\", -availableHeight)\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                stacked = multibar.stacked();\n\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n\n                chart.update();\n            });\n        });\n        renderWatch.renderEnd('multibar horizontal chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            key: evt.data.key,\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60},\n        marginTop = null,\n        color = nv.utils.defaultColor(),\n        width = null,\n        height = null,\n        showLegend = true,\n        noData = null,\n        yDomain1,\n        yDomain2,\n        getX = function(d) { return d.x },\n        getY = function(d) { return d.y},\n        interpolate = 'linear',\n        useVoronoi = true,\n        interactiveLayer = nv.interactiveGuideline(),\n        useInteractiveGuideline = false,\n        legendRightAxisHint = ' (right axis)',\n        duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear(),\n        yScale1 = d3.scale.linear(),\n        yScale2 = d3.scale.linear(),\n\n        lines1 = nv.models.line().yScale(yScale1).duration(duration),\n        lines2 = nv.models.line().yScale(yScale2).duration(duration),\n\n        scatters1 = nv.models.scatter().yScale(yScale1).duration(duration),\n        scatters2 = nv.models.scatter().yScale(yScale2).duration(duration),\n\n        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1).duration(duration),\n        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2).duration(duration),\n\n        stack1 = nv.models.stackedArea().yScale(yScale1).duration(duration),\n        stack2 = nv.models.stackedArea().yScale(yScale2).duration(duration),\n\n        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5).duration(duration),\n        yAxis1 = nv.models.axis().scale(yScale1).orient('left').duration(duration),\n        yAxis2 = nv.models.axis().scale(yScale2).orient('right').duration(duration),\n\n        legend = nv.models.legend().height(30),\n        tooltip = nv.models.tooltip(),\n        dispatch = d3.dispatch();\n\n    var charts = [lines1, lines2, scatters1, scatters2, bars1, bars2, stack1, stack2];\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});\n            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});\n            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});\n            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});\n            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});\n            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});\n            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});\n            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x }))\n                .range([0, availableWidth]);\n\n            var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            gEnter.append('g').attr('class', 'stack1Wrap');\n            gEnter.append('g').attr('class', 'stack2Wrap');\n            gEnter.append('g').attr('class', 'bars1Wrap');\n            gEnter.append('g').attr('class', 'bars2Wrap');\n            gEnter.append('g').attr('class', 'scatters1Wrap');\n            gEnter.append('g').attr('class', 'scatters2Wrap');\n            gEnter.append('g').attr('class', 'lines1Wrap');\n            gEnter.append('g').attr('class', 'lines2Wrap');\n            gEnter.append('g').attr('class', 'legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            var g = wrap.select('g');\n\n            var color_array = data.map(function(d,i) {\n                return data[i].color || color(d, i);\n            });\n\n            // Legend\n            if (!showLegend) {\n                g.select('.legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n                legend.color(color_array);\n\n                g.select('.legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            lines1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n            scatters1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));\n            scatters2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));\n            bars1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n            bars2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n            stack1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n            stack2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var lines1Wrap = g.select('.lines1Wrap')\n                .datum(dataLines1.filter(function(d){return !d.disabled}));\n            var scatters1Wrap = g.select('.scatters1Wrap')\n                .datum(dataScatters1.filter(function(d){return !d.disabled}));\n            var bars1Wrap = g.select('.bars1Wrap')\n                .datum(dataBars1.filter(function(d){return !d.disabled}));\n            var stack1Wrap = g.select('.stack1Wrap')\n                .datum(dataStack1.filter(function(d){return !d.disabled}));\n            var lines2Wrap = g.select('.lines2Wrap')\n                .datum(dataLines2.filter(function(d){return !d.disabled}));\n            var scatters2Wrap = g.select('.scatters2Wrap')\n                .datum(dataScatters2.filter(function(d){return !d.disabled}));\n            var bars2Wrap = g.select('.bars2Wrap')\n                .datum(dataBars2.filter(function(d){return !d.disabled}));\n            var stack2Wrap = g.select('.stack2Wrap')\n                .datum(dataStack2.filter(function(d){return !d.disabled}));\n\n            var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){\n                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n            }).concat([{x:0, y:0}]) : [];\n            var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){\n                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n            }).concat([{x:0, y:0}]) : [];\n\n            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            lines1.yDomain(yScale1.domain());\n            scatters1.yDomain(yScale1.domain());\n            bars1.yDomain(yScale1.domain());\n            stack1.yDomain(yScale1.domain());\n\n            lines2.yDomain(yScale2.domain());\n            scatters2.yDomain(yScale2.domain());\n            bars2.yDomain(yScale2.domain());\n            stack2.yDomain(yScale2.domain());\n\n            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\n            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\n            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n\n            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}\n            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}\n\n            xAxis\n                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                .tickSize(-availableHeight, 0);\n\n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n            d3.transition(g.select('.nv-x.nv-axis'))\n                .call(xAxis);\n\n            yAxis1\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n\n            d3.transition(g.select('.nv-y1.nv-axis'))\n                .call(yAxis1);\n\n            yAxis2\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n            d3.transition(g.select('.nv-y2.nv-axis'))\n                .call(yAxis2);\n\n            g.select('.nv-y1.nv-axis')\n                .classed('nv-disabled', series1.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[0] + ',0)');\n\n            g.select('.nv-y2.nv-axis')\n                .classed('nv-disabled', series2.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n            legend.dispatch.on('stateChange', function(newState) {\n                chart.update();\n            });\n\n            if(useInteractiveGuideline){\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching\n            //------------------------------------------------------------\n\n            function mouseover_line(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_scatter(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(100)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_stack(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.point['x'] = stack1.x()(evt.point);\n                evt.point['y'] = stack1.y()(evt.point);\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_bar(evt) {\n                var yaxis = data[evt.data.series].yAxis === 2 ? yAxis2 : yAxis1;\n\n                evt.value = bars1.x()(evt.data);\n                evt['series'] = {\n                    value: bars1.y()(evt.data),\n                    color: evt.color,\n                    key: evt.data.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n\n\n            function clearHighlights() {\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.clearHighlights();\n                } catch(e){}\n              }\n            }\n\n            function highlightPoint(serieIndex, pointIndex, b){\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.highlightPoint(serieIndex, pointIndex, b);\n                } catch(e){}\n              }\n            }\n\n            if(useInteractiveGuideline){\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    clearHighlights();\n                    var singlePoint, pointIndex, pointXLocation, allData = [];\n                    data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            return chart.x()(d,i) >= extent[0] && chart.x()(d,i) <= extent[1];\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = x(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point,\n                            yAxis: series.yAxis == 2 ? yAxis2 : yAxis1\n                        });\n                    });\n\n                    var defaultValueFormatter = function(d,i) {\n                        var yAxis = allData[i].yAxis;\n                        return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                    };\n\n                    interactiveLayer.tooltip\n                        .headerFormatter(function(d, i) {\n                            return xAxis.tickFormat()(d, i);\n                        })\n                        .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                        .data({\n                            value: chart.x()( singlePoint,pointIndex ),\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    clearHighlights();\n                });\n            } else {\n                lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                lines2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                stack2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n                bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n\n                bars1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars1.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n                bars2.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines1 = lines1;\n    chart.lines2 = lines2;\n    chart.scatters1 = scatters1;\n    chart.scatters2 = scatters2;\n    chart.bars1 = bars1;\n    chart.bars2 = bars2;\n    chart.stack1 = stack1;\n    chart.stack2 = stack2;\n    chart.xAxis = xAxis;\n    chart.yAxis1 = yAxis1;\n    chart.yAxis2 = yAxis2;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},\n        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines1.x(_);\n            lines2.x(_);\n            scatters1.x(_);\n            scatters2.x(_);\n            bars1.x(_);\n            bars2.x(_);\n            stack1.x(_);\n            stack2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines1.y(_);\n            lines2.y(_);\n            scatters1.y(_);\n            scatters2.y(_);\n            stack1.y(_);\n            stack2.y(_);\n            bars1.y(_);\n            bars2.y(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi=_;\n            lines1.useVoronoi(_);\n            lines2.useVoronoi(_);\n            stack1.useVoronoi(_);\n            stack2.useVoronoi(_);\n        }},\n\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines1.interactive(false);\n                lines1.useVoronoi(false);\n                lines2.interactive(false);\n                lines2.useVoronoi(false);\n                stack1.interactive(false);\n                stack1.useVoronoi(false);\n                stack2.interactive(false);\n                stack2.useVoronoi(false);\n                scatters1.interactive(false);\n                scatters2.interactive(false);\n            }\n        }},\n\n        duration: {get: function(){return duration;}, set: function(_) {\n            duration = _;\n            [lines1, lines2, stack1, stack2, scatters1, scatters2, xAxis, yAxis1, yAxis2].forEach(function(model){\n              model.duration(duration);\n            });\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.ohlcBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // ohlc bar width.\n            var w = (availableWidth / data[0].values.length) * .9;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            ticks.enter().append('path')\n                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n                .attr('d', function(d,i) {\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i)) - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                })\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('fill', function(d,i) { return color[0]; })\n                .attr('stroke', function(d,i) { return color[0]; })\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n\n            // the bar colors are controlled by CSS currently\n            ticks.attr('class', function(d,i,j) {\n                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;\n            });\n\n            d3.transition(ticks)\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('d', function(d,i) {\n                    var w = (availableWidth / data[0].values.length) * .9;\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i))\n                            - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-ohlcBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-ohlcBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n// Code adapted from Jason Davies' \"Parallel Coordinates\"\n// http://bl.ocks.org/jasondavies/1341281\nnv.models.parallelCoordinates = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 0, bottom: 10, left: 0}\n        , width = null\n        , height = null\n        , availableWidth = null\n        , availableHeight = null\n        , x = d3.scale.ordinal()\n        , y = {}\n        , undefinedValuesLabel = \"undefined values\"\n        , dimensionData = []\n        , enabledDimensions = []\n        , dimensionNames = []\n        , displayBrush = true\n        , color = nv.utils.defaultColor()\n        , filters = []\n        , active = []\n        , dragging = []\n        , axisWithUndefinedValues = []\n        , lineTension = 1\n        , foreground\n        , background\n        , dimensions\n        , line = d3.svg.line()\n        , axis = d3.svg.axis()\n        , dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', \"stateChange\", 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n           //Convert old data to new format (name, values)\n            if (data[0].values === undefined) {\n                var newData = [];\n                data.forEach(function (d) {\n                        var val = {};\n                        var key = Object.keys(d);\n                        key.forEach(function (k) { if (k !== \"name\") val[k] = d[k] });\n                        newData.push({ key: d.name, values: val });\n                });\n                data = newData;\n            }\n\n            var dataValues = data.map(function (d) {return d.values});\n            if (active.length === 0) {\n                active = data;\n            }; //set all active before first brush call\n            \n            dimensionNames = dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; }).map(function (d) { return d.key });\n            enabledDimensions = dimensionData.filter(function (d) { return !d.disabled; });\n            \n            // Setup Scales\n            x.rangePoints([0, availableWidth], 1).domain(enabledDimensions.map(function (d) { return d.key; }));\n\n            //Set as true if all values on an axis are missing.\n            // Extract the list of dimensions and create a scale for each.\n            var oldDomainMaxValue = {};\n            var displayMissingValuesline = false;\n            var currentTicks = [];\n            \n            dimensionNames.forEach(function(d) {\n                var extent = d3.extent(dataValues, function (p) { return +p[d]; });\n                var min = extent[0];\n                var max = extent[1];\n                var onlyUndefinedValues = false;\n                //If there is no values to display on an axis, set the extent to 0\n                if (isNaN(min) || isNaN(max)) {\n                    onlyUndefinedValues = true;\n                    min = 0;\n                    max = 0;\n                }\n                //Scale axis if there is only one value\n                if (min === max) {\n                    min = min - 1;\n                    max = max + 1;\n                }\n                var f = filters.filter(function (k) { return k.dimension == d; });\n                if (f.length !== 0) {\n                    //If there is only NaN values, keep the existing domain.\n                    if (onlyUndefinedValues) {\n                        min = y[d].domain()[0];\n                        max = y[d].domain()[1];\n                    }\n                        //If the brush extent is > max (< min), keep the extent value.\n                    else if (!f[0].hasOnlyNaN && displayBrush) {\n                        min = min > f[0].extent[0] ? f[0].extent[0] : min;\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                    }\n                        //If there is NaN values brushed be sure the brush extent is on the domain.\n                    else if (f[0].hasNaN) {\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                        oldDomainMaxValue[d] = y[d].domain()[1];\n                        displayMissingValuesline = true;\n                    }\n                }\n                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display \"undefined values\" text.\n                //The remaining 10% are used to display the missingValue line.\n                y[d] = d3.scale.linear()\n                    .domain([min, max])\n                    .range([(availableHeight - 12) * 0.9, 0]);\n\n                axisWithUndefinedValues = [];\n                y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);\n            });\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            line.interpolate('cardinal').tension(lineTension);\n            axis.orient('left');\n            var axisDrag = d3.behavior.drag()\n                        .on('dragstart', dragStart)\n                        .on('drag', dragMove)\n                        .on('dragend', dragEnd);\n\n            //Add missing value line at the bottom of the chart\n            var missingValuesline, missingValueslineText;\n            var step = x.range()[1] - x.range()[0];\n            step = isNaN(step) ? x.range()[0] : step;\n            if (!isNaN(step)) {\n                var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];\n                missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);\n                missingValuesline.enter().append('line');\n                missingValuesline.exit().remove();\n                missingValuesline.attr(\"x1\", function(d) { return d[0]; })\n                        .attr(\"y1\", function(d) { return d[1]; })\n                        .attr(\"x2\", function(d) { return d[2]; })\n                        .attr(\"y2\", function(d) { return d[3]; });\n    \n                //Add the text \"undefined values\" under the missing value line\n                missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data([undefinedValuesLabel]);\n                missingValueslineText.append('text').data([undefinedValuesLabel]);\n                missingValueslineText.enter().append('text');\n                missingValueslineText.exit().remove();\n                missingValueslineText.attr(\"y\", availableHeight)\n                        //To have the text right align with the missingValues line, substract 92 representing the text size.\n                        .attr(\"x\", availableWidth - 92 - step / 2)\n                        .text(function(d) { return d; });\n            }\n            // Add grey background lines for context.\n            background = wrap.select('.background').selectAll('path').data(data);\n            background.enter().append('path');\n            background.exit().remove();\n            background.attr('d', path);\n\n            // Add blue foreground lines for focus.\n            foreground = wrap.select('.foreground').selectAll('path').data(data);\n            foreground.enter().append('path')\n            foreground.exit().remove();\n            foreground.attr('d', path)\n                .style(\"stroke-width\", function (d, i) {\n                if (isNaN(d.strokeWidth)) { d.strokeWidth = 1;} return d.strokeWidth;})\n                .attr('stroke', function (d, i) { return d.color || color(d, i); });\n            foreground.on(\"mouseover\", function (d, i) {\n                d3.select(this).classed('hover', true).style(\"stroke-width\", d.strokeWidth + 2 + \"px\").style(\"stroke-opacity\", 1);\n                dispatch.elementMouseover({\n                    label: d.name,\n                    color: d.color || color(d, i),\n                    values: d.values,\n                    dimensions: enabledDimensions\n                });\n\n            });\n            foreground.on(\"mouseout\", function (d, i) {\n                d3.select(this).classed('hover', false).style(\"stroke-width\", d.strokeWidth + \"px\").style(\"stroke-opacity\", 0.7);\n                dispatch.elementMouseout({\n                    label: d.name,\n                    index: i\n                });\n            });\n            foreground.on('mousemove', function (d, i) {\n                dispatch.elementMousemove();\n            });\n            foreground.on('click', function (d) {\n                dispatch.elementClick({\n                    id: d.id\n                });\n            });\n            // Add a group element for each dimension.\n            dimensions = g.selectAll('.dimension').data(enabledDimensions);\n            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');\n\n            dimensions.attr('transform', function(d) { return 'translate(' + x(d.key) + ',0)'; });\n            dimensionsEnter.append('g').attr('class', 'nv-axis');\n\n            // Add an axis and title.\n            dimensionsEnter.append('text')\n                .attr('class', 'nv-label')\n                .style(\"cursor\", \"move\")\n                .attr('dy', '-1em')\n                .attr('text-anchor', 'middle')\n                .on(\"mouseover\", function(d, i) {\n                    dispatch.elementMouseover({\n                        label: d.tooltip || d.key,\n                        color: d.color \n                    });\n                })\n                .on(\"mouseout\", function(d, i) {\n                    dispatch.elementMouseout({\n                        label: d.tooltip\n                    });\n                })\n                .on('mousemove', function (d, i) {\n                    dispatch.elementMousemove();\n                })\n                .call(axisDrag);\n\n            dimensionsEnter.append('g').attr('class', 'nv-brushBackground');\n            dimensions.exit().remove();\n            dimensions.select('.nv-label').text(function (d) { return d.key });\n\n            // Add and store a brush for each axis.\n            restoreBrush(displayBrush);\n\n            var actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),\n                    extents = actives.map(function (p) { return y[p].brush.extent(); });\n            var formerActive = active.slice(0);\n\n            //Restore active values\n            active = [];\n            foreground.style(\"display\", function (d) {\n                var isActive = actives.every(function (p, i) {\n                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {\n                        return true;\n                    }\n                    return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                });\n                if (isActive)\n                    active.push(d);\n                return !isActive ? \"none\" : null;\n\n            });\n\n            if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {\n               dispatch.activeChanged(active);\n            }\n\n            // Returns the path for a given data point.\n            function path(d) {\n                return line(enabledDimensions.map(function (p) {\n                    //If value if missing, put the value on the missing value line\n                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {\n                        var domain = y[p.key].domain();\n                        var range = y[p.key].range();\n                        var min = domain[0] - (domain[1] - domain[0]) / 9;\n\n                        //If it's not already the case, allow brush to select undefined values\n                        if (axisWithUndefinedValues.indexOf(p.key) < 0) {\n\n                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);\n                            y[p.key].brush.y(newscale);\n                            axisWithUndefinedValues.push(p.key);\n                        }\n                        if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {\n                            return [x(p.key), y[p.key](min)];\n                        }\n                    }\n\n                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.\n                    if (missingValuesline !== undefined) {\n                        if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {\n                            missingValuesline.style(\"display\", \"inline\");\n                            missingValueslineText.style(\"display\", \"inline\");\n                        } else {\n                            missingValuesline.style(\"display\", \"none\");\n                            missingValueslineText.style(\"display\", \"none\");\n                        }\n                    }\n                    return [x(p.key), y[p.key](d.values[p.key])];\n                }));\n            }\n\n            function restoreBrush(visible) {\n                filters.forEach(function (f) {\n                    //If filter brushed NaN values, keep the brush on the bottom of the axis.\n                    var brushDomain = y[f.dimension].brush.y().domain();\n                    if (f.hasOnlyNaN) {\n                        f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];\n                    }\n                    if (f.hasNaN) {\n                        f.extent[0] = brushDomain[0];\n                    }\n                    if (visible)\n                        y[f.dimension].brush.extent(f.extent);\n                });\n                \n                dimensions.select('.nv-brushBackground')\n                    .each(function (d) {\n                        d3.select(this).call(y[d.key].brush);\n\n                    })\n                    .selectAll('rect')\n                    .attr('x', -8)\n                    .attr('width', 16);\n                \n                updateTicks();\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brushstart() {\n                //If brush aren't visible, show it before brushing again.\n                if (displayBrush === false) {\n                    displayBrush = true;\n                    restoreBrush(true);\n                }\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brush() {\n                actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); });\n                extents = actives.map(function(p) { return y[p].brush.extent(); });\n\n                filters = []; //erase current filters\n                actives.forEach(function(d,i) {\n                    filters[i] = {\n                        dimension: d,\n                        extent: extents[i],\n                        hasNaN: false,\n                        hasOnlyNaN: false\n                    }\n                });\n\n                active = []; //erase current active list\n                foreground.style('display', function(d) {\n                    var isActive = actives.every(function(p, i) {\n                        if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) return true;\n                        return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                    });\n                    if (isActive) active.push(d);\n                    return isActive ? null : 'none';\n                });\n                \n                updateTicks();\n                \n                dispatch.brush({\n                    filters: filters,\n                    active: active\n                });\n            }\n            function brushend() {\n                var hasActiveBrush = actives.length > 0 ? true : false;\n                filters.forEach(function (f) {\n                    if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)\n                        f.hasNaN = true;\n                    if (f.extent[1] < y[f.dimension].domain()[0])\n                        f.hasOnlyNaN = true;\n                });\n                dispatch.brushEnd(active, hasActiveBrush);\n            }           \n            function updateTicks() {\n                dimensions.select('.nv-axis')\n                    .each(function (d, i) {\n                        var f = filters.filter(function (k) { return k.dimension == d.key; });\n                        currentTicks[d.key] = y[d.key].domain();\n                        \n                        //If brush are available, display brush extent\n                        if (f.length != 0 && displayBrush)\n                        {\n                            currentTicks[d.key] = [];\n                            if (f[0].extent[1] > y[d.key].domain()[0]) \n                                currentTicks[d.key] = [f[0].extent[1]];\n                            if (f[0].extent[0] >= y[d.key].domain()[0])\n                                currentTicks[d.key].push(f[0].extent[0]);    \n                        }\n                            \n                        d3.select(this).call(axis.scale(y[d.key]).tickFormat(d.format).tickValues(currentTicks[d.key]));\n                });\n            }\n            function dragStart(d) {\n                dragging[d.key] = this.parentNode.__origin__ = x(d.key);\n                background.attr(\"visibility\", \"hidden\");\n            }\n            function dragMove(d) {\n                dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));\n                foreground.attr(\"d\", path);\n                enabledDimensions.sort(function (a, b) { return dimensionPosition(a.key) - dimensionPosition(b.key); });\n                enabledDimensions.forEach(function (d, i) { return d.currentPosition = i; });\n                x.domain(enabledDimensions.map(function (d) { return d.key; }));\n                dimensions.attr(\"transform\", function(d) { return \"translate(\" + dimensionPosition(d.key) + \")\"; });\n            }\n            function dragEnd(d, i) {\n                delete this.parentNode.__origin__;\n                delete dragging[d.key];\n                d3.select(this.parentNode).attr(\"transform\", \"translate(\" + x(d.key) + \")\");\n                foreground\n                  .attr(\"d\", path);\n                background\n                  .attr(\"d\", path)\n                  .attr(\"visibility\", null);\n\n                dispatch.dimensionsOrder(enabledDimensions);\n            }\n            function dimensionPosition(d) {\n                var v = dragging[d];\n                return v == null ? x(d) : v;\n            }\n        });\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:         {get: function(){return width;},           set: function(_){width= _;}},\n        height:        {get: function(){return height;},          set: function(_){height= _;}},\n        dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n        displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n        filters: { get: function () { return filters; }, set: function (_) { filters = _; } },\n        active: { get: function () { return active; }, set: function (_) { active = _; } },\n        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},\n        undefinedValuesLabel : {get: function(){return undefinedValuesLabel;}, set: function(_){undefinedValuesLabel=_;}},\n        \n        // deprecated options\n        dimensions: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensions', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key= k })\n            }\n        }},\n        dimensionNames: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionNames', 'use dimensionData instead');\n            dimensionNames = [];\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key = k })\n            }\n \n        }},\n        dimensionFormats: {get: function () { return dimensionData.map(function (d) { return d.format }); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionFormats', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (f) { dimensionData.push({ format: f }) })\n            } else {\n                _.forEach(function (f, i) { dimensionData[i].format = f })\n            }\n\n        }},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    =  _.top    !== undefined ? _.top    : margin.top;\n            margin.right  =  _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   =  _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.parallelCoordinatesChart = function () {\n        \"use strict\";\n        //============================================================\n        // Public Variables with Default Settings\n        //------------------------------------------------------------\n\n        var parallelCoordinates = nv.models.parallelCoordinates()\n        var legend = nv.models.legend()\n        var tooltip = nv.models.tooltip();\n        var dimensionTooltip = nv.models.tooltip();\n\n        var margin = { top: 0, right: 0, bottom: 0, left: 0 }\n        , marginTop = null\n        , width = null\n        , height = null\n        , showLegend = true\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , dimensionData = []\n        , displayBrush = true\n        , defaultState = null\n        , noData = null\n        , nanValue = \"undefined\"\n        , dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function () { return showControls ? 180 : 0 }\n        ;\n\n\t    //============================================================\n\n\t\t//============================================================\n        // Private Variables\n        //------------------------------------------------------------\n\n        var renderWatch = nv.utils.renderWatch(dispatch);\n\n        var stateGetter = function(data) {\n            return function() {\n                return {\n                    active: data.map(function(d) { return !d.disabled })\n                };\n            }\n        };\n\n        var stateSetter = function(data) {\n            return function(state) {\n                if(state.active !== undefined) {\n                    data.forEach(function(series, i) {\n                        series.disabled = !state.active[i];\n                    });\n                }\n            }\n        };\n\n        tooltip.contentGenerator(function(data) {\n            var str = '<table><thead><tr><td class=\"legend-color-guide\"><div style=\"background-color:' + data.color + '\"></div></td><td><strong>' + data.key + '</strong></td></tr></thead>';\n            if(data.series.length !== 0)\n            {\n                str = str + '<tbody><tr><td height =\"10px\"></td></tr>';\n                data.series.forEach(function(d){\n                    str = str + '<tr><td class=\"legend-color-guide\"><div style=\"background-color:' + d.color + '\"></div></td><td class=\"key\">' + d.key + '</td><td class=\"value\">' + d.value + '</td></tr>';\n                });\n                str = str + '</tbody>';\n            }\n            str = str + '</table>';\n            return str;\n        });\n\n        //============================================================\n        // Chart function\n        //------------------------------------------------------------\n\n        function chart(selection) {\n            renderWatch.reset();\n            renderWatch.models(parallelCoordinates);\n\n            selection.each(function(data) {\n                var container = d3.select(this);\n                nv.utils.initSVG(container);\n\n                var that = this;\n\n                var availableWidth = nv.utils.availableWidth(width, container, margin),\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\n                chart.update = function() { container.call(chart); };\n                chart.container = this;\n\n                state.setter(stateSetter(dimensionData), chart.update)\n                    .getter(stateGetter(dimensionData))\n                    .update();\n\n                //set state.disabled\n                state.disabled = dimensionData.map(function (d) { return !!d.disabled });\n\n                //Keep dimensions position in memory\n                dimensionData = dimensionData.map(function (d) {d.disabled = !!d.disabled; return d});\n                dimensionData.forEach(function (d, i) {\n                    d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;\n                    d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;\n                });\n\n               if (!defaultState) {\n                    var key;\n                    defaultState = {};\n                    for(key in state) {\n                        if(state[key] instanceof Array)\n                            defaultState[key] = state[key].slice(0);\n                        else\n                            defaultState[key] = state[key];\n                    }\n                }\n\n                // Display No Data message if there's nothing to show.\n                if(!data || !data.length) {\n                    nv.utils.noData(chart, container);\n                    return chart;\n                } else {\n                    container.selectAll('.nv-noData').remove();\n                }\n\n                //------------------------------------------------------------\n                // Setup containers and skeleton of chart\n\n                var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);\n                var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');\n\n                var g = wrap.select('g');\n\n                gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');\n                gEnter.append('g').attr('class', 'nv-legendWrap');\n\n                g.select(\"rect\")\n                    .attr(\"width\", availableWidth)\n                    .attr(\"height\", (availableHeight > 0) ? availableHeight : 0);\n\n                // Legend\n                if (!showLegend) {\n                    g.select('.nv-legendWrap').selectAll('*').remove();\n                } else {\n                    legend.width(availableWidth)\n                        .color(function (d) { return \"rgb(188,190,192)\"; });\n\n                    g.select('.nv-legendWrap')\n                        .datum(dimensionData.sort(function (a, b) { return a.originalPosition - b.originalPosition; }))\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n                    wrap.select('.nv-legendWrap')\n                       .attr('transform', 'translate( 0 ,' + (-margin.top) + ')');\n                }\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n                // Main Chart Component(s)\n                parallelCoordinates\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .dimensionData(dimensionData)\n                    .displayBrush(displayBrush);\n\n\t\t        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ')\n                  .datum(data);\n\n\t\t        parallelCoordinatesWrap.transition().call(parallelCoordinates);\n\n\t\t\t\t//============================================================\n                // Event Handling/Dispatching (in chart's scope)\n                //------------------------------------------------------------\n                //Display reset brush button\n\t\t        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {\n\t\t            if (hasActiveBrush) {\n\t\t                displayBrush = true;\n\t\t                dispatch.brushEnd(active);\n\t\t            } else {\n\n\t\t                displayBrush = false;\n\t\t            }\n\t\t        });\n\n\t\t        legend.dispatch.on('stateChange', function(newState) {\n\t\t            for(var key in newState) {\n\t\t                state[key] = newState[key];\n\t\t            }\n\t\t            dispatch.stateChange(state);\n\t\t            chart.update();\n\t\t        });\n\n                //Update dimensions order and display reset sorting button\n\t\t        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {\n\t\t            dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; });\n\t\t            var isSorted = false;\n\t\t            dimensionData.forEach(function (d, i) {\n\t\t                d.currentPosition = i;\n\t\t                if (d.currentPosition !== d.originalPosition)\n\t\t                    isSorted = true;\n\t\t            });\n\t\t            dispatch.dimensionsOrder(dimensionData, isSorted);\n\t\t        });\n\n\t\t\t\t// Update chart from a state object passed to event handler\n                dispatch.on('changeState', function (e) {\n\n                    if (typeof e.disabled !== 'undefined') {\n                        dimensionData.forEach(function (series, i) {\n                            series.disabled = e.disabled[i];\n                        });\n                        state.disabled = e.disabled;\n                    }\n                    chart.update();\n                });\n            });\n\n            renderWatch.renderEnd('parraleleCoordinateChart immediate');\n            return chart;\n        }\n\n\t\t//============================================================\n        // Event Handling/Dispatching (out of chart's scope)\n        //------------------------------------------------------------\n\n        parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {\n            var tp = {\n                key: evt.label,\n                color: evt.color,\n                series: []\n             }\n            if(evt.values){\n                Object.keys(evt.values).forEach(function (d) {\n                    var dim = evt.dimensions.filter(function (dd) {return dd.key === d;})[0];\n                    if(dim){\n                        var v;\n                        if (isNaN(evt.values[d]) || isNaN(parseFloat(evt.values[d]))) {\n                            v = nanValue;\n                        } else {\n                            v = dim.format(evt.values[d]);\n                        }\n                        tp.series.push({ idx: dim.currentPosition, key: d, value: v, color: dim.color });\n                    }\n                });\n                tp.series.sort(function(a,b) {return a.idx - b.idx});\n             }\n            tooltip.data(tp).hidden(false);\n        });\n\n        parallelCoordinates.dispatch.on('elementMouseout.tooltip', function(evt) {\n            tooltip.hidden(true)\n        });\n\n        parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {\n            tooltip();\n        });\n\t\t //============================================================\n        // Expose Public Variables\n        //------------------------------------------------------------\n\n\t\t// expose chart's sub-components\n        chart.dispatch = dispatch;\n        chart.parallelCoordinates = parallelCoordinates;\n        chart.legend = legend;\n        chart.tooltip = tooltip;\n        chart.options = nv.utils.optionsFunc.bind(chart);\n\n        chart._options = Object.create({}, {\n            // simple options, just get/set the necessary values\n            width: { get: function () { return width; }, set: function (_) { width = _; } },\n            height: { get: function () { return height; }, set: function (_) { height = _; } },\n            showLegend: { get: function () { return showLegend; }, set: function (_) { showLegend = _; } },\n            defaultState: { get: function () { return defaultState; }, set: function (_) { defaultState = _; } },\n            dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n            displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n            noData: { get: function () { return noData; }, set: function (_) { noData = _; } },\n            nanValue: { get: function () { return nanValue; }, set: function (_) { nanValue = _; } },\n\n            // options that require extra logic in the setter\n            margin: {\n                get: function () { return margin; },\n                set: function (_) {\n                    if (_.top !== undefined) {\n                        margin.top = _.top;\n                        marginTop = _.top;\n                    }\n                    margin.right = _.right !== undefined ? _.right : margin.right;\n                    margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n                    margin.left = _.left !== undefined ? _.left : margin.left;\n                }\n            },\n            color: {get: function(){return color;}, set: function(_){\n                    color = nv.utils.getColor(_);\n                    legend.color(color);\n                    parallelCoordinates.color(color);\n                }}\n        });\n\n        nv.utils.inheritOptions(chart, parallelCoordinates);\n        nv.utils.initOptions(chart);\n\n        return chart;\n    };\nnv.models.pie = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 500\n        , height = 500\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , valueFormat = d3.format(',.2f')\n        , showLabels = true\n        , labelsOutside = false\n        , labelType = \"key\"\n        , labelThreshold = .02 //if slice percentage is under this, don't show label\n        , donut = false\n        , title = false\n        , growOnHover = true\n        , titleOffset = 0\n        , labelSunbeamLayout = false\n        , startAngle = false\n        , padAngle = false\n        , endAngle = false\n        , cornerRadius = 0\n        , donutRatio = 0.5\n        , duration = 250\n        , arcsRadius = []\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    var arcs = [];\n    var arcsOver = [];\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right\n                , availableHeight = height - margin.top - margin.bottom\n                , radius = Math.min(availableWidth, availableHeight) / 2\n                , arcsRadiusOuter = []\n                , arcsRadiusInner = []\n                ;\n\n            container = d3.select(this)\n            if (arcsRadius.length === 0) {\n                var outer = radius - radius / 5;\n                var inner = donutRatio * radius;\n                for (var i = 0; i < data[0].length; i++) {\n                    arcsRadiusOuter.push(outer);\n                    arcsRadiusInner.push(inner);\n                }\n            } else {\n                if(growOnHover){\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 5) * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 5) * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 5); }));\n                } else {\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return d.outer * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return d.inner * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return d.inner; }));\n                }\n            }\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n            var g_pie = gEnter.append('g').attr('class', 'nv-pie');\n            gEnter.append('g').attr('class', 'nv-pieLabels');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\n            //\n            container.on('click', function(d,i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            arcs = [];\n            arcsOver = [];\n            for (var i = 0; i < data[0].length; i++) {\n\n                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);\n                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);\n\n                if (startAngle !== false) {\n                    arc.startAngle(startAngle);\n                    arcOver.startAngle(startAngle);\n                }\n                if (endAngle !== false) {\n                    arc.endAngle(endAngle);\n                    arcOver.endAngle(endAngle);\n                }\n                if (donut) {\n                    arc.innerRadius(arcsRadiusInner[i]);\n                    arcOver.innerRadius(arcsRadiusInner[i]);\n                }\n\n                if (arc.cornerRadius && cornerRadius) {\n                    arc.cornerRadius(cornerRadius);\n                    arcOver.cornerRadius(cornerRadius);\n                }\n\n                arcs.push(arc);\n                arcsOver.push(arcOver);\n            }\n\n            // Setup the Pie chart and choose the data element\n            var pie = d3.layout.pie()\n                .sort(null)\n                .value(function(d) { return d.disabled ? 0 : getY(d) });\n\n            // padAngle added in d3 3.5\n            if (pie.padAngle && padAngle) {\n                pie.padAngle(padAngle);\n            }\n\n            // if title is specified and donut, put it in the middle\n            if (donut && title) {\n                g_pie.append(\"text\").attr('class', 'nv-pie-title');\n\n                wrap.select('.nv-pie-title')\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function (d) {\n                        return title;\n                    })\n                    .style(\"font-size\", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + \"px\")\n                    .attr(\"dy\", \"0.35em\") // trick to vertically center text\n                    .attr('transform', function(d, i) {\n                        return 'translate(0, '+ titleOffset + ')';\n                    });\n            }\n\n            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);\n            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);\n\n            slices.exit().remove();\n            pieLabels.exit().remove();\n\n            var ae = slices.enter().append('g');\n            ae.attr('class', 'nv-slice');\n            ae.on('mouseover', function(d, i) {\n                d3.select(this).classed('hover', true);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(70)\n                        .attr(\"d\", arcsOver[i]);\n                }\n                dispatch.elementMouseover({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    percent: (d.endAngle - d.startAngle) / (2 * Math.PI)\n                });\n            });\n            ae.on('mouseout', function(d, i) {\n                d3.select(this).classed('hover', false);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(50)\n                        .attr(\"d\", arcs[i]);\n                }\n                dispatch.elementMouseout({data: d.data, index: i});\n            });\n            ae.on('mousemove', function(d, i) {\n                dispatch.elementMousemove({data: d.data, index: i});\n            });\n            ae.on('click', function(d, i) {\n                var element = this;\n                dispatch.elementClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    event: d3.event,\n                    element: element\n                });\n            });\n            ae.on('dblclick', function(d, i) {\n                dispatch.elementDblClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\")\n                });\n            });\n\n            slices.attr('fill', function(d,i) { return color(d.data, i); });\n            slices.attr('stroke', function(d,i) { return color(d.data, i); });\n\n            var paths = ae.append('path').each(function(d) {\n                this._current = d;\n            });\n\n            slices.select('path')\n                .transition()\n                .duration(duration)\n                .attr('d', function (d, i) { return arcs[i](d); })\n                .attrTween('d', arcTween);\n\n            if (showLabels) {\n                // This does the normal label\n                var labelsArc = [];\n                for (var i = 0; i < data[0].length; i++) {\n                    labelsArc.push(arcs[i]);\n\n                    if (labelsOutside) {\n                        if (donut) {\n                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());\n                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);\n                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);\n                        }\n                    } else if (!donut) {\n                            labelsArc[i].innerRadius(0);\n                    }\n                }\n\n                pieLabels.enter().append(\"g\").classed(\"nv-label\",true).each(function(d,i) {\n                    var group = d3.select(this);\n\n                    group.attr('transform', function (d, i) {\n                        if (labelSunbeamLayout) {\n                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                                rotateAngle -= 90;\n                            } else {\n                                rotateAngle += 90;\n                            }\n                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                        } else {\n                            d.outerRadius = radius + 10; // Set Outer Coordinate\n                            d.innerRadius = radius + 15; // Set Inner Coordinate\n                            return 'translate(' + labelsArc[i].centroid(d) + ')'\n                        }\n                    });\n\n                    group.append('rect')\n                        .style('stroke', '#fff')\n                        .style('fill', '#fff')\n                        .attr(\"rx\", 3)\n                        .attr(\"ry\", 3);\n\n                    group.append('text')\n                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                        .style('fill', '#000')\n                });\n\n                var labelLocationHash = {};\n                var avgHeight = 14;\n                var avgWidth = 140;\n                var createHashKey = function(coordinates) {\n                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n                };\n                var getSlicePercentage = function(d) {\n                    return (d.endAngle - d.startAngle) / (2 * Math.PI);\n                };\n\n                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {\n                    if (labelSunbeamLayout) {\n                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                            rotateAngle -= 90;\n                        } else {\n                            rotateAngle += 90;\n                        }\n                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                    } else {\n                        d.outerRadius = radius + 10; // Set Outer Coordinate\n                        d.innerRadius = radius + 15; // Set Inner Coordinate\n\n                        /*\n                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n                        Adjust the label's y-position to remove the overlap.\n                        */\n                        var center = labelsArc[i].centroid(d);\n                        var percent = getSlicePercentage(d);\n                        if (d.value && percent >= labelThreshold) {\n                            var hashKey = createHashKey(center);\n                            if (labelLocationHash[hashKey]) {\n                                center[1] -= avgHeight;\n                            }\n                            labelLocationHash[createHashKey(center)] = true;\n                        }\n                        return 'translate(' + center + ')'\n                    }\n                });\n\n                pieLabels.select(\".nv-label text\")\n                    .style('text-anchor', function(d,i) {\n                        //center the text on it's origin or begin/end if orthogonal aligned\n                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';\n                    })\n                    .text(function(d, i) {\n                        var percent = getSlicePercentage(d);\n                        var label = '';\n                        if (!d.value || percent < labelThreshold) return '';\n\n                        if(typeof labelType === 'function') {\n                            label = labelType(d, i, {\n                                'key': getX(d.data),\n                                'value': getY(d.data),\n                                'percent': valueFormat(percent)\n                            });\n                        } else {\n                            switch (labelType) {\n                                case 'key':\n                                    label = getX(d.data);\n                                    break;\n                                case 'value':\n                                    label = valueFormat(getY(d.data));\n                                    break;\n                                case 'percent':\n                                    label = d3.format('%')(percent);\n                                    break;\n                            }\n                        }\n                        return label;\n                    })\n                ;\n            }\n\n\n            // Computes the angle of an arc, converting from radians to degrees.\n            function angle(d) {\n                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n                return a > 90 ? a - 180 : a;\n            }\n\n            function arcTween(a, idx) {\n                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n                if (!donut) a.innerRadius = 0;\n                var i = d3.interpolate(this._current, a);\n                this._current = i(0);\n                return function (t) {\n                    return arcs[idx](i(t));\n                };\n            }\n        });\n\n        renderWatch.renderEnd('pie immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n        title:      {get: function(){return title;}, set: function(_){title=_;}},\n        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        x:          {get: function(){return getX;}, set: function(_){getX=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},\n        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},\n        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},\n        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},\n        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},\n        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},\n        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},\n        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},\n        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},\n\n        // depreciated after 1.7.1\n        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');\n        }},\n        // depreciated after 1.7.1\n        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');\n        }},\n        // deprecated after 1.7.1\n        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {\n            valueFormat=_;\n            nv.deprecated('labelFormat','use valueFormat instead');\n        }},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY=d3.functor(_);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }},\n        labelType:          {get: function(){return labelType;}, set: function(_){\n            labelType= _ || 'key';\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.pieChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var pie = nv.models.pie();\n    var legend = nv.models.legend();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , marginTop = null\n        , width = null\n        , height = null\n        , showTooltipPercent = false\n        , showLegend = true\n        , legendPosition = \"top\"\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return pie.valueFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined) {\n                data.forEach(function (series, i) {\n                    series.disabled = !state.active[i];\n                });\n            }\n        }\n    };\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(pie);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var that = this;\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            state.setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-pieWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                if (legendPosition === \"top\") {\n                    legend.width( availableWidth ).key(pie.x());\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                } else if (legendPosition === \"right\") {\n                    var legendWidth = nv.models.legend().width();\n                    if (availableWidth / 2 < legendWidth) {\n                        legendWidth = (availableWidth / 2)\n                    }\n                    legend.height(availableHeight).key(pie.x());\n                    legend.width(legendWidth);\n                    availableWidth -= legend.width();\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend)\n                        .attr('transform', 'translate(' + (availableWidth) +',0)');\n                }\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            pie.width(availableWidth).height(availableHeight);\n            var pieWrap = g.select('.nv-pieWrap').datum([data]);\n            d3.transition(pieWrap).call(pie);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState) {\n                    state[key] = newState[key];\n                }\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('pieChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    pie.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    pie.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    pie.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.legend = legend;\n    chart.dispatch = dispatch;\n    chart.pie = pie;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:              {get: function(){return width;},                set: function(_){width=_;}},\n        height:             {get: function(){return height;},               set: function(_){height=_;}},\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n        showLegend:         {get: function(){return showLegend;},           set: function(_){showLegend=_;}},\n        legendPosition:     {get: function(){return legendPosition;},       set: function(_){legendPosition=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            legend.color(color);\n            pie.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            pie.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n    nv.utils.inheritOptions(chart, pie);\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sankey = function() {\n    'use strict';\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sankey = {},\n        nodeWidth = 24,\n        nodePadding = 8,\n        size = [1, 1],\n        nodes = [],\n        links = [],\n        sinksRight = true;\n\n    var layout = function(iterations) {\n        computeNodeLinks();\n        computeNodeValues();\n        computeNodeBreadths();\n        computeNodeDepths(iterations);\n    };\n\n    var relayout = function() {\n        computeLinkDepths();\n    };\n\n    // SVG path data generator, to be used as 'd' attribute on 'path' element selection.\n    var link = function() {\n        var curvature = .5;\n\n        function link(d) {\n\n            var x0 = d.source.x + d.source.dx,\n                x1 = d.target.x,\n                xi = d3.interpolateNumber(x0, x1),\n                x2 = xi(curvature),\n                x3 = xi(1 - curvature),\n                y0 = d.source.y + d.sy + d.dy / 2,\n                y1 = d.target.y + d.ty + d.dy / 2;\n            var linkPath = 'M' + x0 + ',' + y0\n                + 'C' + x2 + ',' + y0\n                + ' ' + x3 + ',' + y1\n                + ' ' + x1 + ',' + y1;\n            return linkPath;\n        }\n\n        link.curvature = function(_) {\n            if (!arguments.length) return curvature;\n            curvature = +_;\n            return link;\n        };\n\n        return link;\n    };\n\n    // Y-position of the middle of a node.\n    var center = function(node) {\n        return node.y + node.dy / 2;\n    };\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    // Populate the sourceLinks and targetLinks for each node.\n    // Also, if the source and target are not objects, assume they are indices.\n    function computeNodeLinks() {\n        nodes.forEach(function(node) {\n            // Links that have this node as source.\n            node.sourceLinks = [];\n            // Links that have this node as target.\n            node.targetLinks = [];\n        });\n        links.forEach(function(link) {\n            var source = link.source,\n                target = link.target;\n            if (typeof source === 'number') source = link.source = nodes[link.source];\n            if (typeof target === 'number') target = link.target = nodes[link.target];\n            source.sourceLinks.push(link);\n            target.targetLinks.push(link);\n        });\n    }\n\n    // Compute the value (size) of each node by summing the associated links.\n    function computeNodeValues() {\n        nodes.forEach(function(node) {\n            node.value = Math.max(\n                d3.sum(node.sourceLinks, value),\n                d3.sum(node.targetLinks, value)\n            );\n        });\n    }\n\n    // Iteratively assign the breadth (x-position) for each node.\n    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n    // nodes with no incoming links are assigned breadth zero, while\n    // nodes with no outgoing links are assigned the maximum breadth.\n    function computeNodeBreadths() {\n        //\n        var remainingNodes = nodes,\n            nextNodes,\n            x = 0;\n\n        // Work from left to right.\n        // Keep updating the breath (x-position) of nodes that are target of recently updated nodes.\n        //\n        while (remainingNodes.length && x < nodes.length) {\n            nextNodes = [];\n            remainingNodes.forEach(function(node) {\n                node.x = x;\n                node.dx = nodeWidth;\n                node.sourceLinks.forEach(function(link) {\n                    if (nextNodes.indexOf(link.target) < 0) {\n                        nextNodes.push(link.target);\n                    }\n                });\n            });\n            remainingNodes = nextNodes;\n            ++x;\n            //\n        }\n\n        // Optionally move pure sinks always to the right.\n        if (sinksRight) {\n            moveSinksRight(x);\n        }\n\n        scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n    }\n\n    function moveSourcesRight() {\n        nodes.forEach(function(node) {\n            if (!node.targetLinks.length) {\n                node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n            }\n        });\n    }\n\n    function moveSinksRight(x) {\n        nodes.forEach(function(node) {\n            if (!node.sourceLinks.length) {\n                node.x = x - 1;\n            }\n        });\n    }\n\n    function scaleNodeBreadths(kx) {\n        nodes.forEach(function(node) {\n            node.x *= kx;\n        });\n    }\n\n    // Compute the depth (y-position) for each node.\n    function computeNodeDepths(iterations) {\n        // Group nodes by breath.\n        var nodesByBreadth = d3.nest()\n            .key(function(d) { return d.x; })\n            .sortKeys(d3.ascending)\n            .entries(nodes)\n            .map(function(d) { return d.values; });\n\n        //\n        initializeNodeDepth();\n        resolveCollisions();\n        computeLinkDepths();\n        for (var alpha = 1; iterations > 0; --iterations) {\n            relaxRightToLeft(alpha *= .99);\n            resolveCollisions();\n            computeLinkDepths();\n            relaxLeftToRight(alpha);\n            resolveCollisions();\n            computeLinkDepths();\n        }\n\n        function initializeNodeDepth() {\n            // Calculate vertical scaling factor.\n            var ky = d3.min(nodesByBreadth, function(nodes) {\n                return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n            });\n\n            nodesByBreadth.forEach(function(nodes) {\n                nodes.forEach(function(node, i) {\n                    node.y = i;\n                    node.dy = node.value * ky;\n                });\n            });\n\n            links.forEach(function(link) {\n                link.dy = link.value * ky;\n            });\n        }\n\n        function relaxLeftToRight(alpha) {\n            nodesByBreadth.forEach(function(nodes, breadth) {\n                nodes.forEach(function(node) {\n                    if (node.targetLinks.length) {\n                        // Value-weighted average of the y-position of source node centers linked to this node.\n                        var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedSource(link) {\n                return (link.source.y + link.sy + link.dy / 2) * link.value;\n            }\n        }\n\n        function relaxRightToLeft(alpha) {\n            nodesByBreadth.slice().reverse().forEach(function(nodes) {\n                nodes.forEach(function(node) {\n                    if (node.sourceLinks.length) {\n                        // Value-weighted average of the y-positions of target nodes linked to this node.\n                        var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedTarget(link) {\n                return (link.target.y + link.ty + link.dy / 2) * link.value;\n            }\n        }\n\n        function resolveCollisions() {\n            nodesByBreadth.forEach(function(nodes) {\n                var node,\n                    dy,\n                    y0 = 0,\n                    n = nodes.length,\n                    i;\n\n                // Push any overlapping nodes down.\n                nodes.sort(ascendingDepth);\n                for (i = 0; i < n; ++i) {\n                    node = nodes[i];\n                    dy = y0 - node.y;\n                    if (dy > 0) node.y += dy;\n                    y0 = node.y + node.dy + nodePadding;\n                }\n\n                // If the bottommost node goes outside the bounds, push it back up.\n                dy = y0 - nodePadding - size[1];\n                if (dy > 0) {\n                    y0 = node.y -= dy;\n\n                    // Push any overlapping nodes back up.\n                    for (i = n - 2; i >= 0; --i) {\n                        node = nodes[i];\n                        dy = node.y + node.dy + nodePadding - y0;\n                        if (dy > 0) node.y -= dy;\n                        y0 = node.y;\n                    }\n                }\n            });\n        }\n\n        function ascendingDepth(a, b) {\n            return a.y - b.y;\n        }\n    }\n\n    // Compute y-offset of the source endpoint (sy) and target endpoints (ty) of links,\n    // relative to the source/target node's y-position.\n    function computeLinkDepths() {\n        nodes.forEach(function(node) {\n            node.sourceLinks.sort(ascendingTargetDepth);\n            node.targetLinks.sort(ascendingSourceDepth);\n        });\n        nodes.forEach(function(node) {\n            var sy = 0, ty = 0;\n            node.sourceLinks.forEach(function(link) {\n                link.sy = sy;\n                sy += link.dy;\n            });\n            node.targetLinks.forEach(function(link) {\n                link.ty = ty;\n                ty += link.dy;\n            });\n        });\n\n        function ascendingSourceDepth(a, b) {\n            return a.source.y - b.source.y;\n        }\n\n        function ascendingTargetDepth(a, b) {\n            return a.target.y - b.target.y;\n        }\n    }\n\n    // Value property accessor.\n    function value(x) {\n        return x.value;\n    }\n\n    sankey.options = nv.utils.optionsFunc.bind(sankey);\n    sankey._options = Object.create({}, {\n        nodeWidth:    {get: function(){return nodeWidth;},   set: function(_){nodeWidth=+_;}},\n        nodePadding:  {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        nodes:        {get: function(){return nodes;},       set: function(_){nodes=_;}},\n        links:        {get: function(){return links ;},      set: function(_){links=_;}},\n        size:         {get: function(){return size;},        set: function(_){size=_;}},\n        sinksRight:   {get: function(){return sinksRight;},  set: function(_){sinksRight=_;}},\n\n        layout:       {get: function(){layout(32);},         set: function(_){layout(_);}},\n        relayout:     {get: function(){relayout();},         set: function(_){}},\n        center:       {get: function(){return center();},    set: function(_){\n            if(typeof _ === 'function'){\n                center=_;\n            }\n        }},\n        link:         {get: function(){return link();},      set: function(_){\n            if(typeof _ === 'function'){\n                link=_;\n            }\n            return link();\n        }}\n    });\n\n    nv.utils.initOptions(sankey);\n\n    return sankey;\n};\nnv.models.sankeyChart = function() {\n    \"use strict\";\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , sankey = nv.models.sankey()\n        , width = 600\n        , height = 400\n        , nodeWidth = 36\n        , nodePadding =  40\n        , units = 'units'\n        , center = undefined\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var formatNumber = d3.format(',.0f');    // zero decimal places\n    var format = function(d) {\n        return formatNumber(d) + ' ' + units;\n    };\n    var color = d3.scale.category20();\n    var linkTitle = function(d){\n        return d.source.name + ' → ' + d.target.name + '\\n' + format(d.value);\n    };\n    var nodeFillColor = function(d){\n        return d.color = color(d.name.replace(/ .*/, ''));\n    };\n    var nodeStrokeColor = function(d){\n        return d3.rgb(d.color).darker(2);\n    };\n    var nodeTitle = function(d){\n        return d.name + '\\n' + format(d.value);\n    };\n\n    var showError = function(element, message) {\n        element.append('text')\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('class', 'nvd3-sankey-chart-error')\n            .attr('text-anchor', 'middle')\n            .text(message);\n    };\n\n    function chart(selection) {\n        selection.each(function(data) {\n\n            var testData = {\n                nodes:\n                    [\n                        {'node': 1, 'name': 'Test 1'},\n                        {'node': 2, 'name': 'Test 2'},\n                        {'node': 3, 'name': 'Test 3'},\n                        {'node': 4, 'name': 'Test 4'},\n                        {'node': 5, 'name': 'Test 5'},\n                        {'node': 6, 'name': 'Test 6'}\n                    ],\n                links:\n                    [\n                        {'source': 0, 'target': 1, 'value': 2295},\n                        {'source': 0, 'target': 5, 'value': 1199},\n                        {'source': 1, 'target': 2, 'value': 1119},\n                        {'source': 1, 'target': 5, 'value': 1176},\n                        {'source': 2, 'target': 3, 'value': 487},\n                        {'source': 2, 'target': 5, 'value': 632},\n                        {'source': 3, 'target': 4, 'value': 301},\n                        {'source': 3, 'target': 5, 'value': 186}\n                    ]\n            };\n\n            // Error handling\n            var isDataValid = false;\n            var dataAvailable = false;\n\n            // check if data is valid\n            if(\n                (typeof data['nodes'] === 'object' && data['nodes'].length) >= 0 &&\n                (typeof data['links'] === 'object' && data['links'].length) >= 0\n            ){\n                isDataValid = true;\n            }\n\n            // check if data is available\n            if(\n                data['nodes'] && data['nodes'].length > 0 &&\n                data['links'] && data['links'].length > 0\n            ) {\n                dataAvailable = true;\n            }\n\n            // show error\n            if(!isDataValid) {\n                console.error('NVD3 Sankey chart error:', 'invalid data format for', data);\n                console.info('Valid data format is: ', testData, JSON.stringify(testData));\n                showError(selection, 'Error loading chart, data is invalid');\n                return false;\n            }\n\n            // TODO use nv.utils.noData\n            if(!dataAvailable) {\n                showError(selection, 'No data available');\n                return false;\n            }\n\n            // No errors, continue\n\n            // append the svg canvas to the page\n            var svg = selection.append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .append('g')\n                .attr('class', 'nvd3 nv-wrap nv-sankeyChart');\n\n            // Set the sankey diagram properties\n            sankey\n                .nodeWidth(nodeWidth)\n                .nodePadding(nodePadding)\n                .size([width, height]);\n\n            var path = sankey.link();\n\n            sankey\n                .nodes(data.nodes)\n                .links(data.links)\n                .layout(32)\n                .center(center);\n\n            // add in the links\n            var link = svg.append('g').selectAll('.link')\n                .data(data.links)\n                .enter().append('path')\n                .attr('class', 'link')\n                .attr('d', path)\n                .style('stroke-width', function(d) { return Math.max(1, d.dy); })\n            .sort(function(a,b) { return b.dy - a.dy; });\n\n            // add the link titles\n            link.append('title')\n                .text(linkTitle);\n\n            // add in the nodes\n            var node = svg.append('g').selectAll('.node')\n                .data(data.nodes)\n                .enter().append('g')\n                .attr('class', 'node')\n                .attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; })\n                .call(\n                    d3.behavior\n                        .drag()\n                        .origin(function(d) { return d; })\n                        .on('dragstart', function() {\n                            this.parentNode.appendChild(this);\n                        })\n                        .on('drag', dragmove)\n                );\n\n            // add the rectangles for the nodes\n            node.append('rect')\n                .attr('height', function(d) { return d.dy; })\n                .attr('width', sankey.nodeWidth())\n                .style('fill', nodeFillColor)\n                .style('stroke', nodeStrokeColor)\n                .append('title')\n                .text(nodeTitle);\n\n            // add in the title for the nodes\n            node.append('text')\n                .attr('x', -6)\n                .attr('y', function(d) { return d.dy / 2; })\n                .attr('dy', '.35em')\n                .attr('text-anchor', 'end')\n                .attr('transform', null)\n                .text(function(d) { return d.name; })\n                .filter(function(d) { return d.x < width / 2; })\n                .attr('x', 6 + sankey.nodeWidth())\n                .attr('text-anchor', 'start');\n\n            // the function for moving the nodes\n            function dragmove(d) {\n                d3.select(this).attr('transform',\n                'translate(' + d.x + ',' + (\n                    d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))\n                ) + ')');\n                sankey.relayout();\n                link.attr('d', path);\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        units:           {get: function(){return units;},       set: function(_){units=_;}},\n        width:           {get: function(){return width;},       set: function(_){width=_;}},\n        height:          {get: function(){return height;},      set: function(_){height=_;}},\n        format:          {get: function(){return format;},      set: function(_){format=_;}},\n        linkTitle:       {get: function(){return linkTitle;},   set: function(_){linkTitle=_;}},\n        nodeWidth:       {get: function(){return nodeWidth;},   set: function(_){nodeWidth=_;}},\n        nodePadding:     {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        center:          {get: function(){return center},       set: function(_){center=_}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        nodeStyle: {get: function(){return {};}, set: function(_){\n            nodeFillColor   = _.fillColor   !== undefined ? _.fillColor   : nodeFillColor;\n            nodeStrokeColor = _.strokeColor !== undefined ? _.strokeColor : nodeStrokeColor;\n            nodeTitle       = _.title       !== undefined ? _.title       : nodeTitle;\n        }}\n\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.scatter = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n        , width        = null\n        , height       = null\n        , color        = nv.utils.defaultColor() // chooses color\n        , pointBorderColor = null\n        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n        , container    = null\n        , x            = d3.scale.linear()\n        , y            = d3.scale.linear()\n        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n        , getX         = function(d) { return d.x } // accessor to get the x value\n        , getY         = function(d) { return d.y } // accessor to get the y value\n        , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , forceY       = [] // List of numbers to Force into the Y scale\n        , forceSize    = [] // List of numbers to Force into the Size scale\n        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n        , clipEdge     = false // if true, masks points within x and y scale\n        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n        , showVoronoi  = false // display the voronoi areas\n        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n        , xDomain      = null // Override x domain (skips the calculation from data)\n        , yDomain      = null // Override y domain\n        , xRange       = null // Override x range\n        , yRange       = null // Override y range\n        , sizeDomain   = null // Override point size domain\n        , sizeRange    = null\n        , singlePoint  = false\n        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        , useVoronoi   = true\n        , duration     = 250\n        , interactiveUpdateDelay = 300\n        , showLabels    = false\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0, z0 // used to store previous scales\n        , width0\n        , height0\n        , timeoutID\n        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        , _sizeRange_def = [16, 256]\n        , _cache = {}\n        ;\n\n    function getCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        val = _cache[key] = _cache[key] || {};\n        return val;\n    }\n\n    function delCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        delete _cache[key];\n    }\n\n    function getDiffs(d) {\n        var i, key, val,\n            cache = getCache(d),\n            diffs = false;\n        for (i = 1; i < arguments.length; i += 2) {\n            key = arguments[i];\n            val = arguments[i + 1](d[0], d[1]);\n            if (cache[key] !== val || !cache.hasOwnProperty(key)) {\n                cache[key] = val;\n                diffs = true;\n            }\n        }\n        return diffs;\n    }\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            var logScale = chart.yScale().name === d3.scale.log().name ? true : false;\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n                d3.merge(\n                    data.map(function(d) {\n                        return d.values.map(function(d,i) {\n                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n                        })\n                    })\n                );\n\n            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\n            if (padData && data[0])\n                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n             if (logScale) {\n                    var min = d3.min(seriesData.map(function(d) { if (d.y !== 0) return d.y; }));\n                    y.clamp(true)\n                        .domain(yDomain || d3.extent(seriesData.map(function(d) {\n                            if (d.y !== 0) return d.y;\n                            else return min * 0.1;\n                        }).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                } else {\n                        y.domain(yDomain || d3.extent(seriesData.map(function (d) { return d.y;}).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                }\n\n            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n                .range(sizeRange || _sizeRange_def);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];\n\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            if ( isNaN(x.domain()[0])) {\n                x.domain([-1,1]);\n            }\n\n            if ( isNaN(y.domain()[0])) {\n                y.domain([-1,1]);\n            }\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n            z0 = z0 || z;\n\n            var scaleDiff = x(1) !== x0(1) || y(1) !== y0(1) || z(1) !== z0(1);\n\n            width0 = width0 || width;\n            height0 = height0 || height;\n\n            var sizeDiff = width0 !== width || height0 !== height;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.classed('nv-single-point', singlePoint);\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-point-paths');\n            wrapEnter.append('g').attr('class', 'nv-point-clips');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect')\n                .attr('transform', 'translate( -10, -10)');\n                \n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth + 20)\n                .attr('height', (availableHeight > 0) ? availableHeight + 20 : 0);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            function updateInteractiveLayer() {\n                // Always clear needs-update flag regardless of whether or not\n                // we will actually do anything (avoids needless invocations).\n                needsUpdate = false;\n\n                if (!interactive) return false;\n\n                // inject series and point index for reference into voronoi\n                if (useVoronoi === true) {\n                    var vertices = d3.merge(data.map(function(group, groupIndex) {\n                            return group.values\n                                .map(function(point, pointIndex) {\n                                    // *Adding noise to make duplicates very unlikely\n                                    // *Injecting series and point index for reference\n                                    /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n                                     */\n                                    var pX = getX(point,pointIndex);\n                                    var pY = getY(point,pointIndex);\n\n                                    return [nv.utils.NaNtoZero(x(pX))+ Math.random() * 1e-4,\n                                            nv.utils.NaNtoZero(y(pY))+ Math.random() * 1e-4,\n                                        groupIndex,\n                                        pointIndex, point]; //temp hack to add noise until I think of a better way so there are no duplicates\n                                })\n                                .filter(function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n                                })\n                        })\n                    );\n\n                    if (vertices.length == 0) return false;  // No active points, we're done\n                    if (vertices.length < 3) {\n                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n                    }\n\n                    // keep voronoi sections from going more than 10 outside of graph\n                    // to avoid overlap with other things like legend etc\n                    var bounds = d3.geom.polygon([\n                        [-10,-10],\n                        [-10,height + 10],\n                        [width + 10,height + 10],\n                        [width + 10,-10]\n                    ]);\n\n                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n                        return {\n                            'data': bounds.clip(d),\n                            'series': vertices[i][2],\n                            'point': vertices[i][3]\n                        }\n                    });\n\n                    // nuke all voronoi paths on reload and recreate them\n                    wrap.select('.nv-point-paths').selectAll('path').remove();\n                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);\n                    var vPointPaths = pointPaths\n                        .enter().append(\"svg:path\")\n                        .attr(\"d\", function(d) {\n                            if (!d || !d.data || d.data.length === 0)\n                                return 'M 0 0';\n                            else\n                                return \"M\" + d.data.join(\",\") + \"Z\";\n                        })\n                        .attr(\"id\", function(d,i) {\n                            return \"nv-path-\"+i; })\n                        .attr(\"clip-path\", function(d,i) { return \"url(#nv-clip-\"+id+\"-\"+i+\")\"; })\n                        ;\n\n                    // good for debugging point hover issues\n                    if (showVoronoi) {\n                        vPointPaths.style(\"fill\", d3.rgb(230, 230, 230))\n                            .style('fill-opacity', 0.4)\n                            .style('stroke-opacity', 1)\n                            .style(\"stroke\", d3.rgb(200,200,200));\n                    }\n\n                    if (clipVoronoi) {\n                        // voronoi sections are already set to clip,\n                        // just create the circles with the IDs they expect\n                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom\n                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);\n                        var vPointClips = pointClips\n                            .enter().append(\"svg:clipPath\")\n                            .attr(\"id\", function(d, i) { return \"nv-clip-\"+id+\"-\"+i;})\n                            .append(\"svg:circle\")\n                            .attr('cx', function(d) { return d[0]; })\n                            .attr('cy', function(d) { return d[1]; })\n                            .attr('r', clipRadius);\n                    }\n\n                    var mouseEventCallback = function(el, d, mDispatch) {\n                        if (needsUpdate) return 0;\n                        var series = data[d.series];\n                        if (series === undefined) return;\n                        var point  = series.values[d.point];\n                        point['color'] = color(series, d.series);\n\n                        // standardize attributes for tooltip.\n                        point['x'] = getX(point);\n                        point['y'] = getY(point);\n\n                        // can't just get box of event node since it's actually a voronoi polygon\n                        var box = container.node().getBoundingClientRect();\n                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;\n                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n\n                        var pos = {\n                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,\n                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10\n                        };\n\n                        mDispatch({\n                            point: point,\n                            series: series,\n                            pos: pos,\n                            relativePos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n                            seriesIndex: d.series,\n                            pointIndex: d.point,\n                            event: d3.event,\n                            element: el\n                        });\n                    };\n\n                    pointPaths\n                        .on('click', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementClick);\n                        })\n                        .on('dblclick', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementDblClick);\n                        })\n                        .on('mouseover', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementMouseover);\n                        })\n                        .on('mouseout', function(d, i) {\n                            mouseEventCallback(this, d, dispatch.elementMouseout);\n                        });\n\n                } else {\n                    // add event handlers to points instead voronoi paths\n                    wrap.select('.nv-groups').selectAll('.nv-group')\n                        .selectAll('.nv-point')\n                        //.data(dataWithPoints)\n                        //.style('pointer-events', 'auto') // recativate events, disabled by css\n                        .on('click', function(d,i) {\n                            //nv.log('test', d, i);\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n                            var element = this;\n                            dispatch.elementClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top], //TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                event: d3.event,\n                                element: element\n                            });\n                        })\n                        .on('dblclick', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementDblClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i\n                            });\n                        })\n                        .on('mouseover', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseover({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        })\n                        .on('mouseout', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseout({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        });\n                }\n            }\n\n            needsUpdate = true;\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .remove();\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('nv-noninteractive', !interactive)\n                .classed('hover', function(d) { return d.hover });\n            groups.watchTransition(renderWatch, 'scatter: groups')\n                .style('fill', function(d,i) { return color(d, i) })\n                .style('stroke', function(d,i) { return d.pointBorderColor || pointBorderColor || color(d, i) })\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .5);\n\n            // create the points, maintaining their IDs from the original data set\n            var points = groups.selectAll('path.nv-point')\n                .data(function(d) {\n                    return d.values.map(\n                        function (point, pointIndex) {\n                            return [point, pointIndex]\n                        }).filter(\n                            function(pointArray, pointIndex) {\n                                return pointActive(pointArray[0], pointIndex)\n                            })\n                    });\n            points.enter().append('path')\n                .attr('class', function (d) {\n                    return 'nv-point nv-point-' + d[1];\n                })\n                .style('fill', function (d) { return d.color })\n                .style('stroke', function (d) { return d.color })\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')'\n                })\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n            points.exit().each(delCache).remove();\n            groups.exit().selectAll('path.nv-point')\n                .watchTransition(renderWatch, 'scatter exit')\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                })\n                .remove();\n            // Update points position only if \"x\" or \"y\" have changed\n            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'x', getX, 'y', getY); })\n                .watchTransition(renderWatch, 'scatter points')\n                .attr('transform', function(d) {\n                    //nv.log(d, getX(d[0],d[1]), x(getX(d[0],d[1])));\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                });\n            // Update points appearance only if \"shape\" or \"size\" have changed\n            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'shape', getShape, 'size', getSize); })\n                .watchTransition(renderWatch, 'scatter points')\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n\n            // add label a label to scatter chart\n            if(showLabels)\n            {\n                var titles =  groups.selectAll('.nv-label')\n                    .data(function(d) {\n                        return d.values.map(\n                            function (point, pointIndex) {\n                                return [point, pointIndex]\n                            }).filter(\n                                function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[0], pointIndex)\n                                })\n                        });\n\n                titles.enter().append('text')\n                    .style('fill', function (d,i) {\n                        return d.color })\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 1)\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + Math.sqrt(z(getSize(d[0],d[1]))/Math.PI) + 2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')';\n                    })\n                    .text(function(d,i){\n                        return d[0].label;});\n\n                titles.exit().remove();\n                groups.exit().selectAll('path.nv-label')\n                    .watchTransition(renderWatch, 'scatter exit')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')';\n                    })\n                    .remove();\n               titles.each(function(d) {\n                  d3.select(this)\n                    .classed('nv-label', true)\n                    .classed('nv-label-' + d[1], false)\n                    .classed('hover',false);\n                });\n                titles.watchTransition(renderWatch, 'scatter labels')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                    });\n            }\n\n            // Delay updating the invisible interactive layer for smoother animation\n            if( interactiveUpdateDelay )\n            {\n                clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n                timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay );\n            }\n            else\n            {\n                updateInteractiveLayer();\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n            z0 = z.copy();\n\n            width0 = width;\n            height0 = height;\n\n        });\n        renderWatch.renderEnd('scatter immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // utility function calls provided by this chart\n    chart._calls = new function() {\n        this.clearHighlights = function () {\n            nv.dom.write(function() {\n                container.selectAll(\".nv-point.hover\").classed(\"hover\", false);\n            });\n            return null;\n        };\n        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {\n            nv.dom.write(function() {\n                container.select('.nv-groups')\n                  .selectAll(\".nv-series-\" + seriesIndex)\n                  .selectAll(\".nv-point-\" + pointIndex)\n                  .classed(\"hover\", isHoverOver);\n            });\n        };\n    };\n\n    // trigger calls from events too\n    dispatch.on('elementMouseover.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);\n    });\n\n    dispatch.on('elementMouseout.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);\n    });\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:        {get: function(){return width;}, set: function(_){width=_;}},\n        height:       {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:       {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:       {get: function(){return y;}, set: function(_){y=_;}},\n        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},\n        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},\n        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},\n        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},\n        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},\n        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},\n        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},\n        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},\n        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},\n        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        interactiveUpdateDelay: {get:function(){return interactiveUpdateDelay;}, set: function(_){interactiveUpdateDelay=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){ showLabels = _;}},\n        pointBorderColor: {get: function(){return pointBorderColor;}, set: function(_){pointBorderColor=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},\n        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi = _;\n            if (useVoronoi === false) {\n                clipVoronoi = false;\n            }\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.scatterChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var scatter      = nv.models.scatter()\n        , xAxis        = nv.models.axis()\n        , yAxis        = nv.models.axis()\n        , legend       = nv.models.legend()\n        , distX        = nv.models.distribution()\n        , distY        = nv.models.distribution()\n        , tooltip      = nv.models.tooltip()\n        ;\n\n    var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n        , marginTop = null\n        , width        = null\n        , height       = null\n        , container    = null\n        , color        = nv.utils.defaultColor()\n        , x            = scatter.xScale()\n        , y            = scatter.yScale()\n        , showDistX    = false\n        , showDistY    = false\n        , showLegend   = true\n        , showXAxis    = true\n        , showYAxis    = true\n        , rightAlignYAxis = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , noData       = null\n        , duration = 250\n        , showLabels    = false\n        ;\n\n    scatter.xScale(x).yScale(y);\n    xAxis.orient('bottom').tickPadding(10);\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickPadding(10)\n    ;\n    distX.axis('x');\n    distY.axis('y');\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0\n        , renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        if (showDistX) renderWatch.models(distX);\n        if (showDistY) renderWatch.models(distY);\n\n        selection.each(function(data) {\n            var that = this;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                renderWatch.renderEnd('scatter immediate');\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            // background for pointer events\n            gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n            gEnter.append('g').attr('class', 'nv-distWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = availableWidth;\n                legend.width(legendWidth);\n\n                wrap.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, i);\n                    return d.color;\n                }).filter(function(d,i) { return !data[i].disabled }))\n                .showLabels(showLabels);\n\n            wrap.select('.nv-scatterWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n                .call(scatter);\n\n\n            wrap.select('.nv-regressionLinesWrap')\n                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\n            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n                .data(function (d) {\n                    return d;\n                });\n\n            regWrap.enter().append('g').attr('class', 'nv-regLines');\n\n            var regLine = regWrap.selectAll('.nv-regLine')\n                .data(function (d) {\n                    return [d]\n                });\n\n            regLine.enter()\n                .append('line').attr('class', 'nv-regLine')\n                .style('stroke-opacity', 0);\n\n            // don't add lines unless we have slope and intercept to use\n            regLine.filter(function(d) {\n                return d.intercept && d.slope;\n            })\n                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')\n                .attr('x1', x.range()[0])\n                .attr('x2', x.range()[1])\n                .attr('y1', function (d, i) {\n                    return y(x.domain()[0] * d.slope + d.intercept)\n                })\n                .attr('y2', function (d, i) {\n                    return y(x.domain()[1] * d.slope + d.intercept)\n                })\n                .style('stroke', function (d, i, j) {\n                    return color(d, j)\n                })\n                .style('stroke-opacity', function (d, i) {\n                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1\n                });\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight , 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            // Setup Distribution\n            if (showDistX) {\n                distX\n                    .getData(scatter.x())\n                    .scale(x)\n                    .width(availableWidth)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionX');\n                g.select('.nv-distributionX')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distX);\n            }\n\n            if (showDistY) {\n                distY\n                    .getData(scatter.y())\n                    .scale(y)\n                    .width(availableHeight)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionY');\n                g.select('.nv-distributionY')\n                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distY);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block\n            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {\n                tooltip.hidden(true);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', 0);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', distY.size());\n            });\n\n            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', evt.relativePos[1] - availableHeight);\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', evt.relativePos[0] + distX.size());\n                tooltip.data(evt).hidden(false);\n            });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('scatter with line immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.distX = distX;\n    chart.distY = distY;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        container:  {get: function(){return container;}, set: function(_){container=_;}},\n        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},\n        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            distX.color(color);\n            distY.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparkline = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , animate = true\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.getColor(['#000'])\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , showMinMaxPoints = true\n        , showCurrentPoint = true\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    \n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x   .domain(xDomain || d3.extent(data, getX ))\n                .range(xRange || [0, availableWidth]);\n\n            y   .domain(yDomain || d3.extent(data, getY ))\n                .range(yRange || [availableHeight, 0]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            var paths = wrap.selectAll('path')\n                .data(function(d) { return [d] });\n            paths.enter().append('path');\n            paths.exit().remove();\n            paths\n                .style('stroke', function(d,i) { return d.color || color(d, i) })\n                .attr('d', d3.svg.line()\n                    .x(function(d,i) { return x(getX(d,i)) })\n                    .y(function(d,i) { return y(getY(d,i)) })\n            );\n\n            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n            var points = wrap.selectAll('circle.nv-point')\n                .data(function(data) {\n                    var yValues = data.map(function(d, i) { return getY(d,i); });\n                    function pointIndex(index) {\n                        if (index != -1) {\n                            var result = data[index];\n                            result.pointIndex = index;\n                            return result;\n                        } else {\n                            return null;\n                        }\n                    }\n                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n                        currentPoint = pointIndex(yValues.length - 1);\n                    return [(showMinMaxPoints ? minPoint : null), (showMinMaxPoints ? maxPoint : null), (showCurrentPoint ? currentPoint : null)].filter(function (d) {return d != null;});\n                });\n            points.enter().append('circle');\n            points.exit().remove();\n            points\n                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n                .attr('r', 2)\n                .attr('class', function(d,i) {\n                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n                });\n        });\n        \n        renderWatch.renderEnd('sparkline immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:            {get: function(){return width;}, set: function(_){width=_;}},\n        height:           {get: function(){return height;}, set: function(_){height=_;}},\n        xDomain:          {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:          {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:           {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:           {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        xScale:           {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:           {get: function(){return y;}, set: function(_){y=_;}},\n        animate:          {get: function(){return animate;}, set: function(_){animate=_;}},\n        showMinMaxPoints: {get: function(){return showMinMaxPoints;}, set: function(_){showMinMaxPoints=_;}},\n        showCurrentPoint: {get: function(){return showCurrentPoint;}, set: function(_){showCurrentPoint=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparklinePlus = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sparkline = nv.models.sparkline();\n\n    var margin = {top: 15, right: 100, bottom: 10, left: 50}\n        , width = null\n        , height = null\n        , x\n        , y\n        , index = []\n        , paused = false\n        , xTickFormat = d3.format(',r')\n        , yTickFormat = d3.format(',.2f')\n        , showLastValue = true\n        , alignValue = true\n        , rightAlignValue = false\n        , noData = null\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n        \n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sparkline);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.call(chart); };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\n            // Setup Scales\n            x = sparkline.xScale();\n            y = sparkline.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-sparklineWrap');\n            gEnter.append('g').attr('class', 'nv-valueWrap');\n            gEnter.append('g').attr('class', 'nv-hoverArea');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            var sparklineWrap = g.select('.nv-sparklineWrap');\n\n            sparkline.width(availableWidth).height(availableHeight);\n            sparklineWrap.call(sparkline);\n\n            if (showLastValue) {\n                var valueWrap = g.select('.nv-valueWrap');\n                var value = valueWrap.selectAll('.nv-currentValue')\n                    .data([currentValue]);\n\n                value.enter().append('text').attr('class', 'nv-currentValue')\n                    .attr('dx', rightAlignValue ? -8 : 8)\n                    .attr('dy', '.9em')\n                    .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\n                value\n                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n                    .attr('y', alignValue ? function (d) {\n                        return y(d)\n                    } : 0)\n                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))\n                    .text(yTickFormat(currentValue));\n            }\n\n            gEnter.select('.nv-hoverArea').append('rect')\n                .on('mousemove', sparklineHover)\n                .on('click', function() { paused = !paused })\n                .on('mouseout', function() { index = []; updateValueLine(); });\n\n            g.select('.nv-hoverArea rect')\n                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n                .attr('width', availableWidth + margin.left + margin.right)\n                .attr('height', availableHeight + margin.top);\n\n            //index is currently global (within the chart), may or may not keep it that way\n            function updateValueLine() {\n                if (paused) return;\n\n                var hoverValue = g.selectAll('.nv-hoverValue').data(index);\n\n                var hoverEnter = hoverValue.enter()\n                    .append('g').attr('class', 'nv-hoverValue')\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0);\n\n                hoverValue.exit()\n                    .transition().duration(250)\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0)\n                    .remove();\n\n                hoverValue\n                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n                    .transition().duration(250)\n                    .style('stroke-opacity', 1)\n                    .style('fill-opacity', 1);\n\n                if (!index.length) return;\n\n                hoverEnter.append('line')\n                    .attr('x1', 0)\n                    .attr('y1', -margin.top)\n                    .attr('x2', 0)\n                    .attr('y2', availableHeight);\n\n                hoverEnter.append('text').attr('class', 'nv-xValue')\n                    .attr('x', -6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'end')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-xValue')\n                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\n                hoverEnter.append('text').attr('class', 'nv-yValue')\n                    .attr('x', 6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'start')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-yValue')\n                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n            }\n\n            function sparklineHover() {\n                if (paused) return;\n\n                var pos = d3.mouse(this)[0] - margin.left;\n\n                function getClosestIndex(data, x) {\n                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n                    var closestIndex = 0;\n                    for (var i = 0; i < data.length; i++){\n                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n                            distance = Math.abs(sparkline.x()(data[i], i) - x);\n                            closestIndex = i;\n                        }\n                    }\n                    return closestIndex;\n                }\n\n                index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n                updateValueLine();\n            }\n\n        });\n        renderWatch.renderEnd('sparklinePlus immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sparkline = sparkline;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:           {get: function(){return width;}, set: function(_){width=_;}},\n        height:          {get: function(){return height;}, set: function(_){height=_;}},\n        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},\n        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},\n        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},\n        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},\n        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},\n        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, sparkline);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedArea = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , color = nv.utils.defaultColor() // a function that computes the color\n        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n        , container = null\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , style = 'stack'\n        , offset = 'zero'\n        , order = 'default'\n        , interpolate = 'linear'  // controls the line interpolation\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , scatter = nv.models.scatter()\n        , duration = 250\n        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')\n        ;\n\n    scatter\n        .pointSize(2.2) // default size\n        .pointDomain([2.2, 2.2]) // all the same size by default\n    ;\n\n    /************************************\n     * offset:\n     *   'wiggle' (stream)\n     *   'zero' (stacked)\n     *   'expand' (normalize to 100%)\n     *   'silhouette' (simple centered)\n     *\n     * order:\n     *   'inside-out' (stream)\n     *   'default' (input order)\n     ************************************/\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            var dataRaw = data;\n            // Injecting point index into each point because d3.layout.stack().out does not give index\n            data.forEach(function(aseries, i) {\n                aseries.seriesIndex = i;\n                aseries.values = aseries.values.map(function(d, j) {\n                    d.index = j;\n                    d.seriesIndex = i;\n                    return d;\n                });\n            });\n\n            var dataFiltered = data.filter(function(series) {\n                return !series.disabled;\n            });\n\n            data = d3.layout.stack()\n                .order(order)\n                .offset(offset)\n                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n                .x(getX)\n                .y(getY)\n                .out(function(d, y0, y) {\n                    d.display = {\n                        y: y,\n                        y0: y0\n                    };\n                })\n            (dataFiltered);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-areaWrap');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            \n            // If the user has not specified forceY, make sure 0 is included in the domain\n            // Otherwise, use user-specified values for forceY\n            if (scatter.forceY().length == 0) {\n                scatter.forceY().push(0);\n            }\n            \n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .x(getX)\n                .y(function(d) {\n                    if (d.display !== undefined) { return d.display.y + d.display.y0; }\n                })\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, d.seriesIndex);\n                    return d.color;\n                }));\n\n            var scatterWrap = g.select('.nv-scatterWrap')\n                .datum(data);\n\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var area = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) {\n                    return y(d.display.y0)\n                })\n                .y1(function(d) {\n                    return y(d.display.y + d.display.y0)\n                })\n                .interpolate(interpolate);\n\n            var zeroArea = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) { return y(d.display.y0) })\n                .y1(function(d) { return y(d.display.y0) });\n\n            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n                .data(function(d) { return d });\n\n            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n                .attr('d', function(d,i){\n                    return zeroArea(d.values, d.seriesIndex);\n                })\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.areaMouseover({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaMouseout({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('click', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaClick({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                });\n\n            path.exit().remove();\n            path.style('fill', function(d,i){\n                    return d.color || color(d, d.seriesIndex)\n                })\n                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n            path.watchTransition(renderWatch,'stackedArea path')\n                .attr('d', function(d,i) {\n                    return area(d.values,i)\n                });\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            scatter.dispatch.on('elementMouseover.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n            });\n            scatter.dispatch.on('elementMouseout.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n            });\n\n            //Special offset functions\n            chart.d3_stackedOffset_stackPercent = function(stackData) {\n                var n = stackData.length,    //How many series\n                    m = stackData[0].length,     //how many points per series\n                    i,\n                    j,\n                    o,\n                    y0 = [];\n\n                for (j = 0; j < m; ++j) { //Looping through all points\n                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series\n                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.\n                    }\n\n                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0\n                        stackData[i][j][1] /= o;\n                    } else { //(total y value of all series at point in time i) == 0\n                        for (i = 0; i < n; i++) {\n                            stackData[i][j][1] = 0;\n                        }\n                    }\n                }\n                for (j = 0; j < m; ++j) y0[j] = 0;\n                return y0;\n            };\n\n        });\n\n        renderWatch.renderEnd('stackedArea immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.interpolate = function(_) {\n        if (!arguments.length) return interpolate;\n        interpolate = _;\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        scatter.duration(duration);\n        return chart;\n    };\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},\n        order:    {get: function(){return order;}, set: function(_){order=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        style: {get: function(){return style;}, set: function(_){\n            style = _;\n            switch (style) {\n                case 'stack':\n                    chart.offset('zero');\n                    chart.order('default');\n                    break;\n                case 'stream':\n                    chart.offset('wiggle');\n                    chart.order('inside-out');\n                    break;\n                case 'stream-center':\n                    chart.offset('silhouette');\n                    chart.order('inside-out');\n                    break;\n                case 'expand':\n                    chart.offset('expand');\n                    chart.order('default');\n                    break;\n                case 'stack_percent':\n                    chart.offset(chart.d3_stackedOffset_stackPercent);\n                    chart.order('default');\n                    break;\n            }\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var stacked = nv.models.stackedArea()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.stackedArea())\n        ;\n\n    var margin = {top: 10, right: 25, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , focusEnable = false\n        , useInteractiveGuideline = false\n        , showTotalInTooltip = true\n        , totalLabel = 'TOTAL'\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = 250\n        , controlOptions = ['Stacked','Stream','Expanded']\n        , controlLabels = {}\n        , duration = 250\n        ;\n\n    state.style = stacked.style();\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        });\n\n    var oldYTickFormat = null,\n        oldValueFormatter = null;\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var style = stacked.style();\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                style: stacked.style()\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.style !== undefined)\n                style = state.style;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var percentFormatter = d3.format('%');\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(stacked);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\n            chart.update = function() { container.transition().duration(duration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n            // Setup Scales\n            x = stacked.xScale();\n            y = stacked.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-stackedWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            // g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = (showControls && legendPosition === 'top') ? availableWidth - controlWidth : availableWidth;\n\n                legend.width(legendWidth);\n                g.select('.nv-legendWrap').datum(data).call(legend);\n\n                if (legendPosition === 'bottom') {\n                \t// constant from axis.js, plus some margin for better layout\n                \tvar xAxisHeight = (showXAxis ? 12 : 0) + 10;\n                   \tmargin.bottom = Math.max(legend.height() + xAxisHeight, margin.bottom);\n                   \tavailableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                \tvar legendTop = availableHeight + xAxisHeight;\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + legendTop +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && margin.top != legend.height()) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    g.select('.nv-legendWrap')\n                    \t.attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n                }\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    {\n                        key: controlLabels.stacked || 'Stacked',\n                        metaKey: 'Stacked',\n                        disabled: stacked.style() != 'stack',\n                        style: 'stack'\n                    },\n                    {\n                        key: controlLabels.stream || 'Stream',\n                        metaKey: 'Stream',\n                        disabled: stacked.style() != 'stream',\n                        style: 'stream'\n                    },\n                    {\n                        key: controlLabels.expanded || 'Expanded',\n                        metaKey: 'Expanded',\n                        disabled: stacked.style() != 'expand',\n                        style: 'expand'\n                    },\n                    {\n                        key: controlLabels.stack_percent || 'Stack %',\n                        metaKey: 'Stack_Percent',\n                        disabled: stacked.style() != 'stack_percent',\n                        style: 'stack_percent'\n                    }\n                ];\n\n                controlWidth = (controlOptions.length/3) * 260;\n                controlsData = controlsData.filter(function(d) {\n                    return controlOptions.indexOf(d.metaKey) !== -1;\n                });\n\n                controls\n                    .width( controlWidth )\n                    .color(['#444', '#444', '#444']);\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .call(controls);\n\n                var requiredTop = Math.max(controls.height(), showLegend && (legendPosition === 'top') ? legend.height() : 0);\n\n                if ( margin.top != requiredTop ) {\n                    margin.top = requiredTop;\n                    availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                }\n\n                g.select('.nv-controlsWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left: margin.left, top: margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            stacked\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                var ticks;\n                if (stacked.offset() === 'wiggle') {\n                    ticks = 0;\n                }\n                else {\n                    ticks = nv.utils.calcTicksY(availableHeight/36, data);\n                }\n                yAxis.scale(y)\n                    ._ticks(ticks)\n                    .tickSize(-availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n                if(showXAxis) {\n                    g.select('.nv-focus .nv-x.nv-axis')\n                        .attr('transform', 'translate(0,' + availableHeight + ')')\n                        .transition()\n                        .duration(duration)\n                        .call(xAxis)\n                        ;\n                }\n            }\n\n            function updateYAxis() {\n                if(showYAxis) {\n                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                        var currentFormat = yAxis.tickFormat();\n\n                        if ( !oldYTickFormat || currentFormat !== percentFormatter )\n                            oldYTickFormat = currentFormat;\n\n                        //Forces the yAxis to use percentage in 'expand' mode.\n                        yAxis.tickFormat(percentFormatter);\n                    }\n                    else {\n                        if (oldYTickFormat) {\n                            yAxis.tickFormat(oldYTickFormat);\n                            oldYTickFormat = null;\n                        }\n                    }\n\n                    g.select('.nv-focus .nv-y.nv-axis')\n                    .transition().duration(0)\n                    .call(yAxis);\n                }\n            }\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                stackedWrap.transition().call(stacked);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            stacked.dispatch.on('areaClick.toggle', function(e) {\n                if (data.filter(function(d) { return !d.disabled }).length === 1)\n                    data.forEach(function(d) {\n                        d.disabled = false;\n                    });\n                else\n                    data.forEach(function(d,i) {\n                        d.disabled = (i != e.seriesIndex);\n                    });\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                stacked.style(d.style);\n\n\n                state.style = stacked.style();\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                stacked.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0, allNullValues = true;\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        var point = series.values[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue != null) {\n                            stacked.highlightPoint(i, pointIndex, true);\n                        }\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\n                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n                        allData.push({\n                            key: series.key,\n                            value: tooltipValue,\n                            color: color(series,series.seriesIndex),\n                            point: point\n                        });\n\n                        if (showTotalInTooltip && stacked.style() != 'expand' && tooltipValue != null) {\n                          valueSum += tooltipValue;\n                          allNullValues = false;\n                        };\n                    });\n\n                allData.reverse();\n\n                //Highlight the tooltip entry based on which stack the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var yDistMax = Infinity, indexToHighlight = null;\n                    allData.forEach(function(series,i) {\n\n                        //To handle situation where the stacked area chart is negative, we need to use absolute values\n                        //when checking if the mouse Y value is within the stack area.\n                        yValue = Math.abs(yValue);\n                        var stackedY0 = Math.abs(series.point.display.y0);\n                        var stackedY = Math.abs(series.point.display.y);\n                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n                        {\n                            indexToHighlight = i;\n                            return;\n                        }\n                    });\n                    if (indexToHighlight != null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.\n                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2 && !allNullValues) {\n                    allData.push({\n                        key: totalLabel,\n                        value: valueSum,\n                        total: true\n                    });\n                }\n\n                var xValue = chart.x()(singlePoint,pointIndex);\n\n                var valueFormatter = interactiveLayer.tooltip.valueFormatter();\n                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view\n                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                    if ( !oldValueFormatter ) {\n                        oldValueFormatter = valueFormatter;\n                    }\n                    //Forces the tooltip to use percentage in 'expand' mode.\n                    valueFormatter = d3.format(\".1%\");\n                }\n                else {\n                    if (oldValueFormatter) {\n                        valueFormatter = oldValueFormatter;\n                        oldValueFormatter = null;\n                    }\n                }\n\n                interactiveLayer.tooltip\n                    .valueFormatter(valueFormatter)\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                stacked.clearHighlights();\n            });\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.style !== 'undefined') {\n                    stacked.style(e.style);\n                    style = e.style;\n                }\n\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return stacked.x()(d,i) >= extent[0] && stacked.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                stackedWrap.transition().duration(duration).call(stacked);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n\n        });\n\n        renderWatch.renderEnd('stacked Area chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.point['x'] = stacked.x()(evt.point);\n        evt.point['y'] = stacked.y()(evt.point);\n        tooltip.data(evt).hidden(false);\n    });\n\n    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.stacked = stacked;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis;\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.focus = focus;\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},\n        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},\n        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            focus.margin.top    = _.top    !== undefined ? _.top    : focus.margin.top;\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            stacked.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            stacked.color(color);\n            focus.color(color);\n        }},\n        x: {get: function(){return stacked.x();}, set: function(_){\n            stacked.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return stacked.y();}, set: function(_){\n            stacked.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = !!_;\n            chart.interactive(!_);\n            chart.useVoronoi(!_);\n            stacked.scatter.interactive(!_);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, stacked);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaWithFocusChart = function() {\n  return nv.models.stackedAreaChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\n// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad\nnv.models.sunburst = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 600\n        , height = 600\n        , mode = \"count\"\n        , modes = {count: function(d) { return 1; }, value: function(d) { return d.value || d.size }, size: function(d) { return d.value || d.size }}\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , showLabels = false\n        , labelFormat = function(d){if(mode === 'count'){return d.name + ' #' + d.value}else{return d.name + ' ' + (d.value || d.size)}}\n        , labelThreshold = 0.02\n        , sort = function(d1, d2){return d1.name > d2.name;}\n        , key = function(d,i){return d.name;}\n        , groupColorByParent = true\n        , duration = 500\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd');\n\n    //============================================================\n    // aux functions and setup\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear().range([0, 2 * Math.PI]);\n    var y = d3.scale.sqrt();\n\n    var partition = d3.layout.partition().sort(sort);\n\n    var node, availableWidth, availableHeight, radius;\n    var prevPositions = {};\n\n    var arc = d3.svg.arc()\n        .startAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x))) })\n        .endAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))) })\n        .innerRadius(function(d) {return Math.max(0, y(d.y)) })\n        .outerRadius(function(d) {return Math.max(0, y(d.y + d.dy)) });\n\n    function rotationToAvoidUpsideDown(d) {\n        var centerAngle = computeCenterAngle(d);\n        if(centerAngle > 90){\n            return 180;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    function computeCenterAngle(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        var centerAngle = (((startAngle + endAngle) / 2) * (180 / Math.PI)) - 90;\n        return centerAngle;\n    }\n\n    function computeNodePercentage(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        return (endAngle - startAngle) / (2 * Math.PI);\n    }\n\n    function labelThresholdMatched(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n\n        var size = endAngle - startAngle;\n        return size > labelThreshold;\n    }\n\n    // When zooming: interpolate the scales.\n    function arcTweenZoom(e,i) {\n        var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]),\n        yd = d3.interpolate(y.domain(), [node.y, 1]),\n        yr = d3.interpolate(y.range(), [node.y ? 20 : 0, radius]);\n\n        if (i === 0) {\n            return function() {return arc(e);}\n        }\n        else {\n            return function (t) {\n                x.domain(xd(t));\n                y.domain(yd(t)).range(yr(t));\n                return arc(e);\n            }\n        };\n    }\n\n    function arcTweenUpdate(d) {\n        var ipo = d3.interpolate({x: d.x0, dx: d.dx0, y: d.y0, dy: d.dy0}, d);\n\n        return function (t) {\n            var b = ipo(t);\n\n            d.x0 = b.x;\n            d.dx0 = b.dx;\n            d.y0 = b.y;\n            d.dy0 = b.dy;\n\n            return arc(b);\n        };\n    }\n\n    function updatePrevPosition(node) {\n        var k = key(node);\n        if(! prevPositions[k]) prevPositions[k] = {};\n        var pP = prevPositions[k];\n        pP.dx = node.dx;\n        pP.x = node.x;\n        pP.dy = node.dy;\n        pP.y = node.y;\n    }\n\n    function storeRetrievePrevPositions(nodes) {\n        nodes.forEach(function(n){\n            var k = key(n);\n            var pP = prevPositions[k];\n            //console.log(k,n,pP);\n            if( pP ){\n                n.dx0 = pP.dx;\n                n.x0 = pP.x;\n                n.dy0 = pP.dy;\n                n.y0 = pP.y;\n            }\n            else {\n                n.dx0 = n.dx;\n                n.x0 = n.x;\n                n.dy0 = n.dy;\n                n.y0 = n.y;\n            }\n            updatePrevPosition(n);\n        });\n    }\n\n    function zoomClick(d) {\n        var labels = container.selectAll('text')\n        var path = container.selectAll('path')\n\n        // fade out all text elements\n        labels.transition().attr(\"opacity\",0);\n\n        // to allow reference to the new center node\n        node = d;\n\n        path.transition()\n            .duration(duration)\n            .attrTween(\"d\", arcTweenZoom)\n            .each('end', function(e) {\n                // partially taken from here: http://bl.ocks.org/metmajer/5480307\n                // check if the animated element's data e lies within the visible angle span given in d\n                if(e.x >= d.x && e.x < (d.x + d.dx) ){\n                    if(e.depth >= d.depth){\n                        // get a selection of the associated text element\n                        var parentNode = d3.select(this.parentNode);\n                        var arcText = parentNode.select('text');\n\n                        // fade in the text element and recalculate positions\n                        arcText.transition().duration(duration)\n                        .text( function(e){return labelFormat(e) })\n                        .attr(\"opacity\", function(d){\n                            if(labelThresholdMatched(d)) {\n                                return 1;\n                            }\n                            else {\n                                return 0;\n                            }\n                        })\n                        .attr(\"transform\", function() {\n                            var width = this.getBBox().width;\n                            if(e.depth === 0)\n                            return \"translate(\" + (width / 2 * - 1) + \",0)\";\n                            else if(e.depth === d.depth){\n                                return \"translate(\" + (y(e.y) + 5) + \",0)\";\n                            }\n                            else {\n                                var centerAngle = computeCenterAngle(e);\n                                var rotation = rotationToAvoidUpsideDown(e);\n                                if (rotation === 0) {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + 5) + ',0)';\n                                }\n                                else {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                                }\n                            }\n                        });\n                    }\n                }\n            })\n    }\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n            container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n            radius = Math.min(availableWidth, availableHeight) / 2;\n\n            y.range([0, radius]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.select('g.nvd3.nv-wrap.nv-sunburst');\n            if( !wrap[0][0] ) {\n                wrap = container.append('g')\n                    .attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id)\n                    .attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            } else {\n                wrap.attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            }\n\n            container.on('click', function (d, i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            partition.value(modes[mode] || modes[\"count\"]);\n\n            //reverse the drawing order so that the labels of inner\n            //arcs are drawn on top of the outer arcs.\n            var nodes = partition.nodes(data[0]).reverse()\n\n            storeRetrievePrevPositions(nodes);\n            var cG = wrap.selectAll('.arc-container').data(nodes, key)\n\n            //handle new datapoints\n            var cGE = cG.enter()\n                .append(\"g\")\n                .attr(\"class\",'arc-container')\n\n            cGE.append(\"path\")\n                .attr(\"d\", arc)\n                .style(\"fill\", function (d) {\n                    if (d.color) {\n                        return d.color;\n                    }\n                    else if (groupColorByParent) {\n                        return color((d.children ? d : d.parent).name);\n                    }\n                    else {\n                        return color(d.name);\n                    }\n                })\n                .style(\"stroke\", \"#FFF\")\n                .on(\"click\", function(d,i){\n                    zoomClick(d);\n                    dispatch.elementClick({\n                        data: d,\n                        index: i\n                    })\n                })\n                .on('mouseover', function(d,i){\n                    d3.select(this).classed('hover', true).style('opacity', 0.8);\n                    dispatch.elementMouseover({\n                        data: d,\n                        color: d3.select(this).style(\"fill\"),\n                        percent: computeNodePercentage(d)\n                    });\n                })\n                .on('mouseout', function(d,i){\n                    d3.select(this).classed('hover', false).style('opacity', 1);\n                    dispatch.elementMouseout({\n                        data: d\n                    });\n                })\n                .on('mousemove', function(d,i){\n                    dispatch.elementMousemove({\n                        data: d\n                    });\n                });\n\n            ///Iterating via each and selecting based on the this\n            ///makes it work ... a cG.selectAll('path') doesn't.\n            ///Without iteration the data (in the element) didn't update.\n            cG.each(function(d){\n                d3.select(this).select('path')\n                    .transition()\n                    .duration(duration)\n                    .attrTween('d', arcTweenUpdate);\n            });\n\n            if(showLabels){\n                //remove labels first and add them back\n                cG.selectAll('text').remove();\n\n                //this way labels are on top of newly added arcs\n                cG.append('text')\n                    .text( function(e){ return labelFormat(e)})\n                    .transition()\n                    .duration(duration)\n                    .attr(\"opacity\", function(d){\n                        if(labelThresholdMatched(d)) {\n                            return 1;\n                        }\n                        else {\n                            return 0;\n                        }\n                    })\n                    .attr(\"transform\", function(d) {\n                        var width = this.getBBox().width;\n                        if(d.depth === 0){\n                            return \"rotate(0)translate(\" + (width / 2 * -1) + \",0)\";\n                        }\n                        else {\n                            var centerAngle = computeCenterAngle(d);\n                            var rotation = rotationToAvoidUpsideDown(d);\n                            if (rotation === 0) {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + 5) + ',0)';\n                            }\n                            else {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                            }\n                        }\n                    });\n            }\n\n            //zoom out to the center when the data is updated.\n            zoomClick(nodes[nodes.length - 1])\n\n\n            //remove unmatched elements ...\n            cG.exit()\n                .transition()\n                .duration(duration)\n                .attr('opacity',0)\n                .each('end',function(d){\n                    var k = key(d);\n                    prevPositions[k] = undefined;\n                })\n                .remove();\n        });\n\n\n        renderWatch.renderEnd('sunburst immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        groupColorByParent: {get: function(){return groupColorByParent;}, set: function(_){groupColorByParent=!!_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=!!_}},\n        labelFormat: {get: function(){return labelFormat;}, set: function(_){labelFormat=_}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_}},\n        sort: {get: function(){return sort;}, set: function(_){sort=_}},\n        key: {get: function(){return key;}, set: function(_){key=_}},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sunburstChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sunburst = nv.models.sunburst();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showTooltipPercent = false\n        , id = Math.round(Math.random() * 100000)\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd');\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d){return d;});\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sunburst);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin);\n            var availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0) {\n                    container.call(chart);\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = container;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            sunburst.width(availableWidth).height(availableHeight).margin(margin);\n            container.call(sunburst);\n        });\n\n        renderWatch.renderEnd('sunburstChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.series = {\n            key: evt.data.name,\n            value: (evt.data.value || evt.data.size),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sunburst = sunburst;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            sunburst.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            sunburst.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n            sunburst.margin(margin);\n        }}\n    });\n    nv.utils.inheritOptions(chart, sunburst);\n    nv.utils.initOptions(chart);\n    return chart;\n\n};\n\nnv.version = \"1.8.5\";\n})();\n//# sourceMappingURL=nv.d3.js.map\n\n/***/ }),\n\n/***/ 693:\n/***/ (function(module, exports, __webpack_require__) {\n\n!function(t,e){ true?module.exports=e(__webpack_require__(0),__webpack_require__(97),__webpack_require__(692)):\"function\"==typeof define&&define.amd?define([\"react\",\"d3\",\"nvd3\"],e):\"object\"==typeof exports?exports.NVD3Chart=e(require(\"react\"),require(\"d3\"),require(\"nvd3\")):t.NVD3Chart=e(t.React,t.d3,t.nv)}(this,function(t,e,n){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p=\"\",e(0)}([function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),i=r(o),u=n(2),c=r(u),s=n(17),a=r(s),f=n(21),p=r(f),l=n(22),d=r(l),h=n(25),y=r(h),v=n(48),b=r(v),g=n(55),m=r(g),_=n(56),x=r(_),O=n(57),j=r(O),w=n(58),S=[\"x\",\"y\",\"type\",\"datum\",\"configure\"],P=[\"width\",\"height\"],E=\"margin\",M=\"containerStyle\",k=\"renderStart\",C=\"renderEnd\",D=\"ready\",F=function(t){function e(){return(0,p[\"default\"])(this,e),(0,y[\"default\"])(this,(0,a[\"default\"])(e).apply(this,arguments))}return(0,b[\"default\"])(e,t),(0,d[\"default\"])(e,[{key:\"componentDidMount\",value:function(){var t=this;j[\"default\"].addGraph(this.renderChart.bind(this),function(e){(0,w.isCallable)(t.props.ready)&&t.props.ready(e,D)})}},{key:\"componentDidUpdate\",value:function(){this.renderChart()}},{key:\"componentWillUnmount\",value:function(){this.resizeHandler&&this.resizeHandler.clear()}},{key:\"renderChart\",value:function(){var t=void 0;switch(this.chart=this.chart&&!this.rendering?this.chart:j[\"default\"].models[this.props.type](),(0,w.isCallable)(this.props.renderStart)&&this.props.renderStart(this.chart,k),this.parsedProps=(0,w.bindFunctions)(this.props,this.props.context),this.chart.x&&this.chart.x((0,w.getValueFunction)(this.parsedProps.x,\"x\")),this.chart.y&&this.chart.y((0,w.getValueFunction)(this.parsedProps.y,\"y\")),this.props.margin&&this.chart.margin(this.options(E,w.pick).margin||(0,w.propsByPrefix)(\"margin\",this.props)||{}),this.configureComponents(this.chart,this.options(S.concat(M),w.without)),!this.props.configure||this.props.configure(this.chart),this.selection=x[\"default\"].select(this.refs.svg).datum(this.props.datum).call(this.chart),this.resizeHandler||(this.resizeHandler=j[\"default\"].utils.windowResize(this.chart.update)),this.props.type){case\"pieChart\":t=this.chart.pie.dispatch;break;case\"lineChart\":t=this.chart.lines.dispatch;break;default:t=this.chart.dispatch}return t.renderEnd&&t.on(\"renderEnd\",this.renderEnd.bind(this)),this.rendering=!0,this.chart}},{key:\"renderEnd\",value:function(t){(0,w.isCallable)(this.props.renderEnd)&&this.props.renderEnd(this.chart,C),this.rendering=!1}},{key:\"configureComponents\",value:function(t,e){for(var n in e){var r=e[n];t&&((0,w.isPlainObject)(r)?this.configureComponents(t[n],r):\"function\"==typeof t[n]&&t[n](r))}}},{key:\"options\",value:function(t,e){var n=this.parsedProps.options||this.parsedProps||this.props.chartOptions;return(e=e||w.pick)(n,t)}},{key:\"render\",value:function(){var t=(0,w.pick)(this.props,P),e=(0,c[\"default\"])({},t,this.props.containerStyle);return m[\"default\"].createElement(\"div\",{ref:\"root\",className:\"nv-chart\",style:e},m[\"default\"].createElement(\"svg\",(0,i[\"default\"])({ref:\"svg\"},t)))}}]),e}(m[\"default\"].Component);e[\"default\"]=F,t.exports=F},function(t,e,n){\"use strict\";var r=n(2)[\"default\"];e[\"default\"]=r||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(3),__esModule:!0}},function(t,e,n){n(4),t.exports=n(7).Object.assign},function(t,e,n){var r=n(5);r(r.S+r.F,\"Object\",{assign:n(10)})},function(t,e,n){var r=n(6),o=n(7),i=n(8),u=\"prototype\",c=function(t,e,n){var s,a,f,p=t&c.F,l=t&c.G,d=t&c.S,h=t&c.P,y=t&c.B,v=t&c.W,b=l?o:o[e]||(o[e]={}),g=l?r:d?r[e]:(r[e]||{})[u];l&&(n=e);for(s in n)a=!p&&g&&s in g,a&&s in b||(f=a?g[s]:n[s],b[s]=l&&\"function\"!=typeof g[s]?n[s]:y&&a?i(f,r):v&&g[s]==f?function(t){var e=function(e){return this instanceof t?new t(e):t(e)};return e[u]=t[u],e}(f):h&&\"function\"==typeof f?i(Function.call,f):f,h&&((b[u]||(b[u]={}))[s]=f))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,t.exports=c},function(t,e){var n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:\"1.2.6\"};\"number\"==typeof __e&&(__e=n)},function(t,e,n){var r=n(9);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,e,n){var r=n(11),o=n(12),i=n(14);t.exports=n(16)(function(){var t=Object.assign,e={},n={},r=Symbol(),o=\"abcdefghijklmnopqrst\";return e[r]=7,o.split(\"\").forEach(function(t){n[t]=t}),7!=t({},e)[r]||Object.keys(t({},n)).join(\"\")!=o})?function(t,e){for(var n=o(t),u=arguments,c=u.length,s=1,a=r.getKeys,f=r.getSymbols,p=r.isEnum;c>s;)for(var l,d=i(u[s++]),h=f?a(d).concat(f(d)):a(d),y=h.length,v=0;y>v;)p.call(d,l=h[v++])&&(n[l]=d[l]);return n}:Object.assign},function(t,e){var n=Object;t.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},function(t,e,n){var r=n(13);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,e,n){var r=n(15);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==r(t)?t.split(\"\"):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},function(t,e,n){t.exports={\"default\":n(18),__esModule:!0}},function(t,e,n){n(19),t.exports=n(7).Object.getPrototypeOf},function(t,e,n){var r=n(12);n(20)(\"getPrototypeOf\",function(t){return function(e){return t(r(e))}})},function(t,e,n){var r=n(5),o=n(7),i=n(16);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),\"Object\",u)}},function(t,e){\"use strict\";e[\"default\"]=function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")},e.__esModule=!0},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(23),i=r(o);e[\"default\"]=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,i[\"default\"])(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(24),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e,n){return r.setDesc(t,e,n)}},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(26),i=r(o);e[\"default\"]=function(t,e){if(!t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!e||\"object\"!==(\"undefined\"==typeof e?\"undefined\":(0,i[\"default\"])(e))&&\"function\"!=typeof e?t:e},e.__esModule=!0},function(t,e,n){\"use strict\";var r=n(27)[\"default\"];e[\"default\"]=function(t){return t&&t.constructor===r?\"symbol\":typeof t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(28),__esModule:!0}},function(t,e,n){n(29),n(47),t.exports=n(7).Symbol},function(t,e,n){\"use strict\";var r=n(11),o=n(6),i=n(30),u=n(31),c=n(5),s=n(32),a=n(16),f=n(35),p=n(36),l=n(38),d=n(37),h=n(39),y=n(41),v=n(42),b=n(43),g=n(44),m=n(40),_=n(34),x=r.getDesc,O=r.setDesc,j=r.create,w=y.get,S=o.Symbol,P=o.JSON,E=P&&P.stringify,M=!1,k=d(\"_hidden\"),C=r.isEnum,D=f(\"symbol-registry\"),F=f(\"symbols\"),N=\"function\"==typeof S,T=Object.prototype,q=u&&a(function(){return 7!=j(O({},\"a\",{get:function(){return O(this,\"a\",{value:7}).a}})).a})?function(t,e,n){var r=x(T,e);r&&delete T[e],O(t,e,n),r&&t!==T&&O(T,e,r)}:O,z=function(t){var e=F[t]=j(S.prototype);return e._k=t,u&&M&&q(T,t,{configurable:!0,set:function(e){i(this,k)&&i(this[k],t)&&(this[k][t]=!1),q(this,t,_(1,e))}}),e},A=function(t){return\"symbol\"==typeof t},V=function(t,e,n){return n&&i(F,e)?(n.enumerable?(i(t,k)&&t[k][e]&&(t[k][e]=!1),n=j(n,{enumerable:_(0,!1)})):(i(t,k)||O(t,k,_(1,{})),t[k][e]=!0),q(t,e,n)):O(t,e,n)},W=function(t,e){g(t);for(var n,r=v(e=m(e)),o=0,i=r.length;i>o;)V(t,n=r[o++],e[n]);return t},B=function(t,e){return void 0===e?j(t):W(j(t),e)},G=function(t){var e=C.call(this,t);return e||!i(this,t)||!i(F,t)||i(this,k)&&this[k][t]?e:!0},H=function(t,e){var n=x(t=m(t),e);return!n||!i(F,e)||i(t,k)&&t[k][e]||(n.enumerable=!0),n},I=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])||e==k||r.push(e);return r},J=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])&&r.push(F[e]);return r},K=function(t){if(void 0!==t&&!A(t)){for(var e,n,r=[t],o=1,i=arguments;i.length>o;)r.push(i[o++]);return e=r[1],\"function\"==typeof e&&(n=e),(n||!b(e))&&(e=function(t,e){return n&&(e=n.call(this,t,e)),A(e)?void 0:e}),r[1]=e,E.apply(P,r)}},R=a(function(){var t=S();return\"[null]\"!=E([t])||\"{}\"!=E({a:t})||\"{}\"!=E(Object(t))});N||(S=function(){if(A(this))throw TypeError(\"Symbol is not a constructor\");return z(l(arguments.length>0?arguments[0]:void 0))},s(S.prototype,\"toString\",function(){return this._k}),A=function(t){return t instanceof S},r.create=B,r.isEnum=G,r.getDesc=H,r.setDesc=V,r.setDescs=W,r.getNames=y.get=I,r.getSymbols=J,u&&!n(46)&&s(T,\"propertyIsEnumerable\",G,!0));var U={\"for\":function(t){return i(D,t+=\"\")?D[t]:D[t]=S(t)},keyFor:function(t){return h(D,t)},useSetter:function(){M=!0},useSimple:function(){M=!1}};r.each.call(\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),function(t){var e=d(t);U[t]=N?e:z(e)}),M=!0,c(c.G+c.W,{Symbol:S}),c(c.S,\"Symbol\",U),c(c.S+c.F*!N,\"Object\",{create:B,defineProperty:V,defineProperties:W,getOwnPropertyDescriptor:H,getOwnPropertyNames:I,getOwnPropertySymbols:J}),P&&c(c.S+c.F*(!N||R),\"JSON\",{stringify:K}),p(S,\"Symbol\"),p(Math,\"Math\",!0),p(o.JSON,\"JSON\",!0)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){t.exports=!n(16)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,e,n){t.exports=n(33)},function(t,e,n){var r=n(11),o=n(34);t.exports=n(31)?function(t,e,n){return r.setDesc(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(6),o=\"__core-js_shared__\",i=r[o]||(r[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,e,n){var r=n(11).setDesc,o=n(30),i=n(37)(\"toStringTag\");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(35)(\"wks\"),o=n(38),i=n(6).Symbol;t.exports=function(t){return r[t]||(r[t]=i&&i[t]||(i||o)(\"Symbol.\"+t))}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++n+r).toString(36))}},function(t,e,n){var r=n(11),o=n(40);t.exports=function(t,e){for(var n,i=o(t),u=r.getKeys(i),c=u.length,s=0;c>s;)if(i[n=u[s++]]===e)return n}},function(t,e,n){var r=n(14),o=n(13);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(40),o=n(11).getNames,i={}.toString,u=\"object\"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return o(t)}catch(e){return u.slice()}};t.exports.get=function(t){return u&&\"[object Window]\"==i.call(t)?c(t):o(r(t))}},function(t,e,n){var r=n(11);t.exports=function(t){var e=r.getKeys(t),n=r.getSymbols;if(n)for(var o,i=n(t),u=r.isEnum,c=0;i.length>c;)u.call(t,o=i[c++])&&e.push(o);return e}},function(t,e,n){var r=n(15);t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},function(t,e,n){var r=n(45);t.exports=function(t){if(!r(t))throw TypeError(t+\" is not an object!\");return t}},function(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,e){t.exports=!0},function(t,e){},function(t,e,n){\"use strict\";var r=n(49)[\"default\"],o=n(51)[\"default\"];e[\"default\"]=function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof e);t.prototype=r(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(o?o(t,e):t.__proto__=e)},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(50),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){t.exports={\"default\":n(52),__esModule:!0}},function(t,e,n){n(53),t.exports=n(7).Object.setPrototypeOf},function(t,e,n){var r=n(5);r(r.S,\"Object\",{setPrototypeOf:n(54).set})},function(t,e,n){var r=n(11).getDesc,o=n(45),i=n(44),u=function(t,e){if(i(t),!o(e)&&null!==e)throw TypeError(e+\": can't set as prototype!\")};t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(t,e,o){try{o=n(8)(Function.call,r(Object.prototype,\"__proto__\").set,2),o(t,[]),e=!(t instanceof Array)}catch(i){e=!0}return function(t,n){return u(t,n),e?t.__proto__=n:o(t,n),t}}({},!1):void 0),check:u}},function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}function o(t,e){return t.indexOf(e)>=0}function i(t){return function(){return!t.apply(this,arguments)}}function u(t,e,n){for(var r={},o=(0,m[\"default\"])(t),i=0,u=o.length;u>i;i++){var c=o[i],s=t[c];n(e,c)&&(r[c]=s)}return r}function c(t,e){return u(t,e,o)}function s(t,e){return u(t,e,i(o))}function a(t){if(\"object\"==(\"undefined\"==typeof t?\"undefined\":(0,b[\"default\"])(t))&&null!==t){if(\"function\"==typeof y[\"default\"]){var e=(0,y[\"default\"])(t);return e===Object.prototype||null===e}return\"[object Object]\"==Object.prototype.toString.call(t)}return!1}function f(t,e){var n,r,o;n=Array.isArray(t)?[]:{};for(o in t)r=t[o],null!=r&&(\"object\"===(\"undefined\"==typeof r?\"undefined\":(0,b[\"default\"])(r))&&null!==r&&\"function\"!==r.type?n[o]=f(r,e):\"function\"===r.type?n[o]=e[r.name]:n[o]=r);return n}function p(t,e){return\"function\"==typeof t?t:function(n){return\"undefined\"!=typeof n[t]?n[t]:n[e]}}function l(t,e){return console.warn(\"Set margin with prefixes is deprecated use an object instead\"),t+=\"-\",(0,m[\"default\"])(e).reduce(function(n,r){return r.substr(0,t.length)===t&&(n[r.replace(t,\"\")]=e[r]),n},{})}function d(t){return t&&\"function\"==typeof t}Object.defineProperty(e,\"__esModule\",{value:!0}),e.includes=o,e.negate=i,e.filterObject=u,e.pick=c,e.without=s,e.isPlainObject=a,e.bindFunctions=f,e.getValueFunction=p,e.propsByPrefix=l,e.isCallable=d;var h=n(17),y=r(h),v=n(26),b=r(v),g=n(59),m=r(g)},function(t,e,n){t.exports={\"default\":n(60),__esModule:!0}},function(t,e,n){n(61),t.exports=n(7).Object.keys},function(t,e,n){var r=n(12);n(20)(\"keys\",function(t){return function(e){return t(r(e))}})}])});\n\n/***/ }),\n\n/***/ 694:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(691);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(13)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js??ref--2-1!../../../../../node_modules/postcss-loader/lib/index.js!./nvd3Styles.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js??ref--2-1!../../../../../node_modules/postcss-loader/lib/index.js!./nvd3Styles.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.1fa17be.chunk.js","import update from 'immutability-helper';\nimport getRangeDomain from '../../utils/dataFormats/getRangeDomain';\nimport { ownsProperties } from '../../utils/misc';\n\n/**\n * Need to setup yDomain for NVD3 chart that requires YAXis\n * @param {Object} typeConfig Chart type config\n * @return {Boolean}\n */\nexport function shouldSetupYDomain(typeConfig) {\n  return 0 === typeConfig.dataFormat.indexOf('nvd3') &&\n    -1 !== typeConfig.modules.settings.indexOf('YAxis');\n}\n\n/**\n * add nicely rounded yDomain to chart options, if chart has a yAxis\n * @param {Object} chartOptions\n * @param {Object} typeConfig\n * @param {Object[]}  chartData\n * @return {Object} Cloned chart options object with new yDomain\n */\nexport default function applyYDomain(chartOptions, typeConfig, chartData) {\n  if (!shouldSetupYDomain(typeConfig)) {\n    return chartOptions;\n  }\n\n  let yDomain;\n  if (chartOptions.yDomain) {\n    yDomain = chartOptions.yDomain;\n  } else if (ownsProperties(typeConfig, ['getNiceDomain'])) {\n    yDomain = typeConfig.getNiceDomain(typeConfig.dataFormat, chartData);\n  } else {\n    yDomain = getRangeDomain(typeConfig.dataFormat, chartData);\n  }\n\n  /**\n   * @todo Recalculate yDomain when series visibility is toggled by clicking on dots in the legend\n   */\n  return update(chartOptions, { yDomain: { $set: yDomain } });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/reducers/utils/applyYDomain.js","import { min, max, scale } from 'd3';\n\n/**\n * Get [min, max] array for data series in nvd3SingleSeries or nvd3MultiSeries format\n *\n * @param {Array} series Data series\n * @param {String} format Data format\n * @return {Array} Range of [min, max] for series\n */\nfunction getSeriesDomain(series, format) {\n  const key = 'nvd3SingleSeries' === format ? 'value' : 'y';\n  const values = series.map((point) => point[key]);\n  return [min(values), max(values)];\n}\n\nfunction getMultiSeriesDomain(series, format) {\n  const mins = [];\n  const maxs = [];\n  series.forEach((singleSeries) => {\n    const domain = getSeriesDomain(singleSeries.values, format);\n    mins.push(domain[0]);\n    maxs.push(domain[1]);\n  });\n  return [min(mins), max(maxs)];\n}\n\nfunction makeNice(range) {\n  return scale.linear().domain(range).nice().domain();\n}\n\n/**\n * Get \"nice\" rounded domain from dataset\n *\n * @param {String} format Data format from chart config object\n * @param {Object[]} data Chart data transformed for data format\n * @return {Array} Domain array of [min, max] values\n */\nexport default function getRangeDomain(format, data) {\n  const domain = 'nvd3SingleSeries' === format ?\n    getSeriesDomain(data, format) : getMultiSeriesDomain(data, format);\n  return makeNice(domain);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/utils/dataFormats/getRangeDomain.js","var map = {\n\t\"./NVD3Adapter/index\": 690\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 280;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/components/Chart/ChartTypes ^\\.\\/.*\\/index$\n// module id = 280\n// module chunks = 0","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport NVD3Chart from 'react-nvd3';\nimport update from 'immutability-helper';\nimport cloneDeep from 'lodash/cloneDeep';\nimport {\n  getChartTypeObject,\n  getChartTypeDefaultOpts,\n  getNvd3Type,\n} from '../../../../utils/chartTypeUtils';\nimport applyYDomain from '../../../../reducers/utils/applyYDomain.js';\nimport applyTickFormatters from '../../../../reducers/utils/applyTickFormatters';\nimport './nvd3Styles.css';\n\nexport default class NVD3Adapter extends Component {\n  static propTypes = {\n    data: PropTypes.array.isRequired,\n    options: PropTypes.object.isRequired,\n    widget: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n  };\n\n  static defaultProps = {\n    widget: false,\n  };\n\n  /**\n   * Apply any special formatting specfic to a chart type\n   */\n  static dataTransform(chartType, data) {\n    switch (chartType) {\n      case 'discreteBarChart':\n        return [{\n          key: '',\n          values: data,\n        }];\n\n      default:\n        return data;\n    }\n  }\n\n  /**\n   * In editor, merge data into options and add a ref\n   * In widget, also recreate function-based options that can't be sent as JSON\n   */\n  mapToChartProps = () => {\n    const { options, data, widget } = this.props;\n    const type = getNvd3Type(options.type);\n    let chartProps = update(options, {\n      type: { $set: type },\n      datum: { $set: NVD3Adapter.dataTransform(options.type, data) },\n      ref: { $set: 'chartNode' },\n    });\n\n    if (!widget) {\n      return chartProps;\n    }\n\n    // TODO: This isn't an ideal place for this logic, and it's also duplicated within middleware/reducers.\n    // Widgets need to recreate function-based options\n    const typeConfig = getChartTypeObject(options.type).config;\n    const defaultOpts = getChartTypeDefaultOpts(options.type);\n    chartProps = Object.assign(\n      {}, defaultOpts, chartProps, typeConfig, { type }\n    );\n    chartProps = applyYDomain(chartProps, typeConfig, data);\n\n    return applyTickFormatters(chartProps, typeConfig);\n  };\n\n  render() {\n    // We clone the props, because nvd3 will mutate the datum that you pass to it.\n    const chartProps = cloneDeep(this.mapToChartProps());\n\n    // Key prop is for forcing re-render of the chart to avoid chart refresh issue when the chart type changes.\n    // https://github.com/NuCivic/react-nvd3/issues/59\n    return <NVD3Chart key={Math.random()} {...chartProps} />;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/components/Chart/ChartTypes/NVD3Adapter/index.js","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".nv-stackedAreaChart .nv-legend .nv-series{cursor:default}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local]___[hash:base64:5]\"}!./~/postcss-loader/lib!./app/components/Chart/ChartTypes/NVD3Adapter/nvd3Styles.css\n// module id = 691\n// module chunks = 0","/* nvd3 version 1.8.5 (https://github.com/novus/nvd3) 2016-12-01 */\n(function(){\n\n// set up main nv object\nvar nv = {};\n\n// the major global objects under the nv namespace\nnv.dev = false; //set false when in production\nnv.tooltip = nv.tooltip || {}; // For the tooltip system\nnv.utils = nv.utils || {}; // Utility subsystem\nnv.models = nv.models || {}; //stores all the possible models/components\nnv.charts = {}; //stores all the ready to use charts\nnv.logs = {}; //stores some statistics and potential error messages\nnv.dom = {}; //DOM manipulation functions\n\n// Node/CommonJS - require D3\nif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined' && typeof(d3) == 'undefined') {\n    d3 = require('d3');\n}\n\nnv.dispatch = d3.dispatch('render_start', 'render_end');\n\n// Function bind polyfill\n// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment\n// https://github.com/ariya/phantomjs/issues/10522\n// http://kangax.github.io/compat-table/es5/#Function.prototype.bind\n// phantomJS is used for running the test suite\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== \"function\") {\n            // closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP = function () {},\n            fBound = function () {\n                return fToBind.apply(this instanceof fNOP && oThis\n                        ? this\n                        : oThis,\n                    aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n        return fBound;\n    };\n}\n\n//  Development render timers - disabled if dev = false\nif (nv.dev) {\n    nv.dispatch.on('render_start', function(e) {\n        nv.logs.startTime = +new Date();\n    });\n\n    nv.dispatch.on('render_end', function(e) {\n        nv.logs.endTime = +new Date();\n        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n    });\n}\n\n// Logs all arguments, and returns the last so you can test things in place\n// Note: in IE8 console.log is an object not a function, and if modernizr is used\n// then calling Function.prototype.bind with with anything other than a function\n// causes a TypeError to be thrown.\nnv.log = function() {\n    if (nv.dev && window.console && console.log && console.log.apply)\n        console.log.apply(console, arguments);\n    else if (nv.dev && window.console && typeof console.log == \"function\" && Function.prototype.bind) {\n        var log = Function.prototype.bind.call(console.log, console);\n        log.apply(console, arguments);\n    }\n    return arguments[arguments.length - 1];\n};\n\n// print console warning, should be used by deprecated functions\nnv.deprecated = function(name, info) {\n    if (console && console.warn) {\n        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');\n    }\n};\n\n// The nv.render function is used to queue up chart rendering\n// in non-blocking async functions.\n// When all queued charts are done rendering, nv.dispatch.render_end is invoked.\nnv.render = function render(step) {\n    // number of graphs to generate in each timeout loop\n    step = step || 1;\n\n    nv.render.active = true;\n    nv.dispatch.render_start();\n\n    var renderLoop = function() {\n        var chart, graph;\n\n        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n            chart = graph.generate();\n            if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n        }\n\n        nv.render.queue.splice(0, i);\n\n        if (nv.render.queue.length) {\n            setTimeout(renderLoop);\n        }\n        else {\n            nv.dispatch.render_end();\n            nv.render.active = false;\n        }\n    };\n\n    setTimeout(renderLoop);\n};\n\nnv.render.active = false;\nnv.render.queue = [];\n\n/*\nAdds a chart to the async rendering queue. This method can take arguments in two forms:\nnv.addGraph({\n    generate: <Function>\n    callback: <Function>\n})\n\nor\n\nnv.addGraph(<generate Function>, <callback Function>)\n\nThe generate function should contain code that creates the NVD3 model, sets options\non it, adds data to an SVG element, and invokes the chart model. The generate function\nshould return the chart model.  See examples/lineChart.html for a usage example.\n\nThe callback function is optional, and it is called when the generate function completes.\n*/\nnv.addGraph = function(obj) {\n    if (typeof arguments[0] === typeof(Function)) {\n        obj = {generate: arguments[0], callback: arguments[1]};\n    }\n\n    nv.render.queue.push(obj);\n\n    if (!nv.render.active) {\n        nv.render();\n    }\n};\n\n// Node/CommonJS exports\nif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined') {\n  module.exports = nv;\n}\n\nif (typeof(window) !== 'undefined') {\n  window.nv = nv;\n}\n/* Facade for queueing DOM write operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.write = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.mutate(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n\r\n/* Facade for queueing DOM read operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.read = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.measure(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n/* Utility class to handle creation of an interactive layer.\n This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\n containing the X-coordinate. It can also render a vertical line where the mouse is located.\n\n dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\n the rectangle. The dispatch is given one object which contains the mouseX/Y location.\n It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n */\nnv.interactiveGuideline = function() {\n    \"use strict\";\n\n    var margin = { left: 0, top: 0 } //Pass the chart's top and left magins. Used to calculate the mouseX/Y.\n        ,   width = null\n        ,   height = null\n        ,   xScale = d3.scale.linear()\n        ,   dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp')\n        ,   showGuideLine = true\n        ,   svgContainer = null // Must pass the chart's svg, we'll use its mousemove event.\n        ,   tooltip = nv.models.tooltip()\n        ,   isMSIE =  window.ActiveXObject// Checkt if IE by looking for activeX. (excludes IE11)\n    ;\n\n    tooltip\n        .duration(0)\n        .hideDelay(0)\n        .hidden(false);\n\n    function layer(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this);\n            var availableWidth = (width || 960), availableHeight = (height || 400);\n            var wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\")\n                .data([data]);\n            var wrapEnter = wrap.enter()\n                .append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n            wrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\n            if (!svgContainer) {\n                return;\n            }\n\n            function mouseHandler() {\n                var d3mouse = d3.mouse(this);\n                var mouseX = d3mouse[0];\n                var mouseY = d3mouse[1];\n                var subtractMargin = true;\n                var mouseOutAnyReason = false;\n                if (isMSIE) {\n                    /*\n                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n                     over a rect in IE 10.\n                     However, d3.event.offsetX/Y also returns the mouse coordinates\n                     relative to the triggering <rect>. So we use offsetX/Y on IE.\n                     */\n                    mouseX = d3.event.offsetX;\n                    mouseY = d3.event.offsetY;\n\n                    /*\n                     On IE, if you attach a mouse event listener to the <svg> container,\n                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n                     When this happens on IE, the offsetX/Y is set to where ever the child element\n                     is located.\n                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n                     position under this scenario. Removing the line below *will* cause\n                     the interactive layer to not work right on IE.\n                     */\n                    if(d3.event.target.tagName !== \"svg\") {\n                        subtractMargin = false;\n                    }\n\n                    if (d3.event.target.className.baseVal.match(\"nv-legend\")) {\n                        mouseOutAnyReason = true;\n                    }\n\n                }\n\n                if(subtractMargin) {\n                    mouseX -= margin.left;\n                    mouseY -= margin.top;\n                }\n\n                /* If mouseX/Y is outside of the chart's bounds,\n                 trigger a mouseOut event.\n                 */\n                if (d3.event.type === 'mouseout'\n                    || mouseX < 0 || mouseY < 0\n                    || mouseX > availableWidth || mouseY > availableHeight\n                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n                    || mouseOutAnyReason\n                    ) {\n\n                    if (isMSIE) {\n                        if (d3.event.relatedTarget\n                            && d3.event.relatedTarget.ownerSVGElement === undefined\n                            && (d3.event.relatedTarget.className === undefined\n                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {\n\n                            return;\n                        }\n                    }\n                    dispatch.elementMouseout({\n                        mouseX: mouseX,\n                        mouseY: mouseY\n                    });\n                    layer.renderGuideLine(null); //hide the guideline\n                    tooltip.hidden(true);\n                    return;\n                } else {\n                    tooltip.hidden(false);\n                }\n\n\n                var scaleIsOrdinal = typeof xScale.rangeBands === 'function';\n                var pointXValue = undefined;\n\n                // Ordinal scale has no invert method\n                if (scaleIsOrdinal) {\n                    var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;\n                    // Check if mouseX is in the range band\n                    if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {\n                        pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];\n                    }\n                    else {\n                        dispatch.elementMouseout({\n                            mouseX: mouseX,\n                            mouseY: mouseY\n                        });\n                        layer.renderGuideLine(null); //hide the guideline\n                        tooltip.hidden(true);\n                        return;\n                    }\n                }\n                else {\n                    pointXValue = xScale.invert(mouseX);\n                }\n\n                dispatch.elementMousemove({\n                    mouseX: mouseX,\n                    mouseY: mouseY,\n                    pointXValue: pointXValue\n                });\n\n                //If user double clicks the layer, fire a elementDblclick\n                if (d3.event.type === \"dblclick\") {\n                    dispatch.elementDblclick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user single clicks the layer, fire elementClick\n                if (d3.event.type === 'click') {\n                    dispatch.elementClick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user presses mouse down the layer, fire elementMouseDown\n                if (d3.event.type === 'mousedown') {\n                \tdispatch.elementMouseDown({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n\n                // if user presses mouse down the layer, fire elementMouseUp\n                if (d3.event.type === 'mouseup') {\n                \tdispatch.elementMouseUp({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n            }\n\n            svgContainer\n                .on(\"touchmove\",mouseHandler)\n                .on(\"mousemove\",mouseHandler, true)\n                .on(\"mouseout\" ,mouseHandler,true)\n                .on(\"mousedown\" ,mouseHandler,true)\n                .on(\"mouseup\" ,mouseHandler,true)\n                .on(\"dblclick\" ,mouseHandler)\n                .on(\"click\", mouseHandler)\n            ;\n\n            layer.guideLine = null;\n            //Draws a vertical guideline at the given X postion.\n            layer.renderGuideLine = function(x) {\n                if (!showGuideLine) return;\n                if (layer.guideLine && layer.guideLine.attr(\"x1\") === x) return;\n                nv.dom.write(function() {\n                    var line = wrap.select(\".nv-interactiveGuideLine\")\n                        .selectAll(\"line\")\n                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n                    line.enter()\n                        .append(\"line\")\n                        .attr(\"class\", \"nv-guideline\")\n                        .attr(\"x1\", function(d) { return d;})\n                        .attr(\"x2\", function(d) { return d;})\n                        .attr(\"y1\", availableHeight)\n                        .attr(\"y2\",0);\n                    line.exit().remove();\n                });\n            }\n        });\n    }\n\n    layer.dispatch = dispatch;\n    layer.tooltip = tooltip;\n\n    layer.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return layer;\n    };\n\n    layer.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return layer;\n    };\n\n    layer.height = function(_) {\n        if (!arguments.length) return height;\n        height = _;\n        return layer;\n    };\n\n    layer.xScale = function(_) {\n        if (!arguments.length) return xScale;\n        xScale = _;\n        return layer;\n    };\n\n    layer.showGuideLine = function(_) {\n        if (!arguments.length) return showGuideLine;\n        showGuideLine = _;\n        return layer;\n    };\n\n    layer.svgContainer = function(_) {\n        if (!arguments.length) return svgContainer;\n        svgContainer = _;\n        return layer;\n    };\n\n    return layer;\n};\n\n/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\n This is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\n For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.\n Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\n because 28 is closer to 30 than 10.\n\n Unit tests can be found in: interactiveBisectTest.html\n\n Has the following known issues:\n * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n * Won't work if there are duplicate x coordinate values.\n */\nnv.interactiveBisect = function (values, searchVal, xAccessor) {\n    \"use strict\";\n    if (! (values instanceof Array)) {\n        return null;\n    }\n    var _xAccessor;\n    if (typeof xAccessor !== 'function') {\n        _xAccessor = function(d) {\n            return d.x;\n        }\n    } else {\n        _xAccessor = xAccessor;\n    }\n    var _cmp = function(d, v) {\n        // Accessors are no longer passed the index of the element along with\n        // the element itself when invoked by d3.bisector.\n        //\n        // Starting at D3 v3.4.4, d3.bisector() started inspecting the\n        // function passed to determine if it should consider it an accessor\n        // or a comparator. This meant that accessors that take two arguments\n        // (expecting an index as the second parameter) are treated as\n        // comparators where the second argument is the search value against\n        // which the first argument is compared.\n        return _xAccessor(d) - v;\n    };\n\n    var bisect = d3.bisector(_cmp).left;\n    var index = d3.max([0, bisect(values,searchVal) - 1]);\n    var currentValue = _xAccessor(values[index]);\n\n    if (typeof currentValue === 'undefined') {\n        currentValue = index;\n    }\n\n    if (currentValue === searchVal) {\n        return index; //found exact match\n    }\n\n    var nextIndex = d3.min([index+1, values.length - 1]);\n    var nextValue = _xAccessor(values[nextIndex]);\n\n    if (typeof nextValue === 'undefined') {\n        nextValue = nextIndex;\n    }\n\n    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {\n        return index;\n    } else {\n        return nextIndex\n    }\n};\n\n/*\n Returns the index in the array \"values\" that is closest to searchVal.\n Only returns an index if searchVal is within some \"threshold\".\n Otherwise, returns null.\n */\nnv.nearestValueIndex = function (values, searchVal, threshold) {\n    \"use strict\";\n    var yDistMax = Infinity, indexToHighlight = null;\n    values.forEach(function(d,i) {\n        var delta = Math.abs(searchVal - d);\n        if ( d != null && delta <= yDistMax && delta < threshold) {\n            yDistMax = delta;\n            indexToHighlight = i;\n        }\n    });\n    return indexToHighlight;\n};\n\n/* Model which can be instantiated to handle tooltip rendering.\n Example usage:\n var tip = nv.models.tooltip().gravity('w').distance(23)\n .data(myDataObject);\n\n tip();    //just invoke the returned function to render tooltip.\n */\nnv.models.tooltip = function() {\n    \"use strict\";\n\n    /*\n    Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n    Example Format of data:\n    {\n        key: \"Date\",\n        value: \"August 2009\",\n        series: [\n            {key: \"Series 1\", value: \"Value 1\", color: \"#000\"},\n            {key: \"Series 2\", value: \"Value 2\", color: \"#00f\"}\n        ]\n    }\n    */\n    var id = \"nvtooltip-\" + Math.floor(Math.random() * 100000) // Generates a unique id when you create a new tooltip() object.\n        ,   data = null\n        ,   gravity = 'w'   // Can be 'n','s','e','w'. Determines how tooltip is positioned.\n        ,   distance = 25 // Distance to offset tooltip from the mouse location.\n        ,   snapDistance = 0   // Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n        ,   classes = null  // Attaches additional CSS classes to the tooltip DIV that is created.\n        ,   hidden = true  // Start off hidden, toggle with hide/show functions below.\n        ,   hideDelay = 200  // Delay (in ms) before the tooltip hides after calling hide().\n        ,   tooltip = null // d3 select of the tooltip div.\n        ,   lastPosition = { left: null, top: null } // Last position the tooltip was in.\n        ,   enabled = true  // True -> tooltips are rendered. False -> don't render tooltips.\n        ,   duration = 100 // Tooltip movement duration, in ms.\n        ,   headerEnabled = true // If is to show the tooltip header.\n        ,   nvPointerEventsClass = \"nv-pointer-events-none\" // CSS class to specify whether element should not have mouse events.\n    ;\n\n    // Format function for the tooltip values column.\n    var valueFormatter = function(d, i) {\n        return d;\n    };\n\n    // Format function for the tooltip header value.\n    var headerFormatter = function(d) {\n        return d;\n    };\n\n    var keyFormatter = function(d, i) {\n        return d;\n    };\n\n    // By default, the tooltip model renders a beautiful table inside a DIV.\n    // You can override this function if a custom tooltip is desired.\n    var contentGenerator = function(d) {\n        if (d === null) {\n            return '';\n        }\n\n        var table = d3.select(document.createElement(\"table\"));\n        if (headerEnabled) {\n            var theadEnter = table.selectAll(\"thead\")\n                .data([d])\n                .enter().append(\"thead\");\n\n            theadEnter.append(\"tr\")\n                .append(\"td\")\n                .attr(\"colspan\", 3)\n                .append(\"strong\")\n                .classed(\"x-value\", true)\n                .html(headerFormatter(d.value));\n        }\n\n        var tbodyEnter = table.selectAll(\"tbody\")\n            .data([d])\n            .enter().append(\"tbody\");\n\n        var trowEnter = tbodyEnter.selectAll(\"tr\")\n                .data(function(p) { return p.series})\n                .enter()\n                .append(\"tr\")\n                .classed(\"highlight\", function(p) { return p.highlight});\n\n        trowEnter.append(\"td\")\n            .classed(\"legend-color-guide\",true)\n            .append(\"div\")\n            .style(\"background-color\", function(p) { return p.color});\n\n        trowEnter.append(\"td\")\n            .classed(\"key\",true)\n            .classed(\"total\",function(p) { return !!p.total})\n            .html(function(p, i) { return keyFormatter(p.key, i)});\n\n        trowEnter.append(\"td\")\n            .classed(\"value\",true)\n            .html(function(p, i) { return valueFormatter(p.value, i) });\n\n        trowEnter.filter(function (p,i) { return p.percent !== undefined }).append(\"td\")\n            .classed(\"percent\", true)\n            .html(function(p, i) { return \"(\" + d3.format('%')(p.percent) + \")\" });\n\n        trowEnter.selectAll(\"td\").each(function(p) {\n            if (p.highlight) {\n                var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n                var opacity = 0.6;\n                d3.select(this)\n                    .style(\"border-bottom-color\", opacityScale(opacity))\n                    .style(\"border-top-color\", opacityScale(opacity))\n                ;\n            }\n        });\n\n        var html = table.node().outerHTML;\n        if (d.footer !== undefined)\n            html += \"<div class='footer'>\" + d.footer + \"</div>\";\n        return html;\n\n    };\n\n    /*\n     Function that returns the position (relative to the viewport/document.body)\n     the tooltip should be placed in.\n     Should return: {\n        left: <leftPos>,\n        top: <topPos>\n     }\n     */\n    var position = function() {\n        var pos = {\n            left: d3.event !== null ? d3.event.clientX : 0,\n            top: d3.event !== null ? d3.event.clientY : 0\n        };\n\n        if(getComputedStyle(document.body).transform != 'none') {\n            // Take the offset into account, as now the tooltip is relative\n            // to document.body.\n            var client = document.body.getBoundingClientRect();\n            pos.left -= client.left;\n            pos.top -= client.top;\n        }\n\n        return pos;\n    };\n\n    var dataSeriesExists = function(d) {\n        if (d && d.series) {\n            if (nv.utils.isArray(d.series)) {\n                return true;\n            }\n            // if object, it's okay just convert to array of the object\n            if (nv.utils.isObject(d.series)) {\n                d.series = [d.series];\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Calculates the gravity offset of the tooltip. Parameter is position of tooltip\n    // relative to the viewport.\n    var calcGravityOffset = function(pos) {\n        var height = tooltip.node().offsetHeight,\n            width = tooltip.node().offsetWidth,\n            clientWidth = document.documentElement.clientWidth, // Don't want scrollbars.\n            clientHeight = document.documentElement.clientHeight, // Don't want scrollbars.\n            left, top, tmp;\n\n        // calculate position based on gravity\n        switch (gravity) {\n            case 'e':\n                left = - width - distance;\n                top = - (height / 2);\n                if(pos.left + left < 0) left = distance;\n                if((tmp = pos.top + top) < 0) top -= tmp;\n                if((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'w':\n                left = distance;\n                top = - (height / 2);\n                if (pos.left + left + width > clientWidth) left = - width - distance;\n                if ((tmp = pos.top + top) < 0) top -= tmp;\n                if ((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'n':\n                left = - (width / 2) - 5; // - 5 is an approximation of the mouse's height.\n                top = distance;\n                if (pos.top + top + height > clientHeight) top = - height - distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 's':\n                left = - (width / 2);\n                top = - height - distance;\n                if (pos.top + top < 0) top = distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 'center':\n                left = - (width / 2);\n                top = - (height / 2);\n                break;\n            default:\n                left = 0;\n                top = 0;\n                break;\n        }\n\n        return { 'left': left, 'top': top };\n    };\n\n    /*\n     Positions the tooltip in the correct place, as given by the position() function.\n     */\n    var positionTooltip = function() {\n        nv.dom.read(function() {\n            var pos = position(),\n                gravityOffset = calcGravityOffset(pos),\n                left = pos.left + gravityOffset.left,\n                top = pos.top + gravityOffset.top;\n\n            // delay hiding a bit to avoid flickering\n            if (hidden) {\n                tooltip\n                    .interrupt()\n                    .transition()\n                    .delay(hideDelay)\n                    .duration(0)\n                    .style('opacity', 0);\n            } else {\n                // using tooltip.style('transform') returns values un-usable for tween\n                var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';\n                var new_translate = 'translate(' + Math.round(left) + 'px, ' + Math.round(top) + 'px)';\n                var translateInterpolator = d3.interpolateString(old_translate, new_translate);\n                var is_hidden = tooltip.style('opacity') < 0.1;\n\n                tooltip\n                    .interrupt() // cancel running transitions\n                    .transition()\n                    .duration(is_hidden ? 0 : duration)\n                    // using tween since some versions of d3 can't auto-tween a translate on a div\n                    .styleTween('transform', function (d) {\n                        return translateInterpolator;\n                    }, 'important')\n                    // Safari has its own `-webkit-transform` and does not support `transform`\n                    .styleTween('-webkit-transform', function (d) {\n                        return translateInterpolator;\n                    })\n                    .style('-ms-transform', new_translate)\n                    .style('opacity', 1);\n            }\n\n            lastPosition.left = left;\n            lastPosition.top = top;\n        });\n    };\n\n    // Creates new tooltip container, or uses existing one on DOM.\n    function initTooltip() {\n        if (!tooltip || !tooltip.node()) {\n            // Create new tooltip div if it doesn't exist on DOM.\n\n            var data = [1];\n            tooltip = d3.select(document.body).select('#'+id).data(data);\n\n            tooltip.enter().append('div')\n                   .attr(\"class\", \"nvtooltip \" + (classes ? classes : \"xy-tooltip\"))\n                   .attr(\"id\", id)\n                   .style(\"top\", 0).style(\"left\", 0)\n                   .style('opacity', 0)\n                   .style('position', 'fixed')\n                   .selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass, true)\n                   .classed(nvPointerEventsClass, true);\n\n            tooltip.exit().remove()\n        }\n    }\n\n    // Draw the tooltip onto the DOM.\n    function nvtooltip() {\n        if (!enabled) return;\n        if (!dataSeriesExists(data)) return;\n\n        nv.dom.write(function () {\n            initTooltip();\n            // Generate data and set it into tooltip.\n            // Bonus - If you override contentGenerator and return falsey you can use something like\n            //         React or Knockout to bind the data for your tooltip.\n            var newContent = contentGenerator(data);\n            if (newContent) {\n                tooltip.node().innerHTML = newContent;\n            }\n\n            positionTooltip();\n        });\n\n        return nvtooltip;\n    }\n\n    nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n    nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);\n\n    nvtooltip._options = Object.create({}, {\n        // simple read/write options\n        duration: {get: function(){return duration;}, set: function(_){duration=_;}},\n        gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        distance: {get: function(){return distance;}, set: function(_){distance=_;}},\n        snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},\n        classes: {get: function(){return classes;}, set: function(_){classes=_;}},\n        enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},\n        hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},\n        contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},\n        valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},\n        headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},\n        keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        headerEnabled: {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},\n        position: {get: function(){return position;}, set: function(_){position=_;}},\n\n        // Deprecated options\n        chartContainer: {get: function(){return document.body;}, set: function(_){\n            // deprecated after 1.8.3\n            nv.deprecated('chartContainer', 'feature removed after 1.8.3');\n        }},\n        fixedTop: {get: function(){return null;}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('fixedTop', 'feature removed after 1.8.1');\n        }},\n        offset: {get: function(){return {left: 0, top: 0};}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('offset', 'use chart.tooltip.distance() instead');\n        }},\n\n        // options with extra logic\n        hidden: {get: function(){return hidden;}, set: function(_){\n            if (hidden != _) {\n                hidden = !!_;\n                nvtooltip();\n            }\n        }},\n        data: {get: function(){return data;}, set: function(_){\n            // if showing a single data point, adjust data format with that\n            if (_.point) {\n                _.value = _.point.x;\n                _.series = _.series || {};\n                _.series.value = _.point.y;\n                _.series.color = _.point.color || _.series.color;\n            }\n            data = _;\n        }},\n\n        // read only properties\n        node: {get: function(){return tooltip.node();}, set: function(_){}},\n        id: {get: function(){return id;}, set: function(_){}}\n    });\n\n    nv.utils.initOptions(nvtooltip);\n    return nvtooltip;\n};\n\n\n/*\nGets the browser window size\n\nReturns object with height and width properties\n */\nnv.utils.windowSize = function() {\n    // Sane defaults\n    var size = {width: 640, height: 480};\n\n    // Most recent browsers use\n    if (window.innerWidth && window.innerHeight) {\n        size.width = window.innerWidth;\n        size.height = window.innerHeight;\n        return (size);\n    }\n\n    // IE can use depending on mode it is in\n    if (document.compatMode=='CSS1Compat' &&\n        document.documentElement &&\n        document.documentElement.offsetWidth ) {\n\n        size.width = document.documentElement.offsetWidth;\n        size.height = document.documentElement.offsetHeight;\n        return (size);\n    }\n\n    // Earlier IE uses Doc.body\n    if (document.body && document.body.offsetWidth) {\n        size.width = document.body.offsetWidth;\n        size.height = document.body.offsetHeight;\n        return (size);\n    }\n\n    return (size);\n};\n\n\n/* handle dumb browser quirks...  isinstance breaks if you use frames\ntypeof returns 'object' for null, NaN is a number, etc.\n */\nnv.utils.isArray = Array.isArray;\nnv.utils.isObject = function(a) {\n    return a !== null && typeof a === 'object';\n};\nnv.utils.isFunction = function(a) {\n    return typeof a === 'function';\n};\nnv.utils.isDate = function(a) {\n    return toString.call(a) === '[object Date]';\n};\nnv.utils.isNumber = function(a) {\n    return !isNaN(a) && typeof a === 'number';\n};\n\n\n/*\nBinds callback function to run when window is resized\n */\nnv.utils.windowResize = function(handler) {\n    if (window.addEventListener) {\n        window.addEventListener('resize', handler);\n    } else {\n        nv.log(\"ERROR: Failed to bind to window.resize with: \", handler);\n    }\n    // return object with clear function to remove the single added callback.\n    return {\n        callback: handler,\n        clear: function() {\n            window.removeEventListener('resize', handler);\n        }\n    }\n};\n\n\n/*\nBackwards compatible way to implement more d3-like coloring of graphs.\nCan take in nothing, an array, or a function/scale\nTo use a normal scale, get the range and pass that because we must be able\nto take two arguments and use the index to keep backward compatibility\n*/\nnv.utils.getColor = function(color) {\n    //if you pass in nothing, get default colors back\n    if (color === undefined) {\n        return nv.utils.defaultColor();\n\n    //if passed an array, turn it into a color scale\n    } else if(nv.utils.isArray(color)) {\n        var color_scale = d3.scale.ordinal().range(color);\n        return function(d, i) {\n            var key = i === undefined ? d : i;\n            return d.color || color_scale(key);\n        };\n\n    //if passed a function or scale, return it, or whatever it may be\n    //external libs, such as angularjs-nvd3-directives use this\n    } else {\n        //can't really help it if someone passes rubbish as color\n        return color;\n    }\n};\n\n\n/*\nDefault color chooser uses a color scale of 20 colors from D3\n https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors\n */\nnv.utils.defaultColor = function() {\n    // get range of the scale so we'll turn it into our own function.\n    return nv.utils.getColor(d3.scale.category20().range());\n};\n\n\n/*\nReturns a color function that takes the result of 'getKey' for each series and\nlooks for a corresponding color from the dictionary\n*/\nnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n    // use default series.key if getKey is undefined\n    getKey = getKey || function(series) { return series.key };\n    defaultColors = defaultColors || d3.scale.category20().range();\n\n    // start at end of default color list and walk back to index 0\n    var defIndex = defaultColors.length;\n\n    return function(series, index) {\n        var key = getKey(series);\n        if (nv.utils.isFunction(dictionary[key])) {\n            return dictionary[key]();\n        } else if (dictionary[key] !== undefined) {\n            return dictionary[key];\n        } else {\n            // no match in dictionary, use a default color\n            if (!defIndex) {\n                // used all the default colors, start over\n                defIndex = defaultColors.length;\n            }\n            defIndex = defIndex - 1;\n            return defaultColors[defIndex];\n        }\n    };\n};\n\n\n/*\nFrom the PJAX example on d3js.org, while this is not really directly needed\nit's a very cool method for doing pjax, I may expand upon it a little bit,\nopen to suggestions on anything that may be useful\n*/\nnv.utils.pjax = function(links, content) {\n\n    var load = function(href) {\n        d3.html(href, function(fragment) {\n            var target = d3.select(content).node();\n            target.parentNode.replaceChild(\n                d3.select(fragment).select(content).node(),\n                target);\n            nv.utils.pjax(links, content);\n        });\n    };\n\n    d3.selectAll(links).on(\"click\", function() {\n        history.pushState(this.href, this.textContent, this.href);\n        load(this.href);\n        d3.event.preventDefault();\n    });\n\n    d3.select(window).on(\"popstate\", function() {\n        if (d3.event.state) {\n            load(d3.event.state);\n        }\n    });\n};\n\n\n/*\nFor when we want to approximate the width in pixels for an SVG:text element.\nMost common instance is when the element is in a display:none; container.\nForumla is : text.length * font-size * constant_factor\n*/\nnv.utils.calcApproxTextWidth = function (svgTextElem) {\n    if (nv.utils.isFunction(svgTextElem.style) && nv.utils.isFunction(svgTextElem.text)) {\n        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"), 10);\n        var textLength = svgTextElem.text().length;\n        return nv.utils.NaNtoZero(textLength * fontSize * 0.5);\n    }\n    return 0;\n};\n\n\n/*\nNumbers that are undefined, null or NaN, convert them to zeros.\n*/\nnv.utils.NaNtoZero = function(n) {\n    if (!nv.utils.isNumber(n)\n        || isNaN(n)\n        || n === null\n        || n === Infinity\n        || n === -Infinity) {\n\n        return 0;\n    }\n    return n;\n};\n\n/*\nAdd a way to watch for d3 transition ends to d3\n*/\nd3.selection.prototype.watchTransition = function(renderWatch){\n    var args = [this].concat([].slice.call(arguments, 1));\n    return renderWatch.transition.apply(renderWatch, args);\n};\n\n\n/*\nHelper object to watch when d3 has rendered something\n*/\nnv.utils.renderWatch = function(dispatch, duration) {\n    if (!(this instanceof nv.utils.renderWatch)) {\n        return new nv.utils.renderWatch(dispatch, duration);\n    }\n\n    var _duration = duration !== undefined ? duration : 250;\n    var renderStack = [];\n    var self = this;\n\n    this.models = function(models) {\n        models = [].slice.call(arguments, 0);\n        models.forEach(function(model){\n            model.__rendered = false;\n            (function(m){\n                m.dispatch.on('renderEnd', function(arg){\n                    m.__rendered = true;\n                    self.renderEnd('model');\n                });\n            })(model);\n\n            if (renderStack.indexOf(model) < 0) {\n                renderStack.push(model);\n            }\n        });\n    return this;\n    };\n\n    this.reset = function(duration) {\n        if (duration !== undefined) {\n            _duration = duration;\n        }\n        renderStack = [];\n    };\n\n    this.transition = function(selection, args, duration) {\n        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n\n        if (args.length > 1) {\n            duration = args.pop();\n        } else {\n            duration = _duration !== undefined ? _duration : 250;\n        }\n        selection.__rendered = false;\n\n        if (renderStack.indexOf(selection) < 0) {\n            renderStack.push(selection);\n        }\n\n        if (duration === 0) {\n            selection.__rendered = true;\n            selection.delay = function() { return this; };\n            selection.duration = function() { return this; };\n            return selection;\n        } else {\n            if (selection.length === 0) {\n                selection.__rendered = true;\n            } else if (selection.every( function(d){ return !d.length; } )) {\n                selection.__rendered = true;\n            } else {\n                selection.__rendered = false;\n            }\n\n            var n = 0;\n            return selection\n                .transition()\n                .duration(duration)\n                .each(function(){ ++n; })\n                .each('end', function(d, i) {\n                    if (--n === 0) {\n                        selection.__rendered = true;\n                        self.renderEnd.apply(this, args);\n                    }\n                });\n        }\n    };\n\n    this.renderEnd = function() {\n        if (renderStack.every( function(d){ return d.__rendered; } )) {\n            renderStack.forEach( function(d){ d.__rendered = false; });\n            dispatch.renderEnd.apply(this, arguments);\n        }\n    }\n\n};\n\n\n/*\nTakes multiple objects and combines them into the first one (dst)\nexample:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});\ngives:  {a: 2, b: 3, c: 4}\n*/\nnv.utils.deepExtend = function(dst){\n    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n    sources.forEach(function(source) {\n        for (var key in source) {\n            var isArray = nv.utils.isArray(dst[key]);\n            var isObject = nv.utils.isObject(dst[key]);\n            var srcObj = nv.utils.isObject(source[key]);\n\n            if (isObject && !isArray && srcObj) {\n                nv.utils.deepExtend(dst[key], source[key]);\n            } else {\n                dst[key] = source[key];\n            }\n        }\n    });\n};\n\n\n/*\nstate utility object, used to track d3 states in the models\n*/\nnv.utils.state = function(){\n    if (!(this instanceof nv.utils.state)) {\n        return new nv.utils.state();\n    }\n    var state = {};\n    var _self = this;\n    var _setState = function(){};\n    var _getState = function(){ return {}; };\n    var init = null;\n    var changed = null;\n\n    this.dispatch = d3.dispatch('change', 'set');\n\n    this.dispatch.on('set', function(state){\n        _setState(state, true);\n    });\n\n    this.getter = function(fn){\n        _getState = fn;\n        return this;\n    };\n\n    this.setter = function(fn, callback) {\n        if (!callback) {\n            callback = function(){};\n        }\n        _setState = function(state, update){\n            fn(state);\n            if (update) {\n                callback();\n            }\n        };\n        return this;\n    };\n\n    this.init = function(state){\n        init = init || {};\n        nv.utils.deepExtend(init, state);\n    };\n\n    var _set = function(){\n        var settings = _getState();\n\n        if (JSON.stringify(settings) === JSON.stringify(state)) {\n            return false;\n        }\n\n        for (var key in settings) {\n            if (state[key] === undefined) {\n                state[key] = {};\n            }\n            state[key] = settings[key];\n            changed = true;\n        }\n        return true;\n    };\n\n    this.update = function(){\n        if (init) {\n            _setState(init, false);\n            init = null;\n        }\n        if (_set.call(this)) {\n            this.dispatch.change(state);\n        }\n    };\n\n};\n\n\n/*\nSnippet of code you can insert into each nv.models.* to give you the ability to\ndo things like:\nchart.options({\n  showXAxis: true,\n  tooltips: true\n});\n\nTo enable in the chart:\nchart.options = nv.utils.optionsFunc.bind(chart);\n*/\nnv.utils.optionsFunc = function(args) {\n    if (args) {\n        d3.map(args).forEach((function(key,value) {\n            if (nv.utils.isFunction(this[key])) {\n                this[key](value);\n            }\n        }).bind(this));\n    }\n    return this;\n};\n\n\n/*\nnumTicks:  requested number of ticks\ndata:  the chart data\n\nreturns the number of ticks to actually use on X axis, based on chart data\nto avoid duplicate ticks with the same value\n*/\nnv.utils.calcTicksX = function(numTicks, data) {\n    // find max number of values from all data streams\n    var numValues = 1;\n    var i = 0;\n    for (i; i < data.length; i += 1) {\n        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;\n        numValues = stream_len > numValues ? stream_len : numValues;\n    }\n    nv.log(\"Requested number of ticks: \", numTicks);\n    nv.log(\"Calculated max values to be: \", numValues);\n    // make sure we don't have more ticks than values to avoid duplicates\n    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;\n    // make sure we have at least one tick\n    numTicks = numTicks < 1 ? 1 : numTicks;\n    // make sure it's an integer\n    numTicks = Math.floor(numTicks);\n    nv.log(\"Calculating tick count as: \", numTicks);\n    return numTicks;\n};\n\n\n/*\nreturns number of ticks to actually use on Y axis, based on chart data\n*/\nnv.utils.calcTicksY = function(numTicks, data) {\n    // currently uses the same logic but we can adjust here if needed later\n    return nv.utils.calcTicksX(numTicks, data);\n};\n\n\n/*\nAdd a particular option from an options object onto chart\nOptions exposed on a chart are a getter/setter function that returns chart\non set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');\n\noption objects should be generated via Object.create() to provide\nthe option of manipulating data via get/set functions.\n*/\nnv.utils.initOption = function(chart, name) {\n    // if it's a call option, just call it directly, otherwise do get/set\n    if (chart._calls && chart._calls[name]) {\n        chart[name] = chart._calls[name];\n    } else {\n        chart[name] = function (_) {\n            if (!arguments.length) return chart._options[name];\n            chart._overrides[name] = true;\n            chart._options[name] = _;\n            return chart;\n        };\n        // calling the option as _option will ignore if set by option already\n        // so nvd3 can set options internally but the stop if set manually\n        chart['_' + name] = function(_) {\n            if (!arguments.length) return chart._options[name];\n            if (!chart._overrides[name]) {\n                chart._options[name] = _;\n            }\n            return chart;\n        }\n    }\n};\n\n\n/*\nAdd all options in an options object to the chart\n*/\nnv.utils.initOptions = function(chart) {\n    chart._overrides = chart._overrides || {};\n    var ops = Object.getOwnPropertyNames(chart._options || {});\n    var calls = Object.getOwnPropertyNames(chart._calls || {});\n    ops = ops.concat(calls);\n    for (var i in ops) {\n        nv.utils.initOption(chart, ops[i]);\n    }\n};\n\n\n/*\nInherit options from a D3 object\nd3.rebind makes calling the function on target actually call it on source\nAlso use _d3options so we can track what we inherit for documentation and chained inheritance\n*/\nnv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {\n    target._d3options = oplist.concat(target._d3options || []);\n    oplist.unshift(d3_source);\n    oplist.unshift(target);\n    d3.rebind.apply(this, oplist);\n};\n\n\n/*\nRemove duplicates from an array\n*/\nnv.utils.arrayUnique = function(a) {\n    return a.sort().filter(function(item, pos) {\n        return !pos || item != a[pos - 1];\n    });\n};\n\n\n/*\nKeeps a list of custom symbols to draw from in addition to d3.svg.symbol\nNecessary since d3 doesn't let you extend its list -_-\nAdd new symbols by doing nv.utils.symbols.set('name', function(size){...});\n*/\nnv.utils.symbolMap = d3.map();\n\n\n/*\nReplaces d3.svg.symbol so that we can look both there and our own map\n */\nnv.utils.symbol = function() {\n    var type,\n        size = 64;\n    function symbol(d,i) {\n        var t = type.call(this,d,i);\n        var s = size.call(this,d,i);\n        if (d3.svg.symbolTypes.indexOf(t) !== -1) {\n            return d3.svg.symbol().type(t).size(s)();\n        } else {\n            return nv.utils.symbolMap.get(t)(s);\n        }\n    }\n    symbol.type = function(_) {\n        if (!arguments.length) return type;\n        type = d3.functor(_);\n        return symbol;\n    };\n    symbol.size = function(_) {\n        if (!arguments.length) return size;\n        size = d3.functor(_);\n        return symbol;\n    };\n    return symbol;\n};\n\n\n/*\nInherit option getter/setter functions from source to target\nd3.rebind makes calling the function on target actually call it on source\nAlso track via _inherited and _d3options so we can track what we inherit\nfor documentation generation purposes and chained inheritance\n*/\nnv.utils.inheritOptions = function(target, source) {\n    // inherit all the things\n    var ops = Object.getOwnPropertyNames(source._options || {});\n    var calls = Object.getOwnPropertyNames(source._calls || {});\n    var inherited = source._inherited || [];\n    var d3ops = source._d3options || [];\n    var args = ops.concat(calls).concat(inherited).concat(d3ops);\n    args.unshift(source);\n    args.unshift(target);\n    d3.rebind.apply(this, args);\n    // pass along the lists to keep track of them, don't allow duplicates\n    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));\n    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));\n};\n\n\n/*\nRuns common initialize code on the svg before the chart builds\n*/\nnv.utils.initSVG = function(svg) {\n    svg.classed({'nvd3-svg':true});\n};\n\n\n/*\nSanitize and provide default for the container height.\n*/\nnv.utils.sanitizeHeight = function(height, container) {\n    return (height || parseInt(container.style('height'), 10) || 400);\n};\n\n\n/*\nSanitize and provide default for the container width.\n*/\nnv.utils.sanitizeWidth = function(width, container) {\n    return (width || parseInt(container.style('width'), 10) || 960);\n};\n\n\n/*\nCalculate the available height for a chart.\n*/\nnv.utils.availableHeight = function(height, container, margin) {\n    return Math.max(0,nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n};\n\n/*\nCalculate the available width for a chart.\n*/\nnv.utils.availableWidth = function(width, container, margin) {\n    return Math.max(0,nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);\n};\n\n/*\nClear any rendered chart components and display a chart's 'noData' message\n*/\nnv.utils.noData = function(chart, container) {\n    var opt = chart.options(),\n        margin = opt.margin(),\n        noData = opt.noData(),\n        data = (noData == null) ? [\"No Data Available.\"] : [noData],\n        height = nv.utils.availableHeight(null, container, margin),\n        width = nv.utils.availableWidth(null, container, margin),\n        x = margin.left + width/2,\n        y = margin.top + height/2;\n\n    //Remove any previously created chart components\n    container.selectAll('g').remove();\n\n    var noDataText = container.selectAll('.nv-noData').data(data);\n\n    noDataText.enter().append('text')\n        .attr('class', 'nvd3 nv-noData')\n        .attr('dy', '-.7em')\n        .style('text-anchor', 'middle');\n\n    noDataText\n        .attr('x', x)\n        .attr('y', y)\n        .text(function(t){ return t; });\n};\n\n/*\n Wrap long labels.\n */\nnv.utils.wrapTicks = function (text, width) {\n    text.each(function() {\n        var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1,\n            y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(\" \"));\n                line = [word];\n                tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n            }\n        }\n    });\n};\n\n/*\nCheck equality of 2 array\n*/\nnv.utils.arrayEquals = function (array1, array2) {\n    if (array1 === array2)\n        return true;\n\n    if (!array1 || !array2)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (array1.length != array2.length)\n        return false;\n\n    for (var i = 0,\n        l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!nv.arrayEquals(array1[i], array2[i]))\n                return false;\n        } else if (array1[i] != array2[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\nnv.models.axis = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var axis = d3.svg.axis();\n    var scale = d3.scale.linear();\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 75 //only used for tickLabel currently\n        , height = 60 //only used for tickLabel currently\n        , axisLabelText = null\n        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n        , rotateLabels = 0\n        , rotateYLabel = true\n        , staggerLabels = false\n        , isOrdinal = false\n        , ticks = null\n        , axisLabelDistance = 0\n        , fontSize = undefined\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n    axis\n        .scale(scale)\n        .orient('bottom')\n        .tickFormat(function(d) { return d })\n    ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            if (ticks !== null)\n                axis.ticks(ticks);\n            else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\n            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n            g.watchTransition(renderWatch, 'axis').call(axis);\n\n            scale0 = scale0 || axis.scale();\n\n            var fmt = axis.tickFormat();\n            if (fmt == null) {\n                fmt = scale0.tickFormat();\n            }\n\n            var axisLabel = g.selectAll('text.nv-axislabel')\n                .data([axisLabelText || null]);\n            axisLabel.exit().remove();\n\n            //only skip when fontSize is undefined so it can be cleared with a null or blank string\n            if (fontSize !== undefined) {\n                g.selectAll('g').select(\"text\").style('font-size', fontSize);\n            }\n\n            var xLabelMargin;\n            var axisMaxMin;\n            var w;\n            switch (axis.orient()) {\n                case 'top':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                  w = 0;\n                  if (scale.range().length === 1) {\n                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                  } else if (scale.range().length === 2) {\n                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                  } else if ( scale.range().length > 2){\n                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                  };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', 0)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '-0.5em')\n                            .attr('y', -axis.tickPadding())\n                            .attr('text-anchor', 'middle')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max top')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'\n                            });\n                    }\n                    break;\n                case 'bottom':\n                    xLabelMargin = axisLabelDistance + 36;\n                    var maxTextWidth = 30;\n                    var textHeight = 0;\n                    var xTicks = g.selectAll('g').select(\"text\");\n                    var rotateLabelsRule = '';\n                    if (rotateLabels%360) {\n                        //Reset transform on ticks so textHeight can be calculated correctly\n                        xTicks.attr('transform', ''); \n                        //Calculate the longest xTick width\n                        xTicks.each(function(d,i){\n                            var box = this.getBoundingClientRect();\n                            var width = box.width;\n                            textHeight = box.height;\n                            if(width > maxTextWidth) maxTextWidth = width;\n                        });\n                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';\n                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n                        //Rotate all xTicks\n                        xTicks\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n                    } else {\n                        if (staggerLabels) {\n                            xTicks\n                                .attr('transform', function(d,i) {\n                                    return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'\n                                });\n                        } else {\n                            xTicks.attr('transform', \"translate(0,0)\");\n                        }\n                    }\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    w = 0;\n                    if (scale.range().length === 1) {\n                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                    } else if (scale.range().length === 2) {\n                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                    } else if ( scale.range().length > 2){\n                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                    };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', xLabelMargin)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        //if (showMaxMin && !isOrdinal) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            //.data(scale.domain())\n                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '.71em')\n                            .attr('y', axis.tickPadding())\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            });\n                    }\n\n                    break;\n                case 'right':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12 - (axisLabelDistance || 0)) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                       \taxisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', axis.tickPadding())\n                            .style('text-anchor', 'start')\n                            .text(function(d, i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n                case 'left':\n                    /*\n                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n                     var yTicks = g.selectAll('g').select(\"text\");\n                     yTicks.each(function(d,i){\n                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;\n                     if(labelPadding > width) width = labelPadding;\n                     });\n                     */\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)\n                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', -axis.tickPadding())\n                            .attr('text-anchor', 'end')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n            }\n            axisLabel.text(function(d) { return d });\n\n            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n                //check if max and min overlap other values, if so, hide the values that overlap\n                g.selectAll('g') // the g's wrapping each tick\n                    .each(function(d,i) {\n                        d3.select(this).select('text').attr('opacity', 1);\n                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                                d3.select(this).attr('opacity', 0);\n\n                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n                        }\n                    });\n\n                //if Max and Min = 0 only show min, Issue #281\n                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {\n                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {\n                        return !i ? 1 : 0\n                    });\n                }\n            }\n\n            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n                var maxMinRange = [];\n                wrap.selectAll('g.nv-axisMaxMin')\n                    .each(function(d,i) {\n                        try {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)\n                        }catch (err) {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + 4);\n                        }\n                    });\n                // the g's wrapping each tick\n                g.selectAll('g').each(function(d, i) {\n                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                            d3.select(this).remove();\n                        else\n                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n                    }\n                });\n            }\n\n            //Highlight zero tick line\n            g.selectAll('.tick')\n                .filter(function (d) {\n                    /*\n                    The filter needs to return only ticks at or near zero.\n                    Numbers like 0.00001 need to count as zero as well,\n                    and the arithmetic trick below solves that.\n                    */\n                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)\n                }) \n                .classed('zero', true);\n            \n            //store old scales for use in transitions on update\n            scale0 = scale.copy();\n\n        });\n\n        renderWatch.renderEnd('axis immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.axis = axis;\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},\n        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},\n        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},\n        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},\n        height:            {get: function(){return height;}, set: function(_){height=_;}},\n        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        width:             {get: function(){return width;}, set: function(_){width=_;}},\n        fontSize:          {get: function(){return fontSize;}, set: function(_){fontSize=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top !== undefined    ? _.top    : margin.top;\n            margin.right  = _.right !== undefined  ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left !== undefined   ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration=_;\n            renderWatch.reset(duration);\n        }},\n        scale: {get: function(){return scale;}, set: function(_){\n            scale = _;\n            axis.scale(scale);\n            isOrdinal = typeof scale.rangeBands === 'function';\n            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);\n    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n\n    return chart;\n};\nnv.models.boxPlot = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0},\n        width = 960,\n        height = 500,\n        id = Math.floor(Math.random() * 10000), // Create semi-unique ID in case user doesn't select one\n        xScale = d3.scale.ordinal(),\n        yScale = d3.scale.linear(),\n        getX  = function(d) { return d.label }, // Default data model selectors.\n        getQ1 = function(d) { return d.values.Q1 },\n        getQ2 = function(d) { return d.values.Q2 },\n        getQ3 = function(d) { return d.values.Q3 },\n        getWl = function(d) { return d.values.whisker_low },\n        getWh = function(d) { return d.values.whisker_high },\n        getColor = function(d) { return d.color },\n        getOlItems  = function(d) { return d.values.outliers },\n        getOlValue = function(d, i, j) { return d },\n        getOlLabel = function(d, i, j) { return d },\n        getOlColor = function(d, i, j) { return undefined },\n        color = nv.utils.defaultColor(),\n        container = null,\n        xDomain, xRange,\n        yDomain, yRange,\n        dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'),\n        duration = 250,\n        maxBoxWidth = null;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var xScale0, yScale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            xScale.domain(xDomain || data.map(function(d,i) { return getX(d,i); }))\n                .rangeBands(xRange || [0, availableWidth], 0.1);\n\n            // if we know yDomain, no need to calculate\n            var yData = []\n            if (!yDomain) {\n                // (y-range is based on quartiles, whiskers and outliers)\n                var values = [], yMin, yMax;\n                data.forEach(function (d, i) {\n                    var q1 = getQ1(d), q3 = getQ3(d), wl = getWl(d), wh = getWh(d);\n                    var olItems = getOlItems(d);\n                    if (olItems) {\n                        olItems.forEach(function (e, i) {\n                            values.push(getOlValue(e, i, undefined));\n                        });\n                    }\n                    if (wl) { values.push(wl) }\n                    if (q1) { values.push(q1) }\n                    if (q3) { values.push(q3) }\n                    if (wh) { values.push(wh) }\n                });\n                yMin = d3.min(values);\n                yMax = d3.max(values);\n                yData = [ yMin, yMax ] ;\n            }\n\n            yScale.domain(yDomain || yData);\n            yScale.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            xScale0 = xScale0 || xScale;\n            yScale0 = yScale0 || yScale.copy().range([yScale(0),yScale(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });\n            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);\n            boxplots\n                .attr('class', 'nv-boxplot')\n                .attr('transform', function(d,i,j) { return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)'; })\n                .classed('hover', function(d) { return d.hover });\n            boxplots\n                .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', 0.75)\n                .delay(function(d,i) { return i * duration / data.length })\n                .attr('transform', function(d,i) {\n                    return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)';\n                });\n            boxplots.exit().remove();\n\n            // ----- add the SVG elements for each boxPlot -----\n\n            // conditionally append whisker lines\n            boxEnter.each(function(d,i) {\n                var box = d3.select(this);\n                [getWl, getWh].forEach(function (f) {\n                    if (f(d) !== undefined && f(d) !== null) {\n                        var key = (f === getWl) ? 'low' : 'high';\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);\n                    }\n                });\n            });\n\n            var box_width = function() { return (maxBoxWidth === null ? xScale.rangeBand() * 0.9 : Math.min(75, xScale.rangeBand() * 0.9)); };\n            var box_left  = function() { return xScale.rangeBand() * 0.45 - box_width()/2; };\n            var box_right = function() { return xScale.rangeBand() * 0.45 + box_width()/2; };\n\n            // update whisker lines and ticks\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                var endpoint = (f === getWl) ? getQ1 : getQ3;\n                boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', xScale.rangeBand() * 0.45 )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', xScale.rangeBand() * 0.45 )\n                    .attr('y2', function(d,i) { return yScale(endpoint(d)); });\n                boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', box_left )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', box_right )\n                    .attr('y2', function(d,i) { return yScale(f(d)); });\n            });\n\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                boxEnter.selectAll('.nv-boxplot-' + key)\n                  .on('mouseover', function(d,i,j) {\n                      d3.select(this).classed('hover', true);\n                      dispatch.elementMouseover({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mouseout', function(d,i,j) {\n                      d3.select(this).classed('hover', false);\n                      dispatch.elementMouseout({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mousemove', function(d,i) {\n                      dispatch.elementMousemove({e: d3.event});\n                  });\n            });\n\n            // boxes\n            boxEnter.append('rect')\n                .attr('class', 'nv-boxplot-box')\n                // tooltip events\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n\n            // box transitions\n            boxplots.select('rect.nv-boxplot-box')\n              .watchTransition(renderWatch, 'nv-boxplot: boxes')\n                .attr('y', function(d,i) { return yScale(getQ3(d)); })\n                .attr('width', box_width)\n                .attr('x', box_left )\n                .attr('height', function(d,i) { return Math.abs(yScale(getQ3(d)) - yScale(getQ1(d))) || 1 })\n                .style('fill', function(d,i) { return getColor(d) || color(d,i) })\n                .style('stroke', function(d,i) { return getColor(d) || color(d,i) });\n\n            // median line\n            boxEnter.append('line').attr('class', 'nv-boxplot-median');\n\n            boxplots.select('line.nv-boxplot-median')\n              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')\n                .attr('x1', box_left)\n                .attr('y1', function(d,i) { return yScale(getQ2(d)); })\n                .attr('x2', box_right)\n                .attr('y2', function(d,i) { return yScale(getQ2(d)); });\n\n            // outliers\n            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {\n                return getOlItems(d) || [];\n            });\n            outliers.enter().append('circle')\n                .style('fill', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('stroke', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('z-index', 9000)\n                .on('mouseover', function(d,i,j) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i,j) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n            outliers.attr('class', 'nv-boxplot-outlier');\n            outliers\n              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')\n                .attr('cx', xScale.rangeBand() * 0.45)\n                .attr('cy', function(d,i,j) { return yScale(getOlValue(d,i,j)); })\n                .attr('r', '3');\n            outliers.exit().remove();\n\n            //store old scales for use in transitions on update\n            xScale0 = xScale.copy();\n            yScale0 = yScale.copy();\n        });\n\n        renderWatch.renderEnd('nv-boxplot immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:       {get: function(){return width;}, set: function(_){width=_;}},\n        height:      {get: function(){return height;}, set: function(_){height=_;}},\n        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},\n        x:           {get: function(){return getX;}, set: function(_){getX=_;}},\n        q1: {get: function(){return getQ1;}, set: function(_){getQ1=_;}},\n        q2: {get: function(){return getQ2;}, set: function(_){getQ2=_;}},\n        q3: {get: function(){return getQ3;}, set: function(_){getQ3=_;}},\n        wl: {get: function(){return getWl;}, set: function(_){getWl=_;}},\n        wh: {get: function(){return getWh;}, set: function(_){getWh=_;}},\n        itemColor:    {get: function(){return getColor;}, set: function(_){getColor=_;}},\n        outliers:     {get: function(){return getOlItems;}, set: function(_){getOlItems=_;}},\n        outlierValue: {get: function(){return getOlValue;}, set: function(_){getOlValue=_;}},\n        outlierLabel: {get: function(){return getOlLabel;}, set: function(_){getOlLabel=_;}},\n        outlierColor: {get: function(){return getOlColor;}, set: function(_){getOlColor=_;}},\n        xScale:  {get: function(){return xScale;}, set: function(_){xScale=_;}},\n        yScale:  {get: function(){return yScale;}, set: function(_){yScale=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n        y: {\n            get: function() {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n                return {};\n            },\n            set: function(_) {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n            }\n        },\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.boxPlotChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var boxplot = nv.models.boxPlot(),\n        xAxis = nv.models.axis(),\n        yAxis = nv.models.axis();\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60},\n        width = null,\n        height = null,\n        color = nv.utils.getColor(),\n        showXAxis = true,\n        showYAxis = true,\n        rightAlignYAxis = false,\n        staggerLabels = false,\n        tooltip = nv.models.tooltip(),\n        x, y,\n        noData = 'No Data Available.',\n        dispatch = d3.dispatch('beforeUpdate', 'renderEnd'),\n        duration = 250;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip.duration(0);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(boxplot);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this), that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = (width  || parseInt(container.style('width')) || 960) - margin.left - margin.right;\n            var availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // TODO still need to find a way to validate quartile data presence using boxPlot callbacks.\n            // Display No Data message if there's nothing to show. (quartiles required at minimum).\n            if (!data || !data.length) {\n                var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n                noDataText.enter().append('text')\n                    .attr('class', 'nvd3 nv-noData')\n                    .attr('dy', '-.7em')\n                    .style('text-anchor', 'middle');\n\n                noDataText\n                    .attr('x', margin.left + availableWidth / 2)\n                    .attr('y', margin.top + availableHeight / 2)\n                    .text(function(d) { return d });\n\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = boxplot.xScale();\n            y = boxplot.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(' + availableWidth + ',0)');\n            }\n\n            // Main Chart Component(s)\n            boxplot.width(availableWidth).height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n\n            barsWrap.transition().call(boxplot);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + boxplot.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 === 0 ? '5' : '17') + ')' })\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select('.nv-zeroLine line')\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', y(0))\n                .attr('y2', y(0))\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n        });\n\n        renderWatch.renderEnd('nv-boxplot chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip.data(evt).hidden(false);\n    });\n\n    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.data(evt).hidden(true);\n    });\n\n    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.boxplot = boxplot;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            boxplot.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            boxplot.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, boxplot);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\n\nnv.models.bullet = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , orient = 'left' // TODO top & bottom\n        , reverse = false\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , markerLines = function(d) { return d.markerLines ? d.markerLines : [0] }\n        , measures = function(d) { return d.measures }\n        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n        , markerLineLabels = function(d) { return d.markerLineLabels ? d.markerLineLabels : []  }\n        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , width = 380\n        , height = 30\n        , container = null\n        , tickFormat = null\n        , color = nv.utils.getColor(['#1f77b4'])\n        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')\n        , defaultRangeLabels = [\"Maximum\", \"Mean\", \"Minimum\"]\n        , legacyRangeClassNames = [\"Max\", \"Avg\", \"Min\"]\n        , duration = 1000\n        ;\n\n    function sortLabels(labels, values){\n        var lz = labels.slice();\n        labels.sort(function(a, b){\n            var iA = lz.indexOf(a);\n            var iB = lz.indexOf(b);\n            return d3.descending(values[iA], values[iB]);\n        });\n    };\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var rangez = ranges.call(this, d, i).slice(),\n                markerz = markers.call(this, d, i).slice(),\n                markerLinez = markerLines.call(this, d, i).slice(),\n                measurez = measures.call(this, d, i).slice(),\n                rangeLabelz = rangeLabels.call(this, d, i).slice(),\n                markerLabelz = markerLabels.call(this, d, i).slice(),\n                markerLineLabelz = markerLineLabels.call(this, d, i).slice(),\n                measureLabelz = measureLabels.call(this, d, i).slice();\n\n            // Sort labels according to their sorted values\n            sortLabels(rangeLabelz, rangez);\n            sortLabels(markerLabelz, markerz);\n            sortLabels(markerLineLabelz, markerLinez);\n            sortLabels(measureLabelz, measurez);\n\n            // sort values descending\n            rangez.sort(d3.descending);\n            markerz.sort(d3.descending);\n            markerLinez.sort(d3.descending);\n            measurez.sort(d3.descending);\n\n            // Setup Scales\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain( d3.extent(d3.merge([forceX, rangez])) )\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var rangeMin = d3.min(rangez), //rangez[2]\n                rangeMax = d3.max(rangez), //rangez[0]\n                rangeAvg = rangez[1];\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var rangeClassNames = 'nv-range nv-range'+i;\n                if(i <= 2){\n                    rangeClassNames = rangeClassNames + ' nv-range'+legacyRangeClassNames[i];\n                }\n                gEnter.append('rect').attr('class', rangeClassNames);\n            }\n\n            gEnter.append('rect').attr('class', 'nv-measure');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var range = rangez[i];\n                g.select('rect.nv-range'+i)\n                    .datum(range)\n                    .attr('height', availableHeight)\n                    .transition()\n                    .duration(duration)\n                    .attr('width', w1(range))\n                    .attr('x', xp1(range))\n            }\n\n            g.select('rect.nv-measure')\n                .style('fill', color)\n                .attr('height', availableHeight / 3)\n                .attr('y', availableHeight / 3)\n                .on('mouseover', function() {\n                    dispatch.elementMouseover({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function() {\n                    dispatch.elementMouseout({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .transition()\n                .duration(duration)\n                .attr('width', measurez < 0 ?\n                    x1(0) - x1(measurez[0])\n                    : x1(measurez[0]) - x1(0))\n                .attr('x', xp1(measurez));\n\n            var h3 =  availableHeight / 6;\n\n            var markerData = markerz.map( function(marker, index) {\n                return {value: marker, label: markerLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .enter()\n              .append('path')\n              .attr('class', 'nv-markerTriangle')\n              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .transition()\n              .duration(duration)\n              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });\n\n            var markerLinesData = markerLinez.map( function(marker, index) {\n                return {value: marker, label: markerLineLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .enter()\n              .append('line')\n              .attr('cursor', '')\n              .attr('class', 'nv-markerLine')\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('y1', '2')\n              .attr('x2', function(d) { return x1(d.value) })\n              .attr('y2', availableHeight - 2)\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .transition()\n              .duration(duration)\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('x2', function(d) { return x1(d.value) });\n\n            wrap.selectAll('.nv-range')\n                .on('mouseover', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseover({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Previous',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseout({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        duration:    {get: function(){return duration;}, set: function(_){duration=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\n\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\nnv.models.bulletChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bullet = nv.models.bullet();\n    var tooltip = nv.models.tooltip();\n\n    var orient = 'left' // TODO top & bottom\n        , reverse = false\n        , margin = {top: 5, right: 40, bottom: 20, left: 120}\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , measures = function(d) { return d.measures }\n        , width = null\n        , height = 55\n        , tickFormat = null\n        , ticks = null\n        , noData = null\n        , dispatch = d3.dispatch()\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false);\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom,\n                that = this;\n\n            chart.update = function() { chart(selection) };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!d || !ranges.call(this, d, i)) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n                markerz = markers.call(this, d, i).slice().sort(d3.descending),\n                measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bulletWrap');\n            gEnter.append('g').attr('class', 'nv-titles');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain([0, Math.max(rangez[0], (markerz[0] || 0), measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\n            var title = gEnter.select('.nv-titles').append('g')\n                .attr('text-anchor', 'end')\n                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n            title.append('text')\n                .attr('class', 'nv-title')\n                .text(function(d) { return d.title; });\n\n            title.append('text')\n                .attr('class', 'nv-subtitle')\n                .attr('dy', '1em')\n                .text(function(d) { return d.subtitle; });\n\n            bullet\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var bulletWrap = g.select('.nv-bulletWrap');\n            d3.transition(bulletWrap).call(bullet);\n\n            // Compute the tick format.\n            var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\n            // Update the tick groups.\n            var tick = g.selectAll('g.nv-tick')\n                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {\n                    return this.textContent || format(d);\n                });\n\n            // Initialize the ticks with the old scale, x0.\n            var tickEnter = tick.enter().append('g')\n                .attr('class', 'nv-tick')\n                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n                .style('opacity', 1e-6);\n\n            tickEnter.append('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickEnter.append('text')\n                .attr('text-anchor', 'middle')\n                .attr('dy', '1em')\n                .attr('y', availableHeight * 7 / 6)\n                .text(format);\n\n            // Transition the updating ticks to the new scale, x1.\n            var tickUpdate = d3.transition(tick)\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1);\n\n            tickUpdate.select('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickUpdate.select('text')\n                .attr('y', availableHeight * 7 / 6);\n\n            // Transition the exiting ticks to the new scale, x1.\n            d3.transition(tick.exit())\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1e-6)\n                .remove();\n        });\n\n        d3.timer.flush();\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: evt.label,\n            value: evt.value,\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.bullet = bullet;\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bullet);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n\nnv.models.candlestickBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Width of the candlestick bars.\n            var barWidth = (availableWidth / data[0].values.length) * .45;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            var tickGroups = ticks.enter().append('g');\n\n            // The colors are currently controlled by CSS.\n            ticks\n                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});\n\n            var lines = tickGroups.append('line')\n                .attr('class', 'nv-candlestick-lines')\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            var rects = tickGroups.append('rect')\n                .attr('class', 'nv-candlestick-rects nv-bars')\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n\n            ticks.select('.nv-candlestick-lines').transition()\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            ticks.select('.nv-candlestick-rects').transition()\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-candlestickBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-candlestickBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.cumulativeLineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , showControls = true\n        , useInteractiveGuideline = false\n        , rescaleY = true\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , id = lines.id()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , average = function(d) { return d.average }\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        , duration = 250\n        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n        ;\n\n    state.index = 0;\n    state.rescaleY = rescaleY;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var dx = d3.scale.linear()\n        , index = {i: 0, x: 0}\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                index: index.i,\n                rescaleY: rescaleY\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.index !== undefined)\n                index.i = state.index;\n            if (state.rescaleY !== undefined)\n                rescaleY = state.rescaleY;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            container.classed('nv-chart-' + id, true);\n            var that = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart)\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            var indexDrag = d3.behavior.drag()\n                .on('dragstart', dragStart)\n                .on('drag', dragMove)\n                .on('dragend', dragEnd);\n\n\n            function dragStart(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'ew-resize');\n            }\n\n            function dragMove(d,i) {\n                index.x = d3.event.x;\n                index.i = Math.round(dx.invert(index.x));\n                updateZero();\n            }\n\n            function dragEnd(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'auto');\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            if (!rescaleY) {\n                var seriesDomains = data\n                    .filter(function(series) { return !series.disabled })\n                    .map(function(series,i) {\n                        var initialDomain = d3.extent(series.values, lines.y());\n\n                        //account for series being disabled when losing 95% or more\n                        if (initialDomain[0] < -.95) initialDomain[0] = -.95;\n\n                        return [\n                                (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),\n                                (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])\n                        ];\n                    });\n\n                var completeDomain = [\n                    d3.min(seriesDomains, function(d) { return d[0] }),\n                    d3.max(seriesDomains, function(d) { return d[1] })\n                ];\n\n                lines.yDomain(completeDomain);\n            } else {\n                lines.yDomain(null);\n            }\n\n            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length\n                .range([0, availableWidth])\n                .clamp(true);\n\n            var data = indexify(index.i, data);\n\n            // Setup containers and skeleton of chart\n            var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-interactive');\n            gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-background');\n            gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: 'Re-scale y-axis', disabled: !rescaleY }\n                ];\n\n                controls\n                    .width(140)\n                    .color(['#444', '#444', '#444'])\n                    .rightAlign(false)\n                    .margin({top: 5, right: 0, bottom: 5, left: 20})\n                ;\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Show error if series goes below 100%\n            var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\n            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n            if (tempDisabled.length) {\n                wrap.append('text').attr('class', 'tempDisabled')\n                    .attr('x', availableWidth / 2)\n                    .attr('y', '-.71em')\n                    .style('text-anchor', 'end')\n                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left,top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            gEnter.select('.nv-background')\n                .append('rect');\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                //.x(function(d) { return d.x })\n                .y(function(d) { return d.display.y })\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\n            linesWrap.call(lines);\n\n            //Store a series index number in the data array.\n            data.forEach(function(d,i) {\n                d.seriesIndex = i;\n            });\n\n            var avgLineData = data.filter(function(d) {\n                return !d.disabled && !!average(d);\n            });\n\n            var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n                .data(avgLineData, function(d) { return d.key; });\n\n            var getAvgLineY = function(d) {\n                //If average lines go off the svg element, clamp them to the svg bounds.\n                var yVal = y(average(d));\n                if (yVal < 0) return 0;\n                if (yVal > availableHeight) return availableHeight;\n                return yVal;\n            };\n\n            avgLines.enter()\n                .append('line')\n                .style('stroke-width',2)\n                .style('stroke-dasharray','10,10')\n                .style('stroke',function (d,i) {\n                    return lines.color()(d,d.seriesIndex);\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines\n                .style('stroke-opacity',function(d){\n                    //If average lines go offscreen, make them transparent\n                    var yVal = y(average(d));\n                    if (yVal < 0 || yVal > availableHeight) return 0;\n                    return 1;\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines.exit().remove();\n\n            //Create index line\n            var indexLine = linesWrap.selectAll('.nv-indexLine')\n                .data([index]);\n            indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n                .attr('width', 3)\n                .attr('x', -2)\n                .attr('fill', 'red')\n                .attr('fill-opacity', .5)\n                .style(\"pointer-events\",\"all\")\n                .call(indexDrag);\n\n            indexLine\n                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n                .attr('height', availableHeight);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            function updateZero() {\n                indexLine\n                    .data([index]);\n\n                //When dragging the index line, turn off line transitions.\n                // Then turn them back on when done dragging.\n                var oldDuration = chart.duration();\n                chart.duration(0);\n                chart.update();\n                chart.duration(oldDuration);\n            }\n\n            g.select('.nv-background rect')\n                .on('click', function() {\n                    index.x = d3.mouse(this)[0];\n                    index.i = Math.round(dx.invert(index.x));\n\n                    // update state and send stateChange with new index\n                    state.index = index.i;\n                    dispatch.stateChange(state);\n\n                    updateZero();\n                });\n\n            lines.dispatch.on('elementClick', function(e) {\n                index.i = e.pointIndex;\n                index.x = dx(index.i);\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n\n                updateZero();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n                rescaleY = !d.disabled;\n\n                state.rescaleY = rescaleY;\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        lines.highlightPoint(i, pointIndex, true);\n                        var point = series.values[pointIndex];\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex)\n                        });\n                    });\n\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.index !== 'undefined') {\n                    index.i = e.index;\n                    index.x = dx(index.i);\n\n                    state.index = e.index;\n\n                    indexLine\n                        .data([index]);\n                }\n\n                if (typeof e.rescaleY !== 'undefined') {\n                    rescaleY = e.rescaleY;\n                }\n\n                chart.update();\n            });\n\n        });\n\n        renderWatch.renderEnd('cumulativeLineChart immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        var point = {\n            x: chart.x()(evt.point),\n            y: chart.y()(evt.point),\n            color: evt.point.color\n        };\n        evt.point = point;\n        tooltip.data(evt).hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    //============================================================\n    // Functions\n    //------------------------------------------------------------\n\n    var indexifyYGetter = null;\n    /* Normalize the data according to an index point. */\n    function indexify(idx, data) {\n        if (!indexifyYGetter) indexifyYGetter = lines.y();\n        return data.map(function(line, i) {\n            if (!line.values) {\n                return line;\n            }\n            var indexValue = line.values[idx];\n            if (indexValue == null) {\n                return line;\n            }\n            var v = indexifyYGetter(indexValue, idx);\n\n            //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue\n            if (v < -.95 && !noErrorCheck) {\n                //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)\n\n                line.tempDisabled = true;\n                return line;\n            }\n\n            line.tempDisabled = false;\n\n            line.values = line.values.map(function(point, pointIndex) {\n                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / (1 + v) };\n                return point;\n            });\n\n            return line;\n        })\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        rescaleY:     {get: function(){return rescaleY;}, set: function(_){rescaleY=_;}},\n        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        average: {get: function(){return average;}, set: function(_){average=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n                chart.useVoronoi(false);\n            }\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        duration:    {get: function(){return duration;}, set: function(_){\n            duration = _;\n            lines.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating by adding necessary features to multiBar model\nnv.models.discreteBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , showValues = false\n        , valueFormat = d3.format(',.2f')\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , rectClass = 'discreteBar'\n        , duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n                    })\n                });\n\n            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], .1);\n            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\n            // If showValues, pad the Y axis range to account for label height\n            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n            else y.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            x0 = x0 || x;\n            y0 = y0 || y.copy().range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .watchTransition(renderWatch, 'discreteBar: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover });\n            groups\n                .watchTransition(renderWatch, 'discreteBar: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .75);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n                })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            barsEnter.append('rect')\n                .attr('height', 0)\n                .attr('width', x.rangeBand() * .9 / data.length )\n\n            if (showValues) {\n                barsEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                ;\n\n                bars.select('text')\n                    .text(function(d,i) { return valueFormat(getY(d,i)) })\n                    .watchTransition(renderWatch, 'discreteBar: bars text')\n                    .attr('x', x.rangeBand() * .9 / 2)\n                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\n                ;\n            } else {\n                bars.selectAll('text').remove();\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n                .style('fill', function(d,i) { return d.color || color(d,i) })\n                .style('stroke', function(d,i) { return d.color || color(d,i) })\n                .select('rect')\n                .attr('class', rectClass)\n                .watchTransition(renderWatch, 'discreteBar: bars rect')\n                .attr('width', x.rangeBand() * .9 / data.length);\n            bars.watchTransition(renderWatch, 'discreteBar: bars')\n                //.delay(function(d,i) { return i * 1200 / data[0].values.length })\n                .attr('transform', function(d,i) {\n                    var left = x(getX(d,i)) + x.rangeBand() * .05,\n                        top = getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 : //make 1 px positive bars show up above y=0\n                            y(getY(d,i));\n\n                    return 'translate(' + left + ', ' + top + ')'\n                })\n                .select('rect')\n                .attr('height', function(d,i) {\n                    return  Math.max(Math.abs(y(getY(d,i)) - y(0)), 1)\n                });\n\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('discreteBar immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.discreteBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var discretebar = nv.models.discreteBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n\t, legend = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.getColor()\n\t, showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x\n        , y\n        , noData = null\n        , dispatch = d3.dispatch('beforeUpdate','renderEnd')\n        , duration = 250\n        ;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .keyFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(discretebar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = discretebar.xScale();\n            y = discretebar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t    gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            discretebar\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(discretebar);\n\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + discretebar.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n                }\n\n                if (rotateLabels) {\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\",0)\n                .attr(\"x2\",(rightAlignYAxis) ? -availableWidth : availableWidth)\n                .attr(\"y1\", y(0))\n                .attr(\"y2\", y(0))\n            ;\n        });\n\n        renderWatch.renderEnd('discreteBar chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.discretebar = discretebar;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\tshowLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:  {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        wrapLabels:  {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            discretebar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            discretebar.color(color);\n\t    legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, discretebar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\nnv.models.distribution = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 400 //technically width or height depending on x or y....\n        , size = 8\n        , axis = 'x' // 'x' or 'y'... horizontal or vertical\n        , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n        , color = nv.utils.defaultColor()\n        , scale = d3.scale.linear()\n        , domain\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n                naxis = axis == 'x' ? 'y' : 'x',\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //------------------------------------------------------------\n            // Setup Scales\n\n            scale0 = scale0 || scale;\n\n            //------------------------------------------------------------\n\n\n            //------------------------------------------------------------\n            // Setup containers and skeleton of chart\n\n            var wrap = container.selectAll('g.nv-distribution').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            //------------------------------------------------------------\n\n\n            var distWrap = g.selectAll('g.nv-dist')\n                .data(function(d) { return d }, function(d) { return d.key });\n\n            distWrap.enter().append('g');\n            distWrap\n                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n                .style('stroke', function(d,i) { return color(d, i) });\n\n            var dist = distWrap.selectAll('line.nv-dist' + axis)\n                .data(function(d) { return d.values })\n            dist.enter().append('line')\n                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n                .style('stroke-opacity', 0)\n                .remove();\n            dist\n                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n                .attr(naxis + '1', 0)\n                .attr(naxis + '2', size);\n            renderWatch.transition(dist, 'dist')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\n\n            scale0 = scale.copy();\n\n        });\n        renderWatch.renderEnd('distribution immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart.dispatch = dispatch;\n\n    chart.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return chart;\n    };\n\n    chart.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return chart;\n    };\n\n    chart.axis = function(_) {\n        if (!arguments.length) return axis;\n        axis = _;\n        return chart;\n    };\n\n    chart.size = function(_) {\n        if (!arguments.length) return size;\n        size = _;\n        return chart;\n    };\n\n    chart.getData = function(_) {\n        if (!arguments.length) return getData;\n        getData = d3.functor(_);\n        return chart;\n    };\n\n    chart.scale = function(_) {\n        if (!arguments.length) return scale;\n        scale = _;\n        return chart;\n    };\n\n    chart.color = function(_) {\n        if (!arguments.length) return color;\n        color = nv.utils.getColor(_);\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        return chart;\n    };\n    //============================================================\n\n\n    return chart;\n}\nnv.models.focus = function(content) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var content = content || nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , brush = d3.svg.brush()\n        ;\n\n    var margin = {top: 10, right: 0, bottom: 30, left: 0}\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = 70\n        , showXAxis = true\n        , showYAxis = false\n        , rightAlignYAxis = false\n        , ticks = null\n        , x\n        , y\n        , brushExtent = null\n        , duration = 250\n        , dispatch = d3.dispatch('brush', 'onBrush', 'renderEnd')\n        , syncBrushing = true\n        ;\n\n    content.interactive(false);\n    content.pointActive(function(d) { return false; });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(content);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom;\n\n            chart.update = function() { \n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            // Setup Scales\n            x = content.xScale();\n            y = content.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-focus').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-focus').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            gEnter.append('g').attr('class', 'nv-background').append('rect');\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-contentWrap');\n            gEnter.append('g').attr('class', 'nv-brushBackground');\n            gEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n                \n            content\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var contentWrap = g.select('.nv-contentWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            d3.transition(contentWrap).call(content);\n            \n            // Setup Brush\n            brush\n                .x(x)\n                .on('brush', function() {\n                    onBrush(syncBrushing);\n                });\n\n            brush.on('brushend', function () {\n                if (!syncBrushing) {\n                    dispatch.onBrush(brush.empty() ? x.domain() : brush.extent());\n                }\n            });\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n    \n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                .attr('height', availableHeight);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            onBrush(true);\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n  \n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                d3.transition(g.select('.nv-x.nv-axis'))\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                d3.transition(g.select('.nv-y.nv-axis'))\n                    .call(yAxis);\n            }\n            \n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n    \n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n    \n    \n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x(d[0]) - x.range()[0],\n                            rightWidth = availableWidth - x(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n    \n                        d3.select(this).select('.right')\n                            .attr('x', x(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n\n            function onBrush(shouldDispatch) {\n                brushExtent = brush.empty() ? null : brush.extent();\n                var extent = brush.empty() ? x.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n                if (shouldDispatch) {\n                    dispatch.onBrush(extent);\n                }\n            }\n        });\n\n        renderWatch.renderEnd('focus immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.content = content;\n    chart.brush = brush;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        syncBrushing: {get: function(){return syncBrushing;}, set: function(_){syncBrushing=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            content.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            content.color(color);\n        }},\n        interpolate: {get: function(){return content.interpolate();}, set: function(_){\n            content.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n        }},\n        x: {get: function(){return content.x();}, set: function(_){\n            content.x(_);\n        }},\n        y: {get: function(){return content.y();}, set: function(_){\n            content.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, content);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.forceDirectedGraph = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , dispatch = d3.dispatch('renderEnd')\n        , color = nv.utils.getColor(['#000'])\n        , tooltip      = nv.models.tooltip()\n        , noData = null\n        // Force directed graph specific parameters [default values]\n        , linkStrength = 0.1\n        , friction = 0.9\n        , linkDist = 30\n        , charge = -120\n        , gravity = 0.1\n        , theta = 0.8\n        , alpha = 0.1\n        , radius = 5\n        // These functions allow to add extra attributes to ndes and links\n        ,nodeExtras = function(nodes) { /* Do nothing */ }\n        ,linkExtras = function(links) { /* Do nothing */ }\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n          container = d3.select(this);\n          nv.utils.initSVG(container);\n\n          var availableWidth = nv.utils.availableWidth(width, container, margin),\n              availableHeight = nv.utils.availableHeight(height, container, margin);\n\n          container\n                  .attr(\"width\", availableWidth)\n                  .attr(\"height\", availableHeight);\n\n          // Display No Data message if there's nothing to show.\n          if (!data || !data.links || !data.nodes) {\n              nv.utils.noData(chart, container)\n              return chart;\n          } else {\n              container.selectAll('.nv-noData').remove();\n          }\n          container.selectAll('*').remove();\n\n          // Collect names of all fields in the nodes\n          var nodeFieldSet = new Set();\n          data.nodes.forEach(function(node) {\n            var keys = Object.keys(node);\n            keys.forEach(function(key) {\n              nodeFieldSet.add(key);\n            });\n          });\n\n          var force = d3.layout.force()\n                .nodes(data.nodes)\n                .links(data.links)\n                .size([availableWidth, availableHeight])\n                .linkStrength(linkStrength)\n                .friction(friction)\n                .linkDistance(linkDist)\n                .charge(charge)\n                .gravity(gravity)\n                .theta(theta)\n                .alpha(alpha)\n                .start();\n\n          var link = container.selectAll(\".link\")\n                .data(data.links)\n                .enter().append(\"line\")\n                .attr(\"class\", \"nv-force-link\")\n                .style(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\n          var node = container.selectAll(\".node\")\n                .data(data.nodes)\n                .enter()\n                .append(\"g\")\n                .attr(\"class\", \"nv-force-node\")\n                .call(force.drag);\n\n          node\n            .append(\"circle\")\n            .attr(\"r\", radius)\n            .style(\"fill\", function(d) { return color(d) } )\n            .on(\"mouseover\", function(evt) {\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                  .attr('y1', evt.py);\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                  .attr('x2', evt.px);\n\n              // Add 'series' object to\n              var nodeColor = color(evt);\n              evt.series = [];\n              nodeFieldSet.forEach(function(field) {\n                evt.series.push({\n                  color: nodeColor,\n                  key:   field,\n                  value: evt[field]\n                });\n              });\n              tooltip.data(evt).hidden(false);\n            })\n            .on(\"mouseout\",  function(d) {\n              tooltip.hidden(true);\n            });\n\n          tooltip.headerFormatter(function(d) {return \"Node\";});\n\n          // Apply extra attributes to nodes and links (if any)\n          linkExtras(link);\n          nodeExtras(node);\n\n          force.on(\"tick\", function() {\n              link.attr(\"x1\", function(d) { return d.source.x; })\n                  .attr(\"y1\", function(d) { return d.source.y; })\n                  .attr(\"x2\", function(d) { return d.target.x; })\n                  .attr(\"y2\", function(d) { return d.target.y; });\n\n              node.attr(\"transform\", function(d) {\n                return \"translate(\" + d.x + \", \" + d.y + \")\";\n              });\n            });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:     {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n\n        // Force directed graph specific parameters\n        linkStrength:{get: function(){return linkStrength;}, set: function(_){linkStrength=_;}},\n        friction:    {get: function(){return friction;}, set: function(_){friction=_;}},\n        linkDist:    {get: function(){return linkDist;}, set: function(_){linkDist=_;}},\n        charge:      {get: function(){return charge;}, set: function(_){charge=_;}},\n        gravity:     {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        theta:       {get: function(){return theta;}, set: function(_){theta=_;}},\n        alpha:       {get: function(){return alpha;}, set: function(_){alpha=_;}},\n        radius:      {get: function(){return radius;}, set: function(_){radius=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        nodeExtras: {get: function(){return nodeExtras;}, set: function(_){\n            nodeExtras = _;\n        }},\n        linkExtras: {get: function(){return linkExtras;}, set: function(_){\n            linkExtras = _;\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.furiousLegend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 28 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n\n            var seriesShape;\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('circle');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n\n                seriesShape = series.select('rect');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var legendWidth = 0;\n                var columnWidths = [];\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15)\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('stroke', function(d,i) { return d.color || color(d, i) });\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? color(d,i) : '#fff';\n            } else if (!expanded) {\n                return !!d.disabled ? color(d,i) : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#fff' : color(d,i);\n            } else {\n                return !!d.disabled ? '#fff' : color(d,i);\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating and using multibar with single series for this\nnv.models.historicalBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceX = []\n        , forceY = [0]\n        , padData = false\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , interactive = true\n        ;\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n                .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bars');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n                .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n            bars.exit().remove();\n\n            bars.enter().append('rect')\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                .on('mouseover', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n\n                })\n                .on('mouseout', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    if (!interactive) return;\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            bars\n                .attr('fill', function(d,i) { return color(d, i); })\n                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n                .watchTransition(renderWatch, 'bars')\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                //TODO: better width calculations that don't assume always uniform data spacing;w\n                .attr('width', (availableWidth / data[0].values.length) * .9 );\n\n            bars.watchTransition(renderWatch, 'bars')\n                .attr('y', function(d,i) {\n                    var rval = getY(d,i) < 0 ?\n                        y(0) :\n                            y(0) - y(getY(d,i)) < 1 ?\n                        y(0) - 1 :\n                        y(getY(d,i));\n                    return nv.utils.NaNtoZero(rval);\n                })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\n        });\n\n        renderWatch.renderEnd('historicalBar immediate');\n        return chart;\n    }\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        container\n            .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container\n            .select(\".nv-bars .nv-bar.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData: {get: function(){return padData;}, set: function(_){padData=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.historicalBarChart = function(bar_model) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bars = bar_model || nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n\n    var margin = {top: 30, right: 90, bottom: 50, left: 90}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , state = {}\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        ;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n            renderWatch.models(bars);\n            if (showXAxis) renderWatch.models(xAxis);\n            if (showYAxis) renderWatch.models(yAxis);\n\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };\n            chart.container = this;\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = bars.xScale();\n            y = bars.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n            bars\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n            barsWrap.transition().call(bars);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .transition()\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .transition()\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                bars.clearHighlights();\n\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        bars.highlightPoint(pointIndex,true);\n                        var point = series.values[pointIndex];\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex),\n                            data: series.values[pointIndex]\n                        });\n                    });\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data({\n                        value: xValue,\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                dispatch.tooltipHide();\n                bars.clearHighlights();\n            });\n\n            legend.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n\n                if (!data.filter(function(d) { return !d.disabled }).length) {\n                    data.map(function(d) {\n                        d.disabled = false;\n                        wrap.selectAll('.nv-series').classed('disabled', false);\n                        return d;\n                    });\n                }\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                selection.transition().call(chart);\n            });\n\n            legend.dispatch.on('legendDblclick', function(d) {\n                //Double clicking should always enable current series, and disabled all others.\n                data.forEach(function(d) {\n                    d.disabled = true;\n                });\n                d.disabled = false;\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('historicalBarChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.bars = bars;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            bars.color(color);\n        }},\n        duration:    {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration=_;\n            renderWatch.reset(transitionDuration);\n            yAxis.duration(transitionDuration);\n            xAxis.duration(transitionDuration);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bars);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n// ohlcChart is just a historical chart with ohlc bars and some tweaks\nnv.models.ohlcBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\n\n// candlestickChart is just a historical chart with candlestick bars and some tweaks\nnv.models.candlestickBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\nnv.models.legend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 32 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            if (rightAlign)\n                wrap.attr('transform', 'translate(' + (- margin.right) + ',' + margin.top + ')');\n            else\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');\n            var seriesShape;\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('.nv-legend-symbol');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n                seriesShape = series.select('.nv-legend-symbol');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n            var legendWidth = 0;\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var columnWidths = [];\n                legendWidth = 0;\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        if(legendWidth < xpos + maxwidth) {\n                            legendWidth = xpos + maxwidth;\n                        }\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15);\n\n                // The background for the expanded legend (UI)\n                gEnter.insert('rect',':first-child')\n                    .attr('class', 'nv-legend-bg')\n                    .attr('fill', '#eee')\n                    // .attr('stroke', '#444')\n                    .attr('opacity',0);\n\n                var seriesBG = g.select('.nv-legend-bg');\n\n                seriesBG\n                .transition().duration(300)\n                    .attr('x', -versPadding )\n                    .attr('width', legendWidth + versPadding - 12)\n                    .attr('height', height + 10)\n                    .attr('y', -margin.top - 10)\n                    .attr('opacity', expanded ? 1 : 0);\n\n\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('fill-opacity', setBGOpacity)\n                .style('stroke', setBGColor);\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? '#000' : '#fff';\n            } else if (!expanded) {\n                if(!d.color) d.color = color(d,i);\n                return !!d.disabled ? d.color : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#eee' : d.color || color(d,i);\n            } else {\n                return d.color || color(d,i);\n            }\n        }\n\n\n        function setBGOpacity(d,i) {\n            if(expanded && vers == 'furious') {\n                return 1;\n            } else {\n                return !!d.disabled ? 0 : 1;\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.line = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var  scatter = nv.models.scatter()\n        ;\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , container = null\n        , strokeWidth = 1.5\n        , color = nv.utils.defaultColor() // a function that returns a color\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , interpolate = \"linear\" // controls the line interpolation\n        , duration = 250\n        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        ;\n\n    scatter\n        .pointSize(16) // default size\n        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n    ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            scatter\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var scatterWrap = wrap.select('.nv-scatterWrap');\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + scatter.id())\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n            scatterWrap\n                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })\n                .style('fill-opacity', 1e-6);\n\n            groups.exit().remove();\n\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i)});\n            groups.watchTransition(renderWatch, 'line: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', function(d) { return d.fillOpacity || .5});\n\n            var areaPaths = groups.selectAll('path.nv-area')\n                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n            areaPaths.enter().append('path')\n                .attr('class', 'nv-area')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n            groups.exit().selectAll('path.nv-area')\n                .remove();\n\n            areaPaths.watchTransition(renderWatch, 'line: areaPaths')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n\n            var linePaths = groups.selectAll('path.nv-line')\n                .data(function(d) { return [d.values] });\n\n            linePaths.enter().append('path')\n                .attr('class', 'nv-line')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n            );\n\n            linePaths.watchTransition(renderWatch, 'line: linePaths')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            );\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n        });\n        renderWatch.renderEnd('line immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    // Pass through events\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }},\n        isArea: {get: function(){return isArea;}, set: function(_){\n            isArea = d3.functor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            scatter.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            scatter.y(_);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            scatter.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.lineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.line())\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , focusEnable = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , duration = 250\n        ;\n\n    // set options on sub-objects for this chart\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient(rightAlignYAxis ? 'right' : 'left');\n\n    lines.clipEdge(true).duration(0);\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    interactiveLayer.tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled; })\n            };\n        };\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        };\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n            chart.update = function() {\n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled; });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length; }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (legendPosition === 'bottom') {\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + availableHeight +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                }\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n\n            // Setup Main (Focus) Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n              if(showXAxis) {\n                g.select('.nv-focus .nv-x.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(xAxis)\n                ;\n              }\n            }\n\n            function updateYAxis() {\n              if(showYAxis) {\n                g.select('.nv-focus .nv-y.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(yAxis)\n                ;\n              }\n            }\n\n            g.select('.nv-focus .nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                linesWrap.call(lines);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled && !series.disableTooltip;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = focusEnable ? (focus.brush.empty() ? focus.xScale().domain() : focus.brush.extent()) : x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            // Checks if the x point is between the extents, handling case where extent[0] is greater than extent[1]\n                            // (e.g. x domain is manually set to reverse the x-axis)\n                            if(extent[0] <= extent[1]) {\n                                return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                            } else {\n                                return lines.x()(d,i) >= extent[1] && lines.x()(d,i) <= extent[0];\n                            }\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            lines.highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point\n                        });\n                    });\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value;}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var defaultValueFormatter = function(d,i) {\n                    return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                };\n\n                interactiveLayer.tooltip\n                    .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                    .data({\n                        value: chart.x()( singlePoint,pointIndex ),\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on('elementClick', function(e) {\n                var pointXLocation, allData = [];\n\n                data.filter(function(series, i) {\n                    series.seriesIndex = i;\n                    return !series.disabled;\n                }).forEach(function(series) {\n                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                    var point = series.values[pointIndex];\n                    if (typeof point === 'undefined') return;\n                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                    var yPos = chart.yScale()(chart.y()(point,pointIndex));\n                    allData.push({\n                        point: point,\n                        pointIndex: pointIndex,\n                        pos: [pointXLocation, yPos],\n                        seriesIndex: series.seriesIndex,\n                        series: series\n                    });\n                });\n\n                lines.dispatch.elementClick(allData);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                focusLinesWrap.transition().duration(duration).call(lines);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n        });\n\n        renderWatch.renderEnd('lineChart immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        if(!evt.series.disableTooltip){\n            tooltip.data(evt).hidden(false);\n        }\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.focus = focus;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.state = state;\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        // Focus options, mostly passed onto focus model.\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        focusShowAxisX:    {get: function(){return focus.showXAxis();}, set: function(_){focus.showXAxis(_);}},\n        focusShowAxisY:    {get: function(){return focus.showYAxis();}, set: function(_){focus.showYAxis(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            lines.duration(duration);\n            focus.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            lines.color(color);\n            focus.color(color);\n        }},\n        interpolate: {get: function(){return lines.interpolate();}, set: function(_){\n            lines.interpolate(_);\n            focus.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n            focus.xTickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n            focus.yTickFormat(_);\n        }},\n        x: {get: function(){return lines.x();}, set: function(_){\n            lines.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return lines.y();}, set: function(_){\n            lines.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines.interactive(false);\n                lines.useVoronoi(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.lineWithFocusChart = function() {\n  return nv.models.lineChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\nnv.models.linePlusBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , lines2 = nv.models.line()\n        , bars = nv.models.historicalBar()\n        , bars2 = nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , x2Axis = nv.models.axis()\n        , y1Axis = nv.models.axis()\n        , y2Axis = nv.models.axis()\n        , y3Axis = nv.models.axis()\n        , y4Axis = nv.models.axis()\n        , legend = nv.models.legend()\n        , brush = d3.svg.brush()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 30, left: 60}\n        , marginTop = null\n        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n        , width = null\n        , height = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.defaultColor()\n        , showLegend = true\n        , focusEnable = true\n        , focusShowAxisY = false\n        , focusShowAxisX = true\n        , focusHeight = 50\n        , extent\n        , brushExtent = null\n        , x\n        , x2\n        , y1\n        , y2\n        , y3\n        , y4\n        , noData = null\n        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')\n        , transitionDuration = 0\n        , state = nv.utils.state()\n        , defaultState = null\n        , legendLeftAxisHint = ' (left axis)'\n        , legendRightAxisHint = ' (right axis)'\n        , switchYAxisOrder = false\n        ;\n\n    lines.clipEdge(true);\n    lines2.interactive(false);\n    // We don't want any points emitted for the focus chart's scatter graph.\n    lines2.pointActive(function(d) { return false });\n    xAxis.orient('bottom').tickPadding(5);\n    y1Axis.orient('left');\n    y2Axis.orient('right');\n    x2Axis.orient('bottom').tickPadding(5);\n    y3Axis.orient('left');\n    y4Axis.orient('right');\n\n    tooltip.headerEnabled(true).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var getBarsAxis = function() {\n        return switchYAxisOrder\n            ? { main: y2Axis, focus: y4Axis }\n            : { main: y1Axis, focus: y3Axis }\n    }\n\n    var getLinesAxis = function() {\n        return switchYAxisOrder\n            ? { main: y1Axis, focus: y3Axis }\n            : { main: y2Axis, focus: y4Axis }\n    }\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var allDisabled = function(data) {\n      return data.every(function(series) {\n        return series.disabled;\n      });\n    }\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight1 = nv.utils.availableHeight(height, container, margin)\n                    - (focusEnable ? focusHeight : 0),\n                availableHeight2 = focusHeight - margin2.top - margin2.bottom;\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n            if (dataBars.length && !switchYAxisOrder) {\n                x = bars.xScale();\n            } else {\n                x = lines.xScale();\n            }\n\n            x2 = x2Axis.scale();\n\n            // select the scales and series based on the position of the yAxis\n            y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();\n            y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();\n            y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();\n            y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();\n\n            var series1 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            var series2 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            x.range([0, availableWidth]);\n\n            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n                .range([0, availableWidth]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // this is the main chart\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-barsWrap');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n            // context chart is where you can focus in\n            var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n            contextEnter.append('g').attr('class', 'nv-x nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-barsWrap');\n            contextEnter.append('g').attr('class', 'nv-linesWrap');\n            contextEnter.append('g').attr('class', 'nv-brushBackground');\n            contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            //============================================================\n            // Legend\n            //------------------------------------------------------------\n\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        if(switchYAxisOrder) {\n                            series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);\n                        } else {\n                            series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);\n                        }\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    // FIXME: shouldn't this be \"- (focusEnabled ? focusHeight : 0)\"?\n                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //============================================================\n            // Context chart (focus chart) components\n            //------------------------------------------------------------\n\n            // hide or show the focus context chart\n            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');\n\n            bars2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && data[i].bar\n                }));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && !data[i].bar\n                }));\n\n            var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n                .datum(dataBars.length ? dataBars : [\n                    {values: []}\n                ]);\n            var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n                .datum(allDisabled(dataLines) ?\n                       [{values: []}] :\n                       dataLines.filter(function(dataLine) {\n                         return !dataLine.disabled;\n                       }));\n\n            g.select('.nv-context')\n                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');\n\n            bars2Wrap.transition().call(bars2);\n            lines2Wrap.transition().call(lines2);\n\n            // context (focus chart) axis controls\n            if (focusShowAxisX) {\n                x2Axis\n                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))\n                    .tickSize(-availableHeight2, 0);\n                g.select('.nv-context .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n                g.select('.nv-context .nv-x.nv-axis').transition()\n                    .call(x2Axis);\n            }\n\n            if (focusShowAxisY) {\n                y3Axis\n                    .scale(y3)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize( -availableWidth, 0);\n                y4Axis\n                    .scale(y4)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n                g.select('.nv-context .nv-y3.nv-axis')\n                    .style('opacity', dataBars.length ? 1 : 0)\n                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n                g.select('.nv-context .nv-y2.nv-axis')\n                    .style('opacity', dataLines.length ? 1 : 0)\n                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\n                g.select('.nv-context .nv-y1.nv-axis').transition()\n                    .call(y3Axis);\n                g.select('.nv-context .nv-y2.nv-axis').transition()\n                    .call(y4Axis);\n            }\n\n            // Setup Brush\n            brush.x(x2).on('brush', onBrush);\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n\n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                //.attr('y', -5)\n                .attr('height', availableHeight2);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight2 / 3;\n                return 'M' + (.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n\n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x2.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x2(d[0]) - x2.range()[0],\n                            rightWidth = x2.range()[1] - x2(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n                        d3.select(this).select('.right')\n                            .attr('x', x2(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n            function onBrush() {\n                brushExtent = brush.empty() ? null : brush.extent();\n                extent = brush.empty() ? x2.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n\n                // Prepare Main (Focus) Bars and Lines\n                bars\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n                lines\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\n                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n                    .datum(!dataBars.length ? [{values:[]}] :\n                        dataBars\n                            .map(function(d,i) {\n                                return {\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(allDisabled(dataLines) ? [{values:[]}] :\n                           dataLines\n                           .filter(function(dataLine) { return !dataLine.disabled; })\n                           .map(function(d,i) {\n                                return {\n                                    area: d.area,\n                                    fillOpacity: d.fillOpacity,\n                                    strokeWidth: d.strokeWidth,\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                // Update Main (Focus) X Axis\n                if (dataBars.length && !switchYAxisOrder) {\n                    x = bars.xScale();\n                } else {\n                    x = lines.xScale();\n                }\n\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight1, 0);\n\n                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n\n                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)\n                    .call(xAxis);\n\n                // Update Main (Focus) Bars and Lines\n                focusBarsWrap.transition().duration(transitionDuration).call(bars);\n                focusLinesWrap.transition().duration(transitionDuration).call(lines);\n\n                // Setup and Update Main (Focus) Y Axes\n                g.select('.nv-focus .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\n                y1Axis\n                    .scale(y1)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )\n                    .tickSize(-availableWidth, 0);\n                y2Axis\n                    .scale(y2)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) );\n\n                // Show the y2 rules only if y1 has none\n                if(!switchYAxisOrder) {\n                    y2Axis.tickSize(dataBars.length ? 0 : -availableWidth, 0);\n                } else {\n                    y2Axis.tickSize(dataLines.length ? 0 : -availableWidth, 0);\n                }\n\n                // Calculate opacity of the axis\n                var barsOpacity = dataBars.length ? 1 : 0;\n                var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;\n\n                var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;\n                var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;\n\n                g.select('.nv-focus .nv-y1.nv-axis')\n                    .style('opacity', y1Opacity);\n                g.select('.nv-focus .nv-y2.nv-axis')\n                    .style('opacity', y2Opacity)\n                    .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)\n                    .call(y1Axis);\n                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)\n                    .call(y2Axis);\n            }\n\n            onBrush();\n\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip\n            .duration(100)\n            .valueFormatter(function(d, i) {\n                return getLinesAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip\n            .duration(0)\n            .valueFormatter(function(d, i) {\n                return getBarsAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines = lines;\n    chart.lines2 = lines2;\n    chart.bars = bars;\n    chart.bars2 = bars2;\n    chart.xAxis = xAxis;\n    chart.x2Axis = x2Axis;\n    chart.y1Axis = y1Axis;\n    chart.y2Axis = y2Axis;\n    chart.y3Axis = y3Axis;\n    chart.y4Axis = y4Axis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},\n        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},\n        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},\n        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return margin2;}, set: function(_){\n            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;\n            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;\n            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;\n            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;\n        }},\n        duration: {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration = _;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines.x(_);\n            lines2.x(_);\n            bars.x(_);\n            bars2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines.y(_);\n            lines2.y(_);\n            bars.y(_);\n            bars2.y(_);\n        }},\n        switchYAxisOrder:    {get: function(){return switchYAxisOrder;}, set: function(_){\n            // Switch the tick format for the yAxis\n            if(switchYAxisOrder !== _) {\n                var y1 = y1Axis;\n                y1Axis = y2Axis;\n                y2Axis = y1;\n\n                var y3 = y3Axis;\n                y3Axis = y4Axis;\n                y4Axis = y3;\n            }\n            switchYAxisOrder=_;\n\n            y1Axis.orient('left');\n            y2Axis.orient('right');\n            y3Axis.orient('left');\n            y4Axis.orient('right');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , clipEdge = true\n        , stacked = false\n        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n        , color = nv.utils.defaultColor()\n        , hideable = false\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , duration = 500\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var last_datalength = 0;\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n            var nonStackableCount = 0;\n            // This function defines the requirements for render complete\n            var endFn = function(d, i) {\n                if (d.series === data.length - 1 && i === data[0].values.length - 1)\n                    return true;\n                return false;\n            };\n\n            if(hideable && data.length) hideable = [{\n                values: data[0].values.map(function(d) {\n                        return {\n                            x: d.x,\n                            y: 0,\n                            series: d.series,\n                            size: 0.01\n                        };}\n                )}];\n\n            if (stacked) {\n                var parsed = d3.layout.stack()\n                    .offset(stackOffset)\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (!data.length && hideable ? hideable : data);\n\n                parsed.forEach(function(series, i){\n                    // if series is non-stackable, use un-parsed data\n                    if (series.nonStackable) {\n                        data[i].nonStackableSeries = nonStackableCount++;\n                        parsed[i] = data[i];\n                    } else {\n                        // don't stack this seires on top of the nonStackable seriees\n                        if (i > 0 && parsed[i - 1].nonStackable){\n                            parsed[i].values.map(function(d,j){\n                                d.y0 -= parsed[i - 1].values[j].y;\n                                d.y1 = d.y0 + d.y;\n                            });\n                        }\n                    }\n                });\n                data = parsed;\n            }\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked && data.length > 0) {\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d, idx) {\n                        if (!data[idx].nonStackable) {\n                            var f = d.values[i]\n                            f.size = Math.abs(f.y);\n                            if (f.y<0)  {\n                                f.y1 = negBase;\n                                negBase = negBase - f.size;\n                            } else\n                            {\n                                f.y1 = f.size + posBase;\n                                posBase = posBase + f.size;\n                            }\n                        }\n\n                    });\n                });\n            }\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d, idx) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {\n                var domain = d.y;\n                // increase the domain range if this series is stackable\n                if (stacked && !data[d.idx].nonStackable) {\n                    if (d.y > 0){\n                        domain = d.y1\n                    } else {\n                        domain = d.y1 + d.y\n                    }\n                }\n                return domain;\n            }).concat(forceY)))\n            .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n\n            var exitTransition = renderWatch\n                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))\n                .attr('y', function(d, i, j) {\n                    var yVal = y0(0) || 0;\n                    if (stacked) {\n                        if (data[d.series] && !data[d.series].nonStackable) {\n                            yVal = y0(d.y0);\n                        }\n                    }\n                    return yVal;\n                })\n                .attr('height', 0)\n                .remove();\n            if (exitTransition.delay)\n                exitTransition.delay(function(d,i) {\n                    var delay = i * (duration / (last_datalength + 1)) - i;\n                    return delay;\n                });\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('rect.nv-bar')\n                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('rect')\n                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                    .attr('x', function(d,i,j) {\n                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )\n                    })\n                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })\n                    .attr('height', 0)\n                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })\n                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n                ;\n            bars\n                .style('fill', function(d,i,j){ return color(d, j, i);  })\n                .style('stroke', function(d,i,j){ return color(d, j, i); })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            var barSelection =\n                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))\n                    .delay(function(d,i) {\n                        return i * duration / data[0].values.length;\n                    });\n            if (stacked){\n                barSelection\n                    .attr('y', function(d,i,j) {\n                        var yVal = 0;\n                        // if stackable, stack it on top of the previous series\n                        if (!data[j].nonStackable) {\n                            yVal = y(d.y1);\n                        } else {\n                            if (getY(d,i) < 0){\n                                yVal = y(0);\n                            } else {\n                                if (y(0) - y(getY(d,i)) < -1){\n                                    yVal = y(0) - 1;\n                                } else {\n                                    yVal = y(getY(d, i)) || 0;\n                                }\n                            }\n                        }\n                        return yVal;\n                    })\n                    .attr('height', function(d,i,j) {\n                        if (!data[j].nonStackable) {\n                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 0);\n                        } else {\n                            return Math.max(Math.abs(y(getY(d,i)) - y(0)), 0) || 0;\n                        }\n                    })\n                    .attr('x', function(d,i,j) {\n                        var width = 0;\n                        if (data[j].nonStackable) {\n                            width = d.series * x.rangeBand() / data.length;\n                            if (data.length !== nonStackableCount){\n                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);\n                            }\n                        }\n                        return width;\n                    })\n                    .attr('width', function(d,i,j){\n                        if (!data[j].nonStackable) {\n                            return x.rangeBand();\n                        } else {\n                            // if all series are nonStacable, take the full width\n                            var width = (x.rangeBand() / nonStackableCount);\n                            // otherwise, nonStackable graph will be only taking the half-width\n                            // of the x rangeBand\n                            if (data.length !== nonStackableCount) {\n                                width = x.rangeBand()/(nonStackableCount*2);\n                            }\n                            return width;\n                        }\n                    });\n            }\n            else {\n                barSelection\n                    .attr('x', function(d,i) {\n                        return d.series * x.rangeBand() / data.length;\n                    })\n                    .attr('width', x.rangeBand() / data.length)\n                    .attr('y', function(d,i) {\n                        return getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 :\n                            y(getY(d,i)) || 0;\n                    })\n                    .attr('height', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n                    });\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n            // keep track of the last data value length for transition calculations\n            if (data[0] && data[0].values) {\n                last_datalength = data[0].values.length;\n            }\n\n        });\n\n        renderWatch.renderEnd('multibar immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},\n        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity: {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , interactiveLayer = nv.interactiveGuideline()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , reduceXTicks = true // if false a tick will show for every data point\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        , useInteractiveGuideline = false\n        ;\n\n    state.stacked = false // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(false);\n    xAxis\n        .orient('bottom')\n        .tickPadding(7)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function (d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function (d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var stacked = false;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition()\n                        .duration(duration)\n                        .call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text')\n                    .style('opacity', 1)\n\n                if (staggerLabels) {\n                    var getTranslate = function(x,y) {\n                        return \"translate(\" + x + \",\" + y + \")\";\n                    };\n\n                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n                    // Issue #140\n                    xTicks\n                        .selectAll(\"text\")\n                        .attr('transform', function(d,i,j) {\n                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n                        });\n\n                    var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n                    g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n                        .attr(\"transform\", function(d,i) {\n                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n                        });\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n\n                if (reduceXTicks)\n                    xTicks\n                        .filter(function(d,i) {\n                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n                        })\n                        .selectAll('text, line')\n                        .style('opacity', 0);\n\n                if(rotateLabels)\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\n                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n                    .style('opacity', 1);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n                chart.update();\n            });\n\n            if (useInteractiveGuideline) {\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    if (e.pointXValue == undefined) return;\n\n                    var singlePoint, pointIndex, pointXLocation, xValue, allData = [];\n                    data\n                        .filter(function(series, i) {\n                            series.seriesIndex = i;\n                            return !series.disabled;\n                        })\n                        .forEach(function(series,i) {\n                            pointIndex = x.domain().indexOf(e.pointXValue)\n\n                            var point = series.values[pointIndex];\n                            if (point === undefined) return;\n\n                            xValue = point.x;\n                            if (singlePoint === undefined) singlePoint = point;\n                            if (pointXLocation === undefined) pointXLocation = e.mouseX\n                            allData.push({\n                                key: series.key,\n                                value: chart.y()(point, pointIndex),\n                                color: color(series,series.seriesIndex),\n                                data: series.values[pointIndex]\n                            });\n                        });\n\n                    interactiveLayer.tooltip\n                        .data({\n                            value: xValue,\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    interactiveLayer.tooltip.hidden(true);\n                });\n            }\n            else {\n                multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n                    evt.value = chart.x()(evt.data);\n                    evt['series'] = {\n                        key: evt.data.key,\n                        value: chart.y()(evt.data),\n                        color: evt.color\n                    };\n                    tooltip.data(evt).hidden(false);\n                });\n\n                multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n\n                multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        renderWatch.renderEnd('multibarchart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},\n        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        wrapLabels:   {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontal = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getYerr = function(d) { return d.yErr }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , stacked = false\n        , showValues = false\n        , showBarLabels = false\n        , valuePadding = 60\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , valueFormat = d3.format(',.2f')\n        , delay = 1200\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , duration = 250\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0; //used to store previous scales\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            if (stacked)\n                data = d3.layout.stack()\n                    .offset('zero')\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (data);\n\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked)\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d) {\n                        var f = d.values[i]\n                        f.size = Math.abs(f.y);\n                        if (f.y<0)  {\n                            f.y1 = negBase - f.size;\n                            negBase = negBase - f.size;\n                        } else\n                        {\n                            f.y1 = posBase;\n                            posBase = posBase + f.size;\n                        }\n                    });\n                });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableHeight], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\n            if (showValues && !stacked)\n                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n            else\n                y.range(yRange || [0, availableWidth]);\n\n            x0 = x0 || x;\n            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n                });\n\n            barsEnter.append('rect')\n                .attr('width', 0)\n                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\n            bars\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            if (getYerr(data[0],0)) {\n                barsEnter.append('polyline');\n\n                bars.select('polyline')\n                    .attr('fill', 'none')\n                    .attr('points', function(d,i) {\n                        var xerr = getYerr(d,i)\n                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];\n                        xerr = xerr.map(function(e) { return y(e) - y(0); });\n                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];\n                        return a.map(function (path) { return path.join(',') }).join(' ');\n                    })\n                    .attr('transform', function(d,i) {\n                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        return 'translate(' + (getY(d,i) < 0 ? 0 : y(getY(d,i)) - y(0)) + ', ' + mid + ')'\n                    });\n            }\n\n            barsEnter.append('text');\n\n            if (showValues && !stacked) {\n                bars.select('text')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) {\n                        var t = valueFormat(getY(d,i))\n                            , yerr = getYerr(d,i);\n                        if (yerr === undefined)\n                            return t;\n                        if (!yerr.length)\n                            return t + '±' + valueFormat(Math.abs(yerr));\n                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));\n                    });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n            } else {\n                bars.selectAll('text').text('');\n            }\n\n            if (showBarLabels && !stacked) {\n                barsEnter.append('text').classed('nv-bar-label',true);\n                bars.select('text.nv-bar-label')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) { return getX(d,i) });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text.nv-bar-label')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n            }\n            else {\n                bars.selectAll('text.nv-bar-label').text('');\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            if (stacked)\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n                    })\n                    .select('rect')\n                    .attr('width', function(d,i) {\n                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0)) || 0\n                    })\n                    .attr('height', x.rangeBand() );\n            else\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        //TODO: stacked must be all positive or all negative, not both?\n                        return 'translate(' +\n                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n                            + ',' +\n                            (d.series * x.rangeBand() / data.length\n                                +\n                                x(getX(d,i)) )\n                            + ')'\n                    })\n                    .select('rect')\n                    .attr('height', x.rangeBand() / data.length )\n                    .attr('width', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0\n                    });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('multibarHorizontal immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        // this shows the group name, seems pointless?\n        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},\n        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},\n        groupSpacing: {get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity:  {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontalChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBarHorizontal()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend().height(30)\n        , controls = nv.models.legend().height(30)\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , stacked = false\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        ;\n\n    state.stacked = false; // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(stacked);\n\n    xAxis\n        .orient('left')\n        .tickPadding(5)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient('bottom')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(duration).call(chart) };\n            chart.container = this;\n\n            stacked = multibar.stacked();\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )\n                    .tickSize(-availableWidth, 0);\n\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text');\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(0,' + availableHeight + ')');\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\", y(0))\n                .attr(\"x2\", y(0))\n                .attr(\"y1\", 0)\n                .attr(\"y2\", -availableHeight)\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                stacked = multibar.stacked();\n\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n\n                chart.update();\n            });\n        });\n        renderWatch.renderEnd('multibar horizontal chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            key: evt.data.key,\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60},\n        marginTop = null,\n        color = nv.utils.defaultColor(),\n        width = null,\n        height = null,\n        showLegend = true,\n        noData = null,\n        yDomain1,\n        yDomain2,\n        getX = function(d) { return d.x },\n        getY = function(d) { return d.y},\n        interpolate = 'linear',\n        useVoronoi = true,\n        interactiveLayer = nv.interactiveGuideline(),\n        useInteractiveGuideline = false,\n        legendRightAxisHint = ' (right axis)',\n        duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear(),\n        yScale1 = d3.scale.linear(),\n        yScale2 = d3.scale.linear(),\n\n        lines1 = nv.models.line().yScale(yScale1).duration(duration),\n        lines2 = nv.models.line().yScale(yScale2).duration(duration),\n\n        scatters1 = nv.models.scatter().yScale(yScale1).duration(duration),\n        scatters2 = nv.models.scatter().yScale(yScale2).duration(duration),\n\n        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1).duration(duration),\n        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2).duration(duration),\n\n        stack1 = nv.models.stackedArea().yScale(yScale1).duration(duration),\n        stack2 = nv.models.stackedArea().yScale(yScale2).duration(duration),\n\n        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5).duration(duration),\n        yAxis1 = nv.models.axis().scale(yScale1).orient('left').duration(duration),\n        yAxis2 = nv.models.axis().scale(yScale2).orient('right').duration(duration),\n\n        legend = nv.models.legend().height(30),\n        tooltip = nv.models.tooltip(),\n        dispatch = d3.dispatch();\n\n    var charts = [lines1, lines2, scatters1, scatters2, bars1, bars2, stack1, stack2];\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});\n            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});\n            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});\n            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});\n            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});\n            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});\n            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});\n            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x }))\n                .range([0, availableWidth]);\n\n            var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            gEnter.append('g').attr('class', 'stack1Wrap');\n            gEnter.append('g').attr('class', 'stack2Wrap');\n            gEnter.append('g').attr('class', 'bars1Wrap');\n            gEnter.append('g').attr('class', 'bars2Wrap');\n            gEnter.append('g').attr('class', 'scatters1Wrap');\n            gEnter.append('g').attr('class', 'scatters2Wrap');\n            gEnter.append('g').attr('class', 'lines1Wrap');\n            gEnter.append('g').attr('class', 'lines2Wrap');\n            gEnter.append('g').attr('class', 'legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            var g = wrap.select('g');\n\n            var color_array = data.map(function(d,i) {\n                return data[i].color || color(d, i);\n            });\n\n            // Legend\n            if (!showLegend) {\n                g.select('.legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n                legend.color(color_array);\n\n                g.select('.legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            lines1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n            scatters1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));\n            scatters2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));\n            bars1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n            bars2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n            stack1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n            stack2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var lines1Wrap = g.select('.lines1Wrap')\n                .datum(dataLines1.filter(function(d){return !d.disabled}));\n            var scatters1Wrap = g.select('.scatters1Wrap')\n                .datum(dataScatters1.filter(function(d){return !d.disabled}));\n            var bars1Wrap = g.select('.bars1Wrap')\n                .datum(dataBars1.filter(function(d){return !d.disabled}));\n            var stack1Wrap = g.select('.stack1Wrap')\n                .datum(dataStack1.filter(function(d){return !d.disabled}));\n            var lines2Wrap = g.select('.lines2Wrap')\n                .datum(dataLines2.filter(function(d){return !d.disabled}));\n            var scatters2Wrap = g.select('.scatters2Wrap')\n                .datum(dataScatters2.filter(function(d){return !d.disabled}));\n            var bars2Wrap = g.select('.bars2Wrap')\n                .datum(dataBars2.filter(function(d){return !d.disabled}));\n            var stack2Wrap = g.select('.stack2Wrap')\n                .datum(dataStack2.filter(function(d){return !d.disabled}));\n\n            var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){\n                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n            }).concat([{x:0, y:0}]) : [];\n            var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){\n                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n            }).concat([{x:0, y:0}]) : [];\n\n            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            lines1.yDomain(yScale1.domain());\n            scatters1.yDomain(yScale1.domain());\n            bars1.yDomain(yScale1.domain());\n            stack1.yDomain(yScale1.domain());\n\n            lines2.yDomain(yScale2.domain());\n            scatters2.yDomain(yScale2.domain());\n            bars2.yDomain(yScale2.domain());\n            stack2.yDomain(yScale2.domain());\n\n            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\n            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\n            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n\n            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}\n            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}\n\n            xAxis\n                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                .tickSize(-availableHeight, 0);\n\n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n            d3.transition(g.select('.nv-x.nv-axis'))\n                .call(xAxis);\n\n            yAxis1\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n\n            d3.transition(g.select('.nv-y1.nv-axis'))\n                .call(yAxis1);\n\n            yAxis2\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n            d3.transition(g.select('.nv-y2.nv-axis'))\n                .call(yAxis2);\n\n            g.select('.nv-y1.nv-axis')\n                .classed('nv-disabled', series1.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[0] + ',0)');\n\n            g.select('.nv-y2.nv-axis')\n                .classed('nv-disabled', series2.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n            legend.dispatch.on('stateChange', function(newState) {\n                chart.update();\n            });\n\n            if(useInteractiveGuideline){\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching\n            //------------------------------------------------------------\n\n            function mouseover_line(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_scatter(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(100)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_stack(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.point['x'] = stack1.x()(evt.point);\n                evt.point['y'] = stack1.y()(evt.point);\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_bar(evt) {\n                var yaxis = data[evt.data.series].yAxis === 2 ? yAxis2 : yAxis1;\n\n                evt.value = bars1.x()(evt.data);\n                evt['series'] = {\n                    value: bars1.y()(evt.data),\n                    color: evt.color,\n                    key: evt.data.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n\n\n            function clearHighlights() {\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.clearHighlights();\n                } catch(e){}\n              }\n            }\n\n            function highlightPoint(serieIndex, pointIndex, b){\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.highlightPoint(serieIndex, pointIndex, b);\n                } catch(e){}\n              }\n            }\n\n            if(useInteractiveGuideline){\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    clearHighlights();\n                    var singlePoint, pointIndex, pointXLocation, allData = [];\n                    data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            return chart.x()(d,i) >= extent[0] && chart.x()(d,i) <= extent[1];\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = x(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point,\n                            yAxis: series.yAxis == 2 ? yAxis2 : yAxis1\n                        });\n                    });\n\n                    var defaultValueFormatter = function(d,i) {\n                        var yAxis = allData[i].yAxis;\n                        return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                    };\n\n                    interactiveLayer.tooltip\n                        .headerFormatter(function(d, i) {\n                            return xAxis.tickFormat()(d, i);\n                        })\n                        .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                        .data({\n                            value: chart.x()( singlePoint,pointIndex ),\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    clearHighlights();\n                });\n            } else {\n                lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                lines2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                stack2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n                bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n\n                bars1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars1.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n                bars2.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines1 = lines1;\n    chart.lines2 = lines2;\n    chart.scatters1 = scatters1;\n    chart.scatters2 = scatters2;\n    chart.bars1 = bars1;\n    chart.bars2 = bars2;\n    chart.stack1 = stack1;\n    chart.stack2 = stack2;\n    chart.xAxis = xAxis;\n    chart.yAxis1 = yAxis1;\n    chart.yAxis2 = yAxis2;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},\n        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines1.x(_);\n            lines2.x(_);\n            scatters1.x(_);\n            scatters2.x(_);\n            bars1.x(_);\n            bars2.x(_);\n            stack1.x(_);\n            stack2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines1.y(_);\n            lines2.y(_);\n            scatters1.y(_);\n            scatters2.y(_);\n            stack1.y(_);\n            stack2.y(_);\n            bars1.y(_);\n            bars2.y(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi=_;\n            lines1.useVoronoi(_);\n            lines2.useVoronoi(_);\n            stack1.useVoronoi(_);\n            stack2.useVoronoi(_);\n        }},\n\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines1.interactive(false);\n                lines1.useVoronoi(false);\n                lines2.interactive(false);\n                lines2.useVoronoi(false);\n                stack1.interactive(false);\n                stack1.useVoronoi(false);\n                stack2.interactive(false);\n                stack2.useVoronoi(false);\n                scatters1.interactive(false);\n                scatters2.interactive(false);\n            }\n        }},\n\n        duration: {get: function(){return duration;}, set: function(_) {\n            duration = _;\n            [lines1, lines2, stack1, stack2, scatters1, scatters2, xAxis, yAxis1, yAxis2].forEach(function(model){\n              model.duration(duration);\n            });\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.ohlcBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // ohlc bar width.\n            var w = (availableWidth / data[0].values.length) * .9;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            ticks.enter().append('path')\n                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n                .attr('d', function(d,i) {\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i)) - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                })\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('fill', function(d,i) { return color[0]; })\n                .attr('stroke', function(d,i) { return color[0]; })\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n\n            // the bar colors are controlled by CSS currently\n            ticks.attr('class', function(d,i,j) {\n                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;\n            });\n\n            d3.transition(ticks)\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('d', function(d,i) {\n                    var w = (availableWidth / data[0].values.length) * .9;\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i))\n                            - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-ohlcBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-ohlcBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n// Code adapted from Jason Davies' \"Parallel Coordinates\"\n// http://bl.ocks.org/jasondavies/1341281\nnv.models.parallelCoordinates = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 0, bottom: 10, left: 0}\n        , width = null\n        , height = null\n        , availableWidth = null\n        , availableHeight = null\n        , x = d3.scale.ordinal()\n        , y = {}\n        , undefinedValuesLabel = \"undefined values\"\n        , dimensionData = []\n        , enabledDimensions = []\n        , dimensionNames = []\n        , displayBrush = true\n        , color = nv.utils.defaultColor()\n        , filters = []\n        , active = []\n        , dragging = []\n        , axisWithUndefinedValues = []\n        , lineTension = 1\n        , foreground\n        , background\n        , dimensions\n        , line = d3.svg.line()\n        , axis = d3.svg.axis()\n        , dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', \"stateChange\", 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n           //Convert old data to new format (name, values)\n            if (data[0].values === undefined) {\n                var newData = [];\n                data.forEach(function (d) {\n                        var val = {};\n                        var key = Object.keys(d);\n                        key.forEach(function (k) { if (k !== \"name\") val[k] = d[k] });\n                        newData.push({ key: d.name, values: val });\n                });\n                data = newData;\n            }\n\n            var dataValues = data.map(function (d) {return d.values});\n            if (active.length === 0) {\n                active = data;\n            }; //set all active before first brush call\n            \n            dimensionNames = dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; }).map(function (d) { return d.key });\n            enabledDimensions = dimensionData.filter(function (d) { return !d.disabled; });\n            \n            // Setup Scales\n            x.rangePoints([0, availableWidth], 1).domain(enabledDimensions.map(function (d) { return d.key; }));\n\n            //Set as true if all values on an axis are missing.\n            // Extract the list of dimensions and create a scale for each.\n            var oldDomainMaxValue = {};\n            var displayMissingValuesline = false;\n            var currentTicks = [];\n            \n            dimensionNames.forEach(function(d) {\n                var extent = d3.extent(dataValues, function (p) { return +p[d]; });\n                var min = extent[0];\n                var max = extent[1];\n                var onlyUndefinedValues = false;\n                //If there is no values to display on an axis, set the extent to 0\n                if (isNaN(min) || isNaN(max)) {\n                    onlyUndefinedValues = true;\n                    min = 0;\n                    max = 0;\n                }\n                //Scale axis if there is only one value\n                if (min === max) {\n                    min = min - 1;\n                    max = max + 1;\n                }\n                var f = filters.filter(function (k) { return k.dimension == d; });\n                if (f.length !== 0) {\n                    //If there is only NaN values, keep the existing domain.\n                    if (onlyUndefinedValues) {\n                        min = y[d].domain()[0];\n                        max = y[d].domain()[1];\n                    }\n                        //If the brush extent is > max (< min), keep the extent value.\n                    else if (!f[0].hasOnlyNaN && displayBrush) {\n                        min = min > f[0].extent[0] ? f[0].extent[0] : min;\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                    }\n                        //If there is NaN values brushed be sure the brush extent is on the domain.\n                    else if (f[0].hasNaN) {\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                        oldDomainMaxValue[d] = y[d].domain()[1];\n                        displayMissingValuesline = true;\n                    }\n                }\n                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display \"undefined values\" text.\n                //The remaining 10% are used to display the missingValue line.\n                y[d] = d3.scale.linear()\n                    .domain([min, max])\n                    .range([(availableHeight - 12) * 0.9, 0]);\n\n                axisWithUndefinedValues = [];\n                y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);\n            });\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            line.interpolate('cardinal').tension(lineTension);\n            axis.orient('left');\n            var axisDrag = d3.behavior.drag()\n                        .on('dragstart', dragStart)\n                        .on('drag', dragMove)\n                        .on('dragend', dragEnd);\n\n            //Add missing value line at the bottom of the chart\n            var missingValuesline, missingValueslineText;\n            var step = x.range()[1] - x.range()[0];\n            step = isNaN(step) ? x.range()[0] : step;\n            if (!isNaN(step)) {\n                var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];\n                missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);\n                missingValuesline.enter().append('line');\n                missingValuesline.exit().remove();\n                missingValuesline.attr(\"x1\", function(d) { return d[0]; })\n                        .attr(\"y1\", function(d) { return d[1]; })\n                        .attr(\"x2\", function(d) { return d[2]; })\n                        .attr(\"y2\", function(d) { return d[3]; });\n    \n                //Add the text \"undefined values\" under the missing value line\n                missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data([undefinedValuesLabel]);\n                missingValueslineText.append('text').data([undefinedValuesLabel]);\n                missingValueslineText.enter().append('text');\n                missingValueslineText.exit().remove();\n                missingValueslineText.attr(\"y\", availableHeight)\n                        //To have the text right align with the missingValues line, substract 92 representing the text size.\n                        .attr(\"x\", availableWidth - 92 - step / 2)\n                        .text(function(d) { return d; });\n            }\n            // Add grey background lines for context.\n            background = wrap.select('.background').selectAll('path').data(data);\n            background.enter().append('path');\n            background.exit().remove();\n            background.attr('d', path);\n\n            // Add blue foreground lines for focus.\n            foreground = wrap.select('.foreground').selectAll('path').data(data);\n            foreground.enter().append('path')\n            foreground.exit().remove();\n            foreground.attr('d', path)\n                .style(\"stroke-width\", function (d, i) {\n                if (isNaN(d.strokeWidth)) { d.strokeWidth = 1;} return d.strokeWidth;})\n                .attr('stroke', function (d, i) { return d.color || color(d, i); });\n            foreground.on(\"mouseover\", function (d, i) {\n                d3.select(this).classed('hover', true).style(\"stroke-width\", d.strokeWidth + 2 + \"px\").style(\"stroke-opacity\", 1);\n                dispatch.elementMouseover({\n                    label: d.name,\n                    color: d.color || color(d, i),\n                    values: d.values,\n                    dimensions: enabledDimensions\n                });\n\n            });\n            foreground.on(\"mouseout\", function (d, i) {\n                d3.select(this).classed('hover', false).style(\"stroke-width\", d.strokeWidth + \"px\").style(\"stroke-opacity\", 0.7);\n                dispatch.elementMouseout({\n                    label: d.name,\n                    index: i\n                });\n            });\n            foreground.on('mousemove', function (d, i) {\n                dispatch.elementMousemove();\n            });\n            foreground.on('click', function (d) {\n                dispatch.elementClick({\n                    id: d.id\n                });\n            });\n            // Add a group element for each dimension.\n            dimensions = g.selectAll('.dimension').data(enabledDimensions);\n            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');\n\n            dimensions.attr('transform', function(d) { return 'translate(' + x(d.key) + ',0)'; });\n            dimensionsEnter.append('g').attr('class', 'nv-axis');\n\n            // Add an axis and title.\n            dimensionsEnter.append('text')\n                .attr('class', 'nv-label')\n                .style(\"cursor\", \"move\")\n                .attr('dy', '-1em')\n                .attr('text-anchor', 'middle')\n                .on(\"mouseover\", function(d, i) {\n                    dispatch.elementMouseover({\n                        label: d.tooltip || d.key,\n                        color: d.color \n                    });\n                })\n                .on(\"mouseout\", function(d, i) {\n                    dispatch.elementMouseout({\n                        label: d.tooltip\n                    });\n                })\n                .on('mousemove', function (d, i) {\n                    dispatch.elementMousemove();\n                })\n                .call(axisDrag);\n\n            dimensionsEnter.append('g').attr('class', 'nv-brushBackground');\n            dimensions.exit().remove();\n            dimensions.select('.nv-label').text(function (d) { return d.key });\n\n            // Add and store a brush for each axis.\n            restoreBrush(displayBrush);\n\n            var actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),\n                    extents = actives.map(function (p) { return y[p].brush.extent(); });\n            var formerActive = active.slice(0);\n\n            //Restore active values\n            active = [];\n            foreground.style(\"display\", function (d) {\n                var isActive = actives.every(function (p, i) {\n                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {\n                        return true;\n                    }\n                    return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                });\n                if (isActive)\n                    active.push(d);\n                return !isActive ? \"none\" : null;\n\n            });\n\n            if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {\n               dispatch.activeChanged(active);\n            }\n\n            // Returns the path for a given data point.\n            function path(d) {\n                return line(enabledDimensions.map(function (p) {\n                    //If value if missing, put the value on the missing value line\n                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {\n                        var domain = y[p.key].domain();\n                        var range = y[p.key].range();\n                        var min = domain[0] - (domain[1] - domain[0]) / 9;\n\n                        //If it's not already the case, allow brush to select undefined values\n                        if (axisWithUndefinedValues.indexOf(p.key) < 0) {\n\n                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);\n                            y[p.key].brush.y(newscale);\n                            axisWithUndefinedValues.push(p.key);\n                        }\n                        if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {\n                            return [x(p.key), y[p.key](min)];\n                        }\n                    }\n\n                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.\n                    if (missingValuesline !== undefined) {\n                        if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {\n                            missingValuesline.style(\"display\", \"inline\");\n                            missingValueslineText.style(\"display\", \"inline\");\n                        } else {\n                            missingValuesline.style(\"display\", \"none\");\n                            missingValueslineText.style(\"display\", \"none\");\n                        }\n                    }\n                    return [x(p.key), y[p.key](d.values[p.key])];\n                }));\n            }\n\n            function restoreBrush(visible) {\n                filters.forEach(function (f) {\n                    //If filter brushed NaN values, keep the brush on the bottom of the axis.\n                    var brushDomain = y[f.dimension].brush.y().domain();\n                    if (f.hasOnlyNaN) {\n                        f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];\n                    }\n                    if (f.hasNaN) {\n                        f.extent[0] = brushDomain[0];\n                    }\n                    if (visible)\n                        y[f.dimension].brush.extent(f.extent);\n                });\n                \n                dimensions.select('.nv-brushBackground')\n                    .each(function (d) {\n                        d3.select(this).call(y[d.key].brush);\n\n                    })\n                    .selectAll('rect')\n                    .attr('x', -8)\n                    .attr('width', 16);\n                \n                updateTicks();\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brushstart() {\n                //If brush aren't visible, show it before brushing again.\n                if (displayBrush === false) {\n                    displayBrush = true;\n                    restoreBrush(true);\n                }\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brush() {\n                actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); });\n                extents = actives.map(function(p) { return y[p].brush.extent(); });\n\n                filters = []; //erase current filters\n                actives.forEach(function(d,i) {\n                    filters[i] = {\n                        dimension: d,\n                        extent: extents[i],\n                        hasNaN: false,\n                        hasOnlyNaN: false\n                    }\n                });\n\n                active = []; //erase current active list\n                foreground.style('display', function(d) {\n                    var isActive = actives.every(function(p, i) {\n                        if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) return true;\n                        return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                    });\n                    if (isActive) active.push(d);\n                    return isActive ? null : 'none';\n                });\n                \n                updateTicks();\n                \n                dispatch.brush({\n                    filters: filters,\n                    active: active\n                });\n            }\n            function brushend() {\n                var hasActiveBrush = actives.length > 0 ? true : false;\n                filters.forEach(function (f) {\n                    if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)\n                        f.hasNaN = true;\n                    if (f.extent[1] < y[f.dimension].domain()[0])\n                        f.hasOnlyNaN = true;\n                });\n                dispatch.brushEnd(active, hasActiveBrush);\n            }           \n            function updateTicks() {\n                dimensions.select('.nv-axis')\n                    .each(function (d, i) {\n                        var f = filters.filter(function (k) { return k.dimension == d.key; });\n                        currentTicks[d.key] = y[d.key].domain();\n                        \n                        //If brush are available, display brush extent\n                        if (f.length != 0 && displayBrush)\n                        {\n                            currentTicks[d.key] = [];\n                            if (f[0].extent[1] > y[d.key].domain()[0]) \n                                currentTicks[d.key] = [f[0].extent[1]];\n                            if (f[0].extent[0] >= y[d.key].domain()[0])\n                                currentTicks[d.key].push(f[0].extent[0]);    \n                        }\n                            \n                        d3.select(this).call(axis.scale(y[d.key]).tickFormat(d.format).tickValues(currentTicks[d.key]));\n                });\n            }\n            function dragStart(d) {\n                dragging[d.key] = this.parentNode.__origin__ = x(d.key);\n                background.attr(\"visibility\", \"hidden\");\n            }\n            function dragMove(d) {\n                dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));\n                foreground.attr(\"d\", path);\n                enabledDimensions.sort(function (a, b) { return dimensionPosition(a.key) - dimensionPosition(b.key); });\n                enabledDimensions.forEach(function (d, i) { return d.currentPosition = i; });\n                x.domain(enabledDimensions.map(function (d) { return d.key; }));\n                dimensions.attr(\"transform\", function(d) { return \"translate(\" + dimensionPosition(d.key) + \")\"; });\n            }\n            function dragEnd(d, i) {\n                delete this.parentNode.__origin__;\n                delete dragging[d.key];\n                d3.select(this.parentNode).attr(\"transform\", \"translate(\" + x(d.key) + \")\");\n                foreground\n                  .attr(\"d\", path);\n                background\n                  .attr(\"d\", path)\n                  .attr(\"visibility\", null);\n\n                dispatch.dimensionsOrder(enabledDimensions);\n            }\n            function dimensionPosition(d) {\n                var v = dragging[d];\n                return v == null ? x(d) : v;\n            }\n        });\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:         {get: function(){return width;},           set: function(_){width= _;}},\n        height:        {get: function(){return height;},          set: function(_){height= _;}},\n        dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n        displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n        filters: { get: function () { return filters; }, set: function (_) { filters = _; } },\n        active: { get: function () { return active; }, set: function (_) { active = _; } },\n        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},\n        undefinedValuesLabel : {get: function(){return undefinedValuesLabel;}, set: function(_){undefinedValuesLabel=_;}},\n        \n        // deprecated options\n        dimensions: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensions', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key= k })\n            }\n        }},\n        dimensionNames: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionNames', 'use dimensionData instead');\n            dimensionNames = [];\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key = k })\n            }\n \n        }},\n        dimensionFormats: {get: function () { return dimensionData.map(function (d) { return d.format }); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionFormats', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (f) { dimensionData.push({ format: f }) })\n            } else {\n                _.forEach(function (f, i) { dimensionData[i].format = f })\n            }\n\n        }},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    =  _.top    !== undefined ? _.top    : margin.top;\n            margin.right  =  _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   =  _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.parallelCoordinatesChart = function () {\n        \"use strict\";\n        //============================================================\n        // Public Variables with Default Settings\n        //------------------------------------------------------------\n\n        var parallelCoordinates = nv.models.parallelCoordinates()\n        var legend = nv.models.legend()\n        var tooltip = nv.models.tooltip();\n        var dimensionTooltip = nv.models.tooltip();\n\n        var margin = { top: 0, right: 0, bottom: 0, left: 0 }\n        , marginTop = null\n        , width = null\n        , height = null\n        , showLegend = true\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , dimensionData = []\n        , displayBrush = true\n        , defaultState = null\n        , noData = null\n        , nanValue = \"undefined\"\n        , dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function () { return showControls ? 180 : 0 }\n        ;\n\n\t    //============================================================\n\n\t\t//============================================================\n        // Private Variables\n        //------------------------------------------------------------\n\n        var renderWatch = nv.utils.renderWatch(dispatch);\n\n        var stateGetter = function(data) {\n            return function() {\n                return {\n                    active: data.map(function(d) { return !d.disabled })\n                };\n            }\n        };\n\n        var stateSetter = function(data) {\n            return function(state) {\n                if(state.active !== undefined) {\n                    data.forEach(function(series, i) {\n                        series.disabled = !state.active[i];\n                    });\n                }\n            }\n        };\n\n        tooltip.contentGenerator(function(data) {\n            var str = '<table><thead><tr><td class=\"legend-color-guide\"><div style=\"background-color:' + data.color + '\"></div></td><td><strong>' + data.key + '</strong></td></tr></thead>';\n            if(data.series.length !== 0)\n            {\n                str = str + '<tbody><tr><td height =\"10px\"></td></tr>';\n                data.series.forEach(function(d){\n                    str = str + '<tr><td class=\"legend-color-guide\"><div style=\"background-color:' + d.color + '\"></div></td><td class=\"key\">' + d.key + '</td><td class=\"value\">' + d.value + '</td></tr>';\n                });\n                str = str + '</tbody>';\n            }\n            str = str + '</table>';\n            return str;\n        });\n\n        //============================================================\n        // Chart function\n        //------------------------------------------------------------\n\n        function chart(selection) {\n            renderWatch.reset();\n            renderWatch.models(parallelCoordinates);\n\n            selection.each(function(data) {\n                var container = d3.select(this);\n                nv.utils.initSVG(container);\n\n                var that = this;\n\n                var availableWidth = nv.utils.availableWidth(width, container, margin),\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\n                chart.update = function() { container.call(chart); };\n                chart.container = this;\n\n                state.setter(stateSetter(dimensionData), chart.update)\n                    .getter(stateGetter(dimensionData))\n                    .update();\n\n                //set state.disabled\n                state.disabled = dimensionData.map(function (d) { return !!d.disabled });\n\n                //Keep dimensions position in memory\n                dimensionData = dimensionData.map(function (d) {d.disabled = !!d.disabled; return d});\n                dimensionData.forEach(function (d, i) {\n                    d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;\n                    d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;\n                });\n\n               if (!defaultState) {\n                    var key;\n                    defaultState = {};\n                    for(key in state) {\n                        if(state[key] instanceof Array)\n                            defaultState[key] = state[key].slice(0);\n                        else\n                            defaultState[key] = state[key];\n                    }\n                }\n\n                // Display No Data message if there's nothing to show.\n                if(!data || !data.length) {\n                    nv.utils.noData(chart, container);\n                    return chart;\n                } else {\n                    container.selectAll('.nv-noData').remove();\n                }\n\n                //------------------------------------------------------------\n                // Setup containers and skeleton of chart\n\n                var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);\n                var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');\n\n                var g = wrap.select('g');\n\n                gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');\n                gEnter.append('g').attr('class', 'nv-legendWrap');\n\n                g.select(\"rect\")\n                    .attr(\"width\", availableWidth)\n                    .attr(\"height\", (availableHeight > 0) ? availableHeight : 0);\n\n                // Legend\n                if (!showLegend) {\n                    g.select('.nv-legendWrap').selectAll('*').remove();\n                } else {\n                    legend.width(availableWidth)\n                        .color(function (d) { return \"rgb(188,190,192)\"; });\n\n                    g.select('.nv-legendWrap')\n                        .datum(dimensionData.sort(function (a, b) { return a.originalPosition - b.originalPosition; }))\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n                    wrap.select('.nv-legendWrap')\n                       .attr('transform', 'translate( 0 ,' + (-margin.top) + ')');\n                }\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n                // Main Chart Component(s)\n                parallelCoordinates\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .dimensionData(dimensionData)\n                    .displayBrush(displayBrush);\n\n\t\t        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ')\n                  .datum(data);\n\n\t\t        parallelCoordinatesWrap.transition().call(parallelCoordinates);\n\n\t\t\t\t//============================================================\n                // Event Handling/Dispatching (in chart's scope)\n                //------------------------------------------------------------\n                //Display reset brush button\n\t\t        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {\n\t\t            if (hasActiveBrush) {\n\t\t                displayBrush = true;\n\t\t                dispatch.brushEnd(active);\n\t\t            } else {\n\n\t\t                displayBrush = false;\n\t\t            }\n\t\t        });\n\n\t\t        legend.dispatch.on('stateChange', function(newState) {\n\t\t            for(var key in newState) {\n\t\t                state[key] = newState[key];\n\t\t            }\n\t\t            dispatch.stateChange(state);\n\t\t            chart.update();\n\t\t        });\n\n                //Update dimensions order and display reset sorting button\n\t\t        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {\n\t\t            dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; });\n\t\t            var isSorted = false;\n\t\t            dimensionData.forEach(function (d, i) {\n\t\t                d.currentPosition = i;\n\t\t                if (d.currentPosition !== d.originalPosition)\n\t\t                    isSorted = true;\n\t\t            });\n\t\t            dispatch.dimensionsOrder(dimensionData, isSorted);\n\t\t        });\n\n\t\t\t\t// Update chart from a state object passed to event handler\n                dispatch.on('changeState', function (e) {\n\n                    if (typeof e.disabled !== 'undefined') {\n                        dimensionData.forEach(function (series, i) {\n                            series.disabled = e.disabled[i];\n                        });\n                        state.disabled = e.disabled;\n                    }\n                    chart.update();\n                });\n            });\n\n            renderWatch.renderEnd('parraleleCoordinateChart immediate');\n            return chart;\n        }\n\n\t\t//============================================================\n        // Event Handling/Dispatching (out of chart's scope)\n        //------------------------------------------------------------\n\n        parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {\n            var tp = {\n                key: evt.label,\n                color: evt.color,\n                series: []\n             }\n            if(evt.values){\n                Object.keys(evt.values).forEach(function (d) {\n                    var dim = evt.dimensions.filter(function (dd) {return dd.key === d;})[0];\n                    if(dim){\n                        var v;\n                        if (isNaN(evt.values[d]) || isNaN(parseFloat(evt.values[d]))) {\n                            v = nanValue;\n                        } else {\n                            v = dim.format(evt.values[d]);\n                        }\n                        tp.series.push({ idx: dim.currentPosition, key: d, value: v, color: dim.color });\n                    }\n                });\n                tp.series.sort(function(a,b) {return a.idx - b.idx});\n             }\n            tooltip.data(tp).hidden(false);\n        });\n\n        parallelCoordinates.dispatch.on('elementMouseout.tooltip', function(evt) {\n            tooltip.hidden(true)\n        });\n\n        parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {\n            tooltip();\n        });\n\t\t //============================================================\n        // Expose Public Variables\n        //------------------------------------------------------------\n\n\t\t// expose chart's sub-components\n        chart.dispatch = dispatch;\n        chart.parallelCoordinates = parallelCoordinates;\n        chart.legend = legend;\n        chart.tooltip = tooltip;\n        chart.options = nv.utils.optionsFunc.bind(chart);\n\n        chart._options = Object.create({}, {\n            // simple options, just get/set the necessary values\n            width: { get: function () { return width; }, set: function (_) { width = _; } },\n            height: { get: function () { return height; }, set: function (_) { height = _; } },\n            showLegend: { get: function () { return showLegend; }, set: function (_) { showLegend = _; } },\n            defaultState: { get: function () { return defaultState; }, set: function (_) { defaultState = _; } },\n            dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n            displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n            noData: { get: function () { return noData; }, set: function (_) { noData = _; } },\n            nanValue: { get: function () { return nanValue; }, set: function (_) { nanValue = _; } },\n\n            // options that require extra logic in the setter\n            margin: {\n                get: function () { return margin; },\n                set: function (_) {\n                    if (_.top !== undefined) {\n                        margin.top = _.top;\n                        marginTop = _.top;\n                    }\n                    margin.right = _.right !== undefined ? _.right : margin.right;\n                    margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n                    margin.left = _.left !== undefined ? _.left : margin.left;\n                }\n            },\n            color: {get: function(){return color;}, set: function(_){\n                    color = nv.utils.getColor(_);\n                    legend.color(color);\n                    parallelCoordinates.color(color);\n                }}\n        });\n\n        nv.utils.inheritOptions(chart, parallelCoordinates);\n        nv.utils.initOptions(chart);\n\n        return chart;\n    };\nnv.models.pie = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 500\n        , height = 500\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , valueFormat = d3.format(',.2f')\n        , showLabels = true\n        , labelsOutside = false\n        , labelType = \"key\"\n        , labelThreshold = .02 //if slice percentage is under this, don't show label\n        , donut = false\n        , title = false\n        , growOnHover = true\n        , titleOffset = 0\n        , labelSunbeamLayout = false\n        , startAngle = false\n        , padAngle = false\n        , endAngle = false\n        , cornerRadius = 0\n        , donutRatio = 0.5\n        , duration = 250\n        , arcsRadius = []\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    var arcs = [];\n    var arcsOver = [];\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right\n                , availableHeight = height - margin.top - margin.bottom\n                , radius = Math.min(availableWidth, availableHeight) / 2\n                , arcsRadiusOuter = []\n                , arcsRadiusInner = []\n                ;\n\n            container = d3.select(this)\n            if (arcsRadius.length === 0) {\n                var outer = radius - radius / 5;\n                var inner = donutRatio * radius;\n                for (var i = 0; i < data[0].length; i++) {\n                    arcsRadiusOuter.push(outer);\n                    arcsRadiusInner.push(inner);\n                }\n            } else {\n                if(growOnHover){\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 5) * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 5) * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 5); }));\n                } else {\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return d.outer * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return d.inner * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return d.inner; }));\n                }\n            }\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n            var g_pie = gEnter.append('g').attr('class', 'nv-pie');\n            gEnter.append('g').attr('class', 'nv-pieLabels');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\n            //\n            container.on('click', function(d,i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            arcs = [];\n            arcsOver = [];\n            for (var i = 0; i < data[0].length; i++) {\n\n                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);\n                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);\n\n                if (startAngle !== false) {\n                    arc.startAngle(startAngle);\n                    arcOver.startAngle(startAngle);\n                }\n                if (endAngle !== false) {\n                    arc.endAngle(endAngle);\n                    arcOver.endAngle(endAngle);\n                }\n                if (donut) {\n                    arc.innerRadius(arcsRadiusInner[i]);\n                    arcOver.innerRadius(arcsRadiusInner[i]);\n                }\n\n                if (arc.cornerRadius && cornerRadius) {\n                    arc.cornerRadius(cornerRadius);\n                    arcOver.cornerRadius(cornerRadius);\n                }\n\n                arcs.push(arc);\n                arcsOver.push(arcOver);\n            }\n\n            // Setup the Pie chart and choose the data element\n            var pie = d3.layout.pie()\n                .sort(null)\n                .value(function(d) { return d.disabled ? 0 : getY(d) });\n\n            // padAngle added in d3 3.5\n            if (pie.padAngle && padAngle) {\n                pie.padAngle(padAngle);\n            }\n\n            // if title is specified and donut, put it in the middle\n            if (donut && title) {\n                g_pie.append(\"text\").attr('class', 'nv-pie-title');\n\n                wrap.select('.nv-pie-title')\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function (d) {\n                        return title;\n                    })\n                    .style(\"font-size\", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + \"px\")\n                    .attr(\"dy\", \"0.35em\") // trick to vertically center text\n                    .attr('transform', function(d, i) {\n                        return 'translate(0, '+ titleOffset + ')';\n                    });\n            }\n\n            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);\n            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);\n\n            slices.exit().remove();\n            pieLabels.exit().remove();\n\n            var ae = slices.enter().append('g');\n            ae.attr('class', 'nv-slice');\n            ae.on('mouseover', function(d, i) {\n                d3.select(this).classed('hover', true);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(70)\n                        .attr(\"d\", arcsOver[i]);\n                }\n                dispatch.elementMouseover({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    percent: (d.endAngle - d.startAngle) / (2 * Math.PI)\n                });\n            });\n            ae.on('mouseout', function(d, i) {\n                d3.select(this).classed('hover', false);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(50)\n                        .attr(\"d\", arcs[i]);\n                }\n                dispatch.elementMouseout({data: d.data, index: i});\n            });\n            ae.on('mousemove', function(d, i) {\n                dispatch.elementMousemove({data: d.data, index: i});\n            });\n            ae.on('click', function(d, i) {\n                var element = this;\n                dispatch.elementClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    event: d3.event,\n                    element: element\n                });\n            });\n            ae.on('dblclick', function(d, i) {\n                dispatch.elementDblClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\")\n                });\n            });\n\n            slices.attr('fill', function(d,i) { return color(d.data, i); });\n            slices.attr('stroke', function(d,i) { return color(d.data, i); });\n\n            var paths = ae.append('path').each(function(d) {\n                this._current = d;\n            });\n\n            slices.select('path')\n                .transition()\n                .duration(duration)\n                .attr('d', function (d, i) { return arcs[i](d); })\n                .attrTween('d', arcTween);\n\n            if (showLabels) {\n                // This does the normal label\n                var labelsArc = [];\n                for (var i = 0; i < data[0].length; i++) {\n                    labelsArc.push(arcs[i]);\n\n                    if (labelsOutside) {\n                        if (donut) {\n                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());\n                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);\n                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);\n                        }\n                    } else if (!donut) {\n                            labelsArc[i].innerRadius(0);\n                    }\n                }\n\n                pieLabels.enter().append(\"g\").classed(\"nv-label\",true).each(function(d,i) {\n                    var group = d3.select(this);\n\n                    group.attr('transform', function (d, i) {\n                        if (labelSunbeamLayout) {\n                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                                rotateAngle -= 90;\n                            } else {\n                                rotateAngle += 90;\n                            }\n                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                        } else {\n                            d.outerRadius = radius + 10; // Set Outer Coordinate\n                            d.innerRadius = radius + 15; // Set Inner Coordinate\n                            return 'translate(' + labelsArc[i].centroid(d) + ')'\n                        }\n                    });\n\n                    group.append('rect')\n                        .style('stroke', '#fff')\n                        .style('fill', '#fff')\n                        .attr(\"rx\", 3)\n                        .attr(\"ry\", 3);\n\n                    group.append('text')\n                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                        .style('fill', '#000')\n                });\n\n                var labelLocationHash = {};\n                var avgHeight = 14;\n                var avgWidth = 140;\n                var createHashKey = function(coordinates) {\n                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n                };\n                var getSlicePercentage = function(d) {\n                    return (d.endAngle - d.startAngle) / (2 * Math.PI);\n                };\n\n                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {\n                    if (labelSunbeamLayout) {\n                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                            rotateAngle -= 90;\n                        } else {\n                            rotateAngle += 90;\n                        }\n                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                    } else {\n                        d.outerRadius = radius + 10; // Set Outer Coordinate\n                        d.innerRadius = radius + 15; // Set Inner Coordinate\n\n                        /*\n                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n                        Adjust the label's y-position to remove the overlap.\n                        */\n                        var center = labelsArc[i].centroid(d);\n                        var percent = getSlicePercentage(d);\n                        if (d.value && percent >= labelThreshold) {\n                            var hashKey = createHashKey(center);\n                            if (labelLocationHash[hashKey]) {\n                                center[1] -= avgHeight;\n                            }\n                            labelLocationHash[createHashKey(center)] = true;\n                        }\n                        return 'translate(' + center + ')'\n                    }\n                });\n\n                pieLabels.select(\".nv-label text\")\n                    .style('text-anchor', function(d,i) {\n                        //center the text on it's origin or begin/end if orthogonal aligned\n                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';\n                    })\n                    .text(function(d, i) {\n                        var percent = getSlicePercentage(d);\n                        var label = '';\n                        if (!d.value || percent < labelThreshold) return '';\n\n                        if(typeof labelType === 'function') {\n                            label = labelType(d, i, {\n                                'key': getX(d.data),\n                                'value': getY(d.data),\n                                'percent': valueFormat(percent)\n                            });\n                        } else {\n                            switch (labelType) {\n                                case 'key':\n                                    label = getX(d.data);\n                                    break;\n                                case 'value':\n                                    label = valueFormat(getY(d.data));\n                                    break;\n                                case 'percent':\n                                    label = d3.format('%')(percent);\n                                    break;\n                            }\n                        }\n                        return label;\n                    })\n                ;\n            }\n\n\n            // Computes the angle of an arc, converting from radians to degrees.\n            function angle(d) {\n                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n                return a > 90 ? a - 180 : a;\n            }\n\n            function arcTween(a, idx) {\n                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n                if (!donut) a.innerRadius = 0;\n                var i = d3.interpolate(this._current, a);\n                this._current = i(0);\n                return function (t) {\n                    return arcs[idx](i(t));\n                };\n            }\n        });\n\n        renderWatch.renderEnd('pie immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n        title:      {get: function(){return title;}, set: function(_){title=_;}},\n        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        x:          {get: function(){return getX;}, set: function(_){getX=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},\n        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},\n        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},\n        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},\n        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},\n        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},\n        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},\n        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},\n        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},\n\n        // depreciated after 1.7.1\n        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');\n        }},\n        // depreciated after 1.7.1\n        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');\n        }},\n        // deprecated after 1.7.1\n        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {\n            valueFormat=_;\n            nv.deprecated('labelFormat','use valueFormat instead');\n        }},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY=d3.functor(_);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }},\n        labelType:          {get: function(){return labelType;}, set: function(_){\n            labelType= _ || 'key';\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.pieChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var pie = nv.models.pie();\n    var legend = nv.models.legend();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , marginTop = null\n        , width = null\n        , height = null\n        , showTooltipPercent = false\n        , showLegend = true\n        , legendPosition = \"top\"\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return pie.valueFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined) {\n                data.forEach(function (series, i) {\n                    series.disabled = !state.active[i];\n                });\n            }\n        }\n    };\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(pie);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var that = this;\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            state.setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-pieWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                if (legendPosition === \"top\") {\n                    legend.width( availableWidth ).key(pie.x());\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                } else if (legendPosition === \"right\") {\n                    var legendWidth = nv.models.legend().width();\n                    if (availableWidth / 2 < legendWidth) {\n                        legendWidth = (availableWidth / 2)\n                    }\n                    legend.height(availableHeight).key(pie.x());\n                    legend.width(legendWidth);\n                    availableWidth -= legend.width();\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend)\n                        .attr('transform', 'translate(' + (availableWidth) +',0)');\n                }\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            pie.width(availableWidth).height(availableHeight);\n            var pieWrap = g.select('.nv-pieWrap').datum([data]);\n            d3.transition(pieWrap).call(pie);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState) {\n                    state[key] = newState[key];\n                }\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('pieChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    pie.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    pie.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    pie.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.legend = legend;\n    chart.dispatch = dispatch;\n    chart.pie = pie;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:              {get: function(){return width;},                set: function(_){width=_;}},\n        height:             {get: function(){return height;},               set: function(_){height=_;}},\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n        showLegend:         {get: function(){return showLegend;},           set: function(_){showLegend=_;}},\n        legendPosition:     {get: function(){return legendPosition;},       set: function(_){legendPosition=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            legend.color(color);\n            pie.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            pie.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n    nv.utils.inheritOptions(chart, pie);\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sankey = function() {\n    'use strict';\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sankey = {},\n        nodeWidth = 24,\n        nodePadding = 8,\n        size = [1, 1],\n        nodes = [],\n        links = [],\n        sinksRight = true;\n\n    var layout = function(iterations) {\n        computeNodeLinks();\n        computeNodeValues();\n        computeNodeBreadths();\n        computeNodeDepths(iterations);\n    };\n\n    var relayout = function() {\n        computeLinkDepths();\n    };\n\n    // SVG path data generator, to be used as 'd' attribute on 'path' element selection.\n    var link = function() {\n        var curvature = .5;\n\n        function link(d) {\n\n            var x0 = d.source.x + d.source.dx,\n                x1 = d.target.x,\n                xi = d3.interpolateNumber(x0, x1),\n                x2 = xi(curvature),\n                x3 = xi(1 - curvature),\n                y0 = d.source.y + d.sy + d.dy / 2,\n                y1 = d.target.y + d.ty + d.dy / 2;\n            var linkPath = 'M' + x0 + ',' + y0\n                + 'C' + x2 + ',' + y0\n                + ' ' + x3 + ',' + y1\n                + ' ' + x1 + ',' + y1;\n            return linkPath;\n        }\n\n        link.curvature = function(_) {\n            if (!arguments.length) return curvature;\n            curvature = +_;\n            return link;\n        };\n\n        return link;\n    };\n\n    // Y-position of the middle of a node.\n    var center = function(node) {\n        return node.y + node.dy / 2;\n    };\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    // Populate the sourceLinks and targetLinks for each node.\n    // Also, if the source and target are not objects, assume they are indices.\n    function computeNodeLinks() {\n        nodes.forEach(function(node) {\n            // Links that have this node as source.\n            node.sourceLinks = [];\n            // Links that have this node as target.\n            node.targetLinks = [];\n        });\n        links.forEach(function(link) {\n            var source = link.source,\n                target = link.target;\n            if (typeof source === 'number') source = link.source = nodes[link.source];\n            if (typeof target === 'number') target = link.target = nodes[link.target];\n            source.sourceLinks.push(link);\n            target.targetLinks.push(link);\n        });\n    }\n\n    // Compute the value (size) of each node by summing the associated links.\n    function computeNodeValues() {\n        nodes.forEach(function(node) {\n            node.value = Math.max(\n                d3.sum(node.sourceLinks, value),\n                d3.sum(node.targetLinks, value)\n            );\n        });\n    }\n\n    // Iteratively assign the breadth (x-position) for each node.\n    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n    // nodes with no incoming links are assigned breadth zero, while\n    // nodes with no outgoing links are assigned the maximum breadth.\n    function computeNodeBreadths() {\n        //\n        var remainingNodes = nodes,\n            nextNodes,\n            x = 0;\n\n        // Work from left to right.\n        // Keep updating the breath (x-position) of nodes that are target of recently updated nodes.\n        //\n        while (remainingNodes.length && x < nodes.length) {\n            nextNodes = [];\n            remainingNodes.forEach(function(node) {\n                node.x = x;\n                node.dx = nodeWidth;\n                node.sourceLinks.forEach(function(link) {\n                    if (nextNodes.indexOf(link.target) < 0) {\n                        nextNodes.push(link.target);\n                    }\n                });\n            });\n            remainingNodes = nextNodes;\n            ++x;\n            //\n        }\n\n        // Optionally move pure sinks always to the right.\n        if (sinksRight) {\n            moveSinksRight(x);\n        }\n\n        scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n    }\n\n    function moveSourcesRight() {\n        nodes.forEach(function(node) {\n            if (!node.targetLinks.length) {\n                node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n            }\n        });\n    }\n\n    function moveSinksRight(x) {\n        nodes.forEach(function(node) {\n            if (!node.sourceLinks.length) {\n                node.x = x - 1;\n            }\n        });\n    }\n\n    function scaleNodeBreadths(kx) {\n        nodes.forEach(function(node) {\n            node.x *= kx;\n        });\n    }\n\n    // Compute the depth (y-position) for each node.\n    function computeNodeDepths(iterations) {\n        // Group nodes by breath.\n        var nodesByBreadth = d3.nest()\n            .key(function(d) { return d.x; })\n            .sortKeys(d3.ascending)\n            .entries(nodes)\n            .map(function(d) { return d.values; });\n\n        //\n        initializeNodeDepth();\n        resolveCollisions();\n        computeLinkDepths();\n        for (var alpha = 1; iterations > 0; --iterations) {\n            relaxRightToLeft(alpha *= .99);\n            resolveCollisions();\n            computeLinkDepths();\n            relaxLeftToRight(alpha);\n            resolveCollisions();\n            computeLinkDepths();\n        }\n\n        function initializeNodeDepth() {\n            // Calculate vertical scaling factor.\n            var ky = d3.min(nodesByBreadth, function(nodes) {\n                return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n            });\n\n            nodesByBreadth.forEach(function(nodes) {\n                nodes.forEach(function(node, i) {\n                    node.y = i;\n                    node.dy = node.value * ky;\n                });\n            });\n\n            links.forEach(function(link) {\n                link.dy = link.value * ky;\n            });\n        }\n\n        function relaxLeftToRight(alpha) {\n            nodesByBreadth.forEach(function(nodes, breadth) {\n                nodes.forEach(function(node) {\n                    if (node.targetLinks.length) {\n                        // Value-weighted average of the y-position of source node centers linked to this node.\n                        var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedSource(link) {\n                return (link.source.y + link.sy + link.dy / 2) * link.value;\n            }\n        }\n\n        function relaxRightToLeft(alpha) {\n            nodesByBreadth.slice().reverse().forEach(function(nodes) {\n                nodes.forEach(function(node) {\n                    if (node.sourceLinks.length) {\n                        // Value-weighted average of the y-positions of target nodes linked to this node.\n                        var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedTarget(link) {\n                return (link.target.y + link.ty + link.dy / 2) * link.value;\n            }\n        }\n\n        function resolveCollisions() {\n            nodesByBreadth.forEach(function(nodes) {\n                var node,\n                    dy,\n                    y0 = 0,\n                    n = nodes.length,\n                    i;\n\n                // Push any overlapping nodes down.\n                nodes.sort(ascendingDepth);\n                for (i = 0; i < n; ++i) {\n                    node = nodes[i];\n                    dy = y0 - node.y;\n                    if (dy > 0) node.y += dy;\n                    y0 = node.y + node.dy + nodePadding;\n                }\n\n                // If the bottommost node goes outside the bounds, push it back up.\n                dy = y0 - nodePadding - size[1];\n                if (dy > 0) {\n                    y0 = node.y -= dy;\n\n                    // Push any overlapping nodes back up.\n                    for (i = n - 2; i >= 0; --i) {\n                        node = nodes[i];\n                        dy = node.y + node.dy + nodePadding - y0;\n                        if (dy > 0) node.y -= dy;\n                        y0 = node.y;\n                    }\n                }\n            });\n        }\n\n        function ascendingDepth(a, b) {\n            return a.y - b.y;\n        }\n    }\n\n    // Compute y-offset of the source endpoint (sy) and target endpoints (ty) of links,\n    // relative to the source/target node's y-position.\n    function computeLinkDepths() {\n        nodes.forEach(function(node) {\n            node.sourceLinks.sort(ascendingTargetDepth);\n            node.targetLinks.sort(ascendingSourceDepth);\n        });\n        nodes.forEach(function(node) {\n            var sy = 0, ty = 0;\n            node.sourceLinks.forEach(function(link) {\n                link.sy = sy;\n                sy += link.dy;\n            });\n            node.targetLinks.forEach(function(link) {\n                link.ty = ty;\n                ty += link.dy;\n            });\n        });\n\n        function ascendingSourceDepth(a, b) {\n            return a.source.y - b.source.y;\n        }\n\n        function ascendingTargetDepth(a, b) {\n            return a.target.y - b.target.y;\n        }\n    }\n\n    // Value property accessor.\n    function value(x) {\n        return x.value;\n    }\n\n    sankey.options = nv.utils.optionsFunc.bind(sankey);\n    sankey._options = Object.create({}, {\n        nodeWidth:    {get: function(){return nodeWidth;},   set: function(_){nodeWidth=+_;}},\n        nodePadding:  {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        nodes:        {get: function(){return nodes;},       set: function(_){nodes=_;}},\n        links:        {get: function(){return links ;},      set: function(_){links=_;}},\n        size:         {get: function(){return size;},        set: function(_){size=_;}},\n        sinksRight:   {get: function(){return sinksRight;},  set: function(_){sinksRight=_;}},\n\n        layout:       {get: function(){layout(32);},         set: function(_){layout(_);}},\n        relayout:     {get: function(){relayout();},         set: function(_){}},\n        center:       {get: function(){return center();},    set: function(_){\n            if(typeof _ === 'function'){\n                center=_;\n            }\n        }},\n        link:         {get: function(){return link();},      set: function(_){\n            if(typeof _ === 'function'){\n                link=_;\n            }\n            return link();\n        }}\n    });\n\n    nv.utils.initOptions(sankey);\n\n    return sankey;\n};\nnv.models.sankeyChart = function() {\n    \"use strict\";\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , sankey = nv.models.sankey()\n        , width = 600\n        , height = 400\n        , nodeWidth = 36\n        , nodePadding =  40\n        , units = 'units'\n        , center = undefined\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var formatNumber = d3.format(',.0f');    // zero decimal places\n    var format = function(d) {\n        return formatNumber(d) + ' ' + units;\n    };\n    var color = d3.scale.category20();\n    var linkTitle = function(d){\n        return d.source.name + ' → ' + d.target.name + '\\n' + format(d.value);\n    };\n    var nodeFillColor = function(d){\n        return d.color = color(d.name.replace(/ .*/, ''));\n    };\n    var nodeStrokeColor = function(d){\n        return d3.rgb(d.color).darker(2);\n    };\n    var nodeTitle = function(d){\n        return d.name + '\\n' + format(d.value);\n    };\n\n    var showError = function(element, message) {\n        element.append('text')\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('class', 'nvd3-sankey-chart-error')\n            .attr('text-anchor', 'middle')\n            .text(message);\n    };\n\n    function chart(selection) {\n        selection.each(function(data) {\n\n            var testData = {\n                nodes:\n                    [\n                        {'node': 1, 'name': 'Test 1'},\n                        {'node': 2, 'name': 'Test 2'},\n                        {'node': 3, 'name': 'Test 3'},\n                        {'node': 4, 'name': 'Test 4'},\n                        {'node': 5, 'name': 'Test 5'},\n                        {'node': 6, 'name': 'Test 6'}\n                    ],\n                links:\n                    [\n                        {'source': 0, 'target': 1, 'value': 2295},\n                        {'source': 0, 'target': 5, 'value': 1199},\n                        {'source': 1, 'target': 2, 'value': 1119},\n                        {'source': 1, 'target': 5, 'value': 1176},\n                        {'source': 2, 'target': 3, 'value': 487},\n                        {'source': 2, 'target': 5, 'value': 632},\n                        {'source': 3, 'target': 4, 'value': 301},\n                        {'source': 3, 'target': 5, 'value': 186}\n                    ]\n            };\n\n            // Error handling\n            var isDataValid = false;\n            var dataAvailable = false;\n\n            // check if data is valid\n            if(\n                (typeof data['nodes'] === 'object' && data['nodes'].length) >= 0 &&\n                (typeof data['links'] === 'object' && data['links'].length) >= 0\n            ){\n                isDataValid = true;\n            }\n\n            // check if data is available\n            if(\n                data['nodes'] && data['nodes'].length > 0 &&\n                data['links'] && data['links'].length > 0\n            ) {\n                dataAvailable = true;\n            }\n\n            // show error\n            if(!isDataValid) {\n                console.error('NVD3 Sankey chart error:', 'invalid data format for', data);\n                console.info('Valid data format is: ', testData, JSON.stringify(testData));\n                showError(selection, 'Error loading chart, data is invalid');\n                return false;\n            }\n\n            // TODO use nv.utils.noData\n            if(!dataAvailable) {\n                showError(selection, 'No data available');\n                return false;\n            }\n\n            // No errors, continue\n\n            // append the svg canvas to the page\n            var svg = selection.append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .append('g')\n                .attr('class', 'nvd3 nv-wrap nv-sankeyChart');\n\n            // Set the sankey diagram properties\n            sankey\n                .nodeWidth(nodeWidth)\n                .nodePadding(nodePadding)\n                .size([width, height]);\n\n            var path = sankey.link();\n\n            sankey\n                .nodes(data.nodes)\n                .links(data.links)\n                .layout(32)\n                .center(center);\n\n            // add in the links\n            var link = svg.append('g').selectAll('.link')\n                .data(data.links)\n                .enter().append('path')\n                .attr('class', 'link')\n                .attr('d', path)\n                .style('stroke-width', function(d) { return Math.max(1, d.dy); })\n            .sort(function(a,b) { return b.dy - a.dy; });\n\n            // add the link titles\n            link.append('title')\n                .text(linkTitle);\n\n            // add in the nodes\n            var node = svg.append('g').selectAll('.node')\n                .data(data.nodes)\n                .enter().append('g')\n                .attr('class', 'node')\n                .attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; })\n                .call(\n                    d3.behavior\n                        .drag()\n                        .origin(function(d) { return d; })\n                        .on('dragstart', function() {\n                            this.parentNode.appendChild(this);\n                        })\n                        .on('drag', dragmove)\n                );\n\n            // add the rectangles for the nodes\n            node.append('rect')\n                .attr('height', function(d) { return d.dy; })\n                .attr('width', sankey.nodeWidth())\n                .style('fill', nodeFillColor)\n                .style('stroke', nodeStrokeColor)\n                .append('title')\n                .text(nodeTitle);\n\n            // add in the title for the nodes\n            node.append('text')\n                .attr('x', -6)\n                .attr('y', function(d) { return d.dy / 2; })\n                .attr('dy', '.35em')\n                .attr('text-anchor', 'end')\n                .attr('transform', null)\n                .text(function(d) { return d.name; })\n                .filter(function(d) { return d.x < width / 2; })\n                .attr('x', 6 + sankey.nodeWidth())\n                .attr('text-anchor', 'start');\n\n            // the function for moving the nodes\n            function dragmove(d) {\n                d3.select(this).attr('transform',\n                'translate(' + d.x + ',' + (\n                    d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))\n                ) + ')');\n                sankey.relayout();\n                link.attr('d', path);\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        units:           {get: function(){return units;},       set: function(_){units=_;}},\n        width:           {get: function(){return width;},       set: function(_){width=_;}},\n        height:          {get: function(){return height;},      set: function(_){height=_;}},\n        format:          {get: function(){return format;},      set: function(_){format=_;}},\n        linkTitle:       {get: function(){return linkTitle;},   set: function(_){linkTitle=_;}},\n        nodeWidth:       {get: function(){return nodeWidth;},   set: function(_){nodeWidth=_;}},\n        nodePadding:     {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        center:          {get: function(){return center},       set: function(_){center=_}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        nodeStyle: {get: function(){return {};}, set: function(_){\n            nodeFillColor   = _.fillColor   !== undefined ? _.fillColor   : nodeFillColor;\n            nodeStrokeColor = _.strokeColor !== undefined ? _.strokeColor : nodeStrokeColor;\n            nodeTitle       = _.title       !== undefined ? _.title       : nodeTitle;\n        }}\n\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.scatter = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n        , width        = null\n        , height       = null\n        , color        = nv.utils.defaultColor() // chooses color\n        , pointBorderColor = null\n        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n        , container    = null\n        , x            = d3.scale.linear()\n        , y            = d3.scale.linear()\n        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n        , getX         = function(d) { return d.x } // accessor to get the x value\n        , getY         = function(d) { return d.y } // accessor to get the y value\n        , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , forceY       = [] // List of numbers to Force into the Y scale\n        , forceSize    = [] // List of numbers to Force into the Size scale\n        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n        , clipEdge     = false // if true, masks points within x and y scale\n        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n        , showVoronoi  = false // display the voronoi areas\n        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n        , xDomain      = null // Override x domain (skips the calculation from data)\n        , yDomain      = null // Override y domain\n        , xRange       = null // Override x range\n        , yRange       = null // Override y range\n        , sizeDomain   = null // Override point size domain\n        , sizeRange    = null\n        , singlePoint  = false\n        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        , useVoronoi   = true\n        , duration     = 250\n        , interactiveUpdateDelay = 300\n        , showLabels    = false\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0, z0 // used to store previous scales\n        , width0\n        , height0\n        , timeoutID\n        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        , _sizeRange_def = [16, 256]\n        , _cache = {}\n        ;\n\n    function getCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        val = _cache[key] = _cache[key] || {};\n        return val;\n    }\n\n    function delCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        delete _cache[key];\n    }\n\n    function getDiffs(d) {\n        var i, key, val,\n            cache = getCache(d),\n            diffs = false;\n        for (i = 1; i < arguments.length; i += 2) {\n            key = arguments[i];\n            val = arguments[i + 1](d[0], d[1]);\n            if (cache[key] !== val || !cache.hasOwnProperty(key)) {\n                cache[key] = val;\n                diffs = true;\n            }\n        }\n        return diffs;\n    }\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            var logScale = chart.yScale().name === d3.scale.log().name ? true : false;\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n                d3.merge(\n                    data.map(function(d) {\n                        return d.values.map(function(d,i) {\n                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n                        })\n                    })\n                );\n\n            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\n            if (padData && data[0])\n                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n             if (logScale) {\n                    var min = d3.min(seriesData.map(function(d) { if (d.y !== 0) return d.y; }));\n                    y.clamp(true)\n                        .domain(yDomain || d3.extent(seriesData.map(function(d) {\n                            if (d.y !== 0) return d.y;\n                            else return min * 0.1;\n                        }).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                } else {\n                        y.domain(yDomain || d3.extent(seriesData.map(function (d) { return d.y;}).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                }\n\n            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n                .range(sizeRange || _sizeRange_def);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];\n\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            if ( isNaN(x.domain()[0])) {\n                x.domain([-1,1]);\n            }\n\n            if ( isNaN(y.domain()[0])) {\n                y.domain([-1,1]);\n            }\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n            z0 = z0 || z;\n\n            var scaleDiff = x(1) !== x0(1) || y(1) !== y0(1) || z(1) !== z0(1);\n\n            width0 = width0 || width;\n            height0 = height0 || height;\n\n            var sizeDiff = width0 !== width || height0 !== height;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.classed('nv-single-point', singlePoint);\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-point-paths');\n            wrapEnter.append('g').attr('class', 'nv-point-clips');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect')\n                .attr('transform', 'translate( -10, -10)');\n                \n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth + 20)\n                .attr('height', (availableHeight > 0) ? availableHeight + 20 : 0);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            function updateInteractiveLayer() {\n                // Always clear needs-update flag regardless of whether or not\n                // we will actually do anything (avoids needless invocations).\n                needsUpdate = false;\n\n                if (!interactive) return false;\n\n                // inject series and point index for reference into voronoi\n                if (useVoronoi === true) {\n                    var vertices = d3.merge(data.map(function(group, groupIndex) {\n                            return group.values\n                                .map(function(point, pointIndex) {\n                                    // *Adding noise to make duplicates very unlikely\n                                    // *Injecting series and point index for reference\n                                    /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n                                     */\n                                    var pX = getX(point,pointIndex);\n                                    var pY = getY(point,pointIndex);\n\n                                    return [nv.utils.NaNtoZero(x(pX))+ Math.random() * 1e-4,\n                                            nv.utils.NaNtoZero(y(pY))+ Math.random() * 1e-4,\n                                        groupIndex,\n                                        pointIndex, point]; //temp hack to add noise until I think of a better way so there are no duplicates\n                                })\n                                .filter(function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n                                })\n                        })\n                    );\n\n                    if (vertices.length == 0) return false;  // No active points, we're done\n                    if (vertices.length < 3) {\n                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n                    }\n\n                    // keep voronoi sections from going more than 10 outside of graph\n                    // to avoid overlap with other things like legend etc\n                    var bounds = d3.geom.polygon([\n                        [-10,-10],\n                        [-10,height + 10],\n                        [width + 10,height + 10],\n                        [width + 10,-10]\n                    ]);\n\n                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n                        return {\n                            'data': bounds.clip(d),\n                            'series': vertices[i][2],\n                            'point': vertices[i][3]\n                        }\n                    });\n\n                    // nuke all voronoi paths on reload and recreate them\n                    wrap.select('.nv-point-paths').selectAll('path').remove();\n                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);\n                    var vPointPaths = pointPaths\n                        .enter().append(\"svg:path\")\n                        .attr(\"d\", function(d) {\n                            if (!d || !d.data || d.data.length === 0)\n                                return 'M 0 0';\n                            else\n                                return \"M\" + d.data.join(\",\") + \"Z\";\n                        })\n                        .attr(\"id\", function(d,i) {\n                            return \"nv-path-\"+i; })\n                        .attr(\"clip-path\", function(d,i) { return \"url(#nv-clip-\"+id+\"-\"+i+\")\"; })\n                        ;\n\n                    // good for debugging point hover issues\n                    if (showVoronoi) {\n                        vPointPaths.style(\"fill\", d3.rgb(230, 230, 230))\n                            .style('fill-opacity', 0.4)\n                            .style('stroke-opacity', 1)\n                            .style(\"stroke\", d3.rgb(200,200,200));\n                    }\n\n                    if (clipVoronoi) {\n                        // voronoi sections are already set to clip,\n                        // just create the circles with the IDs they expect\n                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom\n                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);\n                        var vPointClips = pointClips\n                            .enter().append(\"svg:clipPath\")\n                            .attr(\"id\", function(d, i) { return \"nv-clip-\"+id+\"-\"+i;})\n                            .append(\"svg:circle\")\n                            .attr('cx', function(d) { return d[0]; })\n                            .attr('cy', function(d) { return d[1]; })\n                            .attr('r', clipRadius);\n                    }\n\n                    var mouseEventCallback = function(el, d, mDispatch) {\n                        if (needsUpdate) return 0;\n                        var series = data[d.series];\n                        if (series === undefined) return;\n                        var point  = series.values[d.point];\n                        point['color'] = color(series, d.series);\n\n                        // standardize attributes for tooltip.\n                        point['x'] = getX(point);\n                        point['y'] = getY(point);\n\n                        // can't just get box of event node since it's actually a voronoi polygon\n                        var box = container.node().getBoundingClientRect();\n                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;\n                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n\n                        var pos = {\n                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,\n                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10\n                        };\n\n                        mDispatch({\n                            point: point,\n                            series: series,\n                            pos: pos,\n                            relativePos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n                            seriesIndex: d.series,\n                            pointIndex: d.point,\n                            event: d3.event,\n                            element: el\n                        });\n                    };\n\n                    pointPaths\n                        .on('click', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementClick);\n                        })\n                        .on('dblclick', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementDblClick);\n                        })\n                        .on('mouseover', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementMouseover);\n                        })\n                        .on('mouseout', function(d, i) {\n                            mouseEventCallback(this, d, dispatch.elementMouseout);\n                        });\n\n                } else {\n                    // add event handlers to points instead voronoi paths\n                    wrap.select('.nv-groups').selectAll('.nv-group')\n                        .selectAll('.nv-point')\n                        //.data(dataWithPoints)\n                        //.style('pointer-events', 'auto') // recativate events, disabled by css\n                        .on('click', function(d,i) {\n                            //nv.log('test', d, i);\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n                            var element = this;\n                            dispatch.elementClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top], //TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                event: d3.event,\n                                element: element\n                            });\n                        })\n                        .on('dblclick', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementDblClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i\n                            });\n                        })\n                        .on('mouseover', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseover({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        })\n                        .on('mouseout', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseout({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        });\n                }\n            }\n\n            needsUpdate = true;\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .remove();\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('nv-noninteractive', !interactive)\n                .classed('hover', function(d) { return d.hover });\n            groups.watchTransition(renderWatch, 'scatter: groups')\n                .style('fill', function(d,i) { return color(d, i) })\n                .style('stroke', function(d,i) { return d.pointBorderColor || pointBorderColor || color(d, i) })\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .5);\n\n            // create the points, maintaining their IDs from the original data set\n            var points = groups.selectAll('path.nv-point')\n                .data(function(d) {\n                    return d.values.map(\n                        function (point, pointIndex) {\n                            return [point, pointIndex]\n                        }).filter(\n                            function(pointArray, pointIndex) {\n                                return pointActive(pointArray[0], pointIndex)\n                            })\n                    });\n            points.enter().append('path')\n                .attr('class', function (d) {\n                    return 'nv-point nv-point-' + d[1];\n                })\n                .style('fill', function (d) { return d.color })\n                .style('stroke', function (d) { return d.color })\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')'\n                })\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n            points.exit().each(delCache).remove();\n            groups.exit().selectAll('path.nv-point')\n                .watchTransition(renderWatch, 'scatter exit')\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                })\n                .remove();\n            // Update points position only if \"x\" or \"y\" have changed\n            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'x', getX, 'y', getY); })\n                .watchTransition(renderWatch, 'scatter points')\n                .attr('transform', function(d) {\n                    //nv.log(d, getX(d[0],d[1]), x(getX(d[0],d[1])));\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                });\n            // Update points appearance only if \"shape\" or \"size\" have changed\n            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'shape', getShape, 'size', getSize); })\n                .watchTransition(renderWatch, 'scatter points')\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n\n            // add label a label to scatter chart\n            if(showLabels)\n            {\n                var titles =  groups.selectAll('.nv-label')\n                    .data(function(d) {\n                        return d.values.map(\n                            function (point, pointIndex) {\n                                return [point, pointIndex]\n                            }).filter(\n                                function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[0], pointIndex)\n                                })\n                        });\n\n                titles.enter().append('text')\n                    .style('fill', function (d,i) {\n                        return d.color })\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 1)\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + Math.sqrt(z(getSize(d[0],d[1]))/Math.PI) + 2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')';\n                    })\n                    .text(function(d,i){\n                        return d[0].label;});\n\n                titles.exit().remove();\n                groups.exit().selectAll('path.nv-label')\n                    .watchTransition(renderWatch, 'scatter exit')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')';\n                    })\n                    .remove();\n               titles.each(function(d) {\n                  d3.select(this)\n                    .classed('nv-label', true)\n                    .classed('nv-label-' + d[1], false)\n                    .classed('hover',false);\n                });\n                titles.watchTransition(renderWatch, 'scatter labels')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                    });\n            }\n\n            // Delay updating the invisible interactive layer for smoother animation\n            if( interactiveUpdateDelay )\n            {\n                clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n                timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay );\n            }\n            else\n            {\n                updateInteractiveLayer();\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n            z0 = z.copy();\n\n            width0 = width;\n            height0 = height;\n\n        });\n        renderWatch.renderEnd('scatter immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // utility function calls provided by this chart\n    chart._calls = new function() {\n        this.clearHighlights = function () {\n            nv.dom.write(function() {\n                container.selectAll(\".nv-point.hover\").classed(\"hover\", false);\n            });\n            return null;\n        };\n        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {\n            nv.dom.write(function() {\n                container.select('.nv-groups')\n                  .selectAll(\".nv-series-\" + seriesIndex)\n                  .selectAll(\".nv-point-\" + pointIndex)\n                  .classed(\"hover\", isHoverOver);\n            });\n        };\n    };\n\n    // trigger calls from events too\n    dispatch.on('elementMouseover.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);\n    });\n\n    dispatch.on('elementMouseout.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);\n    });\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:        {get: function(){return width;}, set: function(_){width=_;}},\n        height:       {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:       {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:       {get: function(){return y;}, set: function(_){y=_;}},\n        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},\n        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},\n        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},\n        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},\n        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},\n        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},\n        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},\n        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},\n        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},\n        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        interactiveUpdateDelay: {get:function(){return interactiveUpdateDelay;}, set: function(_){interactiveUpdateDelay=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){ showLabels = _;}},\n        pointBorderColor: {get: function(){return pointBorderColor;}, set: function(_){pointBorderColor=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},\n        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi = _;\n            if (useVoronoi === false) {\n                clipVoronoi = false;\n            }\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.scatterChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var scatter      = nv.models.scatter()\n        , xAxis        = nv.models.axis()\n        , yAxis        = nv.models.axis()\n        , legend       = nv.models.legend()\n        , distX        = nv.models.distribution()\n        , distY        = nv.models.distribution()\n        , tooltip      = nv.models.tooltip()\n        ;\n\n    var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n        , marginTop = null\n        , width        = null\n        , height       = null\n        , container    = null\n        , color        = nv.utils.defaultColor()\n        , x            = scatter.xScale()\n        , y            = scatter.yScale()\n        , showDistX    = false\n        , showDistY    = false\n        , showLegend   = true\n        , showXAxis    = true\n        , showYAxis    = true\n        , rightAlignYAxis = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , noData       = null\n        , duration = 250\n        , showLabels    = false\n        ;\n\n    scatter.xScale(x).yScale(y);\n    xAxis.orient('bottom').tickPadding(10);\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickPadding(10)\n    ;\n    distX.axis('x');\n    distY.axis('y');\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0\n        , renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        if (showDistX) renderWatch.models(distX);\n        if (showDistY) renderWatch.models(distY);\n\n        selection.each(function(data) {\n            var that = this;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                renderWatch.renderEnd('scatter immediate');\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            // background for pointer events\n            gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n            gEnter.append('g').attr('class', 'nv-distWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = availableWidth;\n                legend.width(legendWidth);\n\n                wrap.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, i);\n                    return d.color;\n                }).filter(function(d,i) { return !data[i].disabled }))\n                .showLabels(showLabels);\n\n            wrap.select('.nv-scatterWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n                .call(scatter);\n\n\n            wrap.select('.nv-regressionLinesWrap')\n                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\n            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n                .data(function (d) {\n                    return d;\n                });\n\n            regWrap.enter().append('g').attr('class', 'nv-regLines');\n\n            var regLine = regWrap.selectAll('.nv-regLine')\n                .data(function (d) {\n                    return [d]\n                });\n\n            regLine.enter()\n                .append('line').attr('class', 'nv-regLine')\n                .style('stroke-opacity', 0);\n\n            // don't add lines unless we have slope and intercept to use\n            regLine.filter(function(d) {\n                return d.intercept && d.slope;\n            })\n                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')\n                .attr('x1', x.range()[0])\n                .attr('x2', x.range()[1])\n                .attr('y1', function (d, i) {\n                    return y(x.domain()[0] * d.slope + d.intercept)\n                })\n                .attr('y2', function (d, i) {\n                    return y(x.domain()[1] * d.slope + d.intercept)\n                })\n                .style('stroke', function (d, i, j) {\n                    return color(d, j)\n                })\n                .style('stroke-opacity', function (d, i) {\n                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1\n                });\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight , 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            // Setup Distribution\n            if (showDistX) {\n                distX\n                    .getData(scatter.x())\n                    .scale(x)\n                    .width(availableWidth)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionX');\n                g.select('.nv-distributionX')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distX);\n            }\n\n            if (showDistY) {\n                distY\n                    .getData(scatter.y())\n                    .scale(y)\n                    .width(availableHeight)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionY');\n                g.select('.nv-distributionY')\n                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distY);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block\n            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {\n                tooltip.hidden(true);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', 0);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', distY.size());\n            });\n\n            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', evt.relativePos[1] - availableHeight);\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', evt.relativePos[0] + distX.size());\n                tooltip.data(evt).hidden(false);\n            });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('scatter with line immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.distX = distX;\n    chart.distY = distY;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        container:  {get: function(){return container;}, set: function(_){container=_;}},\n        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},\n        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            distX.color(color);\n            distY.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparkline = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , animate = true\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.getColor(['#000'])\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , showMinMaxPoints = true\n        , showCurrentPoint = true\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    \n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x   .domain(xDomain || d3.extent(data, getX ))\n                .range(xRange || [0, availableWidth]);\n\n            y   .domain(yDomain || d3.extent(data, getY ))\n                .range(yRange || [availableHeight, 0]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            var paths = wrap.selectAll('path')\n                .data(function(d) { return [d] });\n            paths.enter().append('path');\n            paths.exit().remove();\n            paths\n                .style('stroke', function(d,i) { return d.color || color(d, i) })\n                .attr('d', d3.svg.line()\n                    .x(function(d,i) { return x(getX(d,i)) })\n                    .y(function(d,i) { return y(getY(d,i)) })\n            );\n\n            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n            var points = wrap.selectAll('circle.nv-point')\n                .data(function(data) {\n                    var yValues = data.map(function(d, i) { return getY(d,i); });\n                    function pointIndex(index) {\n                        if (index != -1) {\n                            var result = data[index];\n                            result.pointIndex = index;\n                            return result;\n                        } else {\n                            return null;\n                        }\n                    }\n                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n                        currentPoint = pointIndex(yValues.length - 1);\n                    return [(showMinMaxPoints ? minPoint : null), (showMinMaxPoints ? maxPoint : null), (showCurrentPoint ? currentPoint : null)].filter(function (d) {return d != null;});\n                });\n            points.enter().append('circle');\n            points.exit().remove();\n            points\n                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n                .attr('r', 2)\n                .attr('class', function(d,i) {\n                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n                });\n        });\n        \n        renderWatch.renderEnd('sparkline immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:            {get: function(){return width;}, set: function(_){width=_;}},\n        height:           {get: function(){return height;}, set: function(_){height=_;}},\n        xDomain:          {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:          {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:           {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:           {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        xScale:           {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:           {get: function(){return y;}, set: function(_){y=_;}},\n        animate:          {get: function(){return animate;}, set: function(_){animate=_;}},\n        showMinMaxPoints: {get: function(){return showMinMaxPoints;}, set: function(_){showMinMaxPoints=_;}},\n        showCurrentPoint: {get: function(){return showCurrentPoint;}, set: function(_){showCurrentPoint=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparklinePlus = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sparkline = nv.models.sparkline();\n\n    var margin = {top: 15, right: 100, bottom: 10, left: 50}\n        , width = null\n        , height = null\n        , x\n        , y\n        , index = []\n        , paused = false\n        , xTickFormat = d3.format(',r')\n        , yTickFormat = d3.format(',.2f')\n        , showLastValue = true\n        , alignValue = true\n        , rightAlignValue = false\n        , noData = null\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n        \n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sparkline);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.call(chart); };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\n            // Setup Scales\n            x = sparkline.xScale();\n            y = sparkline.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-sparklineWrap');\n            gEnter.append('g').attr('class', 'nv-valueWrap');\n            gEnter.append('g').attr('class', 'nv-hoverArea');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            var sparklineWrap = g.select('.nv-sparklineWrap');\n\n            sparkline.width(availableWidth).height(availableHeight);\n            sparklineWrap.call(sparkline);\n\n            if (showLastValue) {\n                var valueWrap = g.select('.nv-valueWrap');\n                var value = valueWrap.selectAll('.nv-currentValue')\n                    .data([currentValue]);\n\n                value.enter().append('text').attr('class', 'nv-currentValue')\n                    .attr('dx', rightAlignValue ? -8 : 8)\n                    .attr('dy', '.9em')\n                    .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\n                value\n                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n                    .attr('y', alignValue ? function (d) {\n                        return y(d)\n                    } : 0)\n                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))\n                    .text(yTickFormat(currentValue));\n            }\n\n            gEnter.select('.nv-hoverArea').append('rect')\n                .on('mousemove', sparklineHover)\n                .on('click', function() { paused = !paused })\n                .on('mouseout', function() { index = []; updateValueLine(); });\n\n            g.select('.nv-hoverArea rect')\n                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n                .attr('width', availableWidth + margin.left + margin.right)\n                .attr('height', availableHeight + margin.top);\n\n            //index is currently global (within the chart), may or may not keep it that way\n            function updateValueLine() {\n                if (paused) return;\n\n                var hoverValue = g.selectAll('.nv-hoverValue').data(index);\n\n                var hoverEnter = hoverValue.enter()\n                    .append('g').attr('class', 'nv-hoverValue')\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0);\n\n                hoverValue.exit()\n                    .transition().duration(250)\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0)\n                    .remove();\n\n                hoverValue\n                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n                    .transition().duration(250)\n                    .style('stroke-opacity', 1)\n                    .style('fill-opacity', 1);\n\n                if (!index.length) return;\n\n                hoverEnter.append('line')\n                    .attr('x1', 0)\n                    .attr('y1', -margin.top)\n                    .attr('x2', 0)\n                    .attr('y2', availableHeight);\n\n                hoverEnter.append('text').attr('class', 'nv-xValue')\n                    .attr('x', -6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'end')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-xValue')\n                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\n                hoverEnter.append('text').attr('class', 'nv-yValue')\n                    .attr('x', 6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'start')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-yValue')\n                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n            }\n\n            function sparklineHover() {\n                if (paused) return;\n\n                var pos = d3.mouse(this)[0] - margin.left;\n\n                function getClosestIndex(data, x) {\n                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n                    var closestIndex = 0;\n                    for (var i = 0; i < data.length; i++){\n                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n                            distance = Math.abs(sparkline.x()(data[i], i) - x);\n                            closestIndex = i;\n                        }\n                    }\n                    return closestIndex;\n                }\n\n                index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n                updateValueLine();\n            }\n\n        });\n        renderWatch.renderEnd('sparklinePlus immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sparkline = sparkline;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:           {get: function(){return width;}, set: function(_){width=_;}},\n        height:          {get: function(){return height;}, set: function(_){height=_;}},\n        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},\n        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},\n        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},\n        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},\n        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},\n        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, sparkline);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedArea = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , color = nv.utils.defaultColor() // a function that computes the color\n        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n        , container = null\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , style = 'stack'\n        , offset = 'zero'\n        , order = 'default'\n        , interpolate = 'linear'  // controls the line interpolation\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , scatter = nv.models.scatter()\n        , duration = 250\n        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')\n        ;\n\n    scatter\n        .pointSize(2.2) // default size\n        .pointDomain([2.2, 2.2]) // all the same size by default\n    ;\n\n    /************************************\n     * offset:\n     *   'wiggle' (stream)\n     *   'zero' (stacked)\n     *   'expand' (normalize to 100%)\n     *   'silhouette' (simple centered)\n     *\n     * order:\n     *   'inside-out' (stream)\n     *   'default' (input order)\n     ************************************/\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            var dataRaw = data;\n            // Injecting point index into each point because d3.layout.stack().out does not give index\n            data.forEach(function(aseries, i) {\n                aseries.seriesIndex = i;\n                aseries.values = aseries.values.map(function(d, j) {\n                    d.index = j;\n                    d.seriesIndex = i;\n                    return d;\n                });\n            });\n\n            var dataFiltered = data.filter(function(series) {\n                return !series.disabled;\n            });\n\n            data = d3.layout.stack()\n                .order(order)\n                .offset(offset)\n                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n                .x(getX)\n                .y(getY)\n                .out(function(d, y0, y) {\n                    d.display = {\n                        y: y,\n                        y0: y0\n                    };\n                })\n            (dataFiltered);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-areaWrap');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            \n            // If the user has not specified forceY, make sure 0 is included in the domain\n            // Otherwise, use user-specified values for forceY\n            if (scatter.forceY().length == 0) {\n                scatter.forceY().push(0);\n            }\n            \n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .x(getX)\n                .y(function(d) {\n                    if (d.display !== undefined) { return d.display.y + d.display.y0; }\n                })\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, d.seriesIndex);\n                    return d.color;\n                }));\n\n            var scatterWrap = g.select('.nv-scatterWrap')\n                .datum(data);\n\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var area = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) {\n                    return y(d.display.y0)\n                })\n                .y1(function(d) {\n                    return y(d.display.y + d.display.y0)\n                })\n                .interpolate(interpolate);\n\n            var zeroArea = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) { return y(d.display.y0) })\n                .y1(function(d) { return y(d.display.y0) });\n\n            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n                .data(function(d) { return d });\n\n            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n                .attr('d', function(d,i){\n                    return zeroArea(d.values, d.seriesIndex);\n                })\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.areaMouseover({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaMouseout({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('click', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaClick({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                });\n\n            path.exit().remove();\n            path.style('fill', function(d,i){\n                    return d.color || color(d, d.seriesIndex)\n                })\n                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n            path.watchTransition(renderWatch,'stackedArea path')\n                .attr('d', function(d,i) {\n                    return area(d.values,i)\n                });\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            scatter.dispatch.on('elementMouseover.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n            });\n            scatter.dispatch.on('elementMouseout.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n            });\n\n            //Special offset functions\n            chart.d3_stackedOffset_stackPercent = function(stackData) {\n                var n = stackData.length,    //How many series\n                    m = stackData[0].length,     //how many points per series\n                    i,\n                    j,\n                    o,\n                    y0 = [];\n\n                for (j = 0; j < m; ++j) { //Looping through all points\n                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series\n                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.\n                    }\n\n                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0\n                        stackData[i][j][1] /= o;\n                    } else { //(total y value of all series at point in time i) == 0\n                        for (i = 0; i < n; i++) {\n                            stackData[i][j][1] = 0;\n                        }\n                    }\n                }\n                for (j = 0; j < m; ++j) y0[j] = 0;\n                return y0;\n            };\n\n        });\n\n        renderWatch.renderEnd('stackedArea immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.interpolate = function(_) {\n        if (!arguments.length) return interpolate;\n        interpolate = _;\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        scatter.duration(duration);\n        return chart;\n    };\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},\n        order:    {get: function(){return order;}, set: function(_){order=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        style: {get: function(){return style;}, set: function(_){\n            style = _;\n            switch (style) {\n                case 'stack':\n                    chart.offset('zero');\n                    chart.order('default');\n                    break;\n                case 'stream':\n                    chart.offset('wiggle');\n                    chart.order('inside-out');\n                    break;\n                case 'stream-center':\n                    chart.offset('silhouette');\n                    chart.order('inside-out');\n                    break;\n                case 'expand':\n                    chart.offset('expand');\n                    chart.order('default');\n                    break;\n                case 'stack_percent':\n                    chart.offset(chart.d3_stackedOffset_stackPercent);\n                    chart.order('default');\n                    break;\n            }\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var stacked = nv.models.stackedArea()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.stackedArea())\n        ;\n\n    var margin = {top: 10, right: 25, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , focusEnable = false\n        , useInteractiveGuideline = false\n        , showTotalInTooltip = true\n        , totalLabel = 'TOTAL'\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = 250\n        , controlOptions = ['Stacked','Stream','Expanded']\n        , controlLabels = {}\n        , duration = 250\n        ;\n\n    state.style = stacked.style();\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        });\n\n    var oldYTickFormat = null,\n        oldValueFormatter = null;\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var style = stacked.style();\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                style: stacked.style()\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.style !== undefined)\n                style = state.style;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var percentFormatter = d3.format('%');\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(stacked);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\n            chart.update = function() { container.transition().duration(duration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n            // Setup Scales\n            x = stacked.xScale();\n            y = stacked.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-stackedWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            // g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = (showControls && legendPosition === 'top') ? availableWidth - controlWidth : availableWidth;\n\n                legend.width(legendWidth);\n                g.select('.nv-legendWrap').datum(data).call(legend);\n\n                if (legendPosition === 'bottom') {\n                \t// constant from axis.js, plus some margin for better layout\n                \tvar xAxisHeight = (showXAxis ? 12 : 0) + 10;\n                   \tmargin.bottom = Math.max(legend.height() + xAxisHeight, margin.bottom);\n                   \tavailableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                \tvar legendTop = availableHeight + xAxisHeight;\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + legendTop +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && margin.top != legend.height()) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    g.select('.nv-legendWrap')\n                    \t.attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n                }\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    {\n                        key: controlLabels.stacked || 'Stacked',\n                        metaKey: 'Stacked',\n                        disabled: stacked.style() != 'stack',\n                        style: 'stack'\n                    },\n                    {\n                        key: controlLabels.stream || 'Stream',\n                        metaKey: 'Stream',\n                        disabled: stacked.style() != 'stream',\n                        style: 'stream'\n                    },\n                    {\n                        key: controlLabels.expanded || 'Expanded',\n                        metaKey: 'Expanded',\n                        disabled: stacked.style() != 'expand',\n                        style: 'expand'\n                    },\n                    {\n                        key: controlLabels.stack_percent || 'Stack %',\n                        metaKey: 'Stack_Percent',\n                        disabled: stacked.style() != 'stack_percent',\n                        style: 'stack_percent'\n                    }\n                ];\n\n                controlWidth = (controlOptions.length/3) * 260;\n                controlsData = controlsData.filter(function(d) {\n                    return controlOptions.indexOf(d.metaKey) !== -1;\n                });\n\n                controls\n                    .width( controlWidth )\n                    .color(['#444', '#444', '#444']);\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .call(controls);\n\n                var requiredTop = Math.max(controls.height(), showLegend && (legendPosition === 'top') ? legend.height() : 0);\n\n                if ( margin.top != requiredTop ) {\n                    margin.top = requiredTop;\n                    availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                }\n\n                g.select('.nv-controlsWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left: margin.left, top: margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            stacked\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                var ticks;\n                if (stacked.offset() === 'wiggle') {\n                    ticks = 0;\n                }\n                else {\n                    ticks = nv.utils.calcTicksY(availableHeight/36, data);\n                }\n                yAxis.scale(y)\n                    ._ticks(ticks)\n                    .tickSize(-availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n                if(showXAxis) {\n                    g.select('.nv-focus .nv-x.nv-axis')\n                        .attr('transform', 'translate(0,' + availableHeight + ')')\n                        .transition()\n                        .duration(duration)\n                        .call(xAxis)\n                        ;\n                }\n            }\n\n            function updateYAxis() {\n                if(showYAxis) {\n                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                        var currentFormat = yAxis.tickFormat();\n\n                        if ( !oldYTickFormat || currentFormat !== percentFormatter )\n                            oldYTickFormat = currentFormat;\n\n                        //Forces the yAxis to use percentage in 'expand' mode.\n                        yAxis.tickFormat(percentFormatter);\n                    }\n                    else {\n                        if (oldYTickFormat) {\n                            yAxis.tickFormat(oldYTickFormat);\n                            oldYTickFormat = null;\n                        }\n                    }\n\n                    g.select('.nv-focus .nv-y.nv-axis')\n                    .transition().duration(0)\n                    .call(yAxis);\n                }\n            }\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                stackedWrap.transition().call(stacked);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            stacked.dispatch.on('areaClick.toggle', function(e) {\n                if (data.filter(function(d) { return !d.disabled }).length === 1)\n                    data.forEach(function(d) {\n                        d.disabled = false;\n                    });\n                else\n                    data.forEach(function(d,i) {\n                        d.disabled = (i != e.seriesIndex);\n                    });\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                stacked.style(d.style);\n\n\n                state.style = stacked.style();\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                stacked.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0, allNullValues = true;\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        var point = series.values[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue != null) {\n                            stacked.highlightPoint(i, pointIndex, true);\n                        }\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\n                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n                        allData.push({\n                            key: series.key,\n                            value: tooltipValue,\n                            color: color(series,series.seriesIndex),\n                            point: point\n                        });\n\n                        if (showTotalInTooltip && stacked.style() != 'expand' && tooltipValue != null) {\n                          valueSum += tooltipValue;\n                          allNullValues = false;\n                        };\n                    });\n\n                allData.reverse();\n\n                //Highlight the tooltip entry based on which stack the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var yDistMax = Infinity, indexToHighlight = null;\n                    allData.forEach(function(series,i) {\n\n                        //To handle situation where the stacked area chart is negative, we need to use absolute values\n                        //when checking if the mouse Y value is within the stack area.\n                        yValue = Math.abs(yValue);\n                        var stackedY0 = Math.abs(series.point.display.y0);\n                        var stackedY = Math.abs(series.point.display.y);\n                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n                        {\n                            indexToHighlight = i;\n                            return;\n                        }\n                    });\n                    if (indexToHighlight != null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.\n                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2 && !allNullValues) {\n                    allData.push({\n                        key: totalLabel,\n                        value: valueSum,\n                        total: true\n                    });\n                }\n\n                var xValue = chart.x()(singlePoint,pointIndex);\n\n                var valueFormatter = interactiveLayer.tooltip.valueFormatter();\n                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view\n                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                    if ( !oldValueFormatter ) {\n                        oldValueFormatter = valueFormatter;\n                    }\n                    //Forces the tooltip to use percentage in 'expand' mode.\n                    valueFormatter = d3.format(\".1%\");\n                }\n                else {\n                    if (oldValueFormatter) {\n                        valueFormatter = oldValueFormatter;\n                        oldValueFormatter = null;\n                    }\n                }\n\n                interactiveLayer.tooltip\n                    .valueFormatter(valueFormatter)\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                stacked.clearHighlights();\n            });\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.style !== 'undefined') {\n                    stacked.style(e.style);\n                    style = e.style;\n                }\n\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return stacked.x()(d,i) >= extent[0] && stacked.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                stackedWrap.transition().duration(duration).call(stacked);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n\n        });\n\n        renderWatch.renderEnd('stacked Area chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.point['x'] = stacked.x()(evt.point);\n        evt.point['y'] = stacked.y()(evt.point);\n        tooltip.data(evt).hidden(false);\n    });\n\n    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.stacked = stacked;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis;\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.focus = focus;\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},\n        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},\n        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            focus.margin.top    = _.top    !== undefined ? _.top    : focus.margin.top;\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            stacked.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            stacked.color(color);\n            focus.color(color);\n        }},\n        x: {get: function(){return stacked.x();}, set: function(_){\n            stacked.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return stacked.y();}, set: function(_){\n            stacked.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = !!_;\n            chart.interactive(!_);\n            chart.useVoronoi(!_);\n            stacked.scatter.interactive(!_);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, stacked);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaWithFocusChart = function() {\n  return nv.models.stackedAreaChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\n// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad\nnv.models.sunburst = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 600\n        , height = 600\n        , mode = \"count\"\n        , modes = {count: function(d) { return 1; }, value: function(d) { return d.value || d.size }, size: function(d) { return d.value || d.size }}\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , showLabels = false\n        , labelFormat = function(d){if(mode === 'count'){return d.name + ' #' + d.value}else{return d.name + ' ' + (d.value || d.size)}}\n        , labelThreshold = 0.02\n        , sort = function(d1, d2){return d1.name > d2.name;}\n        , key = function(d,i){return d.name;}\n        , groupColorByParent = true\n        , duration = 500\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd');\n\n    //============================================================\n    // aux functions and setup\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear().range([0, 2 * Math.PI]);\n    var y = d3.scale.sqrt();\n\n    var partition = d3.layout.partition().sort(sort);\n\n    var node, availableWidth, availableHeight, radius;\n    var prevPositions = {};\n\n    var arc = d3.svg.arc()\n        .startAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x))) })\n        .endAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))) })\n        .innerRadius(function(d) {return Math.max(0, y(d.y)) })\n        .outerRadius(function(d) {return Math.max(0, y(d.y + d.dy)) });\n\n    function rotationToAvoidUpsideDown(d) {\n        var centerAngle = computeCenterAngle(d);\n        if(centerAngle > 90){\n            return 180;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    function computeCenterAngle(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        var centerAngle = (((startAngle + endAngle) / 2) * (180 / Math.PI)) - 90;\n        return centerAngle;\n    }\n\n    function computeNodePercentage(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        return (endAngle - startAngle) / (2 * Math.PI);\n    }\n\n    function labelThresholdMatched(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n\n        var size = endAngle - startAngle;\n        return size > labelThreshold;\n    }\n\n    // When zooming: interpolate the scales.\n    function arcTweenZoom(e,i) {\n        var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]),\n        yd = d3.interpolate(y.domain(), [node.y, 1]),\n        yr = d3.interpolate(y.range(), [node.y ? 20 : 0, radius]);\n\n        if (i === 0) {\n            return function() {return arc(e);}\n        }\n        else {\n            return function (t) {\n                x.domain(xd(t));\n                y.domain(yd(t)).range(yr(t));\n                return arc(e);\n            }\n        };\n    }\n\n    function arcTweenUpdate(d) {\n        var ipo = d3.interpolate({x: d.x0, dx: d.dx0, y: d.y0, dy: d.dy0}, d);\n\n        return function (t) {\n            var b = ipo(t);\n\n            d.x0 = b.x;\n            d.dx0 = b.dx;\n            d.y0 = b.y;\n            d.dy0 = b.dy;\n\n            return arc(b);\n        };\n    }\n\n    function updatePrevPosition(node) {\n        var k = key(node);\n        if(! prevPositions[k]) prevPositions[k] = {};\n        var pP = prevPositions[k];\n        pP.dx = node.dx;\n        pP.x = node.x;\n        pP.dy = node.dy;\n        pP.y = node.y;\n    }\n\n    function storeRetrievePrevPositions(nodes) {\n        nodes.forEach(function(n){\n            var k = key(n);\n            var pP = prevPositions[k];\n            //console.log(k,n,pP);\n            if( pP ){\n                n.dx0 = pP.dx;\n                n.x0 = pP.x;\n                n.dy0 = pP.dy;\n                n.y0 = pP.y;\n            }\n            else {\n                n.dx0 = n.dx;\n                n.x0 = n.x;\n                n.dy0 = n.dy;\n                n.y0 = n.y;\n            }\n            updatePrevPosition(n);\n        });\n    }\n\n    function zoomClick(d) {\n        var labels = container.selectAll('text')\n        var path = container.selectAll('path')\n\n        // fade out all text elements\n        labels.transition().attr(\"opacity\",0);\n\n        // to allow reference to the new center node\n        node = d;\n\n        path.transition()\n            .duration(duration)\n            .attrTween(\"d\", arcTweenZoom)\n            .each('end', function(e) {\n                // partially taken from here: http://bl.ocks.org/metmajer/5480307\n                // check if the animated element's data e lies within the visible angle span given in d\n                if(e.x >= d.x && e.x < (d.x + d.dx) ){\n                    if(e.depth >= d.depth){\n                        // get a selection of the associated text element\n                        var parentNode = d3.select(this.parentNode);\n                        var arcText = parentNode.select('text');\n\n                        // fade in the text element and recalculate positions\n                        arcText.transition().duration(duration)\n                        .text( function(e){return labelFormat(e) })\n                        .attr(\"opacity\", function(d){\n                            if(labelThresholdMatched(d)) {\n                                return 1;\n                            }\n                            else {\n                                return 0;\n                            }\n                        })\n                        .attr(\"transform\", function() {\n                            var width = this.getBBox().width;\n                            if(e.depth === 0)\n                            return \"translate(\" + (width / 2 * - 1) + \",0)\";\n                            else if(e.depth === d.depth){\n                                return \"translate(\" + (y(e.y) + 5) + \",0)\";\n                            }\n                            else {\n                                var centerAngle = computeCenterAngle(e);\n                                var rotation = rotationToAvoidUpsideDown(e);\n                                if (rotation === 0) {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + 5) + ',0)';\n                                }\n                                else {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                                }\n                            }\n                        });\n                    }\n                }\n            })\n    }\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n            container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n            radius = Math.min(availableWidth, availableHeight) / 2;\n\n            y.range([0, radius]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.select('g.nvd3.nv-wrap.nv-sunburst');\n            if( !wrap[0][0] ) {\n                wrap = container.append('g')\n                    .attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id)\n                    .attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            } else {\n                wrap.attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            }\n\n            container.on('click', function (d, i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            partition.value(modes[mode] || modes[\"count\"]);\n\n            //reverse the drawing order so that the labels of inner\n            //arcs are drawn on top of the outer arcs.\n            var nodes = partition.nodes(data[0]).reverse()\n\n            storeRetrievePrevPositions(nodes);\n            var cG = wrap.selectAll('.arc-container').data(nodes, key)\n\n            //handle new datapoints\n            var cGE = cG.enter()\n                .append(\"g\")\n                .attr(\"class\",'arc-container')\n\n            cGE.append(\"path\")\n                .attr(\"d\", arc)\n                .style(\"fill\", function (d) {\n                    if (d.color) {\n                        return d.color;\n                    }\n                    else if (groupColorByParent) {\n                        return color((d.children ? d : d.parent).name);\n                    }\n                    else {\n                        return color(d.name);\n                    }\n                })\n                .style(\"stroke\", \"#FFF\")\n                .on(\"click\", function(d,i){\n                    zoomClick(d);\n                    dispatch.elementClick({\n                        data: d,\n                        index: i\n                    })\n                })\n                .on('mouseover', function(d,i){\n                    d3.select(this).classed('hover', true).style('opacity', 0.8);\n                    dispatch.elementMouseover({\n                        data: d,\n                        color: d3.select(this).style(\"fill\"),\n                        percent: computeNodePercentage(d)\n                    });\n                })\n                .on('mouseout', function(d,i){\n                    d3.select(this).classed('hover', false).style('opacity', 1);\n                    dispatch.elementMouseout({\n                        data: d\n                    });\n                })\n                .on('mousemove', function(d,i){\n                    dispatch.elementMousemove({\n                        data: d\n                    });\n                });\n\n            ///Iterating via each and selecting based on the this\n            ///makes it work ... a cG.selectAll('path') doesn't.\n            ///Without iteration the data (in the element) didn't update.\n            cG.each(function(d){\n                d3.select(this).select('path')\n                    .transition()\n                    .duration(duration)\n                    .attrTween('d', arcTweenUpdate);\n            });\n\n            if(showLabels){\n                //remove labels first and add them back\n                cG.selectAll('text').remove();\n\n                //this way labels are on top of newly added arcs\n                cG.append('text')\n                    .text( function(e){ return labelFormat(e)})\n                    .transition()\n                    .duration(duration)\n                    .attr(\"opacity\", function(d){\n                        if(labelThresholdMatched(d)) {\n                            return 1;\n                        }\n                        else {\n                            return 0;\n                        }\n                    })\n                    .attr(\"transform\", function(d) {\n                        var width = this.getBBox().width;\n                        if(d.depth === 0){\n                            return \"rotate(0)translate(\" + (width / 2 * -1) + \",0)\";\n                        }\n                        else {\n                            var centerAngle = computeCenterAngle(d);\n                            var rotation = rotationToAvoidUpsideDown(d);\n                            if (rotation === 0) {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + 5) + ',0)';\n                            }\n                            else {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                            }\n                        }\n                    });\n            }\n\n            //zoom out to the center when the data is updated.\n            zoomClick(nodes[nodes.length - 1])\n\n\n            //remove unmatched elements ...\n            cG.exit()\n                .transition()\n                .duration(duration)\n                .attr('opacity',0)\n                .each('end',function(d){\n                    var k = key(d);\n                    prevPositions[k] = undefined;\n                })\n                .remove();\n        });\n\n\n        renderWatch.renderEnd('sunburst immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        groupColorByParent: {get: function(){return groupColorByParent;}, set: function(_){groupColorByParent=!!_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=!!_}},\n        labelFormat: {get: function(){return labelFormat;}, set: function(_){labelFormat=_}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_}},\n        sort: {get: function(){return sort;}, set: function(_){sort=_}},\n        key: {get: function(){return key;}, set: function(_){key=_}},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sunburstChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sunburst = nv.models.sunburst();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showTooltipPercent = false\n        , id = Math.round(Math.random() * 100000)\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd');\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d){return d;});\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sunburst);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin);\n            var availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0) {\n                    container.call(chart);\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = container;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            sunburst.width(availableWidth).height(availableHeight).margin(margin);\n            container.call(sunburst);\n        });\n\n        renderWatch.renderEnd('sunburstChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.series = {\n            key: evt.data.name,\n            value: (evt.data.value || evt.data.size),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sunburst = sunburst;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            sunburst.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            sunburst.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n            sunburst.margin(margin);\n        }}\n    });\n    nv.utils.inheritOptions(chart, sunburst);\n    nv.utils.initOptions(chart);\n    return chart;\n\n};\n\nnv.version = \"1.8.5\";\n})();\n//# sourceMappingURL=nv.d3.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/nvd3/build/nv.d3.js\n// module id = 692\n// module chunks = 0","!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e(require(\"react\"),require(\"d3\"),require(\"nvd3\")):\"function\"==typeof define&&define.amd?define([\"react\",\"d3\",\"nvd3\"],e):\"object\"==typeof exports?exports.NVD3Chart=e(require(\"react\"),require(\"d3\"),require(\"nvd3\")):t.NVD3Chart=e(t.React,t.d3,t.nv)}(this,function(t,e,n){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p=\"\",e(0)}([function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),i=r(o),u=n(2),c=r(u),s=n(17),a=r(s),f=n(21),p=r(f),l=n(22),d=r(l),h=n(25),y=r(h),v=n(48),b=r(v),g=n(55),m=r(g),_=n(56),x=r(_),O=n(57),j=r(O),w=n(58),S=[\"x\",\"y\",\"type\",\"datum\",\"configure\"],P=[\"width\",\"height\"],E=\"margin\",M=\"containerStyle\",k=\"renderStart\",C=\"renderEnd\",D=\"ready\",F=function(t){function e(){return(0,p[\"default\"])(this,e),(0,y[\"default\"])(this,(0,a[\"default\"])(e).apply(this,arguments))}return(0,b[\"default\"])(e,t),(0,d[\"default\"])(e,[{key:\"componentDidMount\",value:function(){var t=this;j[\"default\"].addGraph(this.renderChart.bind(this),function(e){(0,w.isCallable)(t.props.ready)&&t.props.ready(e,D)})}},{key:\"componentDidUpdate\",value:function(){this.renderChart()}},{key:\"componentWillUnmount\",value:function(){this.resizeHandler&&this.resizeHandler.clear()}},{key:\"renderChart\",value:function(){var t=void 0;switch(this.chart=this.chart&&!this.rendering?this.chart:j[\"default\"].models[this.props.type](),(0,w.isCallable)(this.props.renderStart)&&this.props.renderStart(this.chart,k),this.parsedProps=(0,w.bindFunctions)(this.props,this.props.context),this.chart.x&&this.chart.x((0,w.getValueFunction)(this.parsedProps.x,\"x\")),this.chart.y&&this.chart.y((0,w.getValueFunction)(this.parsedProps.y,\"y\")),this.props.margin&&this.chart.margin(this.options(E,w.pick).margin||(0,w.propsByPrefix)(\"margin\",this.props)||{}),this.configureComponents(this.chart,this.options(S.concat(M),w.without)),!this.props.configure||this.props.configure(this.chart),this.selection=x[\"default\"].select(this.refs.svg).datum(this.props.datum).call(this.chart),this.resizeHandler||(this.resizeHandler=j[\"default\"].utils.windowResize(this.chart.update)),this.props.type){case\"pieChart\":t=this.chart.pie.dispatch;break;case\"lineChart\":t=this.chart.lines.dispatch;break;default:t=this.chart.dispatch}return t.renderEnd&&t.on(\"renderEnd\",this.renderEnd.bind(this)),this.rendering=!0,this.chart}},{key:\"renderEnd\",value:function(t){(0,w.isCallable)(this.props.renderEnd)&&this.props.renderEnd(this.chart,C),this.rendering=!1}},{key:\"configureComponents\",value:function(t,e){for(var n in e){var r=e[n];t&&((0,w.isPlainObject)(r)?this.configureComponents(t[n],r):\"function\"==typeof t[n]&&t[n](r))}}},{key:\"options\",value:function(t,e){var n=this.parsedProps.options||this.parsedProps||this.props.chartOptions;return(e=e||w.pick)(n,t)}},{key:\"render\",value:function(){var t=(0,w.pick)(this.props,P),e=(0,c[\"default\"])({},t,this.props.containerStyle);return m[\"default\"].createElement(\"div\",{ref:\"root\",className:\"nv-chart\",style:e},m[\"default\"].createElement(\"svg\",(0,i[\"default\"])({ref:\"svg\"},t)))}}]),e}(m[\"default\"].Component);e[\"default\"]=F,t.exports=F},function(t,e,n){\"use strict\";var r=n(2)[\"default\"];e[\"default\"]=r||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(3),__esModule:!0}},function(t,e,n){n(4),t.exports=n(7).Object.assign},function(t,e,n){var r=n(5);r(r.S+r.F,\"Object\",{assign:n(10)})},function(t,e,n){var r=n(6),o=n(7),i=n(8),u=\"prototype\",c=function(t,e,n){var s,a,f,p=t&c.F,l=t&c.G,d=t&c.S,h=t&c.P,y=t&c.B,v=t&c.W,b=l?o:o[e]||(o[e]={}),g=l?r:d?r[e]:(r[e]||{})[u];l&&(n=e);for(s in n)a=!p&&g&&s in g,a&&s in b||(f=a?g[s]:n[s],b[s]=l&&\"function\"!=typeof g[s]?n[s]:y&&a?i(f,r):v&&g[s]==f?function(t){var e=function(e){return this instanceof t?new t(e):t(e)};return e[u]=t[u],e}(f):h&&\"function\"==typeof f?i(Function.call,f):f,h&&((b[u]||(b[u]={}))[s]=f))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,t.exports=c},function(t,e){var n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:\"1.2.6\"};\"number\"==typeof __e&&(__e=n)},function(t,e,n){var r=n(9);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,e,n){var r=n(11),o=n(12),i=n(14);t.exports=n(16)(function(){var t=Object.assign,e={},n={},r=Symbol(),o=\"abcdefghijklmnopqrst\";return e[r]=7,o.split(\"\").forEach(function(t){n[t]=t}),7!=t({},e)[r]||Object.keys(t({},n)).join(\"\")!=o})?function(t,e){for(var n=o(t),u=arguments,c=u.length,s=1,a=r.getKeys,f=r.getSymbols,p=r.isEnum;c>s;)for(var l,d=i(u[s++]),h=f?a(d).concat(f(d)):a(d),y=h.length,v=0;y>v;)p.call(d,l=h[v++])&&(n[l]=d[l]);return n}:Object.assign},function(t,e){var n=Object;t.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},function(t,e,n){var r=n(13);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,e,n){var r=n(15);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==r(t)?t.split(\"\"):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},function(t,e,n){t.exports={\"default\":n(18),__esModule:!0}},function(t,e,n){n(19),t.exports=n(7).Object.getPrototypeOf},function(t,e,n){var r=n(12);n(20)(\"getPrototypeOf\",function(t){return function(e){return t(r(e))}})},function(t,e,n){var r=n(5),o=n(7),i=n(16);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),\"Object\",u)}},function(t,e){\"use strict\";e[\"default\"]=function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")},e.__esModule=!0},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(23),i=r(o);e[\"default\"]=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,i[\"default\"])(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(24),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e,n){return r.setDesc(t,e,n)}},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(26),i=r(o);e[\"default\"]=function(t,e){if(!t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!e||\"object\"!==(\"undefined\"==typeof e?\"undefined\":(0,i[\"default\"])(e))&&\"function\"!=typeof e?t:e},e.__esModule=!0},function(t,e,n){\"use strict\";var r=n(27)[\"default\"];e[\"default\"]=function(t){return t&&t.constructor===r?\"symbol\":typeof t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(28),__esModule:!0}},function(t,e,n){n(29),n(47),t.exports=n(7).Symbol},function(t,e,n){\"use strict\";var r=n(11),o=n(6),i=n(30),u=n(31),c=n(5),s=n(32),a=n(16),f=n(35),p=n(36),l=n(38),d=n(37),h=n(39),y=n(41),v=n(42),b=n(43),g=n(44),m=n(40),_=n(34),x=r.getDesc,O=r.setDesc,j=r.create,w=y.get,S=o.Symbol,P=o.JSON,E=P&&P.stringify,M=!1,k=d(\"_hidden\"),C=r.isEnum,D=f(\"symbol-registry\"),F=f(\"symbols\"),N=\"function\"==typeof S,T=Object.prototype,q=u&&a(function(){return 7!=j(O({},\"a\",{get:function(){return O(this,\"a\",{value:7}).a}})).a})?function(t,e,n){var r=x(T,e);r&&delete T[e],O(t,e,n),r&&t!==T&&O(T,e,r)}:O,z=function(t){var e=F[t]=j(S.prototype);return e._k=t,u&&M&&q(T,t,{configurable:!0,set:function(e){i(this,k)&&i(this[k],t)&&(this[k][t]=!1),q(this,t,_(1,e))}}),e},A=function(t){return\"symbol\"==typeof t},V=function(t,e,n){return n&&i(F,e)?(n.enumerable?(i(t,k)&&t[k][e]&&(t[k][e]=!1),n=j(n,{enumerable:_(0,!1)})):(i(t,k)||O(t,k,_(1,{})),t[k][e]=!0),q(t,e,n)):O(t,e,n)},W=function(t,e){g(t);for(var n,r=v(e=m(e)),o=0,i=r.length;i>o;)V(t,n=r[o++],e[n]);return t},B=function(t,e){return void 0===e?j(t):W(j(t),e)},G=function(t){var e=C.call(this,t);return e||!i(this,t)||!i(F,t)||i(this,k)&&this[k][t]?e:!0},H=function(t,e){var n=x(t=m(t),e);return!n||!i(F,e)||i(t,k)&&t[k][e]||(n.enumerable=!0),n},I=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])||e==k||r.push(e);return r},J=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])&&r.push(F[e]);return r},K=function(t){if(void 0!==t&&!A(t)){for(var e,n,r=[t],o=1,i=arguments;i.length>o;)r.push(i[o++]);return e=r[1],\"function\"==typeof e&&(n=e),(n||!b(e))&&(e=function(t,e){return n&&(e=n.call(this,t,e)),A(e)?void 0:e}),r[1]=e,E.apply(P,r)}},R=a(function(){var t=S();return\"[null]\"!=E([t])||\"{}\"!=E({a:t})||\"{}\"!=E(Object(t))});N||(S=function(){if(A(this))throw TypeError(\"Symbol is not a constructor\");return z(l(arguments.length>0?arguments[0]:void 0))},s(S.prototype,\"toString\",function(){return this._k}),A=function(t){return t instanceof S},r.create=B,r.isEnum=G,r.getDesc=H,r.setDesc=V,r.setDescs=W,r.getNames=y.get=I,r.getSymbols=J,u&&!n(46)&&s(T,\"propertyIsEnumerable\",G,!0));var U={\"for\":function(t){return i(D,t+=\"\")?D[t]:D[t]=S(t)},keyFor:function(t){return h(D,t)},useSetter:function(){M=!0},useSimple:function(){M=!1}};r.each.call(\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),function(t){var e=d(t);U[t]=N?e:z(e)}),M=!0,c(c.G+c.W,{Symbol:S}),c(c.S,\"Symbol\",U),c(c.S+c.F*!N,\"Object\",{create:B,defineProperty:V,defineProperties:W,getOwnPropertyDescriptor:H,getOwnPropertyNames:I,getOwnPropertySymbols:J}),P&&c(c.S+c.F*(!N||R),\"JSON\",{stringify:K}),p(S,\"Symbol\"),p(Math,\"Math\",!0),p(o.JSON,\"JSON\",!0)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){t.exports=!n(16)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,e,n){t.exports=n(33)},function(t,e,n){var r=n(11),o=n(34);t.exports=n(31)?function(t,e,n){return r.setDesc(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(6),o=\"__core-js_shared__\",i=r[o]||(r[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,e,n){var r=n(11).setDesc,o=n(30),i=n(37)(\"toStringTag\");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(35)(\"wks\"),o=n(38),i=n(6).Symbol;t.exports=function(t){return r[t]||(r[t]=i&&i[t]||(i||o)(\"Symbol.\"+t))}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++n+r).toString(36))}},function(t,e,n){var r=n(11),o=n(40);t.exports=function(t,e){for(var n,i=o(t),u=r.getKeys(i),c=u.length,s=0;c>s;)if(i[n=u[s++]]===e)return n}},function(t,e,n){var r=n(14),o=n(13);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(40),o=n(11).getNames,i={}.toString,u=\"object\"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return o(t)}catch(e){return u.slice()}};t.exports.get=function(t){return u&&\"[object Window]\"==i.call(t)?c(t):o(r(t))}},function(t,e,n){var r=n(11);t.exports=function(t){var e=r.getKeys(t),n=r.getSymbols;if(n)for(var o,i=n(t),u=r.isEnum,c=0;i.length>c;)u.call(t,o=i[c++])&&e.push(o);return e}},function(t,e,n){var r=n(15);t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},function(t,e,n){var r=n(45);t.exports=function(t){if(!r(t))throw TypeError(t+\" is not an object!\");return t}},function(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,e){t.exports=!0},function(t,e){},function(t,e,n){\"use strict\";var r=n(49)[\"default\"],o=n(51)[\"default\"];e[\"default\"]=function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof e);t.prototype=r(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(o?o(t,e):t.__proto__=e)},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(50),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){t.exports={\"default\":n(52),__esModule:!0}},function(t,e,n){n(53),t.exports=n(7).Object.setPrototypeOf},function(t,e,n){var r=n(5);r(r.S,\"Object\",{setPrototypeOf:n(54).set})},function(t,e,n){var r=n(11).getDesc,o=n(45),i=n(44),u=function(t,e){if(i(t),!o(e)&&null!==e)throw TypeError(e+\": can't set as prototype!\")};t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(t,e,o){try{o=n(8)(Function.call,r(Object.prototype,\"__proto__\").set,2),o(t,[]),e=!(t instanceof Array)}catch(i){e=!0}return function(t,n){return u(t,n),e?t.__proto__=n:o(t,n),t}}({},!1):void 0),check:u}},function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}function o(t,e){return t.indexOf(e)>=0}function i(t){return function(){return!t.apply(this,arguments)}}function u(t,e,n){for(var r={},o=(0,m[\"default\"])(t),i=0,u=o.length;u>i;i++){var c=o[i],s=t[c];n(e,c)&&(r[c]=s)}return r}function c(t,e){return u(t,e,o)}function s(t,e){return u(t,e,i(o))}function a(t){if(\"object\"==(\"undefined\"==typeof t?\"undefined\":(0,b[\"default\"])(t))&&null!==t){if(\"function\"==typeof y[\"default\"]){var e=(0,y[\"default\"])(t);return e===Object.prototype||null===e}return\"[object Object]\"==Object.prototype.toString.call(t)}return!1}function f(t,e){var n,r,o;n=Array.isArray(t)?[]:{};for(o in t)r=t[o],null!=r&&(\"object\"===(\"undefined\"==typeof r?\"undefined\":(0,b[\"default\"])(r))&&null!==r&&\"function\"!==r.type?n[o]=f(r,e):\"function\"===r.type?n[o]=e[r.name]:n[o]=r);return n}function p(t,e){return\"function\"==typeof t?t:function(n){return\"undefined\"!=typeof n[t]?n[t]:n[e]}}function l(t,e){return console.warn(\"Set margin with prefixes is deprecated use an object instead\"),t+=\"-\",(0,m[\"default\"])(e).reduce(function(n,r){return r.substr(0,t.length)===t&&(n[r.replace(t,\"\")]=e[r]),n},{})}function d(t){return t&&\"function\"==typeof t}Object.defineProperty(e,\"__esModule\",{value:!0}),e.includes=o,e.negate=i,e.filterObject=u,e.pick=c,e.without=s,e.isPlainObject=a,e.bindFunctions=f,e.getValueFunction=p,e.propsByPrefix=l,e.isCallable=d;var h=n(17),y=r(h),v=n(26),b=r(v),g=n(59),m=r(g)},function(t,e,n){t.exports={\"default\":n(60),__esModule:!0}},function(t,e,n){n(61),t.exports=n(7).Object.keys},function(t,e,n){var r=n(12);n(20)(\"keys\",function(t){return function(e){return t(r(e))}})}])});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-nvd3/dist/react-nvd3.min.js\n// module id = 693\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js??ref--2-1!../../../../../node_modules/postcss-loader/lib/index.js!./nvd3Styles.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js??ref--2-1!../../../../../node_modules/postcss-loader/lib/index.js!./nvd3Styles.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js??ref--2-1!../../../../../node_modules/postcss-loader/lib/index.js!./nvd3Styles.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/components/Chart/ChartTypes/NVD3Adapter/nvd3Styles.css\n// module id = 694\n// module chunks = 0"],"sourceRoot":""}