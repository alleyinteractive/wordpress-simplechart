{"version":3,"sources":["webpack:///0.ca57f25.chunk.js","webpack:///./app/reducers/utils/applyYDomain.js","webpack:///./app/utils/dataFormats/getRangeDomain.js","webpack:///./app/components/Chart/ChartTypes ^\\.\\/.*\\/index$","webpack:///./app/components/Chart/ChartTypes/NVD3Adapter/index.js","webpack:///./app/components/Chart/ChartTypes/NVD3Adapter/nvd3Styles.css","webpack:///./~/nvd3/build/nv.d3.js","webpack:///./~/react-nvd3/dist/react-nvd3.min.js","webpack:///./app/components/Chart/ChartTypes/NVD3Adapter/nvd3Styles.css?9cd2"],"names":["simplechartJsonp","318","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","shouldSetupYDomain","typeConfig","dataFormat","indexOf","modules","settings","applyYDomain","chartOptions","chartData","yDomain","_misc","ownsProperties","getNiceDomain","_getRangeDomain2","_immutabilityHelper2","$set","Object","defineProperty","value","_immutabilityHelper","_getRangeDomain","__REACT_HOT_LOADER__","register","319","getSeriesDomain","series","format","key","values","map","point","_d","min","max","getMultiSeriesDomain","mins","maxs","forEach","singleSeries","domain","push","makeNice","range","scale","linear","nice","getRangeDomain","data","320","webpackContext","req","webpackContextResolve","id","Error","./NVD3Adapter/index","keys","resolve","763","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_extends","assign","target","i","arguments","length","source","hasOwnProperty","_createClass","defineProperties","props","descriptor","protoProps","staticProps","_react","_react2","_propTypes","_propTypes2","_reactNvd","_reactNvd2","_cloneDeep","_cloneDeep2","_chartTypeUtils","_applyYDomain","_applyYDomain2","_applyTickFormatters","_applyTickFormatters2","NVD3Adapter","_Component","_ref","_temp","_this","_ret","this","_len","args","Array","_key","getPrototypeOf","apply","concat","mapToChartProps","_this2","__mapToChartProps__REACT_HOT_LOADER__","_props","options","widget","type","getNvd3Type","chartProps","datum","dataTransform","ref","getChartTypeObject","config","defaultOpts","getChartTypeDefaultOpts","createElement","Math","random","ready","onReady","chartType","chart","stacked","dispatch","on","Component","propTypes","array","isRequired","object","oneOfType","string","bool","defaultProps","_default","764","765","nv","dev","tooltip","utils","models","charts","logs","dom","t","e","d3","Function","bind","oThis","aArgs","slice","fToBind","fNOP","fBound","startTime","Date","endTime","totalTime","log","window","console","deprecated","name","info","warn","render","step","active","render_start","renderLoop","graph","queue","generate","callback","splice","setTimeout","render_end","addGraph","write","fastdom","mutate","read","measure","interactiveGuideline","layer","selection","each","mouseHandler","mouseX","event","clientX","getBoundingClientRect","left","mouseY","clientY","top","subtractMargin","mouseOutAnyReason","isMSIE","offsetX","offsetY","tagName","className","baseVal","match","margin","availableWidth","availableHeight","relatedTarget","ownerSVGElement","nvPointerEventsClass","elementMouseout","renderGuideLine","hidden","scaleIsOrdinal","xScale","rangeBands","pointXValue","elementIndex","bisect","rangeBand","invert","elementMousemove","elementDblclick","elementClick","elementMouseDown","elementMouseUp","container","select","width","height","wrap","selectAll","enter","append","attr","svgContainer","guideLine","x","showGuideLine","line","NaNtoZero","String","d","exit","remove","ActiveXObject","duration","hideDelay","_","interactiveBisect","searchVal","xAccessor","_xAccessor","_cmp","v","bisector","index","currentValue","nextIndex","nextValue","abs","nearestValueIndex","threshold","yDistMax","Infinity","indexToHighlight","delta","initTooltip","node","document","body","classes","style","classed","nvtooltip","enabled","dataSeriesExists","newContent","contentGenerator","innerHTML","positionTooltip","floor","gravity","distance","snapDistance","lastPosition","headerEnabled","valueFormatter","p","headerFormatter","keyFormatter","elem","table","html","tbodyEnter","trowEnter","highlight","color","total","filter","percent","opacityScale","outerHTML","footer","position","pos","getComputedStyle","transform","client","isArray","isObject","calcGravityOffset","tmp","offsetHeight","offsetWidth","clientWidth","documentElement","clientHeight","gravityOffset","interrupt","transition","delay","old_translate","new_translate","round","translateInterpolator","interpolateString","is_hidden","styleTween","optionsFunc","_options","get","set","chartContainer","fixedTop","offset","y","initOptions","windowSize","size","innerWidth","innerHeight","compatMode","a","isFunction","isDate","toString","isNumber","isNaN","windowResize","handler","addEventListener","clear","removeEventListener","getColor","defaultColor","color_scale","ordinal","category20","customTheme","dictionary","getKey","defaultColors","defIndex","pjax","links","content","load","href","fragment","parentNode","replaceChild","history","pushState","textContent","preventDefault","state","calcApproxTextWidth","svgTextElem","text","fontSize","parseInt","replace","textLength","n","watchTransition","renderWatch","_duration","renderStack","model","__rendered","m","arg","renderEnd","reset","pop","every","deepExtend","dst","srcObj","_setState","_getState","init","changed","getter","fn","setter","update","_set","JSON","stringify","change","calcTicksX","numTicks","numValues","stream_len","calcTicksY","initOption","_calls","_overrides","ops","getOwnPropertyNames","calls","inheritOptionsD3","d3_source","oplist","_d3options","item","ar","unshift","rebind","arrayUnique","sort","symbolMap","symbol","s","svg","symbolTypes","functor","inheritOptions","inherited","_inherited","d3ops","initSVG","nvd3-svg","sanitizeHeight","sanitizeWidth","bottom","right","noData","opt","noDataText","wrapTicks","word","words","split","reverse","lineNumber","dy","parseFloat","tspan","join","getComputedTextLength","arrayEquals","array1","array2","l","pointIsInArc","pt","ptData","d3Arc","r1","innerRadius","r2","outerRadius","theta1","startAngle","theta2","endAngle","dist","angle","atan2","PI","axis","wrapEnter","g","ticks","orient","scale0","fmt","tickFormat","axisLabel","axisLabelText","xLabelMargin","axisMaxMin","w","isOrdinal","showMaxMin","tickPadding","formatter","tickFormatMaxMin","axisLabelDistance","maxTextWidth","textHeight","xTicks","rotateLabelsRule","rotateLabels","box","sin","staggerLabels","rotateYLabel","maxMinRange","err","copy","boxPlot","xDomain","getX","xRange","yData","yMin","yMax","q1","getQ1","q3","getQ3","wl","getWl","wh","getWh","olItems","getOlItems","getOlValue","yScale","yRange","xScale0","yScale0","boxplots","boxEnter","j","hover","f","box_width","maxBoxWidth","box_left","box_right","endpoint","elementMouseover","getQ2","outliers","getOlColor","getOlLabel","label","Q1","Q2","Q3","whisker_low","whisker_high","q2","itemColor","outlierValue","outlierLabel","outlierColor","boxPlotChart","boxplot","showXAxis","xAxis","showYAxis","yAxis","beforeUpdate","clamp","gEnter","defsEnter","rightAlignYAxis","disabled","tickSize","evt","tooltipContent","bullet","sortLabels","labels","lz","b","iA","iB","descending","rangez","ranges","markerz","markers","markerLinez","markerLines","measurez","measures","rangeLabelz","rangeLabels","markerLabelz","markerLabels","markerLineLabelz","markerLineLabels","measureLabelz","measureLabels","x1","extent","merge","forceX","__chart__","il","rangeClassNames","legacyRangeClassNames","xp1","h3","markerData","marker","markerLinesData","defaultRangeLabels","bulletChart","x0","title","subtitle","bulletWrap","tick","tickEnter","tickUpdate","timer","flush","candlestickBar","barWidth","padData","getLow","forceY","getHigh","chartClick","clipEdge","tickGroups","getOpen","getClose","getY","open","close","high","low","interactive","highlightPoint","pointIndex","isHoverOver","clearHighlights","cumulativeLineChart","lines","dragStart","dragMove","dx","updateZero","dragEnd","stateChange","indexLine","oldDuration","stateSetter","stateGetter","defaultState","indexDrag","behavior","drag","indexify","N","currentYDomain","getCurrentYDomain","rescaleY","interactivePointerEvents","M","showLegend","legend","marginTop","showControls","controlsData","controls","rightAlign","tempDisabled","useInteractiveGuideline","interactiveLayer","display","linesWrap","seriesIndex","avgLineData","average","avgLines","getAvgLineY","yVal","_ticks","mouse","newState","singlePoint","pointXLocation","allData","yValue","domainExtent","xValue","idx","indexifyYGetter","indexValue","noErrorCheck","seriesDomains","k","updateState","useVoronoi","discreteBar","seriesData","y0","showValues","groups","bars","barsEnter","element","stopPropagation","elementDblClick","valueFormat","rectClass","discreteBarChart","discretebar","wrapLabels","distribution","naxis","distWrap","getData","focus","resizePath","updateBrushBG","brush","empty","brushExtent","brushBG","leftWidth","rightWidth","onBrush","shouldDispatch","contentWrap","syncBrushing","brushBGenter","gBrush","pointActive","interpolate","xTickFormat","yTickFormat","forceDirectedGraph","nodes","nodeFieldSet","Set","add","force","layout","linkStrength","friction","linkDistance","linkDist","charge","theta","alpha","start","link","sqrt","radius","py","px","nodeColor","field","linkExtras","nodeExtras","furiousLegend","setTextColor","vers","expanded","disengaged","setBGColor","seriesShape","seriesEnter","property","seriesCheckbox","seriesText","legendMouseover","legendMouseout","legendClick","radioButtonMode","userDisabled","engaged","legendDblclick","versPadding","align","seriesWidths","legendText","maxKeyLength","trimmedKey","substring","nodeTextLength","padding","seriesPerRow","legendWidth","columnWidths","reduce","prev","cur","xPositions","curX","ceil","xpos","ypos","newxpos","maxwidth","historicalBar","rval","historicalBarChart","bar_model","transitionDuration","tooltipHide","ohlcBarChart","ohlcBar","candlestickBarChart","setBGOpacity","enableDoubleClick","insert","scatter","scatterWrap","strokeWidth","fillOpacity","areaPaths","isArea","area","defined","y1","linePaths","pointSize","pointDomain","lineChart","updateXAxis","updateYAxis","disableTooltip","focusEnable","focusEnter","legendPosition","currentValues","pointYValue","defaultValueFormatter","yPos","x2Axis","y2Axis","focusHeight","focusShowAxisX","focusShowAxisY","focusMargin","lineWithFocusChart","linePlusBarChart","availableHeight2","x2","availableHeight1","bar","focusBarsWrap","dataBars","focusLinesWrap","allDisabled","dataLines","dataLine","switchYAxisOrder","y1Axis","y2","barsOpacity","linesOpacity","y1Opacity","y2Opacity","margin2","y3","lines2","bars2","y4","series1","series2","contextEnter","legendXPosition","originalKey","legendRightAxisHint","legendLeftAxisHint","bars2Wrap","lines2Wrap","y3Axis","y4Axis","getBarsAxis","main","getLinesAxis","multiBar","nonStackableCount","hideable","parsed","stack","stackOffset","nonStackable","nonStackableSeries","posBase","negBase","groupSpacing","exitTransition","last_datalength","barColor","rgb","darker","barSelection","multiBarChart","multibar","controlWidth","controlLabels","grouped","getTranslate","totalInBetweenTicks","reduceXTicks","multiBarHorizontal","valuePadding","getYerr","xerr","mid","path","yerr","showBarLabels","yErr","multiBarHorizontalChart","controlsPosition","multiChart","mouseover_line","yaxis","yAxis2","yAxis1","mouseover_scatter","mouseover_stack","stack1","mouseover_bar","bars1","serieIndex","dataLines1","dataLines2","dataScatters1","dataScatters2","dataBars1","dataBars2","dataStack1","dataStack2","color_array","lines1","scatters1","scatters2","stack2","lines1Wrap","scatters1Wrap","bars1Wrap","stack1Wrap","scatters2Wrap","stack2Wrap","extraValue1BarStacked","aVal","extraValue2BarStacked","yScale1","yDomain1","yScale2","yDomain2","stackedArea","parallelCoordinates","enabledDimensions","displayMissingValuesline","axisWithUndefinedValues","newscale","missingValuesline","missingValueslineText","restoreBrush","visible","filters","brushDomain","dimension","hasOnlyNaN","oldDomainMaxValue","hasNaN","dimensions","updateTicks","brushstart","displayBrush","actives","dimensionNames","extents","foreground","isActive","brushend","hasActiveBrush","brushEnd","currentTicks","tickValues","dragging","__origin__","background","dimensionPosition","currentPosition","dimensionsOrder","newData","val","dataValues","dimensionData","rangePoints","onlyUndefinedValues","tension","lineTension","axisDrag","lineData","undefinedValuesLabel","dimensionsEnter","formerActive","activeChanged","dimensionFormats","parallelCoordinatesChart","originalPosition","isSorted","nanValue","str","tp","dim","dd","pie","arcTween","donut","_current","arcs","arcsRadiusOuter","arcsRadiusInner","arcsRadius","outer","inner","donutRatio","growOnHover","g_pie","arcsOver","arc","arcOver","cornerRadius","padAngle","titleOffset","slices","pieLabels","ae","attrTween","showLabels","labelsArc","labelsOutside","group","labelSunbeamLayout","rotateAngle","centroid","labelLocationHash","createHashKey","coordinates","getSlicePercentage","center","labelThreshold","hashKey","labelType","hideOverlapLabels","getBBox","bb","topLeft","topRight","bottomLeft","bottomRight","pieLabelsOutside","donutLabelsOutside","labelFormat","pieChart","pieWrap","showTooltipPercent","sankey","computeNodeLinks","sourceLinks","targetLinks","computeNodeValues","sum","computeNodeBreadths","nextNodes","remainingNodes","nodeWidth","sinksRight","moveSinksRight","scaleNodeBreadths","kx","computeNodeDepths","iterations","resolveCollisions","nodesByBreadth","ascendingDepth","nodePadding","nest","sortKeys","ascending","entries","ky","computeLinkDepths","weightedTarget","ty","weightedSource","sy","breadth","ascendingSourceDepth","ascendingTargetDepth","relayout","xi","interpolateNumber","curvature","x3","sankeyChart","dragmove","testData","isDataValid","dataAvailable","error","showError","linkTitle","origin","appendChild","nodeFillColor","nodeStrokeColor","nodeTitle","units","formatNumber","message","nodeStyle","fillColor","strokeColor","getCache","_cache","delCache","getDiffs","cache","diffs","updateInteractiveLayer","needsUpdate","vertices","groupIndex","pX","pY","pointArray","bounds","geom","polygon","voronoi","clip","pointPaths","vPointPaths","showVoronoi","clipVoronoi","clipRadius","mouseEventCallback","el","mDispatch","scrollTop","pageYOffset","scrollLeft","pageXOffset","relativePos","logScale","base","sizeDomain","getSize","padDataOuter","z","forceSize","sizeRange","_sizeRange_def","z0","scaleDiff","width0","height0","sizeDiff","xDom","domainDiff","yDom","pointBorderColor","points","getShape","titles","interactiveUpdateDelay","clearTimeout","timeoutID","shape","notActive","pointScale","pointRange","forcePoint","pointShape","scatterChart","showDistX","distX","showDistY","distY","regWrap","regLine","intercept","slope","sparkline","paths","result","yValues","maxPoint","lastIndexOf","minPoint","currentPoint","showMinMaxPoints","showCurrentPoint","animate","sparklinePlus","updateValueLine","paused","hoverValue","hoverEnter","sparklineHover","closestIndex","sparklineWrap","showLastValue","valueWrap","rightAlignValue","alignValue","dataRaw","aseries","dataFiltered","order","out","zeroArea","areaMouseover","pageX","pageY","areaMouseout","areaClick","d3_stackedOffset_stackPercent","stackData","o","stackedAreaChart","currentFormat","oldYTickFormat","percentFormatter","xAxisHeight","legendTop","metaKey","stream","stack_percent","controlOptions","requiredTop","stackedWrap","valueSum","allNullValues","atleastOnePoint","tooltipValue","showTotalInTooltip","stackedY0","stackedY","totalLabel","oldValueFormatter","stackedAreaWithFocusChart","sunburst","rotationToAvoidUpsideDown","computeCenterAngle","computeNodePercentage","labelThresholdMatched","arcTweenZoom","xd","yd","yr","arcTweenUpdate","ipo","dx0","dy0","updatePrevPosition","prevPositions","pP","storeRetrievePrevPositions","zoomClick","depth","centerAngle","rotation","partition","modes","mode","count","cG","groupColorByParent","children","parent","d1","d2","sunburstChart","version","766","r","loaded","c","u","h","O","S","P","F","renderChart","isCallable","resizeHandler","rendering","renderStart","parsedProps","bindFunctions","context","getValueFunction","pick","propsByPrefix","configureComponents","without","configure","refs","isPlainObject","containerStyle","G","B","W","__g","__e","Symbol","getKeys","getSymbols","isEnum","getProto","propertyIsEnumerable","getDesc","getOwnPropertyDescriptor","setDesc","setDescs","getNames","getOwnPropertySymbols","E","C","D","T","q","_k","A","V","H","I","J","K","R","U","for","keyFor","useSetter","useSimple","check","substr","includes","negate","filterObject","767","locals"],"mappings":"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","file":"0.ca57f25.chunk.js","sourcesContent":["simplechartJsonp([0],{\n\n/***/ 318:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldSetupYDomain = shouldSetupYDomain;\nexports.default = applyYDomain;\n\nvar _immutabilityHelper = __webpack_require__(9);\n\nvar _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);\n\nvar _getRangeDomain = __webpack_require__(319);\n\nvar _getRangeDomain2 = _interopRequireDefault(_getRangeDomain);\n\nvar _misc = __webpack_require__(16);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Need to setup yDomain for NVD3 chart that requires YAXis\n * @param {Object} typeConfig Chart type config\n * @return {Boolean}\n */\nfunction shouldSetupYDomain(typeConfig) {\n  return 0 === typeConfig.dataFormat.indexOf('nvd3') && -1 !== typeConfig.modules.settings.indexOf('YAxis');\n}\n\n/**\n * add nicely rounded yDomain to chart options, if chart has a yAxis\n * @param {Object} chartOptions\n * @param {Object} typeConfig\n * @param {Object[]}  chartData\n * @return {Object} Cloned chart options object with new yDomain\n */\nfunction applyYDomain(chartOptions, typeConfig, chartData) {\n  if (!shouldSetupYDomain(typeConfig)) {\n    return chartOptions;\n  }\n\n  var yDomain = void 0;\n  if (chartOptions.yDomain) {\n    yDomain = chartOptions.yDomain;\n  } else if ((0, _misc.ownsProperties)(typeConfig, ['getNiceDomain'])) {\n    yDomain = typeConfig.getNiceDomain(typeConfig.dataFormat, chartData);\n  } else {\n    yDomain = (0, _getRangeDomain2.default)(typeConfig.dataFormat, chartData);\n  }\n\n  /**\n   * @todo Recalculate yDomain when series visibility is toggled by clicking on dots in the legend\n   */\n  return (0, _immutabilityHelper2.default)(chartOptions, { yDomain: { $set: yDomain } });\n}\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(shouldSetupYDomain, 'shouldSetupYDomain', '/Users/maxeddy/code/simplechart/app/reducers/utils/applyYDomain.js');\n\n  __REACT_HOT_LOADER__.register(applyYDomain, 'applyYDomain', '/Users/maxeddy/code/simplechart/app/reducers/utils/applyYDomain.js');\n}();\n\n;\n\n/***/ }),\n\n/***/ 319:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getRangeDomain;\n\nvar _d = __webpack_require__(112);\n\n/**\n * Get [min, max] array for data series in nvd3SingleSeries or nvd3MultiSeries format\n *\n * @param {Array} series Data series\n * @param {String} format Data format\n * @return {Array} Range of [min, max] for series\n */\nfunction getSeriesDomain(series, format) {\n  var key = 'nvd3SingleSeries' === format ? 'value' : 'y';\n  var values = series.map(function (point) {\n    return point[key];\n  });\n  return [(0, _d.min)(values), (0, _d.max)(values)];\n}\n\nfunction getMultiSeriesDomain(series, format) {\n  var mins = [];\n  var maxs = [];\n  series.forEach(function (singleSeries) {\n    var domain = getSeriesDomain(singleSeries.values, format);\n    mins.push(domain[0]);\n    maxs.push(domain[1]);\n  });\n  return [(0, _d.min)(mins), (0, _d.max)(maxs)];\n}\n\nfunction makeNice(range) {\n  return _d.scale.linear().domain(range).nice().domain();\n}\n\n/**\n * Get \"nice\" rounded domain from dataset\n *\n * @param {String} format Data format from chart config object\n * @param {Object[]} data Chart data transformed for data format\n * @return {Array} Domain array of [min, max] values\n */\nfunction getRangeDomain(format, data) {\n  var domain = 'nvd3SingleSeries' === format ? getSeriesDomain(data, format) : getMultiSeriesDomain(data, format);\n  return makeNice(domain);\n}\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(getSeriesDomain, 'getSeriesDomain', '/Users/maxeddy/code/simplechart/app/utils/dataFormats/getRangeDomain.js');\n\n  __REACT_HOT_LOADER__.register(getMultiSeriesDomain, 'getMultiSeriesDomain', '/Users/maxeddy/code/simplechart/app/utils/dataFormats/getRangeDomain.js');\n\n  __REACT_HOT_LOADER__.register(makeNice, 'makeNice', '/Users/maxeddy/code/simplechart/app/utils/dataFormats/getRangeDomain.js');\n\n  __REACT_HOT_LOADER__.register(getRangeDomain, 'getRangeDomain', '/Users/maxeddy/code/simplechart/app/utils/dataFormats/getRangeDomain.js');\n}();\n\n;\n\n/***/ }),\n\n/***/ 320:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar map = {\n\t\"./NVD3Adapter/index\": 763\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 320;\n\n/***/ }),\n\n/***/ 763:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(5);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactNvd = __webpack_require__(766);\n\nvar _reactNvd2 = _interopRequireDefault(_reactNvd);\n\nvar _immutabilityHelper = __webpack_require__(9);\n\nvar _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);\n\nvar _cloneDeep = __webpack_require__(192);\n\nvar _cloneDeep2 = _interopRequireDefault(_cloneDeep);\n\nvar _chartTypeUtils = __webpack_require__(34);\n\nvar _applyYDomain = __webpack_require__(318);\n\nvar _applyYDomain2 = _interopRequireDefault(_applyYDomain);\n\nvar _applyTickFormatters = __webpack_require__(79);\n\nvar _applyTickFormatters2 = _interopRequireDefault(_applyTickFormatters);\n\n__webpack_require__(767);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar NVD3Adapter = function (_Component) {\n  _inherits(NVD3Adapter, _Component);\n\n  function NVD3Adapter() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, NVD3Adapter);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = NVD3Adapter.__proto__ || Object.getPrototypeOf(NVD3Adapter)).call.apply(_ref, [this].concat(args))), _this), _this.mapToChartProps = function () {\n      var _this2;\n\n      return (_this2 = _this).__mapToChartProps__REACT_HOT_LOADER__.apply(_this2, arguments);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(NVD3Adapter, [{\n    key: '__mapToChartProps__REACT_HOT_LOADER__',\n    value: function __mapToChartProps__REACT_HOT_LOADER__() {\n      var _props = this.props,\n          options = _props.options,\n          data = _props.data,\n          widget = _props.widget;\n\n      var type = (0, _chartTypeUtils.getNvd3Type)(options.type);\n      var chartProps = (0, _immutabilityHelper2.default)(options, {\n        type: { $set: type },\n        datum: { $set: NVD3Adapter.dataTransform(options.type, data) },\n        ref: { $set: 'chartNode' }\n      });\n\n      if (!widget) {\n        return chartProps;\n      }\n\n      // TODO: This isn't an ideal place for this logic, and it's also duplicated within middleware/reducers.\n      // Widgets need to recreate function-based options\n      var typeConfig = (0, _chartTypeUtils.getChartTypeObject)(options.type).config;\n      var defaultOpts = (0, _chartTypeUtils.getChartTypeDefaultOpts)(options.type);\n      chartProps = Object.assign({}, defaultOpts, chartProps, typeConfig, { type: type });\n      chartProps = (0, _applyYDomain2.default)(chartProps, typeConfig, data);\n\n      return (0, _applyTickFormatters2.default)(chartProps, typeConfig);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // We clone the props, because nvd3 will mutate the datum that you pass to it.\n      var chartProps = (0, _cloneDeep2.default)(this.mapToChartProps());\n\n      // Key prop is for forcing re-render of the chart to avoid chart refresh issue when the chart type changes.\n      // https://github.com/NuCivic/react-nvd3/issues/59\n      return _react2.default.createElement(_reactNvd2.default, _extends({\n        key: Math.random(),\n        ready: NVD3Adapter.onReady\n      }, chartProps));\n    }\n  }], [{\n    key: 'dataTransform',\n\n\n    /**\n     * Apply any special formatting specfic to a chart type\n     */\n    value: function dataTransform(chartType, data) {\n      switch (chartType) {\n        case 'discreteBarChart':\n          return [{\n            key: '',\n            values: data\n          }];\n\n        default:\n          return data;\n      }\n    }\n\n    /**\n     * Set up click listener for stacked area\n     */\n\n  }, {\n    key: 'onReady',\n    value: function onReady(chart) {\n      if (this.type && 'stackedAreaChart' === this.type && chart.stacked) {\n        chart.stacked.dispatch.on('areaClick.toggle', null);\n      }\n    }\n\n    /**\n     * In editor, merge data into options and add a ref\n     * In widget, also recreate function-based options that can't be sent as JSON\n     */\n\n  }]);\n\n  return NVD3Adapter;\n}(_react.Component);\n\nNVD3Adapter.propTypes = {\n  data: _propTypes2.default.array.isRequired,\n  options: _propTypes2.default.object.isRequired,\n  widget: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool])\n};\nNVD3Adapter.defaultProps = {\n  widget: false\n};\nvar _default = NVD3Adapter;\nexports.default = _default;\n;\n\nvar _temp2 = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(NVD3Adapter, 'NVD3Adapter', '/Users/maxeddy/code/simplechart/app/components/Chart/ChartTypes/NVD3Adapter/index.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/Users/maxeddy/code/simplechart/app/components/Chart/ChartTypes/NVD3Adapter/index.js');\n}();\n\n;\n\n/***/ }),\n\n/***/ 764:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(12)();\n// imports\n\n\n// module\nexports.push([module.i, \".nv-stackedAreaChart .nv-legend .nv-series{cursor:default}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 765:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* nvd3 version 1.8.6 (https://github.com/novus/nvd3) 2017-08-23 */\n(function(){\n\n// set up main nv object\nvar nv = {};\n\n// the major global objects under the nv namespace\nnv.dev = false; //set false when in production\nnv.tooltip = nv.tooltip || {}; // For the tooltip system\nnv.utils = nv.utils || {}; // Utility subsystem\nnv.models = nv.models || {}; //stores all the possible models/components\nnv.charts = {}; //stores all the ready to use charts\nnv.logs = {}; //stores some statistics and potential error messages\nnv.dom = {}; //DOM manipulation functions\n\n// Node/CommonJS - require D3\nif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined' && typeof(d3) == 'undefined') {\n    d3 = __webpack_require__(112);\n}\n\nnv.dispatch = d3.dispatch('render_start', 'render_end');\n\n// Function bind polyfill\n// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment\n// https://github.com/ariya/phantomjs/issues/10522\n// http://kangax.github.io/compat-table/es5/#Function.prototype.bind\n// phantomJS is used for running the test suite\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== \"function\") {\n            // closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP = function () {},\n            fBound = function () {\n                return fToBind.apply(this instanceof fNOP && oThis\n                        ? this\n                        : oThis,\n                    aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n        return fBound;\n    };\n}\n\n//  Development render timers - disabled if dev = false\nif (nv.dev) {\n    nv.dispatch.on('render_start', function(e) {\n        nv.logs.startTime = +new Date();\n    });\n\n    nv.dispatch.on('render_end', function(e) {\n        nv.logs.endTime = +new Date();\n        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n    });\n}\n\n// Logs all arguments, and returns the last so you can test things in place\n// Note: in IE8 console.log is an object not a function, and if modernizr is used\n// then calling Function.prototype.bind with with anything other than a function\n// causes a TypeError to be thrown.\nnv.log = function() {\n    if (nv.dev && window.console && console.log && console.log.apply)\n        console.log.apply(console, arguments);\n    else if (nv.dev && window.console && typeof console.log == \"function\" && Function.prototype.bind) {\n        var log = Function.prototype.bind.call(console.log, console);\n        log.apply(console, arguments);\n    }\n    return arguments[arguments.length - 1];\n};\n\n// print console warning, should be used by deprecated functions\nnv.deprecated = function(name, info) {\n    if (console && console.warn) {\n        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');\n    }\n};\n\n// The nv.render function is used to queue up chart rendering\n// in non-blocking async functions.\n// When all queued charts are done rendering, nv.dispatch.render_end is invoked.\nnv.render = function render(step) {\n    // number of graphs to generate in each timeout loop\n    step = step || 1;\n\n    nv.render.active = true;\n    nv.dispatch.render_start();\n\n    var renderLoop = function() {\n        var chart, graph;\n\n        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n            chart = graph.generate();\n            if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n        }\n\n        nv.render.queue.splice(0, i);\n\n        if (nv.render.queue.length) {\n            setTimeout(renderLoop);\n        }\n        else {\n            nv.dispatch.render_end();\n            nv.render.active = false;\n        }\n    };\n\n    setTimeout(renderLoop);\n};\n\nnv.render.active = false;\nnv.render.queue = [];\n\n/*\nAdds a chart to the async rendering queue. This method can take arguments in two forms:\nnv.addGraph({\n    generate: <Function>\n    callback: <Function>\n})\n\nor\n\nnv.addGraph(<generate Function>, <callback Function>)\n\nThe generate function should contain code that creates the NVD3 model, sets options\non it, adds data to an SVG element, and invokes the chart model. The generate function\nshould return the chart model.  See examples/lineChart.html for a usage example.\n\nThe callback function is optional, and it is called when the generate function completes.\n*/\nnv.addGraph = function(obj) {\n    if (typeof arguments[0] === typeof(Function)) {\n        obj = {generate: arguments[0], callback: arguments[1]};\n    }\n\n    nv.render.queue.push(obj);\n\n    if (!nv.render.active) {\n        nv.render();\n    }\n};\n\n// Node/CommonJS exports\nif (true) {\n  module.exports = nv;\n}\n\nif (typeof(window) !== 'undefined') {\n  window.nv = nv;\n}\n/* Facade for queueing DOM write operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.write = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.mutate(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n\r\n/* Facade for queueing DOM read operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.read = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.measure(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n/* Utility class to handle creation of an interactive layer.\n This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\n containing the X-coordinate. It can also render a vertical line where the mouse is located.\n\n dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\n the rectangle. The dispatch is given one object which contains the mouseX/Y location.\n It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n */\nnv.interactiveGuideline = function() {\n    \"use strict\";\n\n    var margin = { left: 0, top: 0 } //Pass the chart's top and left magins. Used to calculate the mouseX/Y.\n        ,   width = null\n        ,   height = null\n        ,   xScale = d3.scale.linear()\n        ,   dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp')\n        ,   showGuideLine = true\n        ,   svgContainer = null // Must pass the chart's svg, we'll use its mousemove event.\n        ,   tooltip = nv.models.tooltip()\n        ,   isMSIE =  window.ActiveXObject// Checkt if IE by looking for activeX. (excludes IE11)\n    ;\n\n    tooltip\n        .duration(0)\n        .hideDelay(0)\n        .hidden(false);\n\n    function layer(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this);\n            var availableWidth = (width || 960), availableHeight = (height || 400);\n            var wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\")\n                .data([data]);\n            var wrapEnter = wrap.enter()\n                .append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n            wrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\n            if (!svgContainer) {\n                return;\n            }\n\n            function mouseHandler() {\n                var mouseX = d3.event.clientX - this.getBoundingClientRect().left;\n                var mouseY = d3.event.clientY - this.getBoundingClientRect().top;\n\n                var subtractMargin = true;\n                var mouseOutAnyReason = false;\n                if (isMSIE) {\n                    /*\n                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n                     over a rect in IE 10.\n                     However, d3.event.offsetX/Y also returns the mouse coordinates\n                     relative to the triggering <rect>. So we use offsetX/Y on IE.\n                     */\n                    mouseX = d3.event.offsetX;\n                    mouseY = d3.event.offsetY;\n\n                    /*\n                     On IE, if you attach a mouse event listener to the <svg> container,\n                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n                     When this happens on IE, the offsetX/Y is set to where ever the child element\n                     is located.\n                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n                     position under this scenario. Removing the line below *will* cause\n                     the interactive layer to not work right on IE.\n                     */\n                    if(d3.event.target.tagName !== \"svg\") {\n                        subtractMargin = false;\n                    }\n\n                    if (d3.event.target.className.baseVal.match(\"nv-legend\")) {\n                        mouseOutAnyReason = true;\n                    }\n\n                }\n\n                if(subtractMargin) {\n                    mouseX -= margin.left;\n                    mouseY -= margin.top;\n                }\n\n                /* If mouseX/Y is outside of the chart's bounds,\n                 trigger a mouseOut event.\n                 */\n                if (d3.event.type === 'mouseout'\n                    || mouseX < 0 || mouseY < 0\n                    || mouseX > availableWidth || mouseY > availableHeight\n                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n                    || mouseOutAnyReason\n                    ) {\n\n                    if (isMSIE) {\n                        if (d3.event.relatedTarget\n                            && d3.event.relatedTarget.ownerSVGElement === undefined\n                            && (d3.event.relatedTarget.className === undefined\n                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {\n\n                            return;\n                        }\n                    }\n                    dispatch.elementMouseout({\n                        mouseX: mouseX,\n                        mouseY: mouseY\n                    });\n                    layer.renderGuideLine(null); //hide the guideline\n                    tooltip.hidden(true);\n                    return;\n                } else {\n                    tooltip.hidden(false);\n                }\n\n\n                var scaleIsOrdinal = typeof xScale.rangeBands === 'function';\n                var pointXValue = undefined;\n\n                // Ordinal scale has no invert method\n                if (scaleIsOrdinal) {\n                    var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;\n                    // Check if mouseX is in the range band\n                    if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {\n                        pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];\n                    }\n                    else {\n                        dispatch.elementMouseout({\n                            mouseX: mouseX,\n                            mouseY: mouseY\n                        });\n                        layer.renderGuideLine(null); //hide the guideline\n                        tooltip.hidden(true);\n                        return;\n                    }\n                }\n                else {\n                    pointXValue = xScale.invert(mouseX);\n                }\n\n                dispatch.elementMousemove({\n                    mouseX: mouseX,\n                    mouseY: mouseY,\n                    pointXValue: pointXValue\n                });\n\n                //If user double clicks the layer, fire a elementDblclick\n                if (d3.event.type === \"dblclick\") {\n                    dispatch.elementDblclick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user single clicks the layer, fire elementClick\n                if (d3.event.type === 'click') {\n                    dispatch.elementClick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user presses mouse down the layer, fire elementMouseDown\n                if (d3.event.type === 'mousedown') {\n                \tdispatch.elementMouseDown({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n\n                // if user presses mouse down the layer, fire elementMouseUp\n                if (d3.event.type === 'mouseup') {\n                \tdispatch.elementMouseUp({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n            }\n\n            svgContainer\n                .on(\"touchmove\",mouseHandler)\n                .on(\"mousemove\",mouseHandler, true)\n                .on(\"mouseout\" ,mouseHandler,true)\n                .on(\"mousedown\" ,mouseHandler,true)\n                .on(\"mouseup\" ,mouseHandler,true)\n                .on(\"dblclick\" ,mouseHandler)\n                .on(\"click\", mouseHandler)\n            ;\n\n            layer.guideLine = null;\n            //Draws a vertical guideline at the given X postion.\n            layer.renderGuideLine = function(x) {\n                if (!showGuideLine) return;\n                if (layer.guideLine && layer.guideLine.attr(\"x1\") === x) return;\n                nv.dom.write(function() {\n                    var line = wrap.select(\".nv-interactiveGuideLine\")\n                        .selectAll(\"line\")\n                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n                    line.enter()\n                        .append(\"line\")\n                        .attr(\"class\", \"nv-guideline\")\n                        .attr(\"x1\", function(d) { return d;})\n                        .attr(\"x2\", function(d) { return d;})\n                        .attr(\"y1\", availableHeight)\n                        .attr(\"y2\",0);\n                    line.exit().remove();\n                });\n            }\n        });\n    }\n\n    layer.dispatch = dispatch;\n    layer.tooltip = tooltip;\n\n    layer.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return layer;\n    };\n\n    layer.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return layer;\n    };\n\n    layer.height = function(_) {\n        if (!arguments.length) return height;\n        height = _;\n        return layer;\n    };\n\n    layer.xScale = function(_) {\n        if (!arguments.length) return xScale;\n        xScale = _;\n        return layer;\n    };\n\n    layer.showGuideLine = function(_) {\n        if (!arguments.length) return showGuideLine;\n        showGuideLine = _;\n        return layer;\n    };\n\n    layer.svgContainer = function(_) {\n        if (!arguments.length) return svgContainer;\n        svgContainer = _;\n        return layer;\n    };\n\n    return layer;\n};\n\n/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\n This is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\n For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.\n Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\n because 28 is closer to 30 than 10.\n\n Unit tests can be found in: interactiveBisectTest.html\n\n Has the following known issues:\n * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n * Won't work if there are duplicate x coordinate values.\n */\nnv.interactiveBisect = function (values, searchVal, xAccessor) {\n    \"use strict\";\n    if (! (values instanceof Array)) {\n        return null;\n    }\n    var _xAccessor;\n    if (typeof xAccessor !== 'function') {\n        _xAccessor = function(d) {\n            return d.x;\n        }\n    } else {\n        _xAccessor = xAccessor;\n    }\n    var _cmp = function(d, v) {\n        // Accessors are no longer passed the index of the element along with\n        // the element itself when invoked by d3.bisector.\n        //\n        // Starting at D3 v3.4.4, d3.bisector() started inspecting the\n        // function passed to determine if it should consider it an accessor\n        // or a comparator. This meant that accessors that take two arguments\n        // (expecting an index as the second parameter) are treated as\n        // comparators where the second argument is the search value against\n        // which the first argument is compared.\n        return _xAccessor(d) - v;\n    };\n\n    var bisect = d3.bisector(_cmp).left;\n    var index = d3.max([0, bisect(values,searchVal) - 1]);\n    var currentValue = _xAccessor(values[index]);\n\n    if (typeof currentValue === 'undefined') {\n        currentValue = index;\n    }\n\n    if (currentValue === searchVal) {\n        return index; //found exact match\n    }\n\n    var nextIndex = d3.min([index+1, values.length - 1]);\n    var nextValue = _xAccessor(values[nextIndex]);\n\n    if (typeof nextValue === 'undefined') {\n        nextValue = nextIndex;\n    }\n\n    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {\n        return index;\n    } else {\n        return nextIndex\n    }\n};\n\n/*\n Returns the index in the array \"values\" that is closest to searchVal.\n Only returns an index if searchVal is within some \"threshold\".\n Otherwise, returns null.\n */\nnv.nearestValueIndex = function (values, searchVal, threshold) {\n    \"use strict\";\n    var yDistMax = Infinity, indexToHighlight = null;\n    values.forEach(function(d,i) {\n        var delta = Math.abs(searchVal - d);\n        if ( d != null && delta <= yDistMax && delta < threshold) {\n            yDistMax = delta;\n            indexToHighlight = i;\n        }\n    });\n    return indexToHighlight;\n};\n\n/* Model which can be instantiated to handle tooltip rendering.\n Example usage:\n var tip = nv.models.tooltip().gravity('w').distance(23)\n .data(myDataObject);\n\n tip();    //just invoke the returned function to render tooltip.\n */\nnv.models.tooltip = function() {\n    \"use strict\";\n\n    /*\n    Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n    Example Format of data:\n    {\n        key: \"Date\",\n        value: \"August 2009\",\n        series: [\n            {key: \"Series 1\", value: \"Value 1\", color: \"#000\"},\n            {key: \"Series 2\", value: \"Value 2\", color: \"#00f\"}\n        ]\n    }\n    */\n    var id = \"nvtooltip-\" + Math.floor(Math.random() * 100000) // Generates a unique id when you create a new tooltip() object.\n        ,   data = null\n        ,   gravity = 'w'   // Can be 'n','s','e','w'. Determines how tooltip is positioned.\n        ,   distance = 25 // Distance to offset tooltip from the mouse location.\n        ,   snapDistance = 0   // Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n        ,   classes = null  // Attaches additional CSS classes to the tooltip DIV that is created.\n        ,   hidden = true  // Start off hidden, toggle with hide/show functions below.\n        ,   hideDelay = 200  // Delay (in ms) before the tooltip hides after calling hide().\n        ,   tooltip = null // d3 select of the tooltip div.\n        ,   lastPosition = { left: null, top: null } // Last position the tooltip was in.\n        ,   enabled = true  // True -> tooltips are rendered. False -> don't render tooltips.\n        ,   duration = 100 // Tooltip movement duration, in ms.\n        ,   headerEnabled = true // If is to show the tooltip header.\n        ,   nvPointerEventsClass = \"nv-pointer-events-none\" // CSS class to specify whether element should not have mouse events.\n    ;\n\n    // Format function for the tooltip values column.\n    // d is value,\n    // i is series index\n    // p is point containing the value\n    var valueFormatter = function(d, i, p) {\n        return d;\n    };\n\n    // Format function for the tooltip header value.\n    var headerFormatter = function(d) {\n        return d;\n    };\n\n    var keyFormatter = function(d, i) {\n        return d;\n    };\n\n    // By default, the tooltip model renders a beautiful table inside a DIV, returned as HTML\n    // You can override this function if a custom tooltip is desired. For instance, you could directly manipulate\n    // the DOM by accessing elem and returning false.\n    var contentGenerator = function(d, elem) {\n        if (d === null) {\n            return '';\n        }\n\n        var table = d3.select(document.createElement(\"table\"));\n        if (headerEnabled) {\n            var theadEnter = table.selectAll(\"thead\")\n                .data([d])\n                .enter().append(\"thead\");\n\n            theadEnter.append(\"tr\")\n                .append(\"td\")\n                .attr(\"colspan\", 3)\n                .append(\"strong\")\n                .classed(\"x-value\", true)\n                .html(headerFormatter(d.value));\n        }\n\n        var tbodyEnter = table.selectAll(\"tbody\")\n            .data([d])\n            .enter().append(\"tbody\");\n\n        var trowEnter = tbodyEnter.selectAll(\"tr\")\n                .data(function(p) { return p.series})\n                .enter()\n                .append(\"tr\")\n                .classed(\"highlight\", function(p) { return p.highlight});\n\n        trowEnter.append(\"td\")\n            .classed(\"legend-color-guide\",true)\n            .append(\"div\")\n            .style(\"background-color\", function(p) { return p.color});\n\n        trowEnter.append(\"td\")\n            .classed(\"key\",true)\n            .classed(\"total\",function(p) { return !!p.total})\n            .html(function(p, i) { return keyFormatter(p.key, i)});\n\n        trowEnter.append(\"td\")\n            .classed(\"value\",true)\n            .html(function(p, i) { return valueFormatter(p.value, i, p) });\n\n        trowEnter.filter(function (p,i) { return p.percent !== undefined }).append(\"td\")\n            .classed(\"percent\", true)\n            .html(function(p, i) { return \"(\" + d3.format('%')(p.percent) + \")\" });\n\n        trowEnter.selectAll(\"td\").each(function(p) {\n            if (p.highlight) {\n                var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n                var opacity = 0.6;\n                d3.select(this)\n                    .style(\"border-bottom-color\", opacityScale(opacity))\n                    .style(\"border-top-color\", opacityScale(opacity))\n                ;\n            }\n        });\n\n        var html = table.node().outerHTML;\n        if (d.footer !== undefined)\n            html += \"<div class='footer'>\" + d.footer + \"</div>\";\n        return html;\n\n    };\n\n    /*\n     Function that returns the position (relative to the viewport/document.body)\n     the tooltip should be placed in.\n     Should return: {\n        left: <leftPos>,\n        top: <topPos>\n     }\n     */\n    var position = function() {\n        var pos = {\n            left: d3.event !== null ? d3.event.clientX : 0,\n            top: d3.event !== null ? d3.event.clientY : 0\n        };\n\n        if(getComputedStyle(document.body).transform != 'none') {\n            // Take the offset into account, as now the tooltip is relative\n            // to document.body.\n            var client = document.body.getBoundingClientRect();\n            pos.left -= client.left;\n            pos.top -= client.top;\n        }\n\n        return pos;\n    };\n\n    var dataSeriesExists = function(d) {\n        if (d && d.series) {\n            if (nv.utils.isArray(d.series)) {\n                return true;\n            }\n            // if object, it's okay just convert to array of the object\n            if (nv.utils.isObject(d.series)) {\n                d.series = [d.series];\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Calculates the gravity offset of the tooltip. Parameter is position of tooltip\n    // relative to the viewport.\n    var calcGravityOffset = function(pos) {\n        var height = tooltip.node().offsetHeight,\n            width = tooltip.node().offsetWidth,\n            clientWidth = document.documentElement.clientWidth, // Don't want scrollbars.\n            clientHeight = document.documentElement.clientHeight, // Don't want scrollbars.\n            left, top, tmp;\n\n        // calculate position based on gravity\n        switch (gravity) {\n            case 'e':\n                left = - width - distance;\n                top = - (height / 2);\n                if(pos.left + left < 0) left = distance;\n                if((tmp = pos.top + top) < 0) top -= tmp;\n                if((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'w':\n                left = distance;\n                top = - (height / 2);\n                if (pos.left + left + width > clientWidth) left = - width - distance;\n                if ((tmp = pos.top + top) < 0) top -= tmp;\n                if ((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'n':\n                left = - (width / 2) - 5; // - 5 is an approximation of the mouse's height.\n                top = distance;\n                if (pos.top + top + height > clientHeight) top = - height - distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 's':\n                left = - (width / 2);\n                top = - height - distance;\n                if (pos.top + top < 0) top = distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 'center':\n                left = - (width / 2);\n                top = - (height / 2);\n                break;\n            default:\n                left = 0;\n                top = 0;\n                break;\n        }\n\n        return { 'left': left, 'top': top };\n    };\n\n    /*\n     Positions the tooltip in the correct place, as given by the position() function.\n     */\n    var positionTooltip = function() {\n        nv.dom.read(function() {\n            var pos = position(),\n                gravityOffset = calcGravityOffset(pos),\n                left = pos.left + gravityOffset.left,\n                top = pos.top + gravityOffset.top;\n\n            // delay hiding a bit to avoid flickering\n            if (hidden) {\n                tooltip\n                    .interrupt()\n                    .transition()\n                    .delay(hideDelay)\n                    .duration(0)\n                    .style('opacity', 0);\n            } else {\n                // using tooltip.style('transform') returns values un-usable for tween\n                var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';\n                var new_translate = 'translate(' + Math.round(left) + 'px, ' + Math.round(top) + 'px)';\n                var translateInterpolator = d3.interpolateString(old_translate, new_translate);\n                var is_hidden = tooltip.style('opacity') < 0.1;\n\n                tooltip\n                    .interrupt() // cancel running transitions\n                    .transition()\n                    .duration(is_hidden ? 0 : duration)\n                    // using tween since some versions of d3 can't auto-tween a translate on a div\n                    .styleTween('transform', function (d) {\n                        return translateInterpolator;\n                    }, 'important')\n                    // Safari has its own `-webkit-transform` and does not support `transform`\n                    .styleTween('-webkit-transform', function (d) {\n                        return translateInterpolator;\n                    })\n                    .style('-ms-transform', new_translate)\n                    .style('opacity', 1);\n            }\n\n            lastPosition.left = left;\n            lastPosition.top = top;\n        });\n    };\n\n    // Creates new tooltip container, or uses existing one on DOM.\n    function initTooltip() {\n        if (!tooltip || !tooltip.node()) {\n            // Create new tooltip div if it doesn't exist on DOM.\n\n            var data = [1];\n            tooltip = d3.select(document.body).select('#'+id).data(data);\n\n            tooltip.enter().append('div')\n                   .attr(\"class\", \"nvtooltip \" + (classes ? classes : \"xy-tooltip\"))\n                   .attr(\"id\", id)\n                   .style(\"top\", 0).style(\"left\", 0)\n                   .style('opacity', 0)\n                   .style('position', 'fixed')\n                   .selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass, true)\n                   .classed(nvPointerEventsClass, true);\n\n            tooltip.exit().remove()\n        }\n    }\n\n    // Draw the tooltip onto the DOM.\n    function nvtooltip() {\n        if (!enabled) return;\n        if (!dataSeriesExists(data)) return;\n\n        nv.dom.write(function () {\n            initTooltip();\n            // Generate data and set it into tooltip.\n            // Bonus - If you override contentGenerator and return false, you can use something like\n            //         Angular, React or Knockout to bind the data for your tooltip directly to the DOM.\n            var newContent = contentGenerator(data, tooltip.node());\n            if (newContent) {\n                tooltip.node().innerHTML = newContent;\n            }\n\n            positionTooltip();\n        });\n\n        return nvtooltip;\n    }\n\n    nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n    nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);\n\n    nvtooltip._options = Object.create({}, {\n        // simple read/write options\n        duration: {get: function(){return duration;}, set: function(_){duration=_;}},\n        gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        distance: {get: function(){return distance;}, set: function(_){distance=_;}},\n        snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},\n        classes: {get: function(){return classes;}, set: function(_){classes=_;}},\n        enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},\n        hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},\n        contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},\n        valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},\n        headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},\n        keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        headerEnabled: {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},\n        position: {get: function(){return position;}, set: function(_){position=_;}},\n\n        // Deprecated options\n        chartContainer: {get: function(){return document.body;}, set: function(_){\n            // deprecated after 1.8.3\n            nv.deprecated('chartContainer', 'feature removed after 1.8.3');\n        }},\n        fixedTop: {get: function(){return null;}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('fixedTop', 'feature removed after 1.8.1');\n        }},\n        offset: {get: function(){return {left: 0, top: 0};}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('offset', 'use chart.tooltip.distance() instead');\n        }},\n\n        // options with extra logic\n        hidden: {get: function(){return hidden;}, set: function(_){\n            if (hidden != _) {\n                hidden = !!_;\n                nvtooltip();\n            }\n        }},\n        data: {get: function(){return data;}, set: function(_){\n            // if showing a single data point, adjust data format with that\n            if (_.point) {\n                _.value = _.point.x;\n                _.series = _.series || {};\n                _.series.value = _.point.y;\n                _.series.color = _.point.color || _.series.color;\n            }\n            data = _;\n        }},\n\n        // read only properties\n        node: {get: function(){return tooltip.node();}, set: function(_){}},\n        id: {get: function(){return id;}, set: function(_){}}\n    });\n\n    nv.utils.initOptions(nvtooltip);\n    return nvtooltip;\n};\n\n\n/*\nGets the browser window size\n\nReturns object with height and width properties\n */\nnv.utils.windowSize = function() {\n    // Sane defaults\n    var size = {width: 640, height: 480};\n\n    // Most recent browsers use\n    if (window.innerWidth && window.innerHeight) {\n        size.width = window.innerWidth;\n        size.height = window.innerHeight;\n        return (size);\n    }\n\n    // IE can use depending on mode it is in\n    if (document.compatMode=='CSS1Compat' &&\n        document.documentElement &&\n        document.documentElement.offsetWidth ) {\n\n        size.width = document.documentElement.offsetWidth;\n        size.height = document.documentElement.offsetHeight;\n        return (size);\n    }\n\n    // Earlier IE uses Doc.body\n    if (document.body && document.body.offsetWidth) {\n        size.width = document.body.offsetWidth;\n        size.height = document.body.offsetHeight;\n        return (size);\n    }\n\n    return (size);\n};\n\n\n/* handle dumb browser quirks...  isinstance breaks if you use frames\ntypeof returns 'object' for null, NaN is a number, etc.\n */\nnv.utils.isArray = Array.isArray;\nnv.utils.isObject = function(a) {\n    return a !== null && typeof a === 'object';\n};\nnv.utils.isFunction = function(a) {\n    return typeof a === 'function';\n};\nnv.utils.isDate = function(a) {\n    return toString.call(a) === '[object Date]';\n};\nnv.utils.isNumber = function(a) {\n    return !isNaN(a) && typeof a === 'number';\n};\n\n\n/*\nBinds callback function to run when window is resized\n */\nnv.utils.windowResize = function(handler) {\n    if (window.addEventListener) {\n        window.addEventListener('resize', handler);\n    } else {\n        nv.log(\"ERROR: Failed to bind to window.resize with: \", handler);\n    }\n    // return object with clear function to remove the single added callback.\n    return {\n        callback: handler,\n        clear: function() {\n            window.removeEventListener('resize', handler);\n        }\n    }\n};\n\n\n/*\nBackwards compatible way to implement more d3-like coloring of graphs.\nCan take in nothing, an array, or a function/scale\nTo use a normal scale, get the range and pass that because we must be able\nto take two arguments and use the index to keep backward compatibility\n*/\nnv.utils.getColor = function(color) {\n    //if you pass in nothing, get default colors back\n    if (color === undefined) {\n        return nv.utils.defaultColor();\n\n    //if passed an array, turn it into a color scale\n    } else if(nv.utils.isArray(color)) {\n        var color_scale = d3.scale.ordinal().range(color);\n        return function(d, i) {\n            var key = i === undefined ? d : i;\n            return d.color || color_scale(key);\n        };\n\n    //if passed a function or scale, return it, or whatever it may be\n    //external libs, such as angularjs-nvd3-directives use this\n    } else {\n        //can't really help it if someone passes rubbish as color\n        return color;\n    }\n};\n\n\n/*\nDefault color chooser uses a color scale of 20 colors from D3\n https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors\n */\nnv.utils.defaultColor = function() {\n    // get range of the scale so we'll turn it into our own function.\n    return nv.utils.getColor(d3.scale.category20().range());\n};\n\n\n/*\nReturns a color function that takes the result of 'getKey' for each series and\nlooks for a corresponding color from the dictionary\n*/\nnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n    // use default series.key if getKey is undefined\n    getKey = getKey || function(series) { return series.key };\n    defaultColors = defaultColors || d3.scale.category20().range();\n\n    // start at end of default color list and walk back to index 0\n    var defIndex = defaultColors.length;\n\n    return function(series, index) {\n        var key = getKey(series);\n        if (nv.utils.isFunction(dictionary[key])) {\n            return dictionary[key]();\n        } else if (dictionary[key] !== undefined) {\n            return dictionary[key];\n        } else {\n            // no match in dictionary, use a default color\n            if (!defIndex) {\n                // used all the default colors, start over\n                defIndex = defaultColors.length;\n            }\n            defIndex = defIndex - 1;\n            return defaultColors[defIndex];\n        }\n    };\n};\n\n\n/*\nFrom the PJAX example on d3js.org, while this is not really directly needed\nit's a very cool method for doing pjax, I may expand upon it a little bit,\nopen to suggestions on anything that may be useful\n*/\nnv.utils.pjax = function(links, content) {\n\n    var load = function(href) {\n        d3.html(href, function(fragment) {\n            var target = d3.select(content).node();\n            target.parentNode.replaceChild(\n                d3.select(fragment).select(content).node(),\n                target);\n            nv.utils.pjax(links, content);\n        });\n    };\n\n    d3.selectAll(links).on(\"click\", function() {\n        history.pushState(this.href, this.textContent, this.href);\n        load(this.href);\n        d3.event.preventDefault();\n    });\n\n    d3.select(window).on(\"popstate\", function() {\n        if (d3.event.state) {\n            load(d3.event.state);\n        }\n    });\n};\n\n\n/*\nFor when we want to approximate the width in pixels for an SVG:text element.\nMost common instance is when the element is in a display:none; container.\nForumla is : text.length * font-size * constant_factor\n*/\nnv.utils.calcApproxTextWidth = function (svgTextElem) {\n    if (nv.utils.isFunction(svgTextElem.style) && nv.utils.isFunction(svgTextElem.text)) {\n        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"), 10);\n        var textLength = svgTextElem.text().length;\n        return nv.utils.NaNtoZero(textLength * fontSize * 0.5);\n    }\n    return 0;\n};\n\n\n/*\nNumbers that are undefined, null or NaN, convert them to zeros.\n*/\nnv.utils.NaNtoZero = function(n) {\n    if (!nv.utils.isNumber(n)\n        || isNaN(n)\n        || n === null\n        || n === Infinity\n        || n === -Infinity) {\n\n        return 0;\n    }\n    return n;\n};\n\n/*\nAdd a way to watch for d3 transition ends to d3\n*/\nd3.selection.prototype.watchTransition = function(renderWatch){\n    var args = [this].concat([].slice.call(arguments, 1));\n    return renderWatch.transition.apply(renderWatch, args);\n};\n\n\n/*\nHelper object to watch when d3 has rendered something\n*/\nnv.utils.renderWatch = function(dispatch, duration) {\n    if (!(this instanceof nv.utils.renderWatch)) {\n        return new nv.utils.renderWatch(dispatch, duration);\n    }\n\n    var _duration = duration !== undefined ? duration : 250;\n    var renderStack = [];\n    var self = this;\n\n    this.models = function(models) {\n        models = [].slice.call(arguments, 0);\n        models.forEach(function(model){\n            model.__rendered = false;\n            (function(m){\n                m.dispatch.on('renderEnd', function(arg){\n                    m.__rendered = true;\n                    self.renderEnd('model');\n                });\n            })(model);\n\n            if (renderStack.indexOf(model) < 0) {\n                renderStack.push(model);\n            }\n        });\n    return this;\n    };\n\n    this.reset = function(duration) {\n        if (duration !== undefined) {\n            _duration = duration;\n        }\n        renderStack = [];\n    };\n\n    this.transition = function(selection, args, duration) {\n        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n\n        if (args.length > 1) {\n            duration = args.pop();\n        } else {\n            duration = _duration !== undefined ? _duration : 250;\n        }\n        selection.__rendered = false;\n\n        if (renderStack.indexOf(selection) < 0) {\n            renderStack.push(selection);\n        }\n\n        if (duration === 0) {\n            selection.__rendered = true;\n            selection.delay = function() { return this; };\n            selection.duration = function() { return this; };\n            return selection;\n        } else {\n            if (selection.length === 0) {\n                selection.__rendered = true;\n            } else if (selection.every( function(d){ return !d.length; } )) {\n                selection.__rendered = true;\n            } else {\n                selection.__rendered = false;\n            }\n\n            var n = 0;\n            return selection\n                .transition()\n                .duration(duration)\n                .each(function(){ ++n; })\n                .each('end', function(d, i) {\n                    if (--n === 0) {\n                        selection.__rendered = true;\n                        self.renderEnd.apply(this, args);\n                    }\n                });\n        }\n    };\n\n    this.renderEnd = function() {\n        if (renderStack.every( function(d){ return d.__rendered; } )) {\n            renderStack.forEach( function(d){ d.__rendered = false; });\n            dispatch.renderEnd.apply(this, arguments);\n        }\n    }\n\n};\n\n\n/*\nTakes multiple objects and combines them into the first one (dst)\nexample:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});\ngives:  {a: 2, b: 3, c: 4}\n*/\nnv.utils.deepExtend = function(dst){\n    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n    sources.forEach(function(source) {\n        for (var key in source) {\n            var isArray = nv.utils.isArray(dst[key]);\n            var isObject = nv.utils.isObject(dst[key]);\n            var srcObj = nv.utils.isObject(source[key]);\n\n            if (isObject && !isArray && srcObj) {\n                nv.utils.deepExtend(dst[key], source[key]);\n            } else {\n                dst[key] = source[key];\n            }\n        }\n    });\n};\n\n\n/*\nstate utility object, used to track d3 states in the models\n*/\nnv.utils.state = function(){\n    if (!(this instanceof nv.utils.state)) {\n        return new nv.utils.state();\n    }\n    var state = {};\n    var _self = this;\n    var _setState = function(){};\n    var _getState = function(){ return {}; };\n    var init = null;\n    var changed = null;\n\n    this.dispatch = d3.dispatch('change', 'set');\n\n    this.dispatch.on('set', function(state){\n        _setState(state, true);\n    });\n\n    this.getter = function(fn){\n        _getState = fn;\n        return this;\n    };\n\n    this.setter = function(fn, callback) {\n        if (!callback) {\n            callback = function(){};\n        }\n        _setState = function(state, update){\n            fn(state);\n            if (update) {\n                callback();\n            }\n        };\n        return this;\n    };\n\n    this.init = function(state){\n        init = init || {};\n        nv.utils.deepExtend(init, state);\n    };\n\n    var _set = function(){\n        var settings = _getState();\n\n        if (JSON.stringify(settings) === JSON.stringify(state)) {\n            return false;\n        }\n\n        for (var key in settings) {\n            if (state[key] === undefined) {\n                state[key] = {};\n            }\n            state[key] = settings[key];\n            changed = true;\n        }\n        return true;\n    };\n\n    this.update = function(){\n        if (init) {\n            _setState(init, false);\n            init = null;\n        }\n        if (_set.call(this)) {\n            this.dispatch.change(state);\n        }\n    };\n\n};\n\n\n/*\nSnippet of code you can insert into each nv.models.* to give you the ability to\ndo things like:\nchart.options({\n  showXAxis: true,\n  tooltips: true\n});\n\nTo enable in the chart:\nchart.options = nv.utils.optionsFunc.bind(chart);\n*/\nnv.utils.optionsFunc = function(args) {\n    if (args) {\n        d3.map(args).forEach((function(key,value) {\n            if (nv.utils.isFunction(this[key])) {\n                this[key](value);\n            }\n        }).bind(this));\n    }\n    return this;\n};\n\n\n/*\nnumTicks:  requested number of ticks\ndata:  the chart data\n\nreturns the number of ticks to actually use on X axis, based on chart data\nto avoid duplicate ticks with the same value\n*/\nnv.utils.calcTicksX = function(numTicks, data) {\n    // find max number of values from all data streams\n    var numValues = 1;\n    var i = 0;\n    for (i; i < data.length; i += 1) {\n        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;\n        numValues = stream_len > numValues ? stream_len : numValues;\n    }\n    nv.log(\"Requested number of ticks: \", numTicks);\n    nv.log(\"Calculated max values to be: \", numValues);\n    // make sure we don't have more ticks than values to avoid duplicates\n    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;\n    // make sure we have at least one tick\n    numTicks = numTicks < 1 ? 1 : numTicks;\n    // make sure it's an integer\n    numTicks = Math.floor(numTicks);\n    nv.log(\"Calculating tick count as: \", numTicks);\n    return numTicks;\n};\n\n\n/*\nreturns number of ticks to actually use on Y axis, based on chart data\n*/\nnv.utils.calcTicksY = function(numTicks, data) {\n    // currently uses the same logic but we can adjust here if needed later\n    return nv.utils.calcTicksX(numTicks, data);\n};\n\n\n/*\nAdd a particular option from an options object onto chart\nOptions exposed on a chart are a getter/setter function that returns chart\non set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');\n\noption objects should be generated via Object.create() to provide\nthe option of manipulating data via get/set functions.\n*/\nnv.utils.initOption = function(chart, name) {\n    // if it's a call option, just call it directly, otherwise do get/set\n    if (chart._calls && chart._calls[name]) {\n        chart[name] = chart._calls[name];\n    } else {\n        chart[name] = function (_) {\n            if (!arguments.length) return chart._options[name];\n            chart._overrides[name] = true;\n            chart._options[name] = _;\n            return chart;\n        };\n        // calling the option as _option will ignore if set by option already\n        // so nvd3 can set options internally but the stop if set manually\n        chart['_' + name] = function(_) {\n            if (!arguments.length) return chart._options[name];\n            if (!chart._overrides[name]) {\n                chart._options[name] = _;\n            }\n            return chart;\n        }\n    }\n};\n\n\n/*\nAdd all options in an options object to the chart\n*/\nnv.utils.initOptions = function(chart) {\n    chart._overrides = chart._overrides || {};\n    var ops = Object.getOwnPropertyNames(chart._options || {});\n    var calls = Object.getOwnPropertyNames(chart._calls || {});\n    ops = ops.concat(calls);\n    for (var i in ops) {\n        nv.utils.initOption(chart, ops[i]);\n    }\n};\n\n\n/*\nInherit options from a D3 object\nd3.rebind makes calling the function on target actually call it on source\nAlso use _d3options so we can track what we inherit for documentation and chained inheritance\n*/\nnv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {\n    target._d3options = oplist.concat(target._d3options || []);\n    // Find unique d3 options (string) and update d3options\n    target._d3options = (target._d3options || []).filter(function(item, i, ar){ return ar.indexOf(item) === i; });\n    oplist.unshift(d3_source);\n    oplist.unshift(target);\n    d3.rebind.apply(this, oplist);\n};\n\n\n/*\nRemove duplicates from an array\n*/\nnv.utils.arrayUnique = function(a) {\n    return a.sort().filter(function(item, pos) {\n        return !pos || item != a[pos - 1];\n    });\n};\n\n\n/*\nKeeps a list of custom symbols to draw from in addition to d3.svg.symbol\nNecessary since d3 doesn't let you extend its list -_-\nAdd new symbols by doing nv.utils.symbols.set('name', function(size){...});\n*/\nnv.utils.symbolMap = d3.map();\n\n\n/*\nReplaces d3.svg.symbol so that we can look both there and our own map\n */\nnv.utils.symbol = function() {\n    var type,\n        size = 64;\n    function symbol(d,i) {\n        var t = type.call(this,d,i);\n        var s = size.call(this,d,i);\n        if (d3.svg.symbolTypes.indexOf(t) !== -1) {\n            return d3.svg.symbol().type(t).size(s)();\n        } else {\n            return nv.utils.symbolMap.get(t)(s);\n        }\n    }\n    symbol.type = function(_) {\n        if (!arguments.length) return type;\n        type = d3.functor(_);\n        return symbol;\n    };\n    symbol.size = function(_) {\n        if (!arguments.length) return size;\n        size = d3.functor(_);\n        return symbol;\n    };\n    return symbol;\n};\n\n\n/*\nInherit option getter/setter functions from source to target\nd3.rebind makes calling the function on target actually call it on source\nAlso track via _inherited and _d3options so we can track what we inherit\nfor documentation generation purposes and chained inheritance\n*/\nnv.utils.inheritOptions = function(target, source) {\n    // inherit all the things\n    var ops = Object.getOwnPropertyNames(source._options || {});\n    var calls = Object.getOwnPropertyNames(source._calls || {});\n    var inherited = source._inherited || [];\n    var d3ops = source._d3options || [];\n    var args = ops.concat(calls).concat(inherited).concat(d3ops);\n    args.unshift(source);\n    args.unshift(target);\n    d3.rebind.apply(this, args);\n    // pass along the lists to keep track of them, don't allow duplicates\n    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));\n    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));\n};\n\n\n/*\nRuns common initialize code on the svg before the chart builds\n*/\nnv.utils.initSVG = function(svg) {\n    svg.classed({'nvd3-svg':true});\n};\n\n\n/*\nSanitize and provide default for the container height.\n*/\nnv.utils.sanitizeHeight = function(height, container) {\n    return (height || parseInt(container.style('height'), 10) || 400);\n};\n\n\n/*\nSanitize and provide default for the container width.\n*/\nnv.utils.sanitizeWidth = function(width, container) {\n    return (width || parseInt(container.style('width'), 10) || 960);\n};\n\n\n/*\nCalculate the available height for a chart.\n*/\nnv.utils.availableHeight = function(height, container, margin) {\n    return Math.max(0,nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n};\n\n/*\nCalculate the available width for a chart.\n*/\nnv.utils.availableWidth = function(width, container, margin) {\n    return Math.max(0,nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);\n};\n\n/*\nClear any rendered chart components and display a chart's 'noData' message\n*/\nnv.utils.noData = function(chart, container) {\n    var opt = chart.options(),\n        margin = opt.margin(),\n        noData = opt.noData(),\n        data = (noData == null) ? [\"No Data Available.\"] : [noData],\n        height = nv.utils.availableHeight(null, container, margin),\n        width = nv.utils.availableWidth(null, container, margin),\n        x = margin.left + width/2,\n        y = margin.top + height/2;\n\n    //Remove any previously created chart components\n    container.selectAll('g').remove();\n\n    var noDataText = container.selectAll('.nv-noData').data(data);\n\n    noDataText.enter().append('text')\n        .attr('class', 'nvd3 nv-noData')\n        .attr('dy', '-.7em')\n        .style('text-anchor', 'middle');\n\n    noDataText\n        .attr('x', x)\n        .attr('y', y)\n        .text(function(t){ return t; });\n};\n\n/*\n Wrap long labels.\n */\nnv.utils.wrapTicks = function (text, width) {\n    text.each(function() {\n        var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1,\n            y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(\" \"));\n                line = [word];\n                tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n            }\n        }\n    });\n};\n\n/*\nCheck equality of 2 array\n*/\nnv.utils.arrayEquals = function (array1, array2) {\n    if (array1 === array2)\n        return true;\n\n    if (!array1 || !array2)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (array1.length != array2.length)\n        return false;\n\n    for (var i = 0,\n        l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!nv.arrayEquals(array1[i], array2[i]))\n                return false;\n        } else if (array1[i] != array2[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n Check if a point within an arc\n */\nnv.utils.pointIsInArc = function(pt, ptData, d3Arc) {\n    // Center of the arc is assumed to be 0,0\n    // (pt.x, pt.y) are assumed to be relative to the center\n    var r1 = d3Arc.innerRadius()(ptData), // Note: Using the innerRadius\n      r2 = d3Arc.outerRadius()(ptData),\n      theta1 = d3Arc.startAngle()(ptData),\n      theta2 = d3Arc.endAngle()(ptData);\n\n    var dist = pt.x * pt.x + pt.y * pt.y,\n      angle = Math.atan2(pt.x, -pt.y); // Note: different coordinate system.\n\n    angle = (angle < 0) ? (angle + Math.PI * 2) : angle;\n\n    return (r1 * r1 <= dist) && (dist <= r2 * r2) &&\n      (theta1 <= angle) && (angle <= theta2);\n};\n\nnv.models.axis = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var axis = d3.svg.axis();\n    var scale = d3.scale.linear();\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 75 //only used for tickLabel currently\n        , height = 60 //only used for tickLabel currently\n        , axisLabelText = null\n        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n        , rotateLabels = 0\n        , rotateYLabel = true\n        , staggerLabels = false\n        , isOrdinal = false\n        , ticks = null\n        , axisLabelDistance = 0\n        , fontSize = undefined\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        , tickFormatMaxMin\n        ;\n    axis\n        .scale(scale)\n        .orient('bottom')\n        .tickFormat(function(d) { return d })\n    ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            if (ticks !== null)\n                axis.ticks(ticks);\n            else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\n            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n            g.watchTransition(renderWatch, 'axis').call(axis);\n\n            scale0 = scale0 || axis.scale();\n\n            var fmt = axis.tickFormat();\n            if (fmt == null) {\n                fmt = scale0.tickFormat();\n            }\n\n            var axisLabel = g.selectAll('text.nv-axislabel')\n                .data([axisLabelText || null]);\n            axisLabel.exit().remove();\n\n            //only skip when fontSize is undefined so it can be cleared with a null or blank string\n            if (fontSize !== undefined) {\n                g.selectAll('g').select(\"text\").style('font-size', fontSize);\n            }\n\n            var xLabelMargin;\n            var axisMaxMin;\n            var w;\n            switch (axis.orient()) {\n                case 'top':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                  w = 0;\n                  if (scale.range().length === 1) {\n                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                  } else if (scale.range().length === 2) {\n                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                  } else if ( scale.range().length > 2){\n                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                  };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', 0)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '-0.5em')\n                            .attr('y', -axis.tickPadding())\n                            .attr('text-anchor', 'middle')\n                            .text(function(d,i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max top')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'\n                            });\n                    }\n                    break;\n                case 'bottom':\n                    xLabelMargin = axisLabelDistance + 36;\n                    var maxTextWidth = 30;\n                    var textHeight = 0;\n                    var xTicks = g.selectAll('g').select(\"text\");\n                    var rotateLabelsRule = '';\n                    if (rotateLabels%360) {\n                        //Reset transform on ticks so textHeight can be calculated correctly\n                        xTicks.attr('transform', '');\n                        //Calculate the longest xTick width\n                        xTicks.each(function(d,i){\n                            var box = this.getBoundingClientRect();\n                            var width = box.width;\n                            textHeight = box.height;\n                            if(width > maxTextWidth) maxTextWidth = width;\n                        });\n                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';\n                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n                        //Rotate all xTicks\n                        xTicks\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n                    } else {\n                        if (staggerLabels) {\n                            xTicks\n                                .attr('transform', function(d,i) {\n                                    return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'\n                                });\n                        } else {\n                            xTicks.attr('transform', \"translate(0,0)\");\n                        }\n                    }\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    w = 0;\n                    if (scale.range().length === 1) {\n                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                    } else if (scale.range().length === 2) {\n                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                    } else if ( scale.range().length > 2){\n                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                    };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', xLabelMargin)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        //if (showMaxMin && !isOrdinal) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            //.data(scale.domain())\n                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '.71em')\n                            .attr('y', axis.tickPadding())\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n                            .text(function(d,i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            });\n                    }\n\n                    break;\n                case 'right':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12 - (axisLabelDistance || 0)) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                       \taxisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', axis.tickPadding())\n                            .style('text-anchor', 'start')\n                            .text(function(d, i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n                case 'left':\n                    /*\n                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n                     var yTicks = g.selectAll('g').select(\"text\");\n                     yTicks.each(function(d,i){\n                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;\n                     if(labelPadding > width) width = labelPadding;\n                     });\n                     */\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)\n                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', -axis.tickPadding())\n                            .attr('text-anchor', 'end')\n                            .text(function(d,i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n            }\n            axisLabel.text(function(d) { return d });\n\n            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n                //check if max and min overlap other values, if so, hide the values that overlap\n                g.selectAll('g') // the g's wrapping each tick\n                    .each(function(d,i) {\n                        d3.select(this).select('text').attr('opacity', 1);\n                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                                d3.select(this).attr('opacity', 0);\n\n                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n                        }\n                    });\n\n                //if Max and Min = 0 only show min, Issue #281\n                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {\n                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {\n                        return !i ? 1 : 0\n                    });\n                }\n            }\n\n            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n                var maxMinRange = [];\n                wrap.selectAll('g.nv-axisMaxMin')\n                    .each(function(d,i) {\n                        try {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)\n                        }catch (err) {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + 4);\n                        }\n                    });\n                // the g's wrapping each tick\n                g.selectAll('g').each(function(d, i) {\n                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                            d3.select(this).remove();\n                        else\n                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n                    }\n                });\n            }\n\n            //Highlight zero tick line\n            g.selectAll('.tick')\n                .filter(function (d) {\n                    /*\n                    The filter needs to return only ticks at or near zero.\n                    Numbers like 0.00001 need to count as zero as well,\n                    and the arithmetic trick below solves that.\n                    */\n                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)\n                })\n                .classed('zero', true);\n\n            //store old scales for use in transitions on update\n            scale0 = scale.copy();\n\n        });\n\n        renderWatch.renderEnd('axis immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.axis = axis;\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},\n        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},\n        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},\n        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},\n        height:            {get: function(){return height;}, set: function(_){height=_;}},\n        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        width:             {get: function(){return width;}, set: function(_){width=_;}},\n        fontSize:          {get: function(){return fontSize;}, set: function(_){fontSize=_;}},\n        tickFormatMaxMin:  {get: function(){return tickFormatMaxMin;}, set: function(_){tickFormatMaxMin=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top !== undefined    ? _.top    : margin.top;\n            margin.right  = _.right !== undefined  ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left !== undefined   ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration=_;\n            renderWatch.reset(duration);\n        }},\n        scale: {get: function(){return scale;}, set: function(_){\n            scale = _;\n            axis.scale(scale);\n            isOrdinal = typeof scale.rangeBands === 'function';\n            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);\n    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n\n    return chart;\n};\nnv.models.boxPlot = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0},\n        width = 960,\n        height = 500,\n        id = Math.floor(Math.random() * 10000), // Create semi-unique ID in case user doesn't select one\n        xScale = d3.scale.ordinal(),\n        yScale = d3.scale.linear(),\n        getX  = function(d) { return d.label }, // Default data model selectors.\n        getQ1 = function(d) { return d.values.Q1 },\n        getQ2 = function(d) { return d.values.Q2 },\n        getQ3 = function(d) { return d.values.Q3 },\n        getWl = function(d) { return d.values.whisker_low },\n        getWh = function(d) { return d.values.whisker_high },\n        getColor = function(d) { return d.color },\n        getOlItems  = function(d) { return d.values.outliers },\n        getOlValue = function(d, i, j) { return d },\n        getOlLabel = function(d, i, j) { return d },\n        getOlColor = function(d, i, j) { return undefined },\n        color = nv.utils.defaultColor(),\n        container = null,\n        xDomain, xRange,\n        yDomain, yRange,\n        dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'),\n        duration = 250,\n        maxBoxWidth = null;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var xScale0, yScale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            xScale.domain(xDomain || data.map(function(d,i) { return getX(d,i); }))\n                .rangeBands(xRange || [0, availableWidth], 0.1);\n\n            // if we know yDomain, no need to calculate\n            var yData = []\n            if (!yDomain) {\n                // (y-range is based on quartiles, whiskers and outliers)\n                var values = [], yMin, yMax;\n                data.forEach(function (d, i) {\n                    var q1 = getQ1(d), q3 = getQ3(d), wl = getWl(d), wh = getWh(d);\n                    var olItems = getOlItems(d);\n                    if (olItems) {\n                        olItems.forEach(function (e, i) {\n                            values.push(getOlValue(e, i, undefined));\n                        });\n                    }\n                    if (wl) { values.push(wl) }\n                    if (q1) { values.push(q1) }\n                    if (q3) { values.push(q3) }\n                    if (wh) { values.push(wh) }\n                });\n                yMin = d3.min(values);\n                yMax = d3.max(values);\n                yData = [ yMin, yMax ] ;\n            }\n\n            yScale.domain(yDomain || yData);\n            yScale.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            xScale0 = xScale0 || xScale;\n            yScale0 = yScale0 || yScale.copy().range([yScale(0),yScale(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });\n            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);\n            boxplots\n                .attr('class', 'nv-boxplot')\n                .attr('transform', function(d,i,j) { return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)'; })\n                .classed('hover', function(d) { return d.hover });\n            boxplots\n                .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', 0.75)\n                .delay(function(d,i) { return i * duration / data.length })\n                .attr('transform', function(d,i) {\n                    return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)';\n                });\n            boxplots.exit().remove();\n\n            // ----- add the SVG elements for each boxPlot -----\n\n            // conditionally append whisker lines\n            boxEnter.each(function(d,i) {\n                var box = d3.select(this);\n                [getWl, getWh].forEach(function (f) {\n                    if (f(d) !== undefined && f(d) !== null) {\n                        var key = (f === getWl) ? 'low' : 'high';\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);\n                    }\n                });\n            });\n\n            var box_width = function() { return (maxBoxWidth === null ? xScale.rangeBand() * 0.9 : Math.min(75, xScale.rangeBand() * 0.9)); };\n            var box_left  = function() { return xScale.rangeBand() * 0.45 - box_width()/2; };\n            var box_right = function() { return xScale.rangeBand() * 0.45 + box_width()/2; };\n\n            // update whisker lines and ticks\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                var endpoint = (f === getWl) ? getQ1 : getQ3;\n                boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', xScale.rangeBand() * 0.45 )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', xScale.rangeBand() * 0.45 )\n                    .attr('y2', function(d,i) { return yScale(endpoint(d)); });\n                boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', box_left )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', box_right )\n                    .attr('y2', function(d,i) { return yScale(f(d)); });\n            });\n\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                boxEnter.selectAll('.nv-boxplot-' + key)\n                  .on('mouseover', function(d,i,j) {\n                      d3.select(this).classed('hover', true);\n                      dispatch.elementMouseover({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mouseout', function(d,i,j) {\n                      d3.select(this).classed('hover', false);\n                      dispatch.elementMouseout({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mousemove', function(d,i) {\n                      dispatch.elementMousemove({e: d3.event});\n                  });\n            });\n\n            // boxes\n            boxEnter.append('rect')\n                .attr('class', 'nv-boxplot-box')\n                // tooltip events\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n\n            // box transitions\n            boxplots.select('rect.nv-boxplot-box')\n              .watchTransition(renderWatch, 'nv-boxplot: boxes')\n                .attr('y', function(d,i) { return yScale(getQ3(d)); })\n                .attr('width', box_width)\n                .attr('x', box_left )\n                .attr('height', function(d,i) { return Math.abs(yScale(getQ3(d)) - yScale(getQ1(d))) || 1 })\n                .style('fill', function(d,i) { return getColor(d) || color(d,i) })\n                .style('stroke', function(d,i) { return getColor(d) || color(d,i) });\n\n            // median line\n            boxEnter.append('line').attr('class', 'nv-boxplot-median');\n\n            boxplots.select('line.nv-boxplot-median')\n              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')\n                .attr('x1', box_left)\n                .attr('y1', function(d,i) { return yScale(getQ2(d)); })\n                .attr('x2', box_right)\n                .attr('y2', function(d,i) { return yScale(getQ2(d)); });\n\n            // outliers\n            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {\n                return getOlItems(d) || [];\n            });\n            outliers.enter().append('circle')\n                .style('fill', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('stroke', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('z-index', 9000)\n                .on('mouseover', function(d,i,j) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i,j) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n            outliers.attr('class', 'nv-boxplot-outlier');\n            outliers\n              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')\n                .attr('cx', xScale.rangeBand() * 0.45)\n                .attr('cy', function(d,i,j) { return yScale(getOlValue(d,i,j)); })\n                .attr('r', '3');\n            outliers.exit().remove();\n\n            //store old scales for use in transitions on update\n            xScale0 = xScale.copy();\n            yScale0 = yScale.copy();\n        });\n\n        renderWatch.renderEnd('nv-boxplot immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:       {get: function(){return width;}, set: function(_){width=_;}},\n        height:      {get: function(){return height;}, set: function(_){height=_;}},\n        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},\n        x:           {get: function(){return getX;}, set: function(_){getX=_;}},\n        q1: {get: function(){return getQ1;}, set: function(_){getQ1=_;}},\n        q2: {get: function(){return getQ2;}, set: function(_){getQ2=_;}},\n        q3: {get: function(){return getQ3;}, set: function(_){getQ3=_;}},\n        wl: {get: function(){return getWl;}, set: function(_){getWl=_;}},\n        wh: {get: function(){return getWh;}, set: function(_){getWh=_;}},\n        itemColor:    {get: function(){return getColor;}, set: function(_){getColor=_;}},\n        outliers:     {get: function(){return getOlItems;}, set: function(_){getOlItems=_;}},\n        outlierValue: {get: function(){return getOlValue;}, set: function(_){getOlValue=_;}},\n        outlierLabel: {get: function(){return getOlLabel;}, set: function(_){getOlLabel=_;}},\n        outlierColor: {get: function(){return getOlColor;}, set: function(_){getOlColor=_;}},\n        xScale:  {get: function(){return xScale;}, set: function(_){xScale=_;}},\n        yScale:  {get: function(){return yScale;}, set: function(_){yScale=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n        y: {\n            get: function() {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n                return {};\n            },\n            set: function(_) {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n            }\n        },\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.boxPlotChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var boxplot = nv.models.boxPlot(),\n        xAxis = nv.models.axis(),\n        yAxis = nv.models.axis();\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60},\n        width = null,\n        height = null,\n        color = nv.utils.getColor(),\n        showXAxis = true,\n        showYAxis = true,\n        rightAlignYAxis = false,\n        staggerLabels = false,\n        tooltip = nv.models.tooltip(),\n        x, y,\n        noData = 'No Data Available.',\n        dispatch = d3.dispatch('beforeUpdate', 'renderEnd'),\n        duration = 250;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip.duration(0);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(boxplot);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this), that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = (width  || parseInt(container.style('width')) || 960) - margin.left - margin.right;\n            var availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // TODO still need to find a way to validate quartile data presence using boxPlot callbacks.\n            // Display No Data message if there's nothing to show. (quartiles required at minimum).\n            if (!data || !data.length) {\n                var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n                noDataText.enter().append('text')\n                    .attr('class', 'nvd3 nv-noData')\n                    .attr('dy', '-.7em')\n                    .style('text-anchor', 'middle');\n\n                noDataText\n                    .attr('x', margin.left + availableWidth / 2)\n                    .attr('y', margin.top + availableHeight / 2)\n                    .text(function(d) { return d });\n\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = boxplot.xScale();\n            y = boxplot.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(' + availableWidth + ',0)');\n            }\n\n            // Main Chart Component(s)\n            boxplot.width(availableWidth).height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n\n            barsWrap.transition().call(boxplot);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + boxplot.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 === 0 ? '5' : '17') + ')' })\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select('.nv-zeroLine line')\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', y(0))\n                .attr('y2', y(0))\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n        });\n\n        renderWatch.renderEnd('nv-boxplot chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip.data(evt).hidden(false);\n    });\n\n    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.data(evt).hidden(true);\n    });\n\n    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.boxplot = boxplot;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            boxplot.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            boxplot.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, boxplot);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\n\nnv.models.bullet = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , orient = 'left' // TODO top & bottom\n        , reverse = false\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , markerLines = function(d) { return d.markerLines ? d.markerLines : [0] }\n        , measures = function(d) { return d.measures }\n        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n        , markerLineLabels = function(d) { return d.markerLineLabels ? d.markerLineLabels : []  }\n        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , width = 380\n        , height = 30\n        , container = null\n        , tickFormat = null\n        , color = nv.utils.getColor(['#1f77b4'])\n        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')\n        , defaultRangeLabels = [\"Maximum\", \"Mean\", \"Minimum\"]\n        , legacyRangeClassNames = [\"Max\", \"Avg\", \"Min\"]\n        , duration = 1000\n        ;\n\n    function sortLabels(labels, values){\n        var lz = labels.slice();\n        labels.sort(function(a, b){\n            var iA = lz.indexOf(a);\n            var iB = lz.indexOf(b);\n            return d3.descending(values[iA], values[iB]);\n        });\n    };\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var rangez = ranges.call(this, d, i).slice(),\n                markerz = markers.call(this, d, i).slice(),\n                markerLinez = markerLines.call(this, d, i).slice(),\n                measurez = measures.call(this, d, i).slice(),\n                rangeLabelz = rangeLabels.call(this, d, i).slice(),\n                markerLabelz = markerLabels.call(this, d, i).slice(),\n                markerLineLabelz = markerLineLabels.call(this, d, i).slice(),\n                measureLabelz = measureLabels.call(this, d, i).slice();\n\n            // Sort labels according to their sorted values\n            sortLabels(rangeLabelz, rangez);\n            sortLabels(markerLabelz, markerz);\n            sortLabels(markerLineLabelz, markerLinez);\n            sortLabels(measureLabelz, measurez);\n\n            // sort values descending\n            rangez.sort(d3.descending);\n            markerz.sort(d3.descending);\n            markerLinez.sort(d3.descending);\n            measurez.sort(d3.descending);\n\n            // Setup Scales\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain( d3.extent(d3.merge([forceX, rangez])) )\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var rangeMin = d3.min(rangez), //rangez[2]\n                rangeMax = d3.max(rangez), //rangez[0]\n                rangeAvg = rangez[1];\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var rangeClassNames = 'nv-range nv-range'+i;\n                if(i <= 2){\n                    rangeClassNames = rangeClassNames + ' nv-range'+legacyRangeClassNames[i];\n                }\n                gEnter.append('rect').attr('class', rangeClassNames);\n            }\n\n            gEnter.append('rect').attr('class', 'nv-measure');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var range = rangez[i];\n                g.select('rect.nv-range'+i)\n                    .datum(range)\n                    .attr('height', availableHeight)\n                    .transition()\n                    .duration(duration)\n                    .attr('width', w1(range))\n                    .attr('x', xp1(range))\n            }\n\n            g.select('rect.nv-measure')\n                .style('fill', color)\n                .attr('height', availableHeight / 3)\n                .attr('y', availableHeight / 3)\n                .on('mouseover', function() {\n                    dispatch.elementMouseover({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function() {\n                    dispatch.elementMouseout({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .transition()\n                .duration(duration)\n                .attr('width', measurez < 0 ?\n                    x1(0) - x1(measurez[0])\n                    : x1(measurez[0]) - x1(0))\n                .attr('x', xp1(measurez));\n\n            var h3 =  availableHeight / 6;\n\n            var markerData = markerz.map( function(marker, index) {\n                return {value: marker, label: markerLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .enter()\n              .append('path')\n              .attr('class', 'nv-markerTriangle')\n              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .transition()\n              .duration(duration)\n              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });\n\n            var markerLinesData = markerLinez.map( function(marker, index) {\n                return {value: marker, label: markerLineLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .enter()\n              .append('line')\n              .attr('cursor', '')\n              .attr('class', 'nv-markerLine')\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('y1', '2')\n              .attr('x2', function(d) { return x1(d.value) })\n              .attr('y2', availableHeight - 2)\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .transition()\n              .duration(duration)\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('x2', function(d) { return x1(d.value) });\n\n            wrap.selectAll('.nv-range')\n                .on('mouseover', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseover({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Previous',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseout({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        duration:    {get: function(){return duration;}, set: function(_){duration=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\n\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\nnv.models.bulletChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bullet = nv.models.bullet();\n    var tooltip = nv.models.tooltip();\n\n    var orient = 'left' // TODO top & bottom\n        , reverse = false\n        , margin = {top: 5, right: 40, bottom: 20, left: 120}\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , measures = function(d) { return d.measures }\n        , width = null\n        , height = 55\n        , tickFormat = null\n        , ticks = null\n        , noData = null\n        , dispatch = d3.dispatch()\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false);\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom,\n                that = this;\n\n            chart.update = function() { chart(selection) };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!d || !ranges.call(this, d, i)) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n                markerz = markers.call(this, d, i).slice().sort(d3.descending),\n                measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bulletWrap');\n            gEnter.append('g').attr('class', 'nv-titles');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain([0, Math.max(rangez[0], (markerz[0] || 0), measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\n            var title = gEnter.select('.nv-titles').append('g')\n                .attr('text-anchor', 'end')\n                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n            title.append('text')\n                .attr('class', 'nv-title')\n                .text(function(d) { return d.title; });\n\n            title.append('text')\n                .attr('class', 'nv-subtitle')\n                .attr('dy', '1em')\n                .text(function(d) { return d.subtitle; });\n\n            bullet\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var bulletWrap = g.select('.nv-bulletWrap');\n            d3.transition(bulletWrap).call(bullet);\n\n            // Compute the tick format.\n            var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\n            // Update the tick groups.\n            var tick = g.selectAll('g.nv-tick')\n                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {\n                    return this.textContent || format(d);\n                });\n\n            // Initialize the ticks with the old scale, x0.\n            var tickEnter = tick.enter().append('g')\n                .attr('class', 'nv-tick')\n                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n                .style('opacity', 1e-6);\n\n            tickEnter.append('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickEnter.append('text')\n                .attr('text-anchor', 'middle')\n                .attr('dy', '1em')\n                .attr('y', availableHeight * 7 / 6)\n                .text(format);\n\n            // Transition the updating ticks to the new scale, x1.\n            var tickUpdate = d3.transition(tick)\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1);\n\n            tickUpdate.select('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickUpdate.select('text')\n                .attr('y', availableHeight * 7 / 6);\n\n            // Transition the exiting ticks to the new scale, x1.\n            d3.transition(tick.exit())\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1e-6)\n                .remove();\n        });\n\n        d3.timer.flush();\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: evt.label,\n            value: evt.value,\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.bullet = bullet;\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bullet);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n\nnv.models.candlestickBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Width of the candlestick bars.\n            var barWidth = (availableWidth / data[0].values.length) * .45;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            var tickGroups = ticks.enter().append('g');\n\n            // The colors are currently controlled by CSS.\n            ticks\n                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});\n\n            var lines = tickGroups.append('line')\n                .attr('class', 'nv-candlestick-lines')\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            var rects = tickGroups.append('rect')\n                .attr('class', 'nv-candlestick-rects nv-bars')\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n\n            ticks.select('.nv-candlestick-lines').transition()\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            ticks.select('.nv-candlestick-rects').transition()\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-candlestickBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-candlestickBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.cumulativeLineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , showControls = true\n        , useInteractiveGuideline = false\n        , rescaleY = true\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , id = lines.id()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , average = function(d) { return d.average }\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        , duration = 250\n        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n        ;\n\n    state.index = 0;\n    state.rescaleY = rescaleY;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var dx = d3.scale.linear()\n        , index = {i: 0, x: 0}\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        , currentYDomain\n        ;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                index: index.i,\n                rescaleY: rescaleY\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.index !== undefined)\n                index.i = state.index;\n            if (state.rescaleY !== undefined)\n                rescaleY = state.rescaleY;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            container.classed('nv-chart-' + id, true);\n            var that = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart)\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            var indexDrag = d3.behavior.drag()\n                .on('dragstart', dragStart)\n                .on('drag', dragMove)\n                .on('dragend', dragEnd);\n\n\n            function dragStart(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'ew-resize');\n            }\n\n            function dragMove(d,i) {\n                index.x = d3.event.x;\n                index.i = Math.round(dx.invert(index.x));\n                updateZero();\n            }\n\n            function dragEnd(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'auto');\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n\n            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length\n                .range([0, availableWidth])\n                .clamp(true);\n\n            var data = indexify(index.i, data);\n\n            // initialize the starting yDomain for the not-rescale case after indexify (to have calculated point.display)\n            if (typeof(currentYDomain) === \"undefined\") {\n                currentYDomain = getCurrentYDomain(data);\n            }\n\n            if (!rescaleY) {\n                lines.yDomain(currentYDomain);\n                lines.clipEdge(true);\n            } else {\n                lines.yDomain(null);\n            }\n\n            // Setup containers and skeleton of chart\n            var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-interactive');\n            gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-background');\n            gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: 'Re-scale y-axis', disabled: !rescaleY }\n                ];\n\n                controls\n                    .width(140)\n                    .color(['#444', '#444', '#444'])\n                    .rightAlign(false)\n                    .margin({top: 5, right: 0, bottom: 5, left: 20})\n                ;\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Show error if index point value is 0 (division by zero avoided)\n            var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\n            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n            if (tempDisabled.length) {\n                wrap.append('text').attr('class', 'tempDisabled')\n                    .attr('x', availableWidth / 2)\n                    .attr('y', '-.71em')\n                    .style('text-anchor', 'end')\n                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left,top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            gEnter.select('.nv-background')\n                .append('rect');\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                //.x(function(d) { return d.x })\n                .y(function(d) { return d.display.y })\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\n            linesWrap.call(lines);\n\n            //Store a series index number in the data array.\n            data.forEach(function(d,i) {\n                d.seriesIndex = i;\n            });\n\n            var avgLineData = data.filter(function(d) {\n                return !d.disabled && !!average(d);\n            });\n\n            var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n                .data(avgLineData, function(d) { return d.key; });\n\n            var getAvgLineY = function(d) {\n                //If average lines go off the svg element, clamp them to the svg bounds.\n                var yVal = y(average(d));\n                if (yVal < 0) return 0;\n                if (yVal > availableHeight) return availableHeight;\n                return yVal;\n            };\n\n            avgLines.enter()\n                .append('line')\n                .style('stroke-width',2)\n                .style('stroke-dasharray','10,10')\n                .style('stroke',function (d,i) {\n                    return lines.color()(d,d.seriesIndex);\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines\n                .style('stroke-opacity',function(d){\n                    //If average lines go offscreen, make them transparent\n                    var yVal = y(average(d));\n                    if (yVal < 0 || yVal > availableHeight) return 0;\n                    return 1;\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines.exit().remove();\n\n            //Create index line\n            var indexLine = linesWrap.selectAll('.nv-indexLine')\n                .data([index]);\n            indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n                .attr('width', 3)\n                .attr('x', -2)\n                .attr('fill', 'red')\n                .attr('fill-opacity', .5)\n                .style(\"pointer-events\",\"all\")\n                .call(indexDrag);\n\n            indexLine\n                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n                .attr('height', availableHeight);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            function updateZero() {\n                indexLine\n                    .data([index]);\n\n                //When dragging the index line, turn off line transitions.\n                // Then turn them back on when done dragging.\n                var oldDuration = chart.duration();\n                chart.duration(0);\n                chart.update();\n                chart.duration(oldDuration);\n            }\n\n            g.select('.nv-background rect')\n                .on('click', function() {\n                    index.x = d3.mouse(this)[0];\n                    index.i = Math.round(dx.invert(index.x));\n\n                    // update state and send stateChange with new index\n                    state.index = index.i;\n                    dispatch.stateChange(state);\n\n                    updateZero();\n                });\n\n            lines.dispatch.on('elementClick', function(e) {\n                index.i = e.pointIndex;\n                index.x = dx(index.i);\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n\n                updateZero();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n                rescaleY = !d.disabled;\n                state.rescaleY = rescaleY;\n                if (!rescaleY) {\n                    currentYDomain = getCurrentYDomain(data); // rescale is turned off, so set the currentYDomain\n                }\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !(series.disabled || series.tempDisabled);\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        lines.highlightPoint(i, pointIndex, true);\n                        var point = series.values[pointIndex];\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex)\n                        });\n                    });\n\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.index !== 'undefined') {\n                    index.i = e.index;\n                    index.x = dx(index.i);\n\n                    state.index = e.index;\n\n                    indexLine\n                        .data([index]);\n                }\n\n                if (typeof e.rescaleY !== 'undefined') {\n                    rescaleY = e.rescaleY;\n                }\n\n                chart.update();\n            });\n\n        });\n\n        renderWatch.renderEnd('cumulativeLineChart immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        var point = {\n            x: chart.x()(evt.point),\n            y: chart.y()(evt.point),\n            color: evt.point.color\n        };\n        evt.point = point;\n        tooltip.data(evt).hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    //============================================================\n    // Functions\n    //------------------------------------------------------------\n\n    var indexifyYGetter = null;\n    /* Normalize the data according to an index point. */\n    function indexify(idx, data) {\n        if (!indexifyYGetter) indexifyYGetter = lines.y();\n        return data.map(function(line, i) {\n            if (!line.values) {\n                return line;\n            }\n            var indexValue = line.values[idx];\n            if (indexValue == null) {\n                return line;\n            }\n            var v = indexifyYGetter(indexValue, idx);\n\n            // avoid divide by zero\n            if (Math.abs(v) < 0.00001 && !noErrorCheck) {\n                line.tempDisabled = true;\n                return line;\n            }\n\n            line.tempDisabled = false;\n\n            line.values = line.values.map(function(point, pointIndex) {\n                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / v };\n                return point;\n            });\n\n            return line;\n        })\n    }\n\n    function getCurrentYDomain(data) {\n        var seriesDomains = data\n            .filter(function(series) { return !(series.disabled || series.tempDisabled)})\n            .map(function(series,i) {\n                return d3.extent(series.values, function (d) { return d.display.y });\n            });\n\n        return [\n            d3.min(seriesDomains, function(d) { return d[0] }),\n            d3.max(seriesDomains, function(d) { return d[1] })\n        ];\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        average: {get: function(){return average;}, set: function(_){average=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},\n\n        // options that require extra logic in the setter\n        rescaleY:     {get: function(){return rescaleY;}, set: function(_){\n            rescaleY = _;\n            chart.state.rescaleY = _; // also update state\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n                chart.useVoronoi(false);\n            }\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        duration:    {get: function(){return duration;}, set: function(_){\n            duration = _;\n            lines.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating by adding necessary features to multiBar model\nnv.models.discreteBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , showValues = false\n        , valueFormat = d3.format(',.2f')\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , rectClass = 'discreteBar'\n        , duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n                    })\n                });\n\n            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], .1);\n            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\n            // If showValues, pad the Y axis range to account for label height\n            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n            else y.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            x0 = x0 || x;\n            y0 = y0 || y.copy().range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .watchTransition(renderWatch, 'discreteBar: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover });\n            groups\n                .watchTransition(renderWatch, 'discreteBar: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .75);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n                })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            barsEnter.append('rect')\n                .attr('height', 0)\n                .attr('width', x.rangeBand() * .9 / data.length )\n\n            if (showValues) {\n                barsEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                ;\n\n                bars.select('text')\n                    .text(function(d,i) { return valueFormat(getY(d,i)) })\n                    .watchTransition(renderWatch, 'discreteBar: bars text')\n                    .attr('x', x.rangeBand() * .9 / 2)\n                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\n                ;\n            } else {\n                bars.selectAll('text').remove();\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n                .style('fill', function(d,i) { return d.color || color(d,i) })\n                .style('stroke', function(d,i) { return d.color || color(d,i) })\n                .select('rect')\n                .attr('class', rectClass)\n                .watchTransition(renderWatch, 'discreteBar: bars rect')\n                .attr('width', x.rangeBand() * .9 / data.length);\n            bars.watchTransition(renderWatch, 'discreteBar: bars')\n                //.delay(function(d,i) { return i * 1200 / data[0].values.length })\n                .attr('transform', function(d,i) {\n                    var left = x(getX(d,i)) + x.rangeBand() * .05,\n                        top = getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 : //make 1 px positive bars show up above y=0\n                            y(getY(d,i));\n\n                    return 'translate(' + left + ', ' + top + ')'\n                })\n                .select('rect')\n                .attr('height', function(d,i) {\n                    return  Math.max(Math.abs(y(getY(d,i)) - y(0)), 1)\n                });\n\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('discreteBar immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.discreteBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var discretebar = nv.models.discreteBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n\t, legend = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.getColor()\n\t, showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x\n        , y\n        , noData = null\n        , dispatch = d3.dispatch('beforeUpdate','renderEnd')\n        , duration = 250\n        ;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .keyFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(discretebar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = discretebar.xScale();\n            y = discretebar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t    gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            discretebar\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(discretebar);\n\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + discretebar.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n                }\n\n                if (rotateLabels) {\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\",0)\n                .attr(\"x2\",(rightAlignYAxis) ? -availableWidth : availableWidth)\n                .attr(\"y1\", y(0))\n                .attr(\"y2\", y(0))\n            ;\n        });\n\n        renderWatch.renderEnd('discreteBar chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.discretebar = discretebar;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\tshowLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:  {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        wrapLabels:  {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            discretebar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            discretebar.color(color);\n\t    legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, discretebar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\nnv.models.distribution = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 400 //technically width or height depending on x or y....\n        , size = 8\n        , axis = 'x' // 'x' or 'y'... horizontal or vertical\n        , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n        , color = nv.utils.defaultColor()\n        , scale = d3.scale.linear()\n        , domain\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n                naxis = axis == 'x' ? 'y' : 'x',\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //------------------------------------------------------------\n            // Setup Scales\n\n            scale0 = scale0 || scale;\n\n            //------------------------------------------------------------\n\n\n            //------------------------------------------------------------\n            // Setup containers and skeleton of chart\n\n            var wrap = container.selectAll('g.nv-distribution').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            //------------------------------------------------------------\n\n\n            var distWrap = g.selectAll('g.nv-dist')\n                .data(function(d) { return d }, function(d) { return d.key });\n\n            distWrap.enter().append('g');\n            distWrap\n                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n                .style('stroke', function(d,i) { return color(d, i) });\n\n            var dist = distWrap.selectAll('line.nv-dist' + axis)\n                .data(function(d) { return d.values })\n            dist.enter().append('line')\n                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n                .style('stroke-opacity', 0)\n                .remove();\n            dist\n                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n                .attr(naxis + '1', 0)\n                .attr(naxis + '2', size);\n            renderWatch.transition(dist, 'dist')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\n\n            scale0 = scale.copy();\n\n        });\n        renderWatch.renderEnd('distribution immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart.dispatch = dispatch;\n\n    chart.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return chart;\n    };\n\n    chart.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return chart;\n    };\n\n    chart.axis = function(_) {\n        if (!arguments.length) return axis;\n        axis = _;\n        return chart;\n    };\n\n    chart.size = function(_) {\n        if (!arguments.length) return size;\n        size = _;\n        return chart;\n    };\n\n    chart.getData = function(_) {\n        if (!arguments.length) return getData;\n        getData = d3.functor(_);\n        return chart;\n    };\n\n    chart.scale = function(_) {\n        if (!arguments.length) return scale;\n        scale = _;\n        return chart;\n    };\n\n    chart.color = function(_) {\n        if (!arguments.length) return color;\n        color = nv.utils.getColor(_);\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        return chart;\n    };\n    //============================================================\n\n\n    return chart;\n}\nnv.models.focus = function(content) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var content = content || nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , brush = d3.svg.brush()\n        ;\n\n    var margin = {top: 10, right: 0, bottom: 30, left: 0}\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = 70\n        , showXAxis = true\n        , showYAxis = false\n        , rightAlignYAxis = false\n        , ticks = null\n        , x\n        , y\n        , brushExtent = null\n        , duration = 250\n        , dispatch = d3.dispatch('brush', 'onBrush', 'renderEnd')\n        , syncBrushing = true\n        ;\n\n    content.interactive(false);\n    content.pointActive(function(d) { return false; });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(content);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom;\n\n            chart.update = function() { \n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            // Setup Scales\n            x = content.xScale();\n            y = content.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-focus').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-focus').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            gEnter.append('g').attr('class', 'nv-background').append('rect');\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-contentWrap');\n            gEnter.append('g').attr('class', 'nv-brushBackground');\n            gEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n                \n            content\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var contentWrap = g.select('.nv-contentWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            d3.transition(contentWrap).call(content);\n            \n            // Setup Brush\n            brush\n                .x(x)\n                .on('brush', function() {\n                    onBrush(syncBrushing);\n                });\n\n            brush.on('brushend', function () {\n                if (!syncBrushing) {\n                    dispatch.onBrush(brush.empty() ? x.domain() : brush.extent());\n                }\n            });\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n    \n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                .attr('height', availableHeight);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            onBrush(true);\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n  \n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                d3.transition(g.select('.nv-x.nv-axis'))\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                d3.transition(g.select('.nv-y.nv-axis'))\n                    .call(yAxis);\n            }\n            \n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n    \n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n    \n    \n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x(d[0]) - x.range()[0],\n                            rightWidth = availableWidth - x(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n    \n                        d3.select(this).select('.right')\n                            .attr('x', x(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n\n            function onBrush(shouldDispatch) {\n                brushExtent = brush.empty() ? null : brush.extent();\n                var extent = brush.empty() ? x.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n                if (shouldDispatch) {\n                    dispatch.onBrush(extent);\n                }\n            }\n        });\n\n        renderWatch.renderEnd('focus immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.content = content;\n    chart.brush = brush;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        syncBrushing: {get: function(){return syncBrushing;}, set: function(_){syncBrushing=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            content.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            content.color(color);\n        }},\n        interpolate: {get: function(){return content.interpolate();}, set: function(_){\n            content.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n        }},\n        x: {get: function(){return content.x();}, set: function(_){\n            content.x(_);\n        }},\n        y: {get: function(){return content.y();}, set: function(_){\n            content.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, content);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.forceDirectedGraph = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , dispatch = d3.dispatch('renderEnd')\n        , color = nv.utils.getColor(['#000'])\n        , tooltip      = nv.models.tooltip()\n        , noData = null\n        // Force directed graph specific parameters [default values]\n        , linkStrength = 0.1\n        , friction = 0.9\n        , linkDist = 30\n        , charge = -120\n        , gravity = 0.1\n        , theta = 0.8\n        , alpha = 0.1\n        , radius = 5\n        // These functions allow to add extra attributes to ndes and links\n        ,nodeExtras = function(nodes) { /* Do nothing */ }\n        ,linkExtras = function(links) { /* Do nothing */ }\n        , getX=d3.functor(0.0)\n        , getY=d3.functor(0.0)\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n          container = d3.select(this);\n          nv.utils.initSVG(container);\n\n          var availableWidth = nv.utils.availableWidth(width, container, margin),\n              availableHeight = nv.utils.availableHeight(height, container, margin);\n\n          container\n                  .attr(\"width\", availableWidth)\n                  .attr(\"height\", availableHeight);\n\n          // Display No Data message if there's nothing to show.\n          if (!data || !data.links || !data.nodes) {\n              nv.utils.noData(chart, container)\n              return chart;\n          } else {\n              container.selectAll('.nv-noData').remove();\n          }\n          container.selectAll('*').remove();\n\n          // Collect names of all fields in the nodes\n          var nodeFieldSet = new Set();\n          data.nodes.forEach(function(node) {\n            var keys = Object.keys(node);\n            keys.forEach(function(key) {\n              nodeFieldSet.add(key);\n            });\n          });\n\n          var force = d3.layout.force()\n                .nodes(data.nodes)\n                .links(data.links)\n                .size([availableWidth, availableHeight])\n                .linkStrength(linkStrength)\n                .friction(friction)\n                .linkDistance(linkDist)\n                .charge(charge)\n                .gravity(gravity)\n                .theta(theta)\n                .alpha(alpha)\n                .start();\n\n          var link = container.selectAll(\".link\")\n                .data(data.links)\n                .enter().append(\"line\")\n                .attr(\"class\", \"nv-force-link\")\n                .style(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\n          var node = container.selectAll(\".node\")\n                .data(data.nodes)\n                .enter()\n                .append(\"g\")\n                .attr(\"class\", \"nv-force-node\")\n                .call(force.drag);\n\n          node\n            .append(\"circle\")\n            .attr(\"r\", radius)\n            .style(\"fill\", function(d) { return color(d) } )\n            .on(\"mouseover\", function(evt) {\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                  .attr('y1', evt.py);\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                  .attr('x2', evt.px);\n\n              // Add 'series' object to\n              var nodeColor = color(evt);\n              evt.series = [];\n              nodeFieldSet.forEach(function(field) {\n                evt.series.push({\n                  color: nodeColor,\n                  key:   field,\n                  value: evt[field]\n                });\n              });\n              tooltip.data(evt).hidden(false);\n            })\n            .on(\"mouseout\",  function(d) {\n              tooltip.hidden(true);\n            });\n\n          tooltip.headerFormatter(function(d) {return \"Node\";});\n\n          // Apply extra attributes to nodes and links (if any)\n          linkExtras(link);\n          nodeExtras(node);\n\n          force.on(\"tick\", function() {\n              link.attr(\"x1\", function(d) { return d.source.x; })\n                  .attr(\"y1\", function(d) { return d.source.y; })\n                  .attr(\"x2\", function(d) { return d.target.x; })\n                  .attr(\"y2\", function(d) { return d.target.y; });\n\n              node.attr(\"transform\", function(d) {\n                return \"translate(\" + d.x + \", \" + d.y + \")\";\n              });\n            });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:     {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n\n        // Force directed graph specific parameters\n        linkStrength:{get: function(){return linkStrength;}, set: function(_){linkStrength=_;}},\n        friction:    {get: function(){return friction;}, set: function(_){friction=_;}},\n        linkDist:    {get: function(){return linkDist;}, set: function(_){linkDist=_;}},\n        charge:      {get: function(){return charge;}, set: function(_){charge=_;}},\n        gravity:     {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        theta:       {get: function(){return theta;}, set: function(_){theta=_;}},\n        alpha:       {get: function(){return alpha;}, set: function(_){alpha=_;}},\n        radius:      {get: function(){return radius;}, set: function(_){radius=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        nodeExtras: {get: function(){return nodeExtras;}, set: function(_){\n            nodeExtras = _;\n        }},\n        linkExtras: {get: function(){return linkExtras;}, set: function(_){\n            linkExtras = _;\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.furiousLegend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 28 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n\n            var seriesShape;\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('circle');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n\n                seriesShape = series.select('rect');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var legendWidth = 0;\n                var columnWidths = [];\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15)\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('stroke', function(d,i) { return d.color || color(d, i) });\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? color(d,i) : '#fff';\n            } else if (!expanded) {\n                return !!d.disabled ? color(d,i) : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#fff' : color(d,i);\n            } else {\n                return !!d.disabled ? '#fff' : color(d,i);\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating and using multibar with single series for this\nnv.models.historicalBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceX = []\n        , forceY = [0]\n        , padData = false\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , interactive = true\n        ;\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n                .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bars');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n                .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n            bars.exit().remove();\n\n            bars.enter().append('rect')\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                .on('mouseover', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n\n                })\n                .on('mouseout', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    if (!interactive) return;\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            bars\n                .attr('fill', function(d,i) { return color(d, i); })\n                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n                .watchTransition(renderWatch, 'bars')\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                //TODO: better width calculations that don't assume always uniform data spacing;w\n                .attr('width', (availableWidth / data[0].values.length) * .9 );\n\n            bars.watchTransition(renderWatch, 'bars')\n                .attr('y', function(d,i) {\n                    var rval = getY(d,i) < 0 ?\n                        y(0) :\n                            y(0) - y(getY(d,i)) < 1 ?\n                        y(0) - 1 :\n                        y(getY(d,i));\n                    return nv.utils.NaNtoZero(rval);\n                })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\n        });\n\n        renderWatch.renderEnd('historicalBar immediate');\n        return chart;\n    }\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        container\n            .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container\n            .select(\".nv-bars .nv-bar.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData: {get: function(){return padData;}, set: function(_){padData=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.historicalBarChart = function(bar_model) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bars = bar_model || nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n\n    var margin = {top: 30, right: 90, bottom: 50, left: 90}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , state = {}\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        ;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n            renderWatch.models(bars);\n            if (showXAxis) renderWatch.models(xAxis);\n            if (showYAxis) renderWatch.models(yAxis);\n\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };\n            chart.container = this;\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = bars.xScale();\n            y = bars.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n            bars\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n            barsWrap.transition().call(bars);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .transition()\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .transition()\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                bars.clearHighlights();\n\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        bars.highlightPoint(pointIndex,true);\n                        var point = series.values[pointIndex];\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex),\n                            data: series.values[pointIndex]\n                        });\n                    });\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data({\n                        value: xValue,\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                dispatch.tooltipHide();\n                bars.clearHighlights();\n            });\n\n            legend.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n\n                if (!data.filter(function(d) { return !d.disabled }).length) {\n                    data.map(function(d) {\n                        d.disabled = false;\n                        wrap.selectAll('.nv-series').classed('disabled', false);\n                        return d;\n                    });\n                }\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                selection.transition().call(chart);\n            });\n\n            legend.dispatch.on('legendDblclick', function(d) {\n                //Double clicking should always enable current series, and disabled all others.\n                data.forEach(function(d) {\n                    d.disabled = true;\n                });\n                d.disabled = false;\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('historicalBarChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.bars = bars;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            bars.color(color);\n        }},\n        duration:    {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration=_;\n            renderWatch.reset(transitionDuration);\n            yAxis.duration(transitionDuration);\n            xAxis.duration(transitionDuration);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bars);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n// ohlcChart is just a historical chart with ohlc bars and some tweaks\nnv.models.ohlcBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\n\n// candlestickChart is just a historical chart with candlestick bars and some tweaks\nnv.models.candlestickBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\nnv.models.legend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 32 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , enableDoubleClick = true   //If true, legend will enable double click handling\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            if (rightAlign)\n                wrap.attr('transform', 'translate(' + (- margin.right) + ',' + margin.top + ')');\n            else\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');\n            var seriesShape;\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('.nv-legend-symbol');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n                seriesShape = series.select('.nv-legend-symbol');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if (enableDoubleClick) {\n                        if (vers == 'furious' && expanded) return;\n                        dispatch.legendDblclick(d, i);\n                        if (updateState) {\n                            // make sure we re-get data in case it was modified\n                            var data = series.data();\n                            //the default behavior of NVD3 legends, when double clicking one,\n                            // is to set all other series' to false, and make the double clicked series enabled.\n                            data.forEach(function (series) {\n                                series.disabled = true;\n                                if (vers == 'furious') series.userDisabled = series.disabled;\n                            });\n                            d.disabled = false;\n                            if (vers == 'furious') d.userDisabled = d.disabled;\n                            dispatch.stateChange({\n                                disabled: data.map(function (d) {\n                                    return !!d.disabled\n                                })\n                            });\n                        }\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n            var legendWidth = 0;\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var columnWidths = [];\n                legendWidth = 0;\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        if(legendWidth < xpos + maxwidth) {\n                            legendWidth = xpos + maxwidth;\n                        }\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15);\n\n                // The background for the expanded legend (UI)\n                gEnter.insert('rect',':first-child')\n                    .attr('class', 'nv-legend-bg')\n                    .attr('fill', '#eee')\n                    // .attr('stroke', '#444')\n                    .attr('opacity',0);\n\n                var seriesBG = g.select('.nv-legend-bg');\n\n                seriesBG\n                .transition().duration(300)\n                    .attr('x', -versPadding )\n                    .attr('width', legendWidth + versPadding - 12)\n                    .attr('height', height + 10)\n                    .attr('y', -margin.top - 10)\n                    .attr('opacity', expanded ? 1 : 0);\n\n\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('fill-opacity', setBGOpacity)\n                .style('stroke', setBGColor);\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? '#000' : '#fff';\n            } else if (!expanded) {\n                if(!d.color) d.color = color(d,i);\n                return !!d.disabled ? d.color : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#eee' : d.color || color(d,i);\n            } else {\n                return d.color || color(d,i);\n            }\n        }\n\n\n        function setBGOpacity(d,i) {\n            if(expanded && vers == 'furious') {\n                return 1;\n            } else {\n                return !!d.disabled ? 0 : 1;\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        enableDoubleClick: {get: function(){return enableDoubleClick;}, set: function(_){enableDoubleClick=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.line = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var  scatter = nv.models.scatter()\n        ;\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , container = null\n        , strokeWidth = 1.5\n        , color = nv.utils.defaultColor() // a function that returns a color\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , interpolate = \"linear\" // controls the line interpolation\n        , duration = 250\n        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        ;\n\n    scatter\n        .pointSize(16) // default size\n        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n    ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            scatter\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var scatterWrap = wrap.select('.nv-scatterWrap');\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + scatter.id())\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n            scatterWrap\n                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })\n                .style('fill-opacity', 1e-6);\n\n            groups.exit().remove();\n\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i)});\n            groups.watchTransition(renderWatch, 'line: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', function(d) { return d.fillOpacity || .5});\n\n            var areaPaths = groups.selectAll('path.nv-area')\n                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n            areaPaths.enter().append('path')\n                .attr('class', 'nv-area')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n            groups.exit().selectAll('path.nv-area')\n                .remove();\n\n            areaPaths.watchTransition(renderWatch, 'line: areaPaths')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n\n            var linePaths = groups.selectAll('path.nv-line')\n                .data(function(d) { return [d.values] });\n\n            linePaths.enter().append('path')\n                .attr('class', 'nv-line')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n            );\n\n            linePaths.watchTransition(renderWatch, 'line: linePaths')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            );\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n        });\n        renderWatch.renderEnd('line immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    // Pass through events\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }},\n        isArea: {get: function(){return isArea;}, set: function(_){\n            isArea = d3.functor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            scatter.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            scatter.y(_);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            scatter.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.lineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.line())\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , focusEnable = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , duration = 250\n        ;\n\n    // set options on sub-objects for this chart\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient(rightAlignYAxis ? 'right' : 'left');\n\n    lines.clipEdge(true).duration(0);\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    interactiveLayer.tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled; })\n            };\n        };\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        };\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n            chart.update = function() {\n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled; });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length; }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (legendPosition === 'bottom') {\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                     g.select('.nv-legendWrap')\n                         .attr('transform', 'translate(0,' + (availableHeight + xAxis.height())  +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                }\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n\n            // Setup Main (Focus) Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n              if(showXAxis) {\n                g.select('.nv-focus .nv-x.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(xAxis)\n                ;\n              }\n            }\n\n            function updateYAxis() {\n              if(showYAxis) {\n                g.select('.nv-focus .nv-y.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(yAxis)\n                ;\n              }\n            }\n\n            g.select('.nv-focus .nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if (!focusEnable && focus.brush.extent() === null) {\n                linesWrap.call(lines);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .style('display', focusEnable ? 'initial' : 'none')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if (extent !== null) {\n                    onBrush(extent);\n                }\n            }\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled && !series.disableTooltip;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = focus.brush.extent() !== null ? (focus.brush.empty() ? focus.xScale().domain() : focus.brush.extent()) : x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            // Checks if the x point is between the extents, handling case where extent[0] is greater than extent[1]\n                            // (e.g. x domain is manually set to reverse the x-axis)\n                            if(extent[0] <= extent[1]) {\n                                return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                            } else {\n                                return lines.x()(d,i) >= extent[1] && lines.x()(d,i) <= extent[0];\n                            }\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            lines.highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point\n                        });\n                    });\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value;}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var defaultValueFormatter = function(d,i) {\n                    return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                };\n\n                interactiveLayer.tooltip\n                    .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                    .data({\n                        value: chart.x()( singlePoint,pointIndex ),\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on('elementClick', function(e) {\n                var pointXLocation, allData = [];\n\n                data.filter(function(series, i) {\n                    series.seriesIndex = i;\n                    return !series.disabled;\n                }).forEach(function(series) {\n                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                    var point = series.values[pointIndex];\n                    if (typeof point === 'undefined') return;\n                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                    var yPos = chart.yScale()(chart.y()(point,pointIndex));\n                    allData.push({\n                        point: point,\n                        pointIndex: pointIndex,\n                        pos: [pointXLocation, yPos],\n                        seriesIndex: series.seriesIndex,\n                        series: series\n                    });\n                });\n\n                lines.dispatch.elementClick(allData);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                focusLinesWrap.transition().duration(duration).call(lines);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n        });\n\n        renderWatch.renderEnd('lineChart immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        if(!evt.series.disableTooltip){\n            tooltip.data(evt).hidden(false);\n        }\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.focus = focus;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.state = state;\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        // Focus options, mostly passed onto focus model.\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        focusShowAxisX:    {get: function(){return focus.showXAxis();}, set: function(_){focus.showXAxis(_);}},\n        focusShowAxisY:    {get: function(){return focus.showYAxis();}, set: function(_){focus.showYAxis(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            lines.duration(duration);\n            focus.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            lines.color(color);\n            focus.color(color);\n        }},\n        interpolate: {get: function(){return lines.interpolate();}, set: function(_){\n            lines.interpolate(_);\n            focus.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n            focus.xTickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n            focus.yTickFormat(_);\n        }},\n        x: {get: function(){return lines.x();}, set: function(_){\n            lines.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return lines.y();}, set: function(_){\n            lines.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines.interactive(false);\n                lines.useVoronoi(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.lineWithFocusChart = function() {\n  return nv.models.lineChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\nnv.models.linePlusBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , lines2 = nv.models.line()\n        , bars = nv.models.historicalBar()\n        , bars2 = nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , x2Axis = nv.models.axis()\n        , y1Axis = nv.models.axis()\n        , y2Axis = nv.models.axis()\n        , y3Axis = nv.models.axis()\n        , y4Axis = nv.models.axis()\n        , legend = nv.models.legend()\n        , brush = d3.svg.brush()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 30, left: 60}\n        , marginTop = null\n        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n        , width = null\n        , height = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.defaultColor()\n        , showLegend = true\n        , focusEnable = true\n        , focusShowAxisY = false\n        , focusShowAxisX = true\n        , focusHeight = 50\n        , extent\n        , brushExtent = null\n        , x\n        , x2\n        , y1\n        , y2\n        , y3\n        , y4\n        , noData = null\n        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')\n        , transitionDuration = 0\n        , state = nv.utils.state()\n        , defaultState = null\n        , legendLeftAxisHint = ' (left axis)'\n        , legendRightAxisHint = ' (right axis)'\n        , switchYAxisOrder = false\n        ;\n\n    lines.clipEdge(true);\n    lines2.interactive(false);\n    // We don't want any points emitted for the focus chart's scatter graph.\n    lines2.pointActive(function(d) { return false });\n    xAxis.orient('bottom').tickPadding(5);\n    y1Axis.orient('left');\n    y2Axis.orient('right');\n    x2Axis.orient('bottom').tickPadding(5);\n    y3Axis.orient('left');\n    y4Axis.orient('right');\n\n    tooltip.headerEnabled(true).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var getBarsAxis = function() {\n        return switchYAxisOrder\n            ? { main: y2Axis, focus: y4Axis }\n            : { main: y1Axis, focus: y3Axis }\n    }\n\n    var getLinesAxis = function() {\n        return switchYAxisOrder\n            ? { main: y1Axis, focus: y3Axis }\n            : { main: y2Axis, focus: y4Axis }\n    }\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var allDisabled = function(data) {\n      return data.every(function(series) {\n        return series.disabled;\n      });\n    }\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight1 = nv.utils.availableHeight(height, container, margin)\n                    - (focusEnable ? focusHeight : 0),\n                availableHeight2 = focusHeight - margin2.top - margin2.bottom;\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n            if (dataBars.length && !switchYAxisOrder) {\n                x = bars.xScale();\n            } else {\n                x = lines.xScale();\n            }\n\n            x2 = x2Axis.scale();\n\n            // select the scales and series based on the position of the yAxis\n            y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();\n            y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();\n            y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();\n            y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();\n\n            var series1 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            var series2 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            x.range([0, availableWidth]);\n\n            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n                .range([0, availableWidth]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // this is the main chart\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-barsWrap');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n            // context chart is where you can focus in\n            var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n            contextEnter.append('g').attr('class', 'nv-x nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-barsWrap');\n            contextEnter.append('g').attr('class', 'nv-linesWrap');\n            contextEnter.append('g').attr('class', 'nv-brushBackground');\n            contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            //============================================================\n            // Legend\n            //------------------------------------------------------------\n\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        if(switchYAxisOrder) {\n                            series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);\n                        } else {\n                            series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);\n                        }\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    // FIXME: shouldn't this be \"- (focusEnabled ? focusHeight : 0)\"?\n                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //============================================================\n            // Context chart (focus chart) components\n            //------------------------------------------------------------\n\n            // hide or show the focus context chart\n            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');\n\n            bars2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && data[i].bar\n                }));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && !data[i].bar\n                }));\n\n            var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n                .datum(dataBars.length ? dataBars : [\n                    {values: []}\n                ]);\n            var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n                .datum(allDisabled(dataLines) ?\n                       [{values: []}] :\n                       dataLines.filter(function(dataLine) {\n                         return !dataLine.disabled;\n                       }));\n\n            g.select('.nv-context')\n                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');\n\n            bars2Wrap.transition().call(bars2);\n            lines2Wrap.transition().call(lines2);\n\n            // context (focus chart) axis controls\n            if (focusShowAxisX) {\n                x2Axis\n                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))\n                    .tickSize(-availableHeight2, 0);\n                g.select('.nv-context .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n                g.select('.nv-context .nv-x.nv-axis').transition()\n                    .call(x2Axis);\n            }\n\n            if (focusShowAxisY) {\n                y3Axis\n                    .scale(y3)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize( -availableWidth, 0);\n                y4Axis\n                    .scale(y4)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n                g.select('.nv-context .nv-y3.nv-axis')\n                    .style('opacity', dataBars.length ? 1 : 0)\n                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n                g.select('.nv-context .nv-y2.nv-axis')\n                    .style('opacity', dataLines.length ? 1 : 0)\n                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\n                g.select('.nv-context .nv-y1.nv-axis').transition()\n                    .call(y3Axis);\n                g.select('.nv-context .nv-y2.nv-axis').transition()\n                    .call(y4Axis);\n            }\n\n            // Setup Brush\n            brush.x(x2).on('brush', onBrush);\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n\n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                //.attr('y', -5)\n                .attr('height', availableHeight2);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight2 / 3;\n                return 'M' + (.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n\n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x2.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x2(d[0]) - x2.range()[0],\n                            rightWidth = x2.range()[1] - x2(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n                        d3.select(this).select('.right')\n                            .attr('x', x2(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n            function onBrush() {\n                brushExtent = brush.empty() ? null : brush.extent();\n                extent = brush.empty() ? x2.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n\n                // Prepare Main (Focus) Bars and Lines\n                bars\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n                lines\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\n                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n                    .datum(!dataBars.length ? [{values:[]}] :\n                        dataBars\n                            .map(function(d,i) {\n                                return {\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(allDisabled(dataLines) ? [{values:[]}] :\n                           dataLines\n                           .filter(function(dataLine) { return !dataLine.disabled; })\n                           .map(function(d,i) {\n                                return {\n                                    area: d.area,\n                                    fillOpacity: d.fillOpacity,\n                                    strokeWidth: d.strokeWidth,\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                // Update Main (Focus) X Axis\n                if (dataBars.length && !switchYAxisOrder) {\n                    x = bars.xScale();\n                } else {\n                    x = lines.xScale();\n                }\n\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight1, 0);\n\n                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n\n                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)\n                    .call(xAxis);\n\n                // Update Main (Focus) Bars and Lines\n                focusBarsWrap.transition().duration(transitionDuration).call(bars);\n                focusLinesWrap.transition().duration(transitionDuration).call(lines);\n\n                // Setup and Update Main (Focus) Y Axes\n                g.select('.nv-focus .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\n                y1Axis\n                    .scale(y1)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )\n                    .tickSize(-availableWidth, 0);\n                y2Axis\n                    .scale(y2)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) );\n\n                // Show the y2 rules only if y1 has none\n                if(!switchYAxisOrder) {\n                    y2Axis.tickSize(dataBars.length ? 0 : -availableWidth, 0);\n                } else {\n                    y2Axis.tickSize(dataLines.length ? 0 : -availableWidth, 0);\n                }\n\n                // Calculate opacity of the axis\n                var barsOpacity = dataBars.length ? 1 : 0;\n                var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;\n\n                var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;\n                var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;\n\n                g.select('.nv-focus .nv-y1.nv-axis')\n                    .style('opacity', y1Opacity);\n                g.select('.nv-focus .nv-y2.nv-axis')\n                    .style('opacity', y2Opacity)\n                    .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)\n                    .call(y1Axis);\n                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)\n                    .call(y2Axis);\n            }\n\n            onBrush();\n\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip\n            .duration(100)\n            .valueFormatter(function(d, i) {\n                return getLinesAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip\n            .duration(0)\n            .valueFormatter(function(d, i) {\n                return getBarsAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines = lines;\n    chart.lines2 = lines2;\n    chart.bars = bars;\n    chart.bars2 = bars2;\n    chart.xAxis = xAxis;\n    chart.x2Axis = x2Axis;\n    chart.y1Axis = y1Axis;\n    chart.y2Axis = y2Axis;\n    chart.y3Axis = y3Axis;\n    chart.y4Axis = y4Axis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},\n        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},\n        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},\n        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return margin2;}, set: function(_){\n            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;\n            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;\n            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;\n            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;\n        }},\n        duration: {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration = _;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines.x(_);\n            lines2.x(_);\n            bars.x(_);\n            bars2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines.y(_);\n            lines2.y(_);\n            bars.y(_);\n            bars2.y(_);\n        }},\n        switchYAxisOrder:    {get: function(){return switchYAxisOrder;}, set: function(_){\n            // Switch the tick format for the yAxis\n            if(switchYAxisOrder !== _) {\n                var y1 = y1Axis;\n                y1Axis = y2Axis;\n                y2Axis = y1;\n\n                var y3 = y3Axis;\n                y3Axis = y4Axis;\n                y4Axis = y3;\n            }\n            switchYAxisOrder=_;\n\n            y1Axis.orient('left');\n            y2Axis.orient('right');\n            y3Axis.orient('left');\n            y4Axis.orient('right');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , clipEdge = true\n        , stacked = false\n        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n        , color = nv.utils.defaultColor()\n        , hideable = false\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , duration = 500\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var last_datalength = 0;\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n            var nonStackableCount = 0;\n            // This function defines the requirements for render complete\n            var endFn = function(d, i) {\n                if (d.series === data.length - 1 && i === data[0].values.length - 1)\n                    return true;\n                return false;\n            };\n\n            if(hideable && data.length) hideable = [{\n                values: data[0].values.map(function(d) {\n                        return {\n                            x: d.x,\n                            y: 0,\n                            series: d.series,\n                            size: 0.01\n                        };}\n                )}];\n\n            if (stacked) {\n                var parsed = d3.layout.stack()\n                    .offset(stackOffset)\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (!data.length && hideable ? hideable : data);\n\n                parsed.forEach(function(series, i){\n                    // if series is non-stackable, use un-parsed data\n                    if (series.nonStackable) {\n                        data[i].nonStackableSeries = nonStackableCount++;\n                        parsed[i] = data[i];\n                    } else {\n                        // don't stack this seires on top of the nonStackable seriees\n                        if (i > 0 && parsed[i - 1].nonStackable){\n                            parsed[i].values.map(function(d,j){\n                                d.y0 -= parsed[i - 1].values[j].y;\n                                d.y1 = d.y0 + d.y;\n                            });\n                        }\n                    }\n                });\n                data = parsed;\n            }\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked && data.length > 0) {\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d, idx) {\n                        if (!data[idx].nonStackable) {\n                            var f = d.values[i]\n                            f.size = Math.abs(f.y);\n                            if (f.y<0)  {\n                                f.y1 = negBase;\n                                negBase = negBase - f.size;\n                            } else\n                            {\n                                f.y1 = f.size + posBase;\n                                posBase = posBase + f.size;\n                            }\n                        }\n\n                    });\n                });\n            }\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d, idx) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {\n                var domain = d.y;\n                // increase the domain range if this series is stackable\n                if (stacked && !data[d.idx].nonStackable) {\n                    if (d.y > 0){\n                        domain = d.y1\n                    } else {\n                        domain = d.y1 + d.y\n                    }\n                }\n                return domain;\n            }).concat(forceY)))\n            .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n\n            var exitTransition = renderWatch\n                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))\n                .attr('y', function(d, i, j) {\n                    var yVal = y0(0) || 0;\n                    if (stacked) {\n                        if (data[d.series] && !data[d.series].nonStackable) {\n                            yVal = y0(d.y0);\n                        }\n                    }\n                    return yVal;\n                })\n                .attr('height', 0)\n                .remove();\n            if (exitTransition.delay)\n                exitTransition.delay(function(d,i) {\n                    var delay = i * (duration / (last_datalength + 1)) - i;\n                    return delay;\n                });\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('rect.nv-bar')\n                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('rect')\n                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                    .attr('x', function(d,i,j) {\n                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )\n                    })\n                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })\n                    .attr('height', 0)\n                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })\n                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n                ;\n            bars\n                .style('fill', function(d,i,j){ return color(d, j, i);  })\n                .style('stroke', function(d,i,j){ return color(d, j, i); })\n                .on('mouseover', function(d,i,j) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i,j) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i,j) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i,j) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i,j) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            var barSelection =\n                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))\n                    .delay(function(d,i) {\n                        return i * duration / data[0].values.length;\n                    });\n            if (stacked){\n                barSelection\n                    .attr('y', function(d,i,j) {\n                        var yVal = 0;\n                        // if stackable, stack it on top of the previous series\n                        if (!data[j].nonStackable) {\n                            yVal = y(d.y1);\n                        } else {\n                            if (getY(d,i) < 0){\n                                yVal = y(0);\n                            } else {\n                                if (y(0) - y(getY(d,i)) < -1){\n                                    yVal = y(0) - 1;\n                                } else {\n                                    yVal = y(getY(d, i)) || 0;\n                                }\n                            }\n                        }\n                        return yVal;\n                    })\n                    .attr('height', function(d,i,j) {\n                        if (!data[j].nonStackable) {\n                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 0);\n                        } else {\n                            return Math.max(Math.abs(y(getY(d,i)) - y(0)), 0) || 0;\n                        }\n                    })\n                    .attr('x', function(d,i,j) {\n                        var width = 0;\n                        if (data[j].nonStackable) {\n                            width = d.series * x.rangeBand() / data.length;\n                            if (data.length !== nonStackableCount){\n                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);\n                            }\n                        }\n                        return width;\n                    })\n                    .attr('width', function(d,i,j){\n                        if (!data[j].nonStackable) {\n                            return x.rangeBand();\n                        } else {\n                            // if all series are nonStacable, take the full width\n                            var width = (x.rangeBand() / nonStackableCount);\n                            // otherwise, nonStackable graph will be only taking the half-width\n                            // of the x rangeBand\n                            if (data.length !== nonStackableCount) {\n                                width = x.rangeBand()/(nonStackableCount*2);\n                            }\n                            return width;\n                        }\n                    });\n            }\n            else {\n                barSelection\n                    .attr('x', function(d,i) {\n                        return d.series * x.rangeBand() / data.length;\n                    })\n                    .attr('width', x.rangeBand() / data.length)\n                    .attr('y', function(d,i) {\n                        return getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 :\n                            y(getY(d,i)) || 0;\n                    })\n                    .attr('height', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n                    });\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n            // keep track of the last data value length for transition calculations\n            if (data[0] && data[0].values) {\n                last_datalength = data[0].values.length;\n            }\n\n        });\n\n        renderWatch.renderEnd('multibar immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},\n        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity: {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , interactiveLayer = nv.interactiveGuideline()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , legendPosition = null\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , reduceXTicks = true // if false a tick will show for every data point\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        , useInteractiveGuideline = false\n        ;\n\n    state.stacked = false // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(false);\n    xAxis\n        .orient('bottom')\n        .tickPadding(7)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function (d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function (d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var stacked = false;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition()\n                        .duration(duration)\n                        .call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                if (legendPosition === 'bottom') {\n                    legend.width(availableWidth - margin.right);\n\n                     g.select('.nv-legendWrap')\n                         .datum(data)\n                         .call(legend);\n\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                     g.select('.nv-legendWrap')\n                         .attr('transform', 'translate(0,' + (availableHeight + xAxis.height())  +')');\n                } else {\n                    legend.width(availableWidth - controlWidth());\n\n                    g.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n                }\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text')\n                    .style('opacity', 1)\n\n                if (staggerLabels) {\n                    var getTranslate = function(x,y) {\n                        return \"translate(\" + x + \",\" + y + \")\";\n                    };\n\n                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n                    // Issue #140\n                    xTicks\n                        .selectAll(\"text\")\n                        .attr('transform', function(d,i,j) {\n                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n                        });\n\n                    var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n                    g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n                        .attr(\"transform\", function(d,i) {\n                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n                        });\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n\n                if (reduceXTicks)\n                    xTicks\n                        .filter(function(d,i) {\n                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n                        })\n                        .selectAll('text, line')\n                        .style('opacity', 0);\n\n                if(rotateLabels)\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\n                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n                    .style('opacity', 1);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n                chart.update();\n            });\n\n            if (useInteractiveGuideline) {\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    if (e.pointXValue == undefined) return;\n\n                    var singlePoint, pointIndex, pointXLocation, xValue, allData = [];\n                    data\n                        .filter(function(series, i) {\n                            series.seriesIndex = i;\n                            return !series.disabled;\n                        })\n                        .forEach(function(series,i) {\n                            pointIndex = x.domain().indexOf(e.pointXValue)\n\n                            var point = series.values[pointIndex];\n                            if (point === undefined) return;\n\n                            xValue = point.x;\n                            if (singlePoint === undefined) singlePoint = point;\n                            if (pointXLocation === undefined) pointXLocation = e.mouseX\n                            allData.push({\n                                key: series.key,\n                                value: chart.y()(point, pointIndex),\n                                color: color(series,series.seriesIndex),\n                                data: series.values[pointIndex]\n                            });\n                        });\n\n                    interactiveLayer.tooltip\n                        .data({\n                            value: xValue,\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    interactiveLayer.tooltip.hidden(true);\n                });\n            }\n            else {\n                multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n                    evt.value = chart.x()(evt.data);\n                    evt['series'] = {\n                        key: evt.data.key,\n                        value: chart.y()(evt.data),\n                        color: evt.color\n                    };\n                    tooltip.data(evt).hidden(false);\n                });\n\n                multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n\n                multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        renderWatch.renderEnd('multibarchart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},\n        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        wrapLabels:   {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontal = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getYerr = function(d) { return d.yErr }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , stacked = false\n        , showValues = false\n        , showBarLabels = false\n        , valuePadding = 60\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , valueFormat = d3.format(',.2f')\n        , delay = 1200\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , duration = 250\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0; //used to store previous scales\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            if (stacked)\n                data = d3.layout.stack()\n                    .offset('zero')\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (data);\n\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked)\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d) {\n                        var f = d.values[i]\n                        f.size = Math.abs(f.y);\n                        if (f.y<0)  {\n                            f.y1 = negBase - f.size;\n                            negBase = negBase - f.size;\n                        } else\n                        {\n                            f.y1 = posBase;\n                            posBase = posBase + f.size;\n                        }\n                    });\n                });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableHeight], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\n            if (showValues && !stacked)\n                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n            else\n                y.range(yRange || [0, availableWidth]);\n\n            x0 = x0 || x;\n            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n                });\n\n            barsEnter.append('rect')\n                .attr('width', 0)\n                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\n            bars\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            if (getYerr(data[0],0)) {\n                barsEnter.append('polyline');\n\n                bars.select('polyline')\n                    .attr('fill', 'none')\n                    .attr('points', function(d,i) {\n                        var xerr = getYerr(d,i)\n                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];\n                        xerr = xerr.map(function(e) { return y(e + ((getY(d,i) < 0) ? 0 : getY(d,i))) - y(0); });\n                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];\n                        return a.map(function (path) { return path.join(',') }).join(' ');\n                    })\n                    .attr('transform', function(d,i) {\n                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        return 'translate(0, ' + mid + ')';\n                    });\n            }\n\n            barsEnter.append('text');\n\n            if (showValues && !stacked) {\n                bars.select('text')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) {\n                        var t = valueFormat(getY(d,i))\n                            , yerr = getYerr(d,i);\n                        if (yerr === undefined)\n                            return t;\n                        if (!yerr.length)\n                            return t + '±' + valueFormat(Math.abs(yerr));\n                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));\n                    });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n            } else {\n                bars.selectAll('text').text('');\n            }\n\n            if (showBarLabels && !stacked) {\n                barsEnter.append('text').classed('nv-bar-label',true);\n                bars.select('text.nv-bar-label')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) { return getX(d,i) });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text.nv-bar-label')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n            }\n            else {\n                bars.selectAll('text.nv-bar-label').text('');\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            if (stacked)\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n                    })\n                    .select('rect')\n                    .attr('width', function(d,i) {\n                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0)) || 0\n                    })\n                    .attr('height', x.rangeBand() );\n            else\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        //TODO: stacked must be all positive or all negative, not both?\n                        return 'translate(' +\n                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n                            + ',' +\n                            (d.series * x.rangeBand() / data.length\n                                +\n                                x(getX(d,i)) )\n                            + ')'\n                    })\n                    .select('rect')\n                    .attr('height', x.rangeBand() / data.length )\n                    .attr('width', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0\n                    });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('multibarHorizontal immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        // this shows the group name, seems pointless?\n        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},\n        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},\n        groupSpacing: {get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity:  {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontalChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBarHorizontal()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend().height(30)\n        , controls = nv.models.legend().height(30)\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlsPosition = 'top'        \n        , controlLabels = {}\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , stacked = false\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        ;\n\n    state.stacked = false; // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(stacked);\n\n    xAxis\n        .orient('left')\n        .tickPadding(5)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient('bottom')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(duration).call(chart) };\n            chart.container = this;\n\n            stacked = multibar.stacked();\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n                if (legendPosition === 'bottom') {\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                     g.select('.nv-legendWrap')\n                         .attr('transform', 'translate(' + controlWidth() + ',' + (availableHeight + xAxis.height())  +')');\n                } else if (legendPosition === 'top') {\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n                }                    \n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n\n                if (controlsPosition === 'bottom') {\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                    g.select('.nv-controlsWrap')\n                        .datum(controlsData)\n                        .attr('transform', 'translate(0,' + (availableHeight + xAxis.height()) +')')\n                        .call(controls);  \n\n                } else if (controlsPosition === 'top') {\n                    g.select('.nv-controlsWrap')\n                        .datum(controlsData)\n                        .attr('transform', 'translate(0,' + (-margin.top) +')')\n                        .call(controls);                        \n                }\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )\n                    .tickSize(-availableWidth, 0);\n\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text');\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(0,' + availableHeight + ')');\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\", y(0))\n                .attr(\"x2\", y(0))\n                .attr(\"y1\", 0)\n                .attr(\"y2\", -availableHeight)\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                stacked = multibar.stacked();\n\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n\n                chart.update();\n            });\n        });\n        renderWatch.renderEnd('multibar horizontal chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            key: evt.data.key,\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        controlsPosition: {get: function(){return controlsPosition;}, set: function(_){controlsPosition=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60},\n        marginTop = null,\n        color = nv.utils.defaultColor(),\n        width = null,\n        height = null,\n        showLegend = true,\n        noData = null,\n        yDomain1,\n        yDomain2,\n        getX = function(d) { return d.x },\n        getY = function(d) { return d.y},\n        interpolate = 'linear',\n        useVoronoi = true,\n        interactiveLayer = nv.interactiveGuideline(),\n        useInteractiveGuideline = false,\n        legendRightAxisHint = ' (right axis)',\n        duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear(),\n        yScale1 = d3.scale.linear(),\n        yScale2 = d3.scale.linear(),\n\n        lines1 = nv.models.line().yScale(yScale1).duration(duration),\n        lines2 = nv.models.line().yScale(yScale2).duration(duration),\n\n        scatters1 = nv.models.scatter().yScale(yScale1).duration(duration),\n        scatters2 = nv.models.scatter().yScale(yScale2).duration(duration),\n\n        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1).duration(duration),\n        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2).duration(duration),\n\n        stack1 = nv.models.stackedArea().yScale(yScale1).duration(duration),\n        stack2 = nv.models.stackedArea().yScale(yScale2).duration(duration),\n\n        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5).duration(duration),\n        yAxis1 = nv.models.axis().scale(yScale1).orient('left').duration(duration),\n        yAxis2 = nv.models.axis().scale(yScale2).orient('right').duration(duration),\n\n        legend = nv.models.legend().height(30),\n        tooltip = nv.models.tooltip(),\n        dispatch = d3.dispatch();\n\n    var charts = [lines1, lines2, scatters1, scatters2, bars1, bars2, stack1, stack2];\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});\n            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});\n            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});\n            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});\n            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});\n            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});\n            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});\n            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x }))\n                .range([0, availableWidth]);\n\n            var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            gEnter.append('g').attr('class', 'stack1Wrap');\n            gEnter.append('g').attr('class', 'stack2Wrap');\n            gEnter.append('g').attr('class', 'bars1Wrap');\n            gEnter.append('g').attr('class', 'bars2Wrap');\n            gEnter.append('g').attr('class', 'scatters1Wrap');\n            gEnter.append('g').attr('class', 'scatters2Wrap');\n            gEnter.append('g').attr('class', 'lines1Wrap');\n            gEnter.append('g').attr('class', 'lines2Wrap');\n            gEnter.append('g').attr('class', 'legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            var g = wrap.select('g');\n\n            var color_array = data.map(function(d,i) {\n                return data[i].color || color(d, i);\n            });\n\n            // Legend\n            if (!showLegend) {\n                g.select('.legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n                legend.color(color_array);\n\n                g.select('.legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            lines1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n            scatters1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));\n            scatters2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));\n            bars1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n            bars2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n            stack1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n            stack2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var lines1Wrap = g.select('.lines1Wrap')\n                .datum(dataLines1.filter(function(d){return !d.disabled}));\n            var scatters1Wrap = g.select('.scatters1Wrap')\n                .datum(dataScatters1.filter(function(d){return !d.disabled}));\n            var bars1Wrap = g.select('.bars1Wrap')\n                .datum(dataBars1.filter(function(d){return !d.disabled}));\n            var stack1Wrap = g.select('.stack1Wrap')\n                .datum(dataStack1.filter(function(d){return !d.disabled}));\n            var lines2Wrap = g.select('.lines2Wrap')\n                .datum(dataLines2.filter(function(d){return !d.disabled}));\n            var scatters2Wrap = g.select('.scatters2Wrap')\n                .datum(dataScatters2.filter(function(d){return !d.disabled}));\n            var bars2Wrap = g.select('.bars2Wrap')\n                .datum(dataBars2.filter(function(d){return !d.disabled}));\n            var stack2Wrap = g.select('.stack2Wrap')\n                .datum(dataStack2.filter(function(d){return !d.disabled}));\n\n            var extraValue1BarStacked = [];\n            if (bars1.stacked() && dataBars1.length) {\n                var extraValue1BarStacked = dataBars1.filter(function(d){return !d.disabled}).map(function(a){return a.values});\n                \n                if (extraValue1BarStacked.length > 0)\n                    extraValue1BarStacked = extraValue1BarStacked.reduce(function(a,b){\n                        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n                    });\n            }\n            if (dataBars1.length) {\n                extraValue1BarStacked.push({x:0, y:0});\n            }\n            \n            var extraValue2BarStacked = [];\n            if (bars2.stacked() && dataBars2.length) {\n                var extraValue2BarStacked = dataBars2.filter(function(d){return !d.disabled}).map(function(a){return a.values});\n                \n                if (extraValue2BarStacked.length > 0)\n                    extraValue2BarStacked = extraValue2BarStacked.reduce(function(a,b){\n                        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n                    });\n            }\n            if (dataBars2.length) {\n                extraValue2BarStacked.push({x:0, y:0});\n            }\n            \n            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1BarStacked), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2BarStacked), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            lines1.yDomain(yScale1.domain());\n            scatters1.yDomain(yScale1.domain());\n            bars1.yDomain(yScale1.domain());\n            stack1.yDomain(yScale1.domain());\n\n            lines2.yDomain(yScale2.domain());\n            scatters2.yDomain(yScale2.domain());\n            bars2.yDomain(yScale2.domain());\n            stack2.yDomain(yScale2.domain());\n\n            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\n            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\n            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n\n            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}\n            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}\n\n            xAxis\n                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                .tickSize(-availableHeight, 0);\n\n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n            d3.transition(g.select('.nv-x.nv-axis'))\n                .call(xAxis);\n\n            yAxis1\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n\n            d3.transition(g.select('.nv-y1.nv-axis'))\n                .call(yAxis1);\n\n            yAxis2\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n            d3.transition(g.select('.nv-y2.nv-axis'))\n                .call(yAxis2);\n\n            g.select('.nv-y1.nv-axis')\n                .classed('nv-disabled', series1.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[0] + ',0)');\n\n            g.select('.nv-y2.nv-axis')\n                .classed('nv-disabled', series2.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n            legend.dispatch.on('stateChange', function(newState) {\n                chart.update();\n            });\n\n            if(useInteractiveGuideline){\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching\n            //------------------------------------------------------------\n\n            function mouseover_line(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_scatter(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(100)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_stack(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n                evt.point['x'] = stack1.x()(evt.point);\n                evt.point['y'] = stack1.y()(evt.point);\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_bar(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n\n                evt.value = bars1.x()(evt.data);\n                evt['series'] = {\n                    value: bars1.y()(evt.data),\n                    color: evt.color,\n                    key: evt.data.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n\n\n            function clearHighlights() {\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.clearHighlights();\n                } catch(e){}\n              }\n            }\n\n            function highlightPoint(serieIndex, pointIndex, b){\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.highlightPoint(serieIndex, pointIndex, b);\n                } catch(e){}\n              }\n            }\n\n            if(useInteractiveGuideline){\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    clearHighlights();\n                    var singlePoint, pointIndex, pointXLocation, allData = [];\n                    data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            return chart.x()(d,i) >= extent[0] && chart.x()(d,i) <= extent[1];\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = x(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point,\n                            yAxis: series.yAxis == 2 ? yAxis2 : yAxis1\n                        });\n                    });\n\n                    var defaultValueFormatter = function(d,i) {\n                        var yAxis = allData[i].yAxis;\n                        return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                    };\n\n                    interactiveLayer.tooltip\n                        .headerFormatter(function(d, i) {\n                            return xAxis.tickFormat()(d, i);\n                        })\n                        .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                        .data({\n                            value: chart.x()( singlePoint,pointIndex ),\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    clearHighlights();\n                });\n            } else {\n                lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                lines2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                stack2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n                bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n\n                bars1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars1.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n                bars2.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines1 = lines1;\n    chart.lines2 = lines2;\n    chart.scatters1 = scatters1;\n    chart.scatters2 = scatters2;\n    chart.bars1 = bars1;\n    chart.bars2 = bars2;\n    chart.stack1 = stack1;\n    chart.stack2 = stack2;\n    chart.xAxis = xAxis;\n    chart.yAxis1 = yAxis1;\n    chart.yAxis2 = yAxis2;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},\n        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines1.x(_);\n            lines2.x(_);\n            scatters1.x(_);\n            scatters2.x(_);\n            bars1.x(_);\n            bars2.x(_);\n            stack1.x(_);\n            stack2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines1.y(_);\n            lines2.y(_);\n            scatters1.y(_);\n            scatters2.y(_);\n            stack1.y(_);\n            stack2.y(_);\n            bars1.y(_);\n            bars2.y(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi=_;\n            lines1.useVoronoi(_);\n            lines2.useVoronoi(_);\n            stack1.useVoronoi(_);\n            stack2.useVoronoi(_);\n        }},\n\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines1.interactive(false);\n                lines1.useVoronoi(false);\n                lines2.interactive(false);\n                lines2.useVoronoi(false);\n                stack1.interactive(false);\n                stack1.useVoronoi(false);\n                stack2.interactive(false);\n                stack2.useVoronoi(false);\n                scatters1.interactive(false);\n                scatters2.interactive(false);\n            }\n        }},\n\n        duration: {get: function(){return duration;}, set: function(_) {\n            duration = _;\n            [lines1, lines2, stack1, stack2, scatters1, scatters2, xAxis, yAxis1, yAxis2].forEach(function(model){\n              model.duration(duration);\n            });\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.ohlcBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // ohlc bar width.\n            var w = (availableWidth / data[0].values.length) * .9;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            ticks.enter().append('path')\n                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n                .attr('d', function(d,i) {\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i)) - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                })\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('fill', function(d,i) { return color[0]; })\n                .attr('stroke', function(d,i) { return color[0]; })\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n\n            // the bar colors are controlled by CSS currently\n            ticks.attr('class', function(d,i,j) {\n                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;\n            });\n\n            d3.transition(ticks)\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('d', function(d,i) {\n                    var w = (availableWidth / data[0].values.length) * .9;\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i))\n                            - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-ohlcBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-ohlcBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n// Code adapted from Jason Davies' \"Parallel Coordinates\"\n// http://bl.ocks.org/jasondavies/1341281\nnv.models.parallelCoordinates = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 0, bottom: 10, left: 0}\n        , width = null\n        , height = null\n        , availableWidth = null\n        , availableHeight = null\n        , x = d3.scale.ordinal()\n        , y = {}\n        , undefinedValuesLabel = \"undefined values\"\n        , dimensionData = []\n        , enabledDimensions = []\n        , dimensionNames = []\n        , displayBrush = true\n        , color = nv.utils.defaultColor()\n        , filters = []\n        , active = []\n        , dragging = []\n        , axisWithUndefinedValues = []\n        , lineTension = 1\n        , foreground\n        , background\n        , dimensions\n        , line = d3.svg.line()\n        , axis = d3.svg.axis()\n        , dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', \"stateChange\", 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n           //Convert old data to new format (name, values)\n            if (data[0].values === undefined) {\n                var newData = [];\n                data.forEach(function (d) {\n                        var val = {};\n                        var key = Object.keys(d);\n                        key.forEach(function (k) { if (k !== \"name\") val[k] = d[k] });\n                        newData.push({ key: d.name, values: val });\n                });\n                data = newData;\n            }\n\n            var dataValues = data.map(function (d) {return d.values});\n            if (active.length === 0) {\n                active = data;\n            }; //set all active before first brush call\n            \n            dimensionNames = dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; }).map(function (d) { return d.key });\n            enabledDimensions = dimensionData.filter(function (d) { return !d.disabled; });\n            \n            // Setup Scales\n            x.rangePoints([0, availableWidth], 1).domain(enabledDimensions.map(function (d) { return d.key; }));\n\n            //Set as true if all values on an axis are missing.\n            // Extract the list of dimensions and create a scale for each.\n            var oldDomainMaxValue = {};\n            var displayMissingValuesline = false;\n            var currentTicks = [];\n            \n            dimensionNames.forEach(function(d) {\n                var extent = d3.extent(dataValues, function (p) { return +p[d]; });\n                var min = extent[0];\n                var max = extent[1];\n                var onlyUndefinedValues = false;\n                //If there is no values to display on an axis, set the extent to 0\n                if (isNaN(min) || isNaN(max)) {\n                    onlyUndefinedValues = true;\n                    min = 0;\n                    max = 0;\n                }\n                //Scale axis if there is only one value\n                if (min === max) {\n                    min = min - 1;\n                    max = max + 1;\n                }\n                var f = filters.filter(function (k) { return k.dimension == d; });\n                if (f.length !== 0) {\n                    //If there is only NaN values, keep the existing domain.\n                    if (onlyUndefinedValues) {\n                        min = y[d].domain()[0];\n                        max = y[d].domain()[1];\n                    }\n                        //If the brush extent is > max (< min), keep the extent value.\n                    else if (!f[0].hasOnlyNaN && displayBrush) {\n                        min = min > f[0].extent[0] ? f[0].extent[0] : min;\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                    }\n                        //If there is NaN values brushed be sure the brush extent is on the domain.\n                    else if (f[0].hasNaN) {\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                        oldDomainMaxValue[d] = y[d].domain()[1];\n                        displayMissingValuesline = true;\n                    }\n                }\n                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display \"undefined values\" text.\n                //The remaining 10% are used to display the missingValue line.\n                y[d] = d3.scale.linear()\n                    .domain([min, max])\n                    .range([(availableHeight - 12) * 0.9, 0]);\n\n                axisWithUndefinedValues = [];\n                y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);\n            });\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            line.interpolate('cardinal').tension(lineTension);\n            axis.orient('left');\n            var axisDrag = d3.behavior.drag()\n                        .on('dragstart', dragStart)\n                        .on('drag', dragMove)\n                        .on('dragend', dragEnd);\n\n            //Add missing value line at the bottom of the chart\n            var missingValuesline, missingValueslineText;\n            var step = x.range()[1] - x.range()[0];\n            step = isNaN(step) ? x.range()[0] : step;\n            if (!isNaN(step)) {\n                var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];\n                missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);\n                missingValuesline.enter().append('line');\n                missingValuesline.exit().remove();\n                missingValuesline.attr(\"x1\", function(d) { return d[0]; })\n                        .attr(\"y1\", function(d) { return d[1]; })\n                        .attr(\"x2\", function(d) { return d[2]; })\n                        .attr(\"y2\", function(d) { return d[3]; });\n    \n                //Add the text \"undefined values\" under the missing value line\n                missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data([undefinedValuesLabel]);\n                missingValueslineText.append('text').data([undefinedValuesLabel]);\n                missingValueslineText.enter().append('text');\n                missingValueslineText.exit().remove();\n                missingValueslineText.attr(\"y\", availableHeight)\n                        //To have the text right align with the missingValues line, substract 92 representing the text size.\n                        .attr(\"x\", availableWidth - 92 - step / 2)\n                        .text(function(d) { return d; });\n            }\n            // Add grey background lines for context.\n            background = wrap.select('.background').selectAll('path').data(data);\n            background.enter().append('path');\n            background.exit().remove();\n            background.attr('d', path);\n\n            // Add blue foreground lines for focus.\n            foreground = wrap.select('.foreground').selectAll('path').data(data);\n            foreground.enter().append('path')\n            foreground.exit().remove();\n            foreground.attr('d', path)\n                .style(\"stroke-width\", function (d, i) {\n                if (isNaN(d.strokeWidth)) { d.strokeWidth = 1;} return d.strokeWidth;})\n                .attr('stroke', function (d, i) { return d.color || color(d, i); });\n            foreground.on(\"mouseover\", function (d, i) {\n                d3.select(this).classed('hover', true).style(\"stroke-width\", d.strokeWidth + 2 + \"px\").style(\"stroke-opacity\", 1);\n                dispatch.elementMouseover({\n                    label: d.name,\n                    color: d.color || color(d, i),\n                    values: d.values,\n                    dimensions: enabledDimensions\n                });\n\n            });\n            foreground.on(\"mouseout\", function (d, i) {\n                d3.select(this).classed('hover', false).style(\"stroke-width\", d.strokeWidth + \"px\").style(\"stroke-opacity\", 0.7);\n                dispatch.elementMouseout({\n                    label: d.name,\n                    index: i\n                });\n            });\n            foreground.on('mousemove', function (d, i) {\n                dispatch.elementMousemove();\n            });\n            foreground.on('click', function (d) {\n                dispatch.elementClick({\n                    id: d.id\n                });\n            });\n            // Add a group element for each dimension.\n            dimensions = g.selectAll('.dimension').data(enabledDimensions);\n            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');\n\n            dimensions.attr('transform', function(d) { return 'translate(' + x(d.key) + ',0)'; });\n            dimensionsEnter.append('g').attr('class', 'nv-axis');\n\n            // Add an axis and title.\n            dimensionsEnter.append('text')\n                .attr('class', 'nv-label')\n                .style(\"cursor\", \"move\")\n                .attr('dy', '-1em')\n                .attr('text-anchor', 'middle')\n                .on(\"mouseover\", function(d, i) {\n                    dispatch.elementMouseover({\n                        label: d.tooltip || d.key,\n                        color: d.color \n                    });\n                })\n                .on(\"mouseout\", function(d, i) {\n                    dispatch.elementMouseout({\n                        label: d.tooltip\n                    });\n                })\n                .on('mousemove', function (d, i) {\n                    dispatch.elementMousemove();\n                })\n                .call(axisDrag);\n\n            dimensionsEnter.append('g').attr('class', 'nv-brushBackground');\n            dimensions.exit().remove();\n            dimensions.select('.nv-label').text(function (d) { return d.key });\n\n            // Add and store a brush for each axis.\n            restoreBrush(displayBrush);\n\n            var actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),\n                    extents = actives.map(function (p) { return y[p].brush.extent(); });\n            var formerActive = active.slice(0);\n\n            //Restore active values\n            active = [];\n            foreground.style(\"display\", function (d) {\n                var isActive = actives.every(function (p, i) {\n                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {\n                        return true;\n                    }\n                    return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                });\n                if (isActive)\n                    active.push(d);\n                return !isActive ? \"none\" : null;\n\n            });\n\n            if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {\n               dispatch.activeChanged(active);\n            }\n\n            // Returns the path for a given data point.\n            function path(d) {\n                return line(enabledDimensions.map(function (p) {\n                    //If value if missing, put the value on the missing value line\n                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {\n                        var domain = y[p.key].domain();\n                        var range = y[p.key].range();\n                        var min = domain[0] - (domain[1] - domain[0]) / 9;\n\n                        //If it's not already the case, allow brush to select undefined values\n                        if (axisWithUndefinedValues.indexOf(p.key) < 0) {\n\n                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);\n                            y[p.key].brush.y(newscale);\n                            axisWithUndefinedValues.push(p.key);\n                        }\n                        if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {\n                            return [x(p.key), y[p.key](min)];\n                        }\n                    }\n\n                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.\n                    if (missingValuesline !== undefined) {\n                        if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {\n                            missingValuesline.style(\"display\", \"inline\");\n                            missingValueslineText.style(\"display\", \"inline\");\n                        } else {\n                            missingValuesline.style(\"display\", \"none\");\n                            missingValueslineText.style(\"display\", \"none\");\n                        }\n                    }\n                    return [x(p.key), y[p.key](d.values[p.key])];\n                }));\n            }\n\n            function restoreBrush(visible) {\n                filters.forEach(function (f) {\n                    //If filter brushed NaN values, keep the brush on the bottom of the axis.\n                    var brushDomain = y[f.dimension].brush.y().domain();\n                    if (f.hasOnlyNaN) {\n                        f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];\n                    }\n                    if (f.hasNaN) {\n                        f.extent[0] = brushDomain[0];\n                    }\n                    if (visible)\n                        y[f.dimension].brush.extent(f.extent);\n                });\n                \n                dimensions.select('.nv-brushBackground')\n                    .each(function (d) {\n                        d3.select(this).call(y[d.key].brush);\n\n                    })\n                    .selectAll('rect')\n                    .attr('x', -8)\n                    .attr('width', 16);\n                \n                updateTicks();\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brushstart() {\n                //If brush aren't visible, show it before brushing again.\n                if (displayBrush === false) {\n                    displayBrush = true;\n                    restoreBrush(true);\n                }\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brush() {\n                actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); });\n                extents = actives.map(function(p) { return y[p].brush.extent(); });\n\n                filters = []; //erase current filters\n                actives.forEach(function(d,i) {\n                    filters[i] = {\n                        dimension: d,\n                        extent: extents[i],\n                        hasNaN: false,\n                        hasOnlyNaN: false\n                    }\n                });\n\n                active = []; //erase current active list\n                foreground.style('display', function(d) {\n                    var isActive = actives.every(function(p, i) {\n                        if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) return true;\n                        return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                    });\n                    if (isActive) active.push(d);\n                    return isActive ? null : 'none';\n                });\n                \n                updateTicks();\n                \n                dispatch.brush({\n                    filters: filters,\n                    active: active\n                });\n            }\n            function brushend() {\n                var hasActiveBrush = actives.length > 0 ? true : false;\n                filters.forEach(function (f) {\n                    if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)\n                        f.hasNaN = true;\n                    if (f.extent[1] < y[f.dimension].domain()[0])\n                        f.hasOnlyNaN = true;\n                });\n                dispatch.brushEnd(active, hasActiveBrush);\n            }           \n            function updateTicks() {\n                dimensions.select('.nv-axis')\n                    .each(function (d, i) {\n                        var f = filters.filter(function (k) { return k.dimension == d.key; });\n                        currentTicks[d.key] = y[d.key].domain();\n                        \n                        //If brush are available, display brush extent\n                        if (f.length != 0 && displayBrush)\n                        {\n                            currentTicks[d.key] = [];\n                            if (f[0].extent[1] > y[d.key].domain()[0]) \n                                currentTicks[d.key] = [f[0].extent[1]];\n                            if (f[0].extent[0] >= y[d.key].domain()[0])\n                                currentTicks[d.key].push(f[0].extent[0]);    \n                        }\n                            \n                        d3.select(this).call(axis.scale(y[d.key]).tickFormat(d.format).tickValues(currentTicks[d.key]));\n                });\n            }\n            function dragStart(d) {\n                dragging[d.key] = this.parentNode.__origin__ = x(d.key);\n                background.attr(\"visibility\", \"hidden\");\n            }\n            function dragMove(d) {\n                dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));\n                foreground.attr(\"d\", path);\n                enabledDimensions.sort(function (a, b) { return dimensionPosition(a.key) - dimensionPosition(b.key); });\n                enabledDimensions.forEach(function (d, i) { return d.currentPosition = i; });\n                x.domain(enabledDimensions.map(function (d) { return d.key; }));\n                dimensions.attr(\"transform\", function(d) { return \"translate(\" + dimensionPosition(d.key) + \")\"; });\n            }\n            function dragEnd(d, i) {\n                delete this.parentNode.__origin__;\n                delete dragging[d.key];\n                d3.select(this.parentNode).attr(\"transform\", \"translate(\" + x(d.key) + \")\");\n                foreground\n                  .attr(\"d\", path);\n                background\n                  .attr(\"d\", path)\n                  .attr(\"visibility\", null);\n\n                dispatch.dimensionsOrder(enabledDimensions);\n            }\n            function dimensionPosition(d) {\n                var v = dragging[d];\n                return v == null ? x(d) : v;\n            }\n        });\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:         {get: function(){return width;},           set: function(_){width= _;}},\n        height:        {get: function(){return height;},          set: function(_){height= _;}},\n        dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n        displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n        filters: { get: function () { return filters; }, set: function (_) { filters = _; } },\n        active: { get: function () { return active; }, set: function (_) { active = _; } },\n        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},\n        undefinedValuesLabel : {get: function(){return undefinedValuesLabel;}, set: function(_){undefinedValuesLabel=_;}},\n        \n        // deprecated options\n        dimensions: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensions', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key= k })\n            }\n        }},\n        dimensionNames: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionNames', 'use dimensionData instead');\n            dimensionNames = [];\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key = k })\n            }\n \n        }},\n        dimensionFormats: {get: function () { return dimensionData.map(function (d) { return d.format }); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionFormats', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (f) { dimensionData.push({ format: f }) })\n            } else {\n                _.forEach(function (f, i) { dimensionData[i].format = f })\n            }\n\n        }},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    =  _.top    !== undefined ? _.top    : margin.top;\n            margin.right  =  _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   =  _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.parallelCoordinatesChart = function () {\n        \"use strict\";\n        //============================================================\n        // Public Variables with Default Settings\n        //------------------------------------------------------------\n\n        var parallelCoordinates = nv.models.parallelCoordinates()\n        var legend = nv.models.legend()\n        var tooltip = nv.models.tooltip();\n        var dimensionTooltip = nv.models.tooltip();\n\n        var margin = { top: 0, right: 0, bottom: 0, left: 0 }\n        , marginTop = null\n        , width = null\n        , height = null\n        , showLegend = true\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , dimensionData = []\n        , displayBrush = true\n        , defaultState = null\n        , noData = null\n        , nanValue = \"undefined\"\n        , dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function () { return showControls ? 180 : 0 }\n        ;\n\n\t    //============================================================\n\n\t\t//============================================================\n        // Private Variables\n        //------------------------------------------------------------\n\n        var renderWatch = nv.utils.renderWatch(dispatch);\n\n        var stateGetter = function(data) {\n            return function() {\n                return {\n                    active: data.map(function(d) { return !d.disabled })\n                };\n            }\n        };\n\n        var stateSetter = function(data) {\n            return function(state) {\n                if(state.active !== undefined) {\n                    data.forEach(function(series, i) {\n                        series.disabled = !state.active[i];\n                    });\n                }\n            }\n        };\n\n        tooltip.contentGenerator(function(data) {\n            var str = '<table><thead><tr><td class=\"legend-color-guide\"><div style=\"background-color:' + data.color + '\"></div></td><td><strong>' + data.key + '</strong></td></tr></thead>';\n            if(data.series.length !== 0)\n            {\n                str = str + '<tbody><tr><td height =\"10px\"></td></tr>';\n                data.series.forEach(function(d){\n                    str = str + '<tr><td class=\"legend-color-guide\"><div style=\"background-color:' + d.color + '\"></div></td><td class=\"key\">' + d.key + '</td><td class=\"value\">' + d.value + '</td></tr>';\n                });\n                str = str + '</tbody>';\n            }\n            str = str + '</table>';\n            return str;\n        });\n\n        //============================================================\n        // Chart function\n        //------------------------------------------------------------\n\n        function chart(selection) {\n            renderWatch.reset();\n            renderWatch.models(parallelCoordinates);\n\n            selection.each(function(data) {\n                var container = d3.select(this);\n                nv.utils.initSVG(container);\n\n                var that = this;\n\n                var availableWidth = nv.utils.availableWidth(width, container, margin),\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\n                chart.update = function() { container.call(chart); };\n                chart.container = this;\n\n                state.setter(stateSetter(dimensionData), chart.update)\n                    .getter(stateGetter(dimensionData))\n                    .update();\n\n                //set state.disabled\n                state.disabled = dimensionData.map(function (d) { return !!d.disabled });\n\n                //Keep dimensions position in memory\n                dimensionData = dimensionData.map(function (d) {d.disabled = !!d.disabled; return d});\n                dimensionData.forEach(function (d, i) {\n                    d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;\n                    d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;\n                });\n\n               if (!defaultState) {\n                    var key;\n                    defaultState = {};\n                    for(key in state) {\n                        if(state[key] instanceof Array)\n                            defaultState[key] = state[key].slice(0);\n                        else\n                            defaultState[key] = state[key];\n                    }\n                }\n\n                // Display No Data message if there's nothing to show.\n                if(!data || !data.length) {\n                    nv.utils.noData(chart, container);\n                    return chart;\n                } else {\n                    container.selectAll('.nv-noData').remove();\n                }\n\n                //------------------------------------------------------------\n                // Setup containers and skeleton of chart\n\n                var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);\n                var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');\n\n                var g = wrap.select('g');\n\n                gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');\n                gEnter.append('g').attr('class', 'nv-legendWrap');\n\n                g.select(\"rect\")\n                    .attr(\"width\", availableWidth)\n                    .attr(\"height\", (availableHeight > 0) ? availableHeight : 0);\n\n                // Legend\n                if (!showLegend) {\n                    g.select('.nv-legendWrap').selectAll('*').remove();\n                } else {\n                    legend.width(availableWidth)\n                        .color(function (d) { return \"rgb(188,190,192)\"; });\n\n                    g.select('.nv-legendWrap')\n                        .datum(dimensionData.sort(function (a, b) { return a.originalPosition - b.originalPosition; }))\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n                    wrap.select('.nv-legendWrap')\n                       .attr('transform', 'translate( 0 ,' + (-margin.top) + ')');\n                }\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n                // Main Chart Component(s)\n                parallelCoordinates\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .dimensionData(dimensionData)\n                    .displayBrush(displayBrush);\n\n\t\t        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ')\n                  .datum(data);\n\n\t\t        parallelCoordinatesWrap.transition().call(parallelCoordinates);\n\n\t\t\t\t//============================================================\n                // Event Handling/Dispatching (in chart's scope)\n                //------------------------------------------------------------\n                //Display reset brush button\n\t\t        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {\n\t\t            if (hasActiveBrush) {\n\t\t                displayBrush = true;\n\t\t                dispatch.brushEnd(active);\n\t\t            } else {\n\n\t\t                displayBrush = false;\n\t\t            }\n\t\t        });\n\n\t\t        legend.dispatch.on('stateChange', function(newState) {\n\t\t            for(var key in newState) {\n\t\t                state[key] = newState[key];\n\t\t            }\n\t\t            dispatch.stateChange(state);\n\t\t            chart.update();\n\t\t        });\n\n                //Update dimensions order and display reset sorting button\n\t\t        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {\n\t\t            dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; });\n\t\t            var isSorted = false;\n\t\t            dimensionData.forEach(function (d, i) {\n\t\t                d.currentPosition = i;\n\t\t                if (d.currentPosition !== d.originalPosition)\n\t\t                    isSorted = true;\n\t\t            });\n\t\t            dispatch.dimensionsOrder(dimensionData, isSorted);\n\t\t        });\n\n\t\t\t\t// Update chart from a state object passed to event handler\n                dispatch.on('changeState', function (e) {\n\n                    if (typeof e.disabled !== 'undefined') {\n                        dimensionData.forEach(function (series, i) {\n                            series.disabled = e.disabled[i];\n                        });\n                        state.disabled = e.disabled;\n                    }\n                    chart.update();\n                });\n            });\n\n            renderWatch.renderEnd('parraleleCoordinateChart immediate');\n            return chart;\n        }\n\n\t\t//============================================================\n        // Event Handling/Dispatching (out of chart's scope)\n        //------------------------------------------------------------\n\n        parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {\n            var tp = {\n                key: evt.label,\n                color: evt.color,\n                series: []\n             }\n            if(evt.values){\n                Object.keys(evt.values).forEach(function (d) {\n                    var dim = evt.dimensions.filter(function (dd) {return dd.key === d;})[0];\n                    if(dim){\n                        var v;\n                        if (isNaN(evt.values[d]) || isNaN(parseFloat(evt.values[d]))) {\n                            v = nanValue;\n                        } else {\n                            v = dim.format(evt.values[d]);\n                        }\n                        tp.series.push({ idx: dim.currentPosition, key: d, value: v, color: dim.color });\n                    }\n                });\n                tp.series.sort(function(a,b) {return a.idx - b.idx});\n             }\n            tooltip.data(tp).hidden(false);\n        });\n\n        parallelCoordinates.dispatch.on('elementMouseout.tooltip', function(evt) {\n            tooltip.hidden(true)\n        });\n\n        parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {\n            tooltip();\n        });\n\t\t //============================================================\n        // Expose Public Variables\n        //------------------------------------------------------------\n\n\t\t// expose chart's sub-components\n        chart.dispatch = dispatch;\n        chart.parallelCoordinates = parallelCoordinates;\n        chart.legend = legend;\n        chart.tooltip = tooltip;\n        chart.options = nv.utils.optionsFunc.bind(chart);\n\n        chart._options = Object.create({}, {\n            // simple options, just get/set the necessary values\n            width: { get: function () { return width; }, set: function (_) { width = _; } },\n            height: { get: function () { return height; }, set: function (_) { height = _; } },\n            showLegend: { get: function () { return showLegend; }, set: function (_) { showLegend = _; } },\n            defaultState: { get: function () { return defaultState; }, set: function (_) { defaultState = _; } },\n            dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n            displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n            noData: { get: function () { return noData; }, set: function (_) { noData = _; } },\n            nanValue: { get: function () { return nanValue; }, set: function (_) { nanValue = _; } },\n\n            // options that require extra logic in the setter\n            margin: {\n                get: function () { return margin; },\n                set: function (_) {\n                    if (_.top !== undefined) {\n                        margin.top = _.top;\n                        marginTop = _.top;\n                    }\n                    margin.right = _.right !== undefined ? _.right : margin.right;\n                    margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n                    margin.left = _.left !== undefined ? _.left : margin.left;\n                }\n            },\n            color: {get: function(){return color;}, set: function(_){\n                    color = nv.utils.getColor(_);\n                    legend.color(color);\n                    parallelCoordinates.color(color);\n                }}\n        });\n\n        nv.utils.inheritOptions(chart, parallelCoordinates);\n        nv.utils.initOptions(chart);\n\n        return chart;\n    };\nnv.models.pie = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 500\n        , height = 500\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , valueFormat = d3.format(',.2f')\n        , showLabels = true\n        , labelsOutside = false\n        , labelType = \"key\"\n        , labelThreshold = .02 //if slice percentage is under this, don't show label\n        , hideOverlapLabels = false //Hide labels that don't fit in slice\n        , donut = false\n        , title = false\n        , growOnHover = true\n        , titleOffset = 0\n        , labelSunbeamLayout = false\n        , startAngle = false\n        , padAngle = false\n        , endAngle = false\n        , cornerRadius = 0\n        , donutRatio = 0.5\n        , duration = 250\n        , arcsRadius = []\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    var arcs = [];\n    var arcsOver = [];\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right\n                , availableHeight = height - margin.top - margin.bottom\n                , radius = Math.min(availableWidth, availableHeight) / 2\n                , arcsRadiusOuter = []\n                , arcsRadiusInner = []\n                ;\n\n            container = d3.select(this)\n            if (arcsRadius.length === 0) {\n                var outer = radius - radius / 10;\n                var inner = donutRatio * radius;\n                for (var i = 0; i < data[0].length; i++) {\n                    arcsRadiusOuter.push(outer);\n                    arcsRadiusInner.push(inner);\n                }\n            } else {\n                if(growOnHover){\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 10) * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 10) * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 10); }));\n                } else {\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return d.outer * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return d.inner * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return d.inner; }));\n                }\n            }\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n            var g_pie = gEnter.append('g').attr('class', 'nv-pie');\n            gEnter.append('g').attr('class', 'nv-pieLabels');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\n            //\n            container.on('click', function(d,i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            arcs = [];\n            arcsOver = [];\n            for (var i = 0; i < data[0].length; i++) {\n\n                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);\n                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);\n\n                if (startAngle !== false) {\n                    arc.startAngle(startAngle);\n                    arcOver.startAngle(startAngle);\n                }\n                if (endAngle !== false) {\n                    arc.endAngle(endAngle);\n                    arcOver.endAngle(endAngle);\n                }\n                if (donut) {\n                    arc.innerRadius(arcsRadiusInner[i]);\n                    arcOver.innerRadius(arcsRadiusInner[i]);\n                }\n\n                if (arc.cornerRadius && cornerRadius) {\n                    arc.cornerRadius(cornerRadius);\n                    arcOver.cornerRadius(cornerRadius);\n                }\n\n                arcs.push(arc);\n                arcsOver.push(arcOver);\n            }\n\n            // Setup the Pie chart and choose the data element\n            var pie = d3.layout.pie()\n                .sort(null)\n                .value(function(d) { return d.disabled ? 0 : getY(d) });\n\n            // padAngle added in d3 3.5\n            if (pie.padAngle && padAngle) {\n                pie.padAngle(padAngle);\n            }\n\n            // if title is specified and donut, put it in the middle\n            if (donut && title) {\n                g_pie.append(\"text\").attr('class', 'nv-pie-title');\n\n                wrap.select('.nv-pie-title')\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function (d) {\n                        return title;\n                    })\n                    .style(\"font-size\", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + \"px\")\n                    .attr(\"dy\", \"0.35em\") // trick to vertically center text\n                    .attr('transform', function(d, i) {\n                        return 'translate(0, '+ titleOffset + ')';\n                    });\n            }\n\n            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);\n            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);\n\n            slices.exit().remove();\n            pieLabels.exit().remove();\n\n            var ae = slices.enter().append('g');\n            ae.attr('class', 'nv-slice');\n            ae.on('mouseover', function(d, i) {\n                d3.select(this).classed('hover', true);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(70)\n                        .attr(\"d\", arcsOver[i]);\n                }\n                dispatch.elementMouseover({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    percent: (d.endAngle - d.startAngle) / (2 * Math.PI)\n                });\n            });\n            ae.on('mouseout', function(d, i) {\n                d3.select(this).classed('hover', false);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(50)\n                        .attr(\"d\", arcs[i]);\n                }\n                dispatch.elementMouseout({data: d.data, index: i});\n            });\n            ae.on('mousemove', function(d, i) {\n                dispatch.elementMousemove({data: d.data, index: i});\n            });\n            ae.on('click', function(d, i) {\n                var element = this;\n                dispatch.elementClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    event: d3.event,\n                    element: element\n                });\n            });\n            ae.on('dblclick', function(d, i) {\n                dispatch.elementDblClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\")\n                });\n            });\n\n            slices.attr('fill', function(d,i) { return color(d.data, i); });\n            slices.attr('stroke', function(d,i) { return color(d.data, i); });\n\n            var paths = ae.append('path').each(function(d) {\n                this._current = d;\n            });\n\n            slices.select('path')\n                .transition()\n                .duration(duration)\n                .attr('d', function (d, i) { return arcs[i](d); })\n                .attrTween('d', arcTween);\n\n            if (showLabels) {\n                // This does the normal label\n                var labelsArc = [];\n                for (var i = 0; i < data[0].length; i++) {\n                    labelsArc.push(arcs[i]);\n\n                    if (labelsOutside) {\n                        if (donut) {\n                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());\n                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);\n                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);\n                        }\n                    } else if (!donut) {\n                            labelsArc[i].innerRadius(0);\n                    }\n                }\n\n                pieLabels.enter().append(\"g\").classed(\"nv-label\",true).each(function(d,i) {\n                    var group = d3.select(this);\n\n                    group.attr('transform', function (d, i) {\n                        if (labelSunbeamLayout) {\n                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                                rotateAngle -= 90;\n                            } else {\n                                rotateAngle += 90;\n                            }\n                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                        } else {\n                            d.outerRadius = radius + 10; // Set Outer Coordinate\n                            d.innerRadius = radius + 15; // Set Inner Coordinate\n                            return 'translate(' + labelsArc[i].centroid(d) + ')'\n                        }\n                    });\n\n                    group.append('rect')\n                        .style('stroke', '#fff')\n                        .style('fill', '#fff')\n                        .attr(\"rx\", 3)\n                        .attr(\"ry\", 3);\n\n                    group.append('text')\n                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                        .style('fill', '#000')\n                });\n\n                var labelLocationHash = {};\n                var avgHeight = 14;\n                var avgWidth = 140;\n                var createHashKey = function(coordinates) {\n                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n                };\n                var getSlicePercentage = function(d) {\n                    return (d.endAngle - d.startAngle) / (2 * Math.PI);\n                };\n\n                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {\n                    if (labelSunbeamLayout) {\n                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                            rotateAngle -= 90;\n                        } else {\n                            rotateAngle += 90;\n                        }\n                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                    } else {\n                        d.outerRadius = radius + 10; // Set Outer Coordinate\n                        d.innerRadius = radius + 15; // Set Inner Coordinate\n\n                        /*\n                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n                        Adjust the label's y-position to remove the overlap.\n                        */\n                        var center = labelsArc[i].centroid(d);\n                        var percent = getSlicePercentage(d);\n                        if (d.value && percent >= labelThreshold) {\n                            var hashKey = createHashKey(center);\n                            if (labelLocationHash[hashKey]) {\n                                center[1] -= avgHeight;\n                            }\n                            labelLocationHash[createHashKey(center)] = true;\n                        }\n                        return 'translate(' + center + ')'\n                    }\n                });\n\n                pieLabels.select(\".nv-label text\")\n                    .style('text-anchor', function(d,i) {\n                        //center the text on it's origin or begin/end if orthogonal aligned\n                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';\n                    })\n                    .text(function(d, i) {\n                        var percent = getSlicePercentage(d);\n                        var label = '';\n                        if (!d.value || percent < labelThreshold) return '';\n\n                        if(typeof labelType === 'function') {\n                            label = labelType(d, i, {\n                                'key': getX(d.data),\n                                'value': getY(d.data),\n                                'percent': valueFormat(percent)\n                            });\n                        } else {\n                            switch (labelType) {\n                                case 'key':\n                                    label = getX(d.data);\n                                    break;\n                                case 'value':\n                                    label = valueFormat(getY(d.data));\n                                    break;\n                                case 'percent':\n                                    label = d3.format('%')(percent);\n                                    break;\n                            }\n                        }\n                        return label;\n                    })\n                ;\n\n                if (hideOverlapLabels) {\n                    pieLabels\n                        .each(function (d, i) {\n                            if (!this.getBBox) return;\n                            var bb = this.getBBox(),\n                            center = labelsArc[i].centroid(d);\n                            var topLeft = {\n                              x : center[0] + bb.x,\n                              y : center[1] + bb.y\n                            };\n\n                            var topRight = {\n                              x : topLeft.x + bb.width,\n                              y : topLeft.y\n                            };\n\n                            var bottomLeft = {\n                              x : topLeft.x,\n                              y : topLeft.y + bb.height\n                            };\n\n                            var bottomRight = {\n                              x : topLeft.x + bb.width,\n                              y : topLeft.y + bb.height\n                            };\n\n                            d.visible = nv.utils.pointIsInArc(topLeft, d, arc) &&\n                            nv.utils.pointIsInArc(topRight, d, arc) &&\n                            nv.utils.pointIsInArc(bottomLeft, d, arc) &&\n                            nv.utils.pointIsInArc(bottomRight, d, arc);\n                        })\n                        .style('display', function (d) {\n                            return d.visible ? null : 'none';\n                        })\n                    ;\n                }\n\n            }\n\n\n            // Computes the angle of an arc, converting from radians to degrees.\n            function angle(d) {\n                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n                return a > 90 ? a - 180 : a;\n            }\n\n            function arcTween(a, idx) {\n                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n                if (!donut) a.innerRadius = 0;\n                var i = d3.interpolate(this._current, a);\n                this._current = i(0);\n                return function (t) {\n                    return arcs[idx](i(t));\n                };\n            }\n        });\n\n        renderWatch.renderEnd('pie immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n        title:      {get: function(){return title;}, set: function(_){title=_;}},\n        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},\n        hideOverlapLabels: {get: function(){return hideOverlapLabels;}, set: function(_){hideOverlapLabels=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        x:          {get: function(){return getX;}, set: function(_){getX=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},\n        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},\n        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},\n        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},\n        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},\n        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},\n        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},\n        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},\n        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},\n\n        // depreciated after 1.7.1\n        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');\n        }},\n        // depreciated after 1.7.1\n        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');\n        }},\n        // deprecated after 1.7.1\n        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {\n            valueFormat=_;\n            nv.deprecated('labelFormat','use valueFormat instead');\n        }},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY=d3.functor(_);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }},\n        labelType:          {get: function(){return labelType;}, set: function(_){\n            labelType= _ || 'key';\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.pieChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var pie = nv.models.pie();\n    var legend = nv.models.legend();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , marginTop = null\n        , width = null\n        , height = null\n        , showTooltipPercent = false\n        , showLegend = true\n        , legendPosition = \"top\"\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return pie.valueFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined) {\n                data.forEach(function (series, i) {\n                    series.disabled = !state.active[i];\n                });\n            }\n        }\n    };\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(pie);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var that = this;\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            state.setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-pieWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                if (legendPosition === \"top\") {\n                    legend.width( availableWidth ).key(pie.x());\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                } else if (legendPosition === \"right\") {\n                    var legendWidth = nv.models.legend().width();\n                    if (availableWidth / 2 < legendWidth) {\n                        legendWidth = (availableWidth / 2)\n                    }\n                    legend.height(availableHeight).key(pie.x());\n                    legend.width(legendWidth);\n                    availableWidth -= legend.width();\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend)\n                        .attr('transform', 'translate(' + (availableWidth) +',0)');\n                } else if (legendPosition === \"bottom\") {\n                    legend.width( availableWidth ).key(pie.x());\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    margin.bottom = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + availableHeight +')');\n                }\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            pie.width(availableWidth).height(availableHeight);\n            var pieWrap = g.select('.nv-pieWrap').datum([data]);\n            d3.transition(pieWrap).call(pie);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState) {\n                    state[key] = newState[key];\n                }\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('pieChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    pie.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    pie.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    pie.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.legend = legend;\n    chart.dispatch = dispatch;\n    chart.pie = pie;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:              {get: function(){return width;},                set: function(_){width=_;}},\n        height:             {get: function(){return height;},               set: function(_){height=_;}},\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n        showLegend:         {get: function(){return showLegend;},           set: function(_){showLegend=_;}},\n        legendPosition:     {get: function(){return legendPosition;},       set: function(_){legendPosition=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            legend.color(color);\n            pie.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            pie.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n    nv.utils.inheritOptions(chart, pie);\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sankey = function() {\n    'use strict';\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sankey = {},\n        nodeWidth = 24,\n        nodePadding = 8,\n        size = [1, 1],\n        nodes = [],\n        links = [],\n        sinksRight = true;\n\n    var layout = function(iterations) {\n        computeNodeLinks();\n        computeNodeValues();\n        computeNodeBreadths();\n        computeNodeDepths(iterations);\n    };\n\n    var relayout = function() {\n        computeLinkDepths();\n    };\n\n    // SVG path data generator, to be used as 'd' attribute on 'path' element selection.\n    var link = function() {\n        var curvature = .5;\n\n        function link(d) {\n\n            var x0 = d.source.x + d.source.dx,\n                x1 = d.target.x,\n                xi = d3.interpolateNumber(x0, x1),\n                x2 = xi(curvature),\n                x3 = xi(1 - curvature),\n                y0 = d.source.y + d.sy + d.dy / 2,\n                y1 = d.target.y + d.ty + d.dy / 2;\n            var linkPath = 'M' + x0 + ',' + y0\n                + 'C' + x2 + ',' + y0\n                + ' ' + x3 + ',' + y1\n                + ' ' + x1 + ',' + y1;\n            return linkPath;\n        }\n\n        link.curvature = function(_) {\n            if (!arguments.length) return curvature;\n            curvature = +_;\n            return link;\n        };\n\n        return link;\n    };\n\n    // Y-position of the middle of a node.\n    var center = function(node) {\n        return node.y + node.dy / 2;\n    };\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    // Populate the sourceLinks and targetLinks for each node.\n    // Also, if the source and target are not objects, assume they are indices.\n    function computeNodeLinks() {\n        nodes.forEach(function(node) {\n            // Links that have this node as source.\n            node.sourceLinks = [];\n            // Links that have this node as target.\n            node.targetLinks = [];\n        });\n        links.forEach(function(link) {\n            var source = link.source,\n                target = link.target;\n            if (typeof source === 'number') source = link.source = nodes[link.source];\n            if (typeof target === 'number') target = link.target = nodes[link.target];\n            source.sourceLinks.push(link);\n            target.targetLinks.push(link);\n        });\n    }\n\n    // Compute the value (size) of each node by summing the associated links.\n    function computeNodeValues() {\n        nodes.forEach(function(node) {\n            node.value = Math.max(\n                d3.sum(node.sourceLinks, value),\n                d3.sum(node.targetLinks, value)\n            );\n        });\n    }\n\n    // Iteratively assign the breadth (x-position) for each node.\n    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n    // nodes with no incoming links are assigned breadth zero, while\n    // nodes with no outgoing links are assigned the maximum breadth.\n    function computeNodeBreadths() {\n        //\n        var remainingNodes = nodes,\n            nextNodes,\n            x = 0;\n\n        // Work from left to right.\n        // Keep updating the breath (x-position) of nodes that are target of recently updated nodes.\n        //\n        while (remainingNodes.length && x < nodes.length) {\n            nextNodes = [];\n            remainingNodes.forEach(function(node) {\n                node.x = x;\n                node.dx = nodeWidth;\n                node.sourceLinks.forEach(function(link) {\n                    if (nextNodes.indexOf(link.target) < 0) {\n                        nextNodes.push(link.target);\n                    }\n                });\n            });\n            remainingNodes = nextNodes;\n            ++x;\n            //\n        }\n\n        // Optionally move pure sinks always to the right.\n        if (sinksRight) {\n            moveSinksRight(x);\n        }\n\n        scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n    }\n\n    function moveSourcesRight() {\n        nodes.forEach(function(node) {\n            if (!node.targetLinks.length) {\n                node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n            }\n        });\n    }\n\n    function moveSinksRight(x) {\n        nodes.forEach(function(node) {\n            if (!node.sourceLinks.length) {\n                node.x = x - 1;\n            }\n        });\n    }\n\n    function scaleNodeBreadths(kx) {\n        nodes.forEach(function(node) {\n            node.x *= kx;\n        });\n    }\n\n    // Compute the depth (y-position) for each node.\n    function computeNodeDepths(iterations) {\n        // Group nodes by breath.\n        var nodesByBreadth = d3.nest()\n            .key(function(d) { return d.x; })\n            .sortKeys(d3.ascending)\n            .entries(nodes)\n            .map(function(d) { return d.values; });\n\n        //\n        initializeNodeDepth();\n        resolveCollisions();\n        computeLinkDepths();\n        for (var alpha = 1; iterations > 0; --iterations) {\n            relaxRightToLeft(alpha *= .99);\n            resolveCollisions();\n            computeLinkDepths();\n            relaxLeftToRight(alpha);\n            resolveCollisions();\n            computeLinkDepths();\n        }\n\n        function initializeNodeDepth() {\n            // Calculate vertical scaling factor.\n            var ky = d3.min(nodesByBreadth, function(nodes) {\n                return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n            });\n\n            nodesByBreadth.forEach(function(nodes) {\n                nodes.forEach(function(node, i) {\n                    node.y = i;\n                    node.dy = node.value * ky;\n                });\n            });\n\n            links.forEach(function(link) {\n                link.dy = link.value * ky;\n            });\n        }\n\n        function relaxLeftToRight(alpha) {\n            nodesByBreadth.forEach(function(nodes, breadth) {\n                nodes.forEach(function(node) {\n                    if (node.targetLinks.length) {\n                        // Value-weighted average of the y-position of source node centers linked to this node.\n                        var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedSource(link) {\n                return (link.source.y + link.sy + link.dy / 2) * link.value;\n            }\n        }\n\n        function relaxRightToLeft(alpha) {\n            nodesByBreadth.slice().reverse().forEach(function(nodes) {\n                nodes.forEach(function(node) {\n                    if (node.sourceLinks.length) {\n                        // Value-weighted average of the y-positions of target nodes linked to this node.\n                        var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedTarget(link) {\n                return (link.target.y + link.ty + link.dy / 2) * link.value;\n            }\n        }\n\n        function resolveCollisions() {\n            nodesByBreadth.forEach(function(nodes) {\n                var node,\n                    dy,\n                    y0 = 0,\n                    n = nodes.length,\n                    i;\n\n                // Push any overlapping nodes down.\n                nodes.sort(ascendingDepth);\n                for (i = 0; i < n; ++i) {\n                    node = nodes[i];\n                    dy = y0 - node.y;\n                    if (dy > 0) node.y += dy;\n                    y0 = node.y + node.dy + nodePadding;\n                }\n\n                // If the bottommost node goes outside the bounds, push it back up.\n                dy = y0 - nodePadding - size[1];\n                if (dy > 0) {\n                    y0 = node.y -= dy;\n\n                    // Push any overlapping nodes back up.\n                    for (i = n - 2; i >= 0; --i) {\n                        node = nodes[i];\n                        dy = node.y + node.dy + nodePadding - y0;\n                        if (dy > 0) node.y -= dy;\n                        y0 = node.y;\n                    }\n                }\n            });\n        }\n\n        function ascendingDepth(a, b) {\n            return a.y - b.y;\n        }\n    }\n\n    // Compute y-offset of the source endpoint (sy) and target endpoints (ty) of links,\n    // relative to the source/target node's y-position.\n    function computeLinkDepths() {\n        nodes.forEach(function(node) {\n            node.sourceLinks.sort(ascendingTargetDepth);\n            node.targetLinks.sort(ascendingSourceDepth);\n        });\n        nodes.forEach(function(node) {\n            var sy = 0, ty = 0;\n            node.sourceLinks.forEach(function(link) {\n                link.sy = sy;\n                sy += link.dy;\n            });\n            node.targetLinks.forEach(function(link) {\n                link.ty = ty;\n                ty += link.dy;\n            });\n        });\n\n        function ascendingSourceDepth(a, b) {\n            return a.source.y - b.source.y;\n        }\n\n        function ascendingTargetDepth(a, b) {\n            return a.target.y - b.target.y;\n        }\n    }\n\n    // Value property accessor.\n    function value(x) {\n        return x.value;\n    }\n\n    sankey.options = nv.utils.optionsFunc.bind(sankey);\n    sankey._options = Object.create({}, {\n        nodeWidth:    {get: function(){return nodeWidth;},   set: function(_){nodeWidth=+_;}},\n        nodePadding:  {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        nodes:        {get: function(){return nodes;},       set: function(_){nodes=_;}},\n        links:        {get: function(){return links ;},      set: function(_){links=_;}},\n        size:         {get: function(){return size;},        set: function(_){size=_;}},\n        sinksRight:   {get: function(){return sinksRight;},  set: function(_){sinksRight=_;}},\n\n        layout:       {get: function(){layout(32);},         set: function(_){layout(_);}},\n        relayout:     {get: function(){relayout();},         set: function(_){}},\n        center:       {get: function(){return center();},    set: function(_){\n            if(typeof _ === 'function'){\n                center=_;\n            }\n        }},\n        link:         {get: function(){return link();},      set: function(_){\n            if(typeof _ === 'function'){\n                link=_;\n            }\n            return link();\n        }}\n    });\n\n    nv.utils.initOptions(sankey);\n\n    return sankey;\n};\nnv.models.sankeyChart = function() {\n    \"use strict\";\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , sankey = nv.models.sankey()\n        , width = 600\n        , height = 400\n        , nodeWidth = 36\n        , nodePadding =  40\n        , units = 'units'\n        , center = undefined\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var formatNumber = d3.format(',.0f');    // zero decimal places\n    var format = function(d) {\n        return formatNumber(d) + ' ' + units;\n    };\n    var color = d3.scale.category20();\n    var linkTitle = function(d){\n        return d.source.name + ' → ' + d.target.name + '\\n' + format(d.value);\n    };\n    var nodeFillColor = function(d){\n        return d.color = color(d.name.replace(/ .*/, ''));\n    };\n    var nodeStrokeColor = function(d){\n        return d3.rgb(d.color).darker(2);\n    };\n    var nodeTitle = function(d){\n        return d.name + '\\n' + format(d.value);\n    };\n\n    var showError = function(element, message) {\n        element.append('text')\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('class', 'nvd3-sankey-chart-error')\n            .attr('text-anchor', 'middle')\n            .text(message);\n    };\n\n    function chart(selection) {\n        selection.each(function(data) {\n\n            var testData = {\n                nodes:\n                    [\n                        {'node': 1, 'name': 'Test 1'},\n                        {'node': 2, 'name': 'Test 2'},\n                        {'node': 3, 'name': 'Test 3'},\n                        {'node': 4, 'name': 'Test 4'},\n                        {'node': 5, 'name': 'Test 5'},\n                        {'node': 6, 'name': 'Test 6'}\n                    ],\n                links:\n                    [\n                        {'source': 0, 'target': 1, 'value': 2295},\n                        {'source': 0, 'target': 5, 'value': 1199},\n                        {'source': 1, 'target': 2, 'value': 1119},\n                        {'source': 1, 'target': 5, 'value': 1176},\n                        {'source': 2, 'target': 3, 'value': 487},\n                        {'source': 2, 'target': 5, 'value': 632},\n                        {'source': 3, 'target': 4, 'value': 301},\n                        {'source': 3, 'target': 5, 'value': 186}\n                    ]\n            };\n\n            // Error handling\n            var isDataValid = false;\n            var dataAvailable = false;\n\n            // check if data is valid\n            if(\n                (typeof data['nodes'] === 'object' && data['nodes'].length) >= 0 &&\n                (typeof data['links'] === 'object' && data['links'].length) >= 0\n            ){\n                isDataValid = true;\n            }\n\n            // check if data is available\n            if(\n                data['nodes'] && data['nodes'].length > 0 &&\n                data['links'] && data['links'].length > 0\n            ) {\n                dataAvailable = true;\n            }\n\n            // show error\n            if(!isDataValid) {\n                console.error('NVD3 Sankey chart error:', 'invalid data format for', data);\n                console.info('Valid data format is: ', testData, JSON.stringify(testData));\n                showError(selection, 'Error loading chart, data is invalid');\n                return false;\n            }\n\n            // TODO use nv.utils.noData\n            if(!dataAvailable) {\n                showError(selection, 'No data available');\n                return false;\n            }\n\n            // No errors, continue\n\n            // append the svg canvas to the page\n            var svg = selection.append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .append('g')\n                .attr('class', 'nvd3 nv-wrap nv-sankeyChart');\n\n            // Set the sankey diagram properties\n            sankey\n                .nodeWidth(nodeWidth)\n                .nodePadding(nodePadding)\n                .size([width, height]);\n\n            var path = sankey.link();\n\n            sankey\n                .nodes(data.nodes)\n                .links(data.links)\n                .layout(32)\n                .center(center);\n\n            // add in the links\n            var link = svg.append('g').selectAll('.link')\n                .data(data.links)\n                .enter().append('path')\n                .attr('class', 'link')\n                .attr('d', path)\n                .style('stroke-width', function(d) { return Math.max(1, d.dy); })\n            .sort(function(a,b) { return b.dy - a.dy; });\n\n            // add the link titles\n            link.append('title')\n                .text(linkTitle);\n\n            // add in the nodes\n            var node = svg.append('g').selectAll('.node')\n                .data(data.nodes)\n                .enter().append('g')\n                .attr('class', 'node')\n                .attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; })\n                .call(\n                    d3.behavior\n                        .drag()\n                        .origin(function(d) { return d; })\n                        .on('dragstart', function() {\n                            this.parentNode.appendChild(this);\n                        })\n                        .on('drag', dragmove)\n                );\n\n            // add the rectangles for the nodes\n            node.append('rect')\n                .attr('height', function(d) { return d.dy; })\n                .attr('width', sankey.nodeWidth())\n                .style('fill', nodeFillColor)\n                .style('stroke', nodeStrokeColor)\n                .append('title')\n                .text(nodeTitle);\n\n            // add in the title for the nodes\n            node.append('text')\n                .attr('x', -6)\n                .attr('y', function(d) { return d.dy / 2; })\n                .attr('dy', '.35em')\n                .attr('text-anchor', 'end')\n                .attr('transform', null)\n                .text(function(d) { return d.name; })\n                .filter(function(d) { return d.x < width / 2; })\n                .attr('x', 6 + sankey.nodeWidth())\n                .attr('text-anchor', 'start');\n\n            // the function for moving the nodes\n            function dragmove(d) {\n                d3.select(this).attr('transform',\n                'translate(' + d.x + ',' + (\n                    d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))\n                ) + ')');\n                sankey.relayout();\n                link.attr('d', path);\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        units:           {get: function(){return units;},       set: function(_){units=_;}},\n        width:           {get: function(){return width;},       set: function(_){width=_;}},\n        height:          {get: function(){return height;},      set: function(_){height=_;}},\n        format:          {get: function(){return format;},      set: function(_){format=_;}},\n        linkTitle:       {get: function(){return linkTitle;},   set: function(_){linkTitle=_;}},\n        nodeWidth:       {get: function(){return nodeWidth;},   set: function(_){nodeWidth=_;}},\n        nodePadding:     {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        center:          {get: function(){return center},       set: function(_){center=_}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        nodeStyle: {get: function(){return {};}, set: function(_){\n            nodeFillColor   = _.fillColor   !== undefined ? _.fillColor   : nodeFillColor;\n            nodeStrokeColor = _.strokeColor !== undefined ? _.strokeColor : nodeStrokeColor;\n            nodeTitle       = _.title       !== undefined ? _.title       : nodeTitle;\n        }}\n\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.scatter = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n        , width        = null\n        , height       = null\n        , color        = nv.utils.defaultColor() // chooses color\n        , pointBorderColor = null\n        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n        , container    = null\n        , x            = d3.scale.linear()\n        , y            = d3.scale.linear()\n        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n        , getX         = function(d) { return d.x } // accessor to get the x value\n        , getY         = function(d) { return d.y } // accessor to get the y value\n        , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , forceY       = [] // List of numbers to Force into the Y scale\n        , forceSize    = [] // List of numbers to Force into the Size scale\n        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n        , clipEdge     = false // if true, masks points within x and y scale\n        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n        , showVoronoi  = false // display the voronoi areas\n        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n        , xDomain      = null // Override x domain (skips the calculation from data)\n        , yDomain      = null // Override y domain\n        , xRange       = null // Override x range\n        , yRange       = null // Override y range\n        , sizeDomain   = null // Override point size domain\n        , sizeRange    = null\n        , singlePoint  = false\n        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        , useVoronoi   = true\n        , duration     = 250\n        , interactiveUpdateDelay = 300\n        , showLabels    = false\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0, z0 // used to store previous scales\n        , xDom, yDom // used to store previous domains\n        , width0\n        , height0\n        , timeoutID\n        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        , _sizeRange_def = [16, 256]\n        , _cache = {}\n        ;\n\n    //============================================================\n    // Diff and Cache Utilities\n    //------------------------------------------------------------\n    // getDiffs is used to filter unchanged points from the update\n    // selection. It implicitly updates it's cache when called and\n    // therefor the diff is based upon the previous invocation NOT\n    // the previous update.\n    //\n    // getDiffs takes a point as its first argument followed by n\n    // key getter pairs (d, [key, get... key, get]) this approach\n    // was chosen for efficiency. (The filter will call it a LOT).\n    //\n    // It is important to call delCache on point exit to prevent a\n    // memory leak. It is also needed to prevent invalid caches if\n    // a new point uses the same series and point id key.\n    //\n    // Argument Performance Concerns:\n    // - Object property lists for key getter pairs would be very\n    // expensive (points * objects for the GC every update).\n    // - ES6 function names for implicit keys would be nice but\n    // they are not guaranteed to be unique.\n    // - function.toString to obtain implicit keys is possible\n    // but long object keys are not free (internal hash).\n    // - Explicit key without objects are the most efficient.\n\n    function getCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        val = _cache[key] = _cache[key] || {};\n        return val;\n    }\n\n    function delCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        delete _cache[key];\n    }\n\n    function getDiffs(d) {\n        var i, key, val,\n            cache = getCache(d),\n            diffs = false;\n        for (i = 1; i < arguments.length; i += 2) {\n            key = arguments[i];\n            val = arguments[i + 1](d[0], d[1]);\n            if (cache[key] !== val || !cache.hasOwnProperty(key)) {\n                cache[key] = val;\n                diffs = true;\n            }\n        }\n        return diffs;\n    }\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            var logScale = (typeof(chart.yScale().base) === \"function\"); // Only log scale has a method \"base()\"\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n                d3.merge(\n                    data.map(function(d) {\n                        return d.values.map(function(d,i) {\n                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n                        })\n                    })\n                );\n\n            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\n            if (padData && data[0])\n                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n             if (logScale) {\n                    var min = d3.min(seriesData.map(function(d) { if (d.y !== 0) return d.y; }));\n                    y.clamp(true)\n                        .domain(yDomain || d3.extent(seriesData.map(function(d) {\n                            if (d.y !== 0) return d.y;\n                            else return min * 0.1;\n                        }).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                } else {\n                        y.domain(yDomain || d3.extent(seriesData.map(function (d) { return d.y;}).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                }\n\n            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n                .range(sizeRange || _sizeRange_def);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];\n\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            if ( isNaN(x.domain()[0])) {\n                x.domain([-1,1]);\n            }\n\n            if ( isNaN(y.domain()[0])) {\n                y.domain([-1,1]);\n            }\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n            z0 = z0 || z;\n\n            var scaleDiff = x(1) !== x0(1) || y(1) !== y0(1) || z(1) !== z0(1);\n\n            width0 = width0 || width;\n            height0 = height0 || height;\n\n            var sizeDiff = width0 !== width || height0 !== height;\n\n            // Domain Diffs\n\n            xDom = xDom || [];\n            var domainDiff = xDom[0] !== x.domain()[0] || xDom[1] !== x.domain()[1];\n            xDom = x.domain();\n\n            yDom = yDom || [];\n            domainDiff = domainDiff || yDom[0] !== y.domain()[0] || yDom[1] !== y.domain()[1];\n            yDom = y.domain();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.classed('nv-single-point', singlePoint);\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-point-paths');\n            wrapEnter.append('g').attr('class', 'nv-point-clips');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect')\n                .attr('transform', 'translate( -10, -10)');\n\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth + 20)\n                .attr('height', (availableHeight > 0) ? availableHeight + 20 : 0);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            function updateInteractiveLayer() {\n                // Always clear needs-update flag regardless of whether or not\n                // we will actually do anything (avoids needless invocations).\n                needsUpdate = false;\n\n                if (!interactive) return false;\n\n                // inject series and point index for reference into voronoi\n                if (useVoronoi === true) {\n\n                    // nuke all voronoi paths on reload and recreate them\n                    wrap.select('.nv-point-paths').selectAll('path').remove();\n\n                    var vertices = d3.merge(data.map(function(group, groupIndex) {\n                            return group.values\n                                .map(function(point, pointIndex) {\n                                    // *Adding noise to make duplicates very unlikely\n                                    // *Injecting series and point index for reference\n                                    // *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n                                    var pX = getX(point,pointIndex);\n                                    var pY = getY(point,pointIndex);\n\n                                    return [nv.utils.NaNtoZero(x(pX)) + Math.random() * 1e-4,\n                                            nv.utils.NaNtoZero(y(pY)) + Math.random() * 1e-4,\n                                        groupIndex,\n                                        pointIndex, point];\n                                })\n                                .filter(function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n                                })\n                        })\n                    );\n\n                    if (vertices.length == 0) return false;  // No active points, we're done\n                    if (vertices.length < 3) {\n                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n                    }\n\n                    // keep voronoi sections from going more than 10 outside of graph\n                    // to avoid overlap with other things like legend etc\n                    var bounds = d3.geom.polygon([\n                        [-10,-10],\n                        [-10,height + 10],\n                        [width + 10,height + 10],\n                        [width + 10,-10]\n                    ]);\n\n                    // delete duplicates from vertices - essential assumption for d3.geom.voronoi\n                    var epsilon = 1e-4; // Uses 1e-4 to determine equivalence.\n                    vertices = vertices.sort(function(a,b){return ((a[0] - b[0]) || (a[1] - b[1]))});\n                    for (var i = 0; i < vertices.length - 1; ) {\n                        if ((Math.abs(vertices[i][0] - vertices[i+1][0]) < epsilon) &&\n                        (Math.abs(vertices[i][1] - vertices[i+1][1]) < epsilon)) {\n                            vertices.splice(i+1, 1);\n                        } else {\n                            i++;\n                        }\n                    }\n\n                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n                        return {\n                            'data': bounds.clip(d),\n                            'series': vertices[i][2],\n                            'point': vertices[i][3]\n                        }\n                    });\n\n                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);\n                    var vPointPaths = pointPaths\n                        .enter().append(\"svg:path\")\n                        .attr(\"d\", function(d) {\n                            if (!d || !d.data || d.data.length === 0)\n                                return 'M 0 0';\n                            else\n                                return \"M\" + d.data.join(\",\") + \"Z\";\n                        })\n                        .attr(\"id\", function(d,i) {\n                            return \"nv-path-\"+i; })\n                        .attr(\"clip-path\", function(d,i) { return \"url(#nv-clip-\"+id+\"-\"+i+\")\"; })\n                        ;\n\n                    // good for debugging point hover issues\n                    if (showVoronoi) {\n                        vPointPaths.style(\"fill\", d3.rgb(230, 230, 230))\n                            .style('fill-opacity', 0.4)\n                            .style('stroke-opacity', 1)\n                            .style(\"stroke\", d3.rgb(200,200,200));\n                    }\n\n                    if (clipVoronoi) {\n                        // voronoi sections are already set to clip,\n                        // just create the circles with the IDs they expect\n                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom\n                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);\n                        var vPointClips = pointClips\n                            .enter().append(\"svg:clipPath\")\n                            .attr(\"id\", function(d, i) { return \"nv-clip-\"+id+\"-\"+i;})\n                            .append(\"svg:circle\")\n                            .attr('cx', function(d) { return d[0]; })\n                            .attr('cy', function(d) { return d[1]; })\n                            .attr('r', clipRadius);\n                    }\n\n                    var mouseEventCallback = function(el, d, mDispatch) {\n                        if (needsUpdate) return 0;\n                        var series = data[d.series];\n                        if (series === undefined) return;\n                        var point  = series.values[d.point];\n                        point['color'] = color(series, d.series);\n\n                        // standardize attributes for tooltip.\n                        point['x'] = getX(point);\n                        point['y'] = getY(point);\n\n                        // can't just get box of event node since it's actually a voronoi polygon\n                        var box = container.node().getBoundingClientRect();\n                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;\n                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n\n                        var pos = {\n                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,\n                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10\n                        };\n\n                        mDispatch({\n                            point: point,\n                            series: series,\n                            pos: pos,\n                            relativePos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n                            seriesIndex: d.series,\n                            pointIndex: d.point,\n                            event: d3.event,\n                            element: el\n                        });\n                    };\n\n                    pointPaths\n                        .on('click', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementClick);\n                        })\n                        .on('dblclick', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementDblClick);\n                        })\n                        .on('mouseover', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementMouseover);\n                        })\n                        .on('mouseout', function(d, i) {\n                            mouseEventCallback(this, d, dispatch.elementMouseout);\n                        });\n\n                } else {\n                    // add event handlers to points instead voronoi paths\n                    wrap.select('.nv-groups').selectAll('.nv-group')\n                        .selectAll('.nv-point')\n                        //.data(dataWithPoints)\n                        //.style('pointer-events', 'auto') // recativate events, disabled by css\n                        .on('click', function(d,i) {\n                            //nv.log('test', d, i);\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n                            var element = this;\n                            dispatch.elementClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top], //TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                event: d3.event,\n                                element: element\n                            });\n                        })\n                        .on('dblclick', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementDblClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i\n                            });\n                        })\n                        .on('mouseover', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseover({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        })\n                        .on('mouseout', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseout({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        });\n                }\n            }\n\n            needsUpdate = true;\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .remove();\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('nv-noninteractive', !interactive)\n                .classed('hover', function(d) { return d.hover });\n            groups.watchTransition(renderWatch, 'scatter: groups')\n                .style('fill', function(d,i) { return color(d, i) })\n                .style('stroke', function(d,i) { return d.pointBorderColor || pointBorderColor || color(d, i) })\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .5);\n\n            // create the points, maintaining their IDs from the original data set\n            var points = groups.selectAll('path.nv-point')\n                .data(function(d) {\n                    return d.values.map(\n                        function (point, pointIndex) {\n                            return [point, pointIndex]\n                        }).filter(\n                            function(pointArray, pointIndex) {\n                                return pointActive(pointArray[0], pointIndex)\n                            })\n                    });\n            points.enter().append('path')\n                .attr('class', function (d) {\n                    return 'nv-point nv-point-' + d[1];\n                })\n                .style('fill', function (d) { return d.color })\n                .style('stroke', function (d) { return d.color })\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')'\n                })\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n            points.exit().each(delCache).remove();\n            groups.exit().selectAll('path.nv-point')\n                .watchTransition(renderWatch, 'scatter exit')\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                })\n                .remove();\n\n            //============================================================\n            // Point Update Optimisation Notes\n            //------------------------------------------------------------\n            // The following update selections are filtered with getDiffs\n            // (defined at the top of this file) this brings a performance\n            // benefit for charts with large data sets that accumulate a\n            // subset of changes or additions over time.\n            //\n            // Uneccesary and expensive DOM calls are avoided by culling\n            // unchanged points from the selection in exchange for the\n            // cheaper overhead of caching and diffing each point first.\n            //\n            // Due to the way D3 and NVD3 work, other global changes need\n            // to be considered in addition to local point properties.\n            // This is a potential source of bugs (if any of the global\n            // changes that possibly affect points are missed).\n\n            // Update Point Positions [x, y]\n            points.filter(function (d) {\n                // getDiffs must always be called to update cache\n                return getDiffs(d, 'x', getX, 'y', getY) ||\n                    scaleDiff || sizeDiff || domainDiff;\n            })\n            .watchTransition(renderWatch, 'scatter points')\n            .attr('transform', function (d) {\n                return 'translate(' +\n                    nv.utils.NaNtoZero(x(getX(d[0], d[1]))) + ',' +\n                    nv.utils.NaNtoZero(y(getY(d[0], d[1]))) + ')'\n            });\n\n            // Update Point Appearance [shape, size]\n            points.filter(function (d) {\n                // getDiffs must always be called to update cache\n                return getDiffs(d, 'shape', getShape, 'size', getSize) ||\n                    scaleDiff || sizeDiff || domainDiff;\n            })\n            .watchTransition(renderWatch, 'scatter points')\n            .attr('d', nv.utils.symbol()\n                .type(function (d) { return getShape(d[0]) })\n                .size(function (d) { return z(getSize(d[0], d[1])) })\n            );\n\n            // add label a label to scatter chart\n            if(showLabels)\n            {\n                var titles =  groups.selectAll('.nv-label')\n                    .data(function(d) {\n                        return d.values.map(\n                            function (point, pointIndex) {\n                                return [point, pointIndex]\n                            }).filter(\n                                function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[0], pointIndex)\n                                })\n                        });\n\n                titles.enter().append('text')\n                    .style('fill', function (d,i) {\n                        return d.color })\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 1)\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + Math.sqrt(z(getSize(d[0],d[1]))/Math.PI) + 2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')';\n                    })\n                    .text(function(d,i){\n                        return d[0].label;});\n\n                titles.exit().remove();\n                groups.exit().selectAll('path.nv-label')\n                    .watchTransition(renderWatch, 'scatter exit')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')';\n                    })\n                    .remove();\n               titles.each(function(d) {\n                  d3.select(this)\n                    .classed('nv-label', true)\n                    .classed('nv-label-' + d[1], false)\n                    .classed('hover',false);\n                });\n                titles.watchTransition(renderWatch, 'scatter labels')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                    });\n            }\n\n            // Delay updating the invisible interactive layer for smoother animation\n            if( interactiveUpdateDelay )\n            {\n                clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n                timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay );\n            }\n            else\n            {\n                updateInteractiveLayer();\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n            z0 = z.copy();\n\n            width0 = width;\n            height0 = height;\n\n        });\n        renderWatch.renderEnd('scatter immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // utility function calls provided by this chart\n    chart._calls = new function() {\n        this.clearHighlights = function () {\n            nv.dom.write(function() {\n                container.selectAll(\".nv-point.hover\").classed(\"hover\", false);\n            });\n            return null;\n        };\n        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {\n            nv.dom.write(function() {\n                container.select('.nv-groups')\n                  .selectAll(\".nv-series-\" + seriesIndex)\n                  .selectAll(\".nv-point-\" + pointIndex)\n                  .classed(\"hover\", isHoverOver);\n            });\n        };\n    };\n\n    // trigger calls from events too\n    dispatch.on('elementMouseover.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);\n    });\n\n    dispatch.on('elementMouseout.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);\n    });\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:        {get: function(){return width;}, set: function(_){width=_;}},\n        height:       {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:       {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:       {get: function(){return y;}, set: function(_){y=_;}},\n        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},\n        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},\n        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},\n        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},\n        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},\n        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},\n        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},\n        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},\n        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},\n        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        interactiveUpdateDelay: {get:function(){return interactiveUpdateDelay;}, set: function(_){interactiveUpdateDelay=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){ showLabels = _;}},\n        pointBorderColor: {get: function(){return pointBorderColor;}, set: function(_){pointBorderColor=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},\n        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi = _;\n            if (useVoronoi === false) {\n                clipVoronoi = false;\n            }\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.scatterChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var scatter      = nv.models.scatter()\n        , xAxis        = nv.models.axis()\n        , yAxis        = nv.models.axis()\n        , legend       = nv.models.legend()\n        , distX        = nv.models.distribution()\n        , distY        = nv.models.distribution()\n        , tooltip      = nv.models.tooltip()\n        ;\n\n    var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n        , marginTop = null\n        , width        = null\n        , height       = null\n        , container    = null\n        , color        = nv.utils.defaultColor()\n        , x            = scatter.xScale()\n        , y            = scatter.yScale()\n        , showDistX    = false\n        , showDistY    = false\n        , showLegend   = true\n        , showXAxis    = true\n        , showYAxis    = true\n        , rightAlignYAxis = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , noData       = null\n        , duration = 250\n        , showLabels    = false\n        ;\n\n    scatter.xScale(x).yScale(y);\n    xAxis.orient('bottom').tickPadding(10);\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickPadding(10)\n    ;\n    distX.axis('x');\n    distY.axis('y');\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0\n        , renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        if (showDistX) renderWatch.models(distX);\n        if (showDistY) renderWatch.models(distY);\n\n        selection.each(function(data) {\n            var that = this;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                renderWatch.renderEnd('scatter immediate');\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            // background for pointer events\n            gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n            gEnter.append('g').attr('class', 'nv-distWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = availableWidth;\n                legend.width(legendWidth);\n\n                wrap.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, i);\n                    return d.color;\n                }).filter(function(d,i) { return !data[i].disabled }))\n                .showLabels(showLabels);\n\n            wrap.select('.nv-scatterWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n                .call(scatter);\n\n\n            wrap.select('.nv-regressionLinesWrap')\n                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\n            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n                .data(function (d) {\n                    return d;\n                });\n\n            regWrap.enter().append('g').attr('class', 'nv-regLines');\n\n            var regLine = regWrap.selectAll('.nv-regLine')\n                .data(function (d) {\n                    return [d]\n                });\n\n            regLine.enter()\n                .append('line').attr('class', 'nv-regLine')\n                .style('stroke-opacity', 0);\n\n            // don't add lines unless we have slope and intercept to use\n            regLine.filter(function(d) {\n                return d.intercept && d.slope;\n            })\n                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')\n                .attr('x1', x.range()[0])\n                .attr('x2', x.range()[1])\n                .attr('y1', function (d, i) {\n                    return y(x.domain()[0] * d.slope + d.intercept)\n                })\n                .attr('y2', function (d, i) {\n                    return y(x.domain()[1] * d.slope + d.intercept)\n                })\n                .style('stroke', function (d, i, j) {\n                    return color(d, j)\n                })\n                .style('stroke-opacity', function (d, i) {\n                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1\n                });\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight , 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            // Setup Distribution\n            if (showDistX) {\n                distX\n                    .getData(scatter.x())\n                    .scale(x)\n                    .width(availableWidth)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionX');\n                g.select('.nv-distributionX')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distX);\n            }\n\n            if (showDistY) {\n                distY\n                    .getData(scatter.y())\n                    .scale(y)\n                    .width(availableHeight)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionY');\n                g.select('.nv-distributionY')\n                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distY);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block\n            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {\n                tooltip.hidden(true);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', 0);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', distY.size());\n            });\n\n            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', evt.relativePos[1] - availableHeight);\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', evt.relativePos[0] + distX.size());\n                tooltip.data(evt).hidden(false);\n            });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('scatter with line immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.distX = distX;\n    chart.distY = distY;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        container:  {get: function(){return container;}, set: function(_){container=_;}},\n        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},\n        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            distX.color(color);\n            distY.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparkline = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , animate = true\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.getColor(['#000'])\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , showMinMaxPoints = true\n        , showCurrentPoint = true\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    \n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x   .domain(xDomain || d3.extent(data, getX ))\n                .range(xRange || [0, availableWidth]);\n\n            y   .domain(yDomain || d3.extent(data, getY ))\n                .range(yRange || [availableHeight, 0]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            var paths = wrap.selectAll('path')\n                .data(function(d) { return [d] });\n            paths.enter().append('path');\n            paths.exit().remove();\n            paths\n                .style('stroke', function(d,i) { return d.color || color(d, i) })\n                .attr('d', d3.svg.line()\n                    .x(function(d,i) { return x(getX(d,i)) })\n                    .y(function(d,i) { return y(getY(d,i)) })\n            );\n\n            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n            var points = wrap.selectAll('circle.nv-point')\n                .data(function(data) {\n                    var yValues = data.map(function(d, i) { return getY(d,i); });\n                    function pointIndex(index) {\n                        if (index != -1) {\n                            var result = data[index];\n                            result.pointIndex = index;\n                            return result;\n                        } else {\n                            return null;\n                        }\n                    }\n                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n                        currentPoint = pointIndex(yValues.length - 1);\n                    return [(showMinMaxPoints ? minPoint : null), (showMinMaxPoints ? maxPoint : null), (showCurrentPoint ? currentPoint : null)].filter(function (d) {return d != null;});\n                });\n            points.enter().append('circle');\n            points.exit().remove();\n            points\n                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n                .attr('r', 2)\n                .attr('class', function(d,i) {\n                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n                });\n        });\n        \n        renderWatch.renderEnd('sparkline immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:            {get: function(){return width;}, set: function(_){width=_;}},\n        height:           {get: function(){return height;}, set: function(_){height=_;}},\n        xDomain:          {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:          {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:           {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:           {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        xScale:           {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:           {get: function(){return y;}, set: function(_){y=_;}},\n        animate:          {get: function(){return animate;}, set: function(_){animate=_;}},\n        showMinMaxPoints: {get: function(){return showMinMaxPoints;}, set: function(_){showMinMaxPoints=_;}},\n        showCurrentPoint: {get: function(){return showCurrentPoint;}, set: function(_){showCurrentPoint=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparklinePlus = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sparkline = nv.models.sparkline();\n\n    var margin = {top: 15, right: 100, bottom: 10, left: 50}\n        , width = null\n        , height = null\n        , x\n        , y\n        , index = []\n        , paused = false\n        , xTickFormat = d3.format(',r')\n        , yTickFormat = d3.format(',.2f')\n        , showLastValue = true\n        , alignValue = true\n        , rightAlignValue = false\n        , noData = null\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n        \n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sparkline);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.call(chart); };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\n            // Setup Scales\n            x = sparkline.xScale();\n            y = sparkline.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-sparklineWrap');\n            gEnter.append('g').attr('class', 'nv-valueWrap');\n            gEnter.append('g').attr('class', 'nv-hoverArea');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            var sparklineWrap = g.select('.nv-sparklineWrap');\n\n            sparkline.width(availableWidth).height(availableHeight);\n            sparklineWrap.call(sparkline);\n\n            if (showLastValue) {\n                var valueWrap = g.select('.nv-valueWrap');\n                var value = valueWrap.selectAll('.nv-currentValue')\n                    .data([currentValue]);\n\n                value.enter().append('text').attr('class', 'nv-currentValue')\n                    .attr('dx', rightAlignValue ? -8 : 8)\n                    .attr('dy', '.9em')\n                    .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\n                value\n                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n                    .attr('y', alignValue ? function (d) {\n                        return y(d)\n                    } : 0)\n                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))\n                    .text(yTickFormat(currentValue));\n            }\n\n            gEnter.select('.nv-hoverArea').append('rect')\n                .on('mousemove', sparklineHover)\n                .on('click', function() { paused = !paused })\n                .on('mouseout', function() { index = []; updateValueLine(); });\n\n            g.select('.nv-hoverArea rect')\n                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n                .attr('width', availableWidth + margin.left + margin.right)\n                .attr('height', availableHeight + margin.top);\n\n            //index is currently global (within the chart), may or may not keep it that way\n            function updateValueLine() {\n                if (paused) return;\n\n                var hoverValue = g.selectAll('.nv-hoverValue').data(index);\n\n                var hoverEnter = hoverValue.enter()\n                    .append('g').attr('class', 'nv-hoverValue')\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0);\n\n                hoverValue.exit()\n                    .transition().duration(250)\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0)\n                    .remove();\n\n                hoverValue\n                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n                    .transition().duration(250)\n                    .style('stroke-opacity', 1)\n                    .style('fill-opacity', 1);\n\n                if (!index.length) return;\n\n                hoverEnter.append('line')\n                    .attr('x1', 0)\n                    .attr('y1', -margin.top)\n                    .attr('x2', 0)\n                    .attr('y2', availableHeight);\n\n                hoverEnter.append('text').attr('class', 'nv-xValue')\n                    .attr('x', -6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'end')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-xValue')\n                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\n                hoverEnter.append('text').attr('class', 'nv-yValue')\n                    .attr('x', 6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'start')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-yValue')\n                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n            }\n\n            function sparklineHover() {\n                if (paused) return;\n\n                var pos = d3.mouse(this)[0] - margin.left;\n\n                function getClosestIndex(data, x) {\n                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n                    var closestIndex = 0;\n                    for (var i = 0; i < data.length; i++){\n                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n                            distance = Math.abs(sparkline.x()(data[i], i) - x);\n                            closestIndex = i;\n                        }\n                    }\n                    return closestIndex;\n                }\n\n                index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n                updateValueLine();\n            }\n\n        });\n        renderWatch.renderEnd('sparklinePlus immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sparkline = sparkline;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:           {get: function(){return width;}, set: function(_){width=_;}},\n        height:          {get: function(){return height;}, set: function(_){height=_;}},\n        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},\n        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},\n        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},\n        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},\n        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},\n        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, sparkline);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedArea = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , color = nv.utils.defaultColor() // a function that computes the color\n        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n        , container = null\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , style = 'stack'\n        , offset = 'zero'\n        , order = 'default'\n        , interpolate = 'linear'  // controls the line interpolation\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , scatter = nv.models.scatter()\n        , duration = 250\n        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')\n        ;\n\n    scatter\n        .pointSize(2.2) // default size\n        .pointDomain([2.2, 2.2]) // all the same size by default\n    ;\n\n    /************************************\n     * offset:\n     *   'wiggle' (stream)\n     *   'zero' (stacked)\n     *   'expand' (normalize to 100%)\n     *   'silhouette' (simple centered)\n     *\n     * order:\n     *   'inside-out' (stream)\n     *   'default' (input order)\n     ************************************/\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            var dataRaw = data;\n            // Injecting point index into each point because d3.layout.stack().out does not give index\n            data.forEach(function(aseries, i) {\n                aseries.seriesIndex = i;\n                aseries.values = aseries.values.map(function(d, j) {\n                    d.index = j;\n                    d.seriesIndex = i;\n                    return d;\n                });\n            });\n\n            var dataFiltered = data.filter(function(series) {\n                return !series.disabled;\n            });\n\n            data = d3.layout.stack()\n                .order(order)\n                .offset(offset)\n                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n                .x(getX)\n                .y(getY)\n                .out(function(d, y0, y) {\n                    d.display = {\n                        y: y,\n                        y0: y0\n                    };\n                })\n            (dataFiltered);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-areaWrap');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            \n            // If the user has not specified forceY, make sure 0 is included in the domain\n            // Otherwise, use user-specified values for forceY\n            if (scatter.forceY().length == 0) {\n                scatter.forceY().push(0);\n            }\n            \n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .x(getX)\n                .y(function(d) {\n                    if (d.display !== undefined) { return d.display.y + d.display.y0; }\n                })\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, d.seriesIndex);\n                    return d.color;\n                }));\n\n            var scatterWrap = g.select('.nv-scatterWrap')\n                .datum(data);\n\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var area = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) {\n                    return y(d.display.y0)\n                })\n                .y1(function(d) {\n                    return y(d.display.y + d.display.y0)\n                })\n                .interpolate(interpolate);\n\n            var zeroArea = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) { return y(d.display.y0) })\n                .y1(function(d) { return y(d.display.y0) });\n\n            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n                .data(function(d) { return d });\n\n            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n                .attr('d', function(d,i){\n                    return zeroArea(d.values, d.seriesIndex);\n                })\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.areaMouseover({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaMouseout({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('click', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaClick({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                });\n\n            path.exit().remove();\n            path.style('fill', function(d,i){\n                    return d.color || color(d, d.seriesIndex)\n                })\n                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n            path.watchTransition(renderWatch,'stackedArea path')\n                .attr('d', function(d,i) {\n                    return area(d.values,i)\n                });\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            scatter.dispatch.on('elementMouseover.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n            });\n            scatter.dispatch.on('elementMouseout.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n            });\n\n            //Special offset functions\n            chart.d3_stackedOffset_stackPercent = function(stackData) {\n                var n = stackData.length,    //How many series\n                    m = stackData[0].length,     //how many points per series\n                    i,\n                    j,\n                    o,\n                    y0 = [];\n\n                for (j = 0; j < m; ++j) { //Looping through all points\n                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series\n                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.\n                    }\n\n                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0\n                        stackData[i][j][1] /= o;\n                    } else { //(total y value of all series at point in time i) == 0\n                        for (i = 0; i < n; i++) {\n                            stackData[i][j][1] = 0;\n                        }\n                    }\n                }\n                for (j = 0; j < m; ++j) y0[j] = 0;\n                return y0;\n            };\n\n        });\n\n        renderWatch.renderEnd('stackedArea immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.interpolate = function(_) {\n        if (!arguments.length) return interpolate;\n        interpolate = _;\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        scatter.duration(duration);\n        return chart;\n    };\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},\n        order:    {get: function(){return order;}, set: function(_){order=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        style: {get: function(){return style;}, set: function(_){\n            style = _;\n            switch (style) {\n                case 'stack':\n                    chart.offset('zero');\n                    chart.order('default');\n                    break;\n                case 'stream':\n                    chart.offset('wiggle');\n                    chart.order('inside-out');\n                    break;\n                case 'stream-center':\n                    chart.offset('silhouette');\n                    chart.order('inside-out');\n                    break;\n                case 'expand':\n                    chart.offset('expand');\n                    chart.order('default');\n                    break;\n                case 'stack_percent':\n                    chart.offset(chart.d3_stackedOffset_stackPercent);\n                    chart.order('default');\n                    break;\n            }\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var stacked = nv.models.stackedArea()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.stackedArea())\n        ;\n\n    var margin = {top: 10, right: 25, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , focusEnable = false\n        , useInteractiveGuideline = false\n        , showTotalInTooltip = true\n        , totalLabel = 'TOTAL'\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = 250\n        , controlOptions = ['Stacked','Stream','Expanded']\n        , controlLabels = {}\n        , duration = 250\n        ;\n\n    state.style = stacked.style();\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        });\n\n    var oldYTickFormat = null,\n        oldValueFormatter = null;\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var style = stacked.style();\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                style: stacked.style()\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.style !== undefined)\n                style = state.style;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var percentFormatter = d3.format('%');\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(stacked);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\n            chart.update = function() { container.transition().duration(duration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n            // Setup Scales\n            x = stacked.xScale();\n            y = stacked.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-stackedWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            // g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = (showControls && legendPosition === 'top') ? availableWidth - controlWidth : availableWidth;\n\n                legend.width(legendWidth);\n                g.select('.nv-legendWrap').datum(data).call(legend);\n\n                if (legendPosition === 'bottom') {\n                \t// constant from axis.js, plus some margin for better layout\n                \tvar xAxisHeight = (showXAxis ? 12 : 0) + 10;\n                   \tmargin.bottom = Math.max(legend.height() + xAxisHeight, margin.bottom);\n                   \tavailableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                \tvar legendTop = availableHeight + xAxisHeight;\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + legendTop +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && margin.top != legend.height()) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    g.select('.nv-legendWrap')\n                    \t.attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n                }\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    {\n                        key: controlLabels.stacked || 'Stacked',\n                        metaKey: 'Stacked',\n                        disabled: stacked.style() != 'stack',\n                        style: 'stack'\n                    },\n                    {\n                        key: controlLabels.stream || 'Stream',\n                        metaKey: 'Stream',\n                        disabled: stacked.style() != 'stream',\n                        style: 'stream'\n                    },\n                    {\n                        key: controlLabels.expanded || 'Expanded',\n                        metaKey: 'Expanded',\n                        disabled: stacked.style() != 'expand',\n                        style: 'expand'\n                    },\n                    {\n                        key: controlLabels.stack_percent || 'Stack %',\n                        metaKey: 'Stack_Percent',\n                        disabled: stacked.style() != 'stack_percent',\n                        style: 'stack_percent'\n                    }\n                ];\n\n                controlWidth = (controlOptions.length/3) * 260;\n                controlsData = controlsData.filter(function(d) {\n                    return controlOptions.indexOf(d.metaKey) !== -1;\n                });\n\n                controls\n                    .width( controlWidth )\n                    .color(['#444', '#444', '#444']);\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .call(controls);\n\n                var requiredTop = Math.max(controls.height(), showLegend && (legendPosition === 'top') ? legend.height() : 0);\n\n                if ( margin.top != requiredTop ) {\n                    margin.top = requiredTop;\n                    availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                }\n\n                g.select('.nv-controlsWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left: margin.left, top: margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            stacked\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                var ticks;\n                if (stacked.offset() === 'wiggle') {\n                    ticks = 0;\n                }\n                else {\n                    ticks = nv.utils.calcTicksY(availableHeight/36, data);\n                }\n                yAxis.scale(y)\n                    ._ticks(ticks)\n                    .tickSize(-availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n                if(showXAxis) {\n                    g.select('.nv-focus .nv-x.nv-axis')\n                        .attr('transform', 'translate(0,' + availableHeight + ')')\n                        .transition()\n                        .duration(duration)\n                        .call(xAxis)\n                        ;\n                }\n            }\n\n            function updateYAxis() {\n                if(showYAxis) {\n                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                        var currentFormat = yAxis.tickFormat();\n\n                        if ( !oldYTickFormat || currentFormat !== percentFormatter )\n                            oldYTickFormat = currentFormat;\n\n                        //Forces the yAxis to use percentage in 'expand' mode.\n                        yAxis.tickFormat(percentFormatter);\n                    }\n                    else {\n                        if (oldYTickFormat) {\n                            yAxis.tickFormat(oldYTickFormat);\n                            oldYTickFormat = null;\n                        }\n                    }\n\n                    g.select('.nv-focus .nv-y.nv-axis')\n                    .transition().duration(0)\n                    .call(yAxis);\n                }\n            }\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                stackedWrap.transition().call(stacked);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            stacked.dispatch.on('areaClick.toggle', function(e) {\n                if (data.filter(function(d) { return !d.disabled }).length === 1)\n                    data.forEach(function(d) {\n                        d.disabled = false;\n                    });\n                else\n                    data.forEach(function(d,i) {\n                        d.disabled = (i != e.seriesIndex);\n                    });\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                stacked.style(d.style);\n\n\n                state.style = stacked.style();\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                stacked.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0, allNullValues = true, atleastOnePoint = false;\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        var point = series.values[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue != null && pointYValue > 0) {\n                            stacked.highlightPoint(i, pointIndex, true);\n                            atleastOnePoint = true;\n                        }\n                    \n                        // Draw at least one point if all values are zero.\n                        if (i === (data.length - 1) && !atleastOnePoint) {\n                            stacked.highlightPoint(i, pointIndex, true);\n                        }\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\n                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n                        allData.push({\n                            key: series.key,\n                            value: tooltipValue,\n                            color: color(series,series.seriesIndex),\n                            point: point\n                        });\n\n                        if (showTotalInTooltip && stacked.style() != 'expand' && tooltipValue != null) {\n                          valueSum += tooltipValue;\n                          allNullValues = false;\n                        };\n                    });\n\n                allData.reverse();\n\n                //Highlight the tooltip entry based on which stack the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var yDistMax = Infinity, indexToHighlight = null;\n                    allData.forEach(function(series,i) {\n\n                        //To handle situation where the stacked area chart is negative, we need to use absolute values\n                        //when checking if the mouse Y value is within the stack area.\n                        yValue = Math.abs(yValue);\n                        var stackedY0 = Math.abs(series.point.display.y0);\n                        var stackedY = Math.abs(series.point.display.y);\n                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n                        {\n                            indexToHighlight = i;\n                            return;\n                        }\n                    });\n                    if (indexToHighlight != null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.\n                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2 && !allNullValues) {\n                    allData.push({\n                        key: totalLabel,\n                        value: valueSum,\n                        total: true\n                    });\n                }\n\n                var xValue = chart.x()(singlePoint,pointIndex);\n\n                var valueFormatter = interactiveLayer.tooltip.valueFormatter();\n                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view\n                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                    if ( !oldValueFormatter ) {\n                        oldValueFormatter = valueFormatter;\n                    }\n                    //Forces the tooltip to use percentage in 'expand' mode.\n                    valueFormatter = d3.format(\".1%\");\n                }\n                else {\n                    if (oldValueFormatter) {\n                        valueFormatter = oldValueFormatter;\n                        oldValueFormatter = null;\n                    }\n                }\n\n                interactiveLayer.tooltip\n                    .valueFormatter(valueFormatter)\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                stacked.clearHighlights();\n            });\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.style !== 'undefined') {\n                    stacked.style(e.style);\n                    style = e.style;\n                }\n\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return stacked.x()(d,i) >= extent[0] && stacked.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                stackedWrap.transition().duration(duration).call(stacked);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n\n        });\n\n        renderWatch.renderEnd('stacked Area chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.point['x'] = stacked.x()(evt.point);\n        evt.point['y'] = stacked.y()(evt.point);\n        tooltip.data(evt).hidden(false);\n    });\n\n    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.stacked = stacked;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis;\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.focus = focus;\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},\n        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},\n        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            focus.margin.top    = _.top    !== undefined ? _.top    : focus.margin.top;\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            stacked.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            stacked.color(color);\n            focus.color(color);\n        }},\n        x: {get: function(){return stacked.x();}, set: function(_){\n            stacked.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return stacked.y();}, set: function(_){\n            stacked.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = !!_;\n            chart.interactive(!_);\n            chart.useVoronoi(!_);\n            stacked.scatter.interactive(!_);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, stacked);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaWithFocusChart = function() {\n  return nv.models.stackedAreaChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\n// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad\nnv.models.sunburst = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 600\n        , height = 600\n        , mode = \"count\"\n        , modes = {count: function(d) { return 1; }, value: function(d) { return d.value || d.size }, size: function(d) { return d.value || d.size }}\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , showLabels = false\n        , labelFormat = function(d){if(mode === 'count'){return d.name + ' #' + d.value}else{return d.name + ' ' + (d.value || d.size)}}\n        , labelThreshold = 0.02\n        , sort = function(d1, d2){return d1.name > d2.name;}\n        , key = function(d,i){\n            if (d.parent !== undefined) {\n                return d.name + '-' + d.parent.name + '-' + i;\n            } else {\n                return d.name;\n            }\n        }\n        , groupColorByParent = true\n        , duration = 500\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd');\n\n    //============================================================\n    // aux functions and setup\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear().range([0, 2 * Math.PI]);\n    var y = d3.scale.sqrt();\n\n    var partition = d3.layout.partition().sort(sort);\n\n    var node, availableWidth, availableHeight, radius;\n    var prevPositions = {};\n\n    var arc = d3.svg.arc()\n        .startAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x))) })\n        .endAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))) })\n        .innerRadius(function(d) {return Math.max(0, y(d.y)) })\n        .outerRadius(function(d) {return Math.max(0, y(d.y + d.dy)) });\n\n    function rotationToAvoidUpsideDown(d) {\n        var centerAngle = computeCenterAngle(d);\n        if(centerAngle > 90){\n            return 180;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    function computeCenterAngle(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        var centerAngle = (((startAngle + endAngle) / 2) * (180 / Math.PI)) - 90;\n        return centerAngle;\n    }\n\n    function computeNodePercentage(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        return (endAngle - startAngle) / (2 * Math.PI);\n    }\n\n    function labelThresholdMatched(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n\n        var size = endAngle - startAngle;\n        return size > labelThreshold;\n    }\n\n    // When zooming: interpolate the scales.\n    function arcTweenZoom(e,i) {\n        var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]),\n        yd = d3.interpolate(y.domain(), [node.y, 1]),\n        yr = d3.interpolate(y.range(), [node.y ? 20 : 0, radius]);\n\n        if (i === 0) {\n            return function() {return arc(e);}\n        }\n        else {\n            return function (t) {\n                x.domain(xd(t));\n                y.domain(yd(t)).range(yr(t));\n                return arc(e);\n            }\n        };\n    }\n\n    function arcTweenUpdate(d) {\n        var ipo = d3.interpolate({x: d.x0, dx: d.dx0, y: d.y0, dy: d.dy0}, d);\n\n        return function (t) {\n            var b = ipo(t);\n\n            d.x0 = b.x;\n            d.dx0 = b.dx;\n            d.y0 = b.y;\n            d.dy0 = b.dy;\n\n            return arc(b);\n        };\n    }\n\n    function updatePrevPosition(node) {\n        var k = key(node);\n        if(! prevPositions[k]) prevPositions[k] = {};\n        var pP = prevPositions[k];\n        pP.dx = node.dx;\n        pP.x = node.x;\n        pP.dy = node.dy;\n        pP.y = node.y;\n    }\n\n    function storeRetrievePrevPositions(nodes) {\n        nodes.forEach(function(n){\n            var k = key(n);\n            var pP = prevPositions[k];\n            //console.log(k,n,pP);\n            if( pP ){\n                n.dx0 = pP.dx;\n                n.x0 = pP.x;\n                n.dy0 = pP.dy;\n                n.y0 = pP.y;\n            }\n            else {\n                n.dx0 = n.dx;\n                n.x0 = n.x;\n                n.dy0 = n.dy;\n                n.y0 = n.y;\n            }\n            updatePrevPosition(n);\n        });\n    }\n\n    function zoomClick(d) {\n        var labels = container.selectAll('text')\n        var path = container.selectAll('path')\n\n        // fade out all text elements\n        labels.transition().attr(\"opacity\",0);\n\n        // to allow reference to the new center node\n        node = d;\n\n        path.transition()\n            .duration(duration)\n            .attrTween(\"d\", arcTweenZoom)\n            .each('end', function(e) {\n                // partially taken from here: http://bl.ocks.org/metmajer/5480307\n                // check if the animated element's data e lies within the visible angle span given in d\n                if(e.x >= d.x && e.x < (d.x + d.dx) ){\n                    if(e.depth >= d.depth){\n                        // get a selection of the associated text element\n                        var parentNode = d3.select(this.parentNode);\n                        var arcText = parentNode.select('text');\n\n                        // fade in the text element and recalculate positions\n                        arcText.transition().duration(duration)\n                        .text( function(e){return labelFormat(e) })\n                        .attr(\"opacity\", function(d){\n                            if(labelThresholdMatched(d)) {\n                                return 1;\n                            }\n                            else {\n                                return 0;\n                            }\n                        })\n                        .attr(\"transform\", function() {\n                            var width = this.getBBox().width;\n                            if(e.depth === 0)\n                            return \"translate(\" + (width / 2 * - 1) + \",0)\";\n                            else if(e.depth === d.depth){\n                                return \"translate(\" + (y(e.y) + 5) + \",0)\";\n                            }\n                            else {\n                                var centerAngle = computeCenterAngle(e);\n                                var rotation = rotationToAvoidUpsideDown(e);\n                                if (rotation === 0) {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + 5) + ',0)';\n                                }\n                                else {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                                }\n                            }\n                        });\n                    }\n                }\n            })\n    }\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n            container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n            radius = Math.min(availableWidth, availableHeight) / 2;\n\n            y.range([0, radius]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.select('g.nvd3.nv-wrap.nv-sunburst');\n            if( !wrap[0][0] ) {\n                wrap = container.append('g')\n                    .attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id)\n                    .attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            } else {\n                wrap.attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            }\n\n            container.on('click', function (d, i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            partition.value(modes[mode] || modes[\"count\"]);\n\n            //reverse the drawing order so that the labels of inner\n            //arcs are drawn on top of the outer arcs.\n            var nodes = partition.nodes(data[0]).reverse()\n\n            storeRetrievePrevPositions(nodes);\n            var cG = wrap.selectAll('.arc-container').data(nodes, key)\n\n            //handle new datapoints\n            var cGE = cG.enter()\n                .append(\"g\")\n                .attr(\"class\",'arc-container')\n\n            cGE.append(\"path\")\n                .attr(\"d\", arc)\n                .style(\"fill\", function (d) {\n                    if (d.color) {\n                        return d.color;\n                    }\n                    else if (groupColorByParent) {\n                        return color((d.children ? d : d.parent).name);\n                    }\n                    else {\n                        return color(d.name);\n                    }\n                })\n                .style(\"stroke\", \"#FFF\")\n                .on(\"click\", function(d,i){\n                    zoomClick(d);\n                    dispatch.elementClick({\n                        data: d,\n                        index: i\n                    })\n                })\n                .on('mouseover', function(d,i){\n                    d3.select(this).classed('hover', true).style('opacity', 0.8);\n                    dispatch.elementMouseover({\n                        data: d,\n                        color: d3.select(this).style(\"fill\"),\n                        percent: computeNodePercentage(d)\n                    });\n                })\n                .on('mouseout', function(d,i){\n                    d3.select(this).classed('hover', false).style('opacity', 1);\n                    dispatch.elementMouseout({\n                        data: d\n                    });\n                })\n                .on('mousemove', function(d,i){\n                    dispatch.elementMousemove({\n                        data: d\n                    });\n                });\n\n            ///Iterating via each and selecting based on the this\n            ///makes it work ... a cG.selectAll('path') doesn't.\n            ///Without iteration the data (in the element) didn't update.\n            cG.each(function(d){\n                d3.select(this).select('path')\n                    .transition()\n                    .duration(duration)\n                    .attrTween('d', arcTweenUpdate);\n            });\n\n            if(showLabels){\n                //remove labels first and add them back\n                cG.selectAll('text').remove();\n\n                //this way labels are on top of newly added arcs\n                cG.append('text')\n                    .text( function(e){ return labelFormat(e)})\n                    .transition()\n                    .duration(duration)\n                    .attr(\"opacity\", function(d){\n                        if(labelThresholdMatched(d)) {\n                            return 1;\n                        }\n                        else {\n                            return 0;\n                        }\n                    })\n                    .attr(\"transform\", function(d) {\n                        var width = this.getBBox().width;\n                        if(d.depth === 0){\n                            return \"rotate(0)translate(\" + (width / 2 * -1) + \",0)\";\n                        }\n                        else {\n                            var centerAngle = computeCenterAngle(d);\n                            var rotation = rotationToAvoidUpsideDown(d);\n                            if (rotation === 0) {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + 5) + ',0)';\n                            }\n                            else {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                            }\n                        }\n                    });\n            }\n\n            //zoom out to the center when the data is updated.\n            zoomClick(nodes[nodes.length - 1])\n\n\n            //remove unmatched elements ...\n            cG.exit()\n                .transition()\n                .duration(duration)\n                .attr('opacity',0)\n                .each('end',function(d){\n                    var k = key(d);\n                    prevPositions[k] = undefined;\n                })\n                .remove();\n        });\n\n\n        renderWatch.renderEnd('sunburst immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        groupColorByParent: {get: function(){return groupColorByParent;}, set: function(_){groupColorByParent=!!_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=!!_}},\n        labelFormat: {get: function(){return labelFormat;}, set: function(_){labelFormat=_}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_}},\n        sort: {get: function(){return sort;}, set: function(_){sort=_}},\n        key: {get: function(){return key;}, set: function(_){key=_}},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sunburstChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sunburst = nv.models.sunburst();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showTooltipPercent = false\n        , id = Math.round(Math.random() * 100000)\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd');\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d){return d;});\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sunburst);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin);\n            var availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0) {\n                    container.call(chart);\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = container;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            sunburst.width(availableWidth).height(availableHeight).margin(margin);\n            container.call(sunburst);\n        });\n\n        renderWatch.renderEnd('sunburstChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.series = {\n            key: evt.data.name,\n            value: (evt.data.value || evt.data.size),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sunburst = sunburst;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            sunburst.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            sunburst.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n            sunburst.margin(margin);\n        }}\n    });\n    nv.utils.inheritOptions(chart, sunburst);\n    nv.utils.initOptions(chart);\n    return chart;\n\n};\n\nnv.version = \"1.8.6\";\n})();\n//# sourceMappingURL=nv.d3.js.map\n\n/***/ }),\n\n/***/ 766:\n/***/ (function(module, exports, __webpack_require__) {\n\n!function(t,e){ true?module.exports=e(__webpack_require__(0),__webpack_require__(112),__webpack_require__(765)):\"function\"==typeof define&&define.amd?define([\"react\",\"d3\",\"nvd3\"],e):\"object\"==typeof exports?exports.NVD3Chart=e(require(\"react\"),require(\"d3\"),require(\"nvd3\")):t.NVD3Chart=e(t.React,t.d3,t.nv)}(this,function(t,e,n){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p=\"\",e(0)}([function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),i=r(o),u=n(2),c=r(u),s=n(17),a=r(s),f=n(21),p=r(f),l=n(22),d=r(l),h=n(25),y=r(h),v=n(48),b=r(v),g=n(55),m=r(g),_=n(56),x=r(_),O=n(57),j=r(O),w=n(58),S=[\"x\",\"y\",\"type\",\"datum\",\"configure\"],P=[\"width\",\"height\"],E=\"margin\",M=\"containerStyle\",k=\"renderStart\",C=\"renderEnd\",D=\"ready\",F=function(t){function e(){return(0,p[\"default\"])(this,e),(0,y[\"default\"])(this,(0,a[\"default\"])(e).apply(this,arguments))}return(0,b[\"default\"])(e,t),(0,d[\"default\"])(e,[{key:\"componentDidMount\",value:function(){var t=this;j[\"default\"].addGraph(this.renderChart.bind(this),function(e){(0,w.isCallable)(t.props.ready)&&t.props.ready(e,D)})}},{key:\"componentDidUpdate\",value:function(){this.renderChart()}},{key:\"componentWillUnmount\",value:function(){this.resizeHandler&&this.resizeHandler.clear()}},{key:\"renderChart\",value:function(){var t=void 0;switch(this.chart=this.chart&&!this.rendering?this.chart:j[\"default\"].models[this.props.type](),(0,w.isCallable)(this.props.renderStart)&&this.props.renderStart(this.chart,k),this.parsedProps=(0,w.bindFunctions)(this.props,this.props.context),this.chart.x&&this.chart.x((0,w.getValueFunction)(this.parsedProps.x,\"x\")),this.chart.y&&this.chart.y((0,w.getValueFunction)(this.parsedProps.y,\"y\")),this.props.margin&&this.chart.margin(this.options(E,w.pick).margin||(0,w.propsByPrefix)(\"margin\",this.props)||{}),this.configureComponents(this.chart,this.options(S.concat(M),w.without)),!this.props.configure||this.props.configure(this.chart),this.selection=x[\"default\"].select(this.refs.svg).datum(this.props.datum).call(this.chart),this.resizeHandler||(this.resizeHandler=j[\"default\"].utils.windowResize(this.chart.update)),this.props.type){case\"pieChart\":t=this.chart.pie.dispatch;break;case\"lineChart\":t=this.chart.lines.dispatch;break;default:t=this.chart.dispatch}return t.renderEnd&&t.on(\"renderEnd\",this.renderEnd.bind(this)),this.rendering=!0,this.chart}},{key:\"renderEnd\",value:function(t){(0,w.isCallable)(this.props.renderEnd)&&this.props.renderEnd(this.chart,C),this.rendering=!1}},{key:\"configureComponents\",value:function(t,e){for(var n in e){var r=e[n];t&&((0,w.isPlainObject)(r)?this.configureComponents(t[n],r):\"function\"==typeof t[n]&&t[n](r))}}},{key:\"options\",value:function(t,e){var n=this.parsedProps.options||this.parsedProps||this.props.chartOptions;return(e=e||w.pick)(n,t)}},{key:\"render\",value:function(){var t=(0,w.pick)(this.props,P),e=(0,c[\"default\"])({},t,this.props.containerStyle);return m[\"default\"].createElement(\"div\",{ref:\"root\",className:\"nv-chart\",style:e},m[\"default\"].createElement(\"svg\",(0,i[\"default\"])({ref:\"svg\"},t)))}}]),e}(m[\"default\"].Component);e[\"default\"]=F,t.exports=F},function(t,e,n){\"use strict\";var r=n(2)[\"default\"];e[\"default\"]=r||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(3),__esModule:!0}},function(t,e,n){n(4),t.exports=n(7).Object.assign},function(t,e,n){var r=n(5);r(r.S+r.F,\"Object\",{assign:n(10)})},function(t,e,n){var r=n(6),o=n(7),i=n(8),u=\"prototype\",c=function(t,e,n){var s,a,f,p=t&c.F,l=t&c.G,d=t&c.S,h=t&c.P,y=t&c.B,v=t&c.W,b=l?o:o[e]||(o[e]={}),g=l?r:d?r[e]:(r[e]||{})[u];l&&(n=e);for(s in n)a=!p&&g&&s in g,a&&s in b||(f=a?g[s]:n[s],b[s]=l&&\"function\"!=typeof g[s]?n[s]:y&&a?i(f,r):v&&g[s]==f?function(t){var e=function(e){return this instanceof t?new t(e):t(e)};return e[u]=t[u],e}(f):h&&\"function\"==typeof f?i(Function.call,f):f,h&&((b[u]||(b[u]={}))[s]=f))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,t.exports=c},function(t,e){var n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:\"1.2.6\"};\"number\"==typeof __e&&(__e=n)},function(t,e,n){var r=n(9);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,e,n){var r=n(11),o=n(12),i=n(14);t.exports=n(16)(function(){var t=Object.assign,e={},n={},r=Symbol(),o=\"abcdefghijklmnopqrst\";return e[r]=7,o.split(\"\").forEach(function(t){n[t]=t}),7!=t({},e)[r]||Object.keys(t({},n)).join(\"\")!=o})?function(t,e){for(var n=o(t),u=arguments,c=u.length,s=1,a=r.getKeys,f=r.getSymbols,p=r.isEnum;c>s;)for(var l,d=i(u[s++]),h=f?a(d).concat(f(d)):a(d),y=h.length,v=0;y>v;)p.call(d,l=h[v++])&&(n[l]=d[l]);return n}:Object.assign},function(t,e){var n=Object;t.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},function(t,e,n){var r=n(13);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,e,n){var r=n(15);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==r(t)?t.split(\"\"):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},function(t,e,n){t.exports={\"default\":n(18),__esModule:!0}},function(t,e,n){n(19),t.exports=n(7).Object.getPrototypeOf},function(t,e,n){var r=n(12);n(20)(\"getPrototypeOf\",function(t){return function(e){return t(r(e))}})},function(t,e,n){var r=n(5),o=n(7),i=n(16);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),\"Object\",u)}},function(t,e){\"use strict\";e[\"default\"]=function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")},e.__esModule=!0},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(23),i=r(o);e[\"default\"]=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,i[\"default\"])(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(24),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e,n){return r.setDesc(t,e,n)}},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(26),i=r(o);e[\"default\"]=function(t,e){if(!t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!e||\"object\"!==(\"undefined\"==typeof e?\"undefined\":(0,i[\"default\"])(e))&&\"function\"!=typeof e?t:e},e.__esModule=!0},function(t,e,n){\"use strict\";var r=n(27)[\"default\"];e[\"default\"]=function(t){return t&&t.constructor===r?\"symbol\":typeof t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(28),__esModule:!0}},function(t,e,n){n(29),n(47),t.exports=n(7).Symbol},function(t,e,n){\"use strict\";var r=n(11),o=n(6),i=n(30),u=n(31),c=n(5),s=n(32),a=n(16),f=n(35),p=n(36),l=n(38),d=n(37),h=n(39),y=n(41),v=n(42),b=n(43),g=n(44),m=n(40),_=n(34),x=r.getDesc,O=r.setDesc,j=r.create,w=y.get,S=o.Symbol,P=o.JSON,E=P&&P.stringify,M=!1,k=d(\"_hidden\"),C=r.isEnum,D=f(\"symbol-registry\"),F=f(\"symbols\"),N=\"function\"==typeof S,T=Object.prototype,q=u&&a(function(){return 7!=j(O({},\"a\",{get:function(){return O(this,\"a\",{value:7}).a}})).a})?function(t,e,n){var r=x(T,e);r&&delete T[e],O(t,e,n),r&&t!==T&&O(T,e,r)}:O,z=function(t){var e=F[t]=j(S.prototype);return e._k=t,u&&M&&q(T,t,{configurable:!0,set:function(e){i(this,k)&&i(this[k],t)&&(this[k][t]=!1),q(this,t,_(1,e))}}),e},A=function(t){return\"symbol\"==typeof t},V=function(t,e,n){return n&&i(F,e)?(n.enumerable?(i(t,k)&&t[k][e]&&(t[k][e]=!1),n=j(n,{enumerable:_(0,!1)})):(i(t,k)||O(t,k,_(1,{})),t[k][e]=!0),q(t,e,n)):O(t,e,n)},W=function(t,e){g(t);for(var n,r=v(e=m(e)),o=0,i=r.length;i>o;)V(t,n=r[o++],e[n]);return t},B=function(t,e){return void 0===e?j(t):W(j(t),e)},G=function(t){var e=C.call(this,t);return e||!i(this,t)||!i(F,t)||i(this,k)&&this[k][t]?e:!0},H=function(t,e){var n=x(t=m(t),e);return!n||!i(F,e)||i(t,k)&&t[k][e]||(n.enumerable=!0),n},I=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])||e==k||r.push(e);return r},J=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])&&r.push(F[e]);return r},K=function(t){if(void 0!==t&&!A(t)){for(var e,n,r=[t],o=1,i=arguments;i.length>o;)r.push(i[o++]);return e=r[1],\"function\"==typeof e&&(n=e),(n||!b(e))&&(e=function(t,e){return n&&(e=n.call(this,t,e)),A(e)?void 0:e}),r[1]=e,E.apply(P,r)}},R=a(function(){var t=S();return\"[null]\"!=E([t])||\"{}\"!=E({a:t})||\"{}\"!=E(Object(t))});N||(S=function(){if(A(this))throw TypeError(\"Symbol is not a constructor\");return z(l(arguments.length>0?arguments[0]:void 0))},s(S.prototype,\"toString\",function(){return this._k}),A=function(t){return t instanceof S},r.create=B,r.isEnum=G,r.getDesc=H,r.setDesc=V,r.setDescs=W,r.getNames=y.get=I,r.getSymbols=J,u&&!n(46)&&s(T,\"propertyIsEnumerable\",G,!0));var U={\"for\":function(t){return i(D,t+=\"\")?D[t]:D[t]=S(t)},keyFor:function(t){return h(D,t)},useSetter:function(){M=!0},useSimple:function(){M=!1}};r.each.call(\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),function(t){var e=d(t);U[t]=N?e:z(e)}),M=!0,c(c.G+c.W,{Symbol:S}),c(c.S,\"Symbol\",U),c(c.S+c.F*!N,\"Object\",{create:B,defineProperty:V,defineProperties:W,getOwnPropertyDescriptor:H,getOwnPropertyNames:I,getOwnPropertySymbols:J}),P&&c(c.S+c.F*(!N||R),\"JSON\",{stringify:K}),p(S,\"Symbol\"),p(Math,\"Math\",!0),p(o.JSON,\"JSON\",!0)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){t.exports=!n(16)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,e,n){t.exports=n(33)},function(t,e,n){var r=n(11),o=n(34);t.exports=n(31)?function(t,e,n){return r.setDesc(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(6),o=\"__core-js_shared__\",i=r[o]||(r[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,e,n){var r=n(11).setDesc,o=n(30),i=n(37)(\"toStringTag\");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(35)(\"wks\"),o=n(38),i=n(6).Symbol;t.exports=function(t){return r[t]||(r[t]=i&&i[t]||(i||o)(\"Symbol.\"+t))}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++n+r).toString(36))}},function(t,e,n){var r=n(11),o=n(40);t.exports=function(t,e){for(var n,i=o(t),u=r.getKeys(i),c=u.length,s=0;c>s;)if(i[n=u[s++]]===e)return n}},function(t,e,n){var r=n(14),o=n(13);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(40),o=n(11).getNames,i={}.toString,u=\"object\"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return o(t)}catch(e){return u.slice()}};t.exports.get=function(t){return u&&\"[object Window]\"==i.call(t)?c(t):o(r(t))}},function(t,e,n){var r=n(11);t.exports=function(t){var e=r.getKeys(t),n=r.getSymbols;if(n)for(var o,i=n(t),u=r.isEnum,c=0;i.length>c;)u.call(t,o=i[c++])&&e.push(o);return e}},function(t,e,n){var r=n(15);t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},function(t,e,n){var r=n(45);t.exports=function(t){if(!r(t))throw TypeError(t+\" is not an object!\");return t}},function(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,e){t.exports=!0},function(t,e){},function(t,e,n){\"use strict\";var r=n(49)[\"default\"],o=n(51)[\"default\"];e[\"default\"]=function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof e);t.prototype=r(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(o?o(t,e):t.__proto__=e)},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(50),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){t.exports={\"default\":n(52),__esModule:!0}},function(t,e,n){n(53),t.exports=n(7).Object.setPrototypeOf},function(t,e,n){var r=n(5);r(r.S,\"Object\",{setPrototypeOf:n(54).set})},function(t,e,n){var r=n(11).getDesc,o=n(45),i=n(44),u=function(t,e){if(i(t),!o(e)&&null!==e)throw TypeError(e+\": can't set as prototype!\")};t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(t,e,o){try{o=n(8)(Function.call,r(Object.prototype,\"__proto__\").set,2),o(t,[]),e=!(t instanceof Array)}catch(i){e=!0}return function(t,n){return u(t,n),e?t.__proto__=n:o(t,n),t}}({},!1):void 0),check:u}},function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}function o(t,e){return t.indexOf(e)>=0}function i(t){return function(){return!t.apply(this,arguments)}}function u(t,e,n){for(var r={},o=(0,m[\"default\"])(t),i=0,u=o.length;u>i;i++){var c=o[i],s=t[c];n(e,c)&&(r[c]=s)}return r}function c(t,e){return u(t,e,o)}function s(t,e){return u(t,e,i(o))}function a(t){if(\"object\"==(\"undefined\"==typeof t?\"undefined\":(0,b[\"default\"])(t))&&null!==t){if(\"function\"==typeof y[\"default\"]){var e=(0,y[\"default\"])(t);return e===Object.prototype||null===e}return\"[object Object]\"==Object.prototype.toString.call(t)}return!1}function f(t,e){var n,r,o;n=Array.isArray(t)?[]:{};for(o in t)r=t[o],null!=r&&(\"object\"===(\"undefined\"==typeof r?\"undefined\":(0,b[\"default\"])(r))&&null!==r&&\"function\"!==r.type?n[o]=f(r,e):\"function\"===r.type?n[o]=e[r.name]:n[o]=r);return n}function p(t,e){return\"function\"==typeof t?t:function(n){return\"undefined\"!=typeof n[t]?n[t]:n[e]}}function l(t,e){return console.warn(\"Set margin with prefixes is deprecated use an object instead\"),t+=\"-\",(0,m[\"default\"])(e).reduce(function(n,r){return r.substr(0,t.length)===t&&(n[r.replace(t,\"\")]=e[r]),n},{})}function d(t){return t&&\"function\"==typeof t}Object.defineProperty(e,\"__esModule\",{value:!0}),e.includes=o,e.negate=i,e.filterObject=u,e.pick=c,e.without=s,e.isPlainObject=a,e.bindFunctions=f,e.getValueFunction=p,e.propsByPrefix=l,e.isCallable=d;var h=n(17),y=r(h),v=n(26),b=r(v),g=n(59),m=r(g)},function(t,e,n){t.exports={\"default\":n(60),__esModule:!0}},function(t,e,n){n(61),t.exports=n(7).Object.keys},function(t,e,n){var r=n(12);n(20)(\"keys\",function(t){return function(e){return t(r(e))}})}])});\n\n/***/ }),\n\n/***/ 767:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(764);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(13)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js??ref--2-1!../../../../../node_modules/postcss-loader/lib/index.js!./nvd3Styles.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js??ref--2-1!../../../../../node_modules/postcss-loader/lib/index.js!./nvd3Styles.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.ca57f25.chunk.js","import update from 'immutability-helper';\nimport getRangeDomain from '../../utils/dataFormats/getRangeDomain';\nimport { ownsProperties } from '../../utils/misc';\n\n/**\n * Need to setup yDomain for NVD3 chart that requires YAXis\n * @param {Object} typeConfig Chart type config\n * @return {Boolean}\n */\nexport function shouldSetupYDomain(typeConfig) {\n  return 0 === typeConfig.dataFormat.indexOf('nvd3') &&\n    -1 !== typeConfig.modules.settings.indexOf('YAxis');\n}\n\n/**\n * add nicely rounded yDomain to chart options, if chart has a yAxis\n * @param {Object} chartOptions\n * @param {Object} typeConfig\n * @param {Object[]}  chartData\n * @return {Object} Cloned chart options object with new yDomain\n */\nexport default function applyYDomain(chartOptions, typeConfig, chartData) {\n  if (!shouldSetupYDomain(typeConfig)) {\n    return chartOptions;\n  }\n\n  let yDomain;\n  if (chartOptions.yDomain) {\n    yDomain = chartOptions.yDomain;\n  } else if (ownsProperties(typeConfig, ['getNiceDomain'])) {\n    yDomain = typeConfig.getNiceDomain(typeConfig.dataFormat, chartData);\n  } else {\n    yDomain = getRangeDomain(typeConfig.dataFormat, chartData);\n  }\n\n  /**\n   * @todo Recalculate yDomain when series visibility is toggled by clicking on dots in the legend\n   */\n  return update(chartOptions, { yDomain: { $set: yDomain } });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/reducers/utils/applyYDomain.js","import { min, max, scale } from 'd3';\n\n/**\n * Get [min, max] array for data series in nvd3SingleSeries or nvd3MultiSeries format\n *\n * @param {Array} series Data series\n * @param {String} format Data format\n * @return {Array} Range of [min, max] for series\n */\nfunction getSeriesDomain(series, format) {\n  const key = 'nvd3SingleSeries' === format ? 'value' : 'y';\n  const values = series.map((point) => point[key]);\n  return [min(values), max(values)];\n}\n\nfunction getMultiSeriesDomain(series, format) {\n  const mins = [];\n  const maxs = [];\n  series.forEach((singleSeries) => {\n    const domain = getSeriesDomain(singleSeries.values, format);\n    mins.push(domain[0]);\n    maxs.push(domain[1]);\n  });\n  return [min(mins), max(maxs)];\n}\n\nfunction makeNice(range) {\n  return scale.linear().domain(range).nice().domain();\n}\n\n/**\n * Get \"nice\" rounded domain from dataset\n *\n * @param {String} format Data format from chart config object\n * @param {Object[]} data Chart data transformed for data format\n * @return {Array} Domain array of [min, max] values\n */\nexport default function getRangeDomain(format, data) {\n  const domain = 'nvd3SingleSeries' === format ?\n    getSeriesDomain(data, format) : getMultiSeriesDomain(data, format);\n  return makeNice(domain);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/utils/dataFormats/getRangeDomain.js","var map = {\n\t\"./NVD3Adapter/index\": 763\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 320;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/components/Chart/ChartTypes ^\\.\\/.*\\/index$\n// module id = 320\n// module chunks = 0","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport NVD3Chart from 'react-nvd3';\nimport update from 'immutability-helper';\nimport cloneDeep from 'lodash/cloneDeep';\nimport {\n  getChartTypeObject,\n  getChartTypeDefaultOpts,\n  getNvd3Type,\n} from '../../../../utils/chartTypeUtils';\nimport applyYDomain from '../../../../reducers/utils/applyYDomain.js';\nimport applyTickFormatters from '../../../../reducers/utils/applyTickFormatters';\nimport './nvd3Styles.css';\n\nexport default class NVD3Adapter extends Component {\n  static propTypes = {\n    data: PropTypes.array.isRequired,\n    options: PropTypes.object.isRequired,\n    widget: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n  };\n\n  static defaultProps = {\n    widget: false,\n  };\n\n  /**\n   * Apply any special formatting specfic to a chart type\n   */\n  static dataTransform(chartType, data) {\n    switch (chartType) {\n      case 'discreteBarChart':\n        return [{\n          key: '',\n          values: data,\n        }];\n\n      default:\n        return data;\n    }\n  }\n\n  /**\n   * Set up click listener for stacked area\n   */\n  static onReady(chart) {\n    if (this.type && 'stackedAreaChart' === this.type && chart.stacked) {\n      chart.stacked.dispatch.on('areaClick.toggle', null);\n    }\n  }\n\n  /**\n   * In editor, merge data into options and add a ref\n   * In widget, also recreate function-based options that can't be sent as JSON\n   */\n  mapToChartProps = () => {\n    const { options, data, widget } = this.props;\n    const type = getNvd3Type(options.type);\n    let chartProps = update(options, {\n      type: { $set: type },\n      datum: { $set: NVD3Adapter.dataTransform(options.type, data) },\n      ref: { $set: 'chartNode' },\n    });\n\n    if (!widget) {\n      return chartProps;\n    }\n\n    // TODO: This isn't an ideal place for this logic, and it's also duplicated within middleware/reducers.\n    // Widgets need to recreate function-based options\n    const typeConfig = getChartTypeObject(options.type).config;\n    const defaultOpts = getChartTypeDefaultOpts(options.type);\n    chartProps = Object.assign(\n      {}, defaultOpts, chartProps, typeConfig, { type }\n    );\n    chartProps = applyYDomain(chartProps, typeConfig, data);\n\n    return applyTickFormatters(chartProps, typeConfig);\n  };\n\n  render() {\n    // We clone the props, because nvd3 will mutate the datum that you pass to it.\n    const chartProps = cloneDeep(this.mapToChartProps());\n\n    // Key prop is for forcing re-render of the chart to avoid chart refresh issue when the chart type changes.\n    // https://github.com/NuCivic/react-nvd3/issues/59\n    return (<NVD3Chart\n      key={Math.random()}\n      ready={NVD3Adapter.onReady}\n      {...chartProps}\n    />);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/components/Chart/ChartTypes/NVD3Adapter/index.js","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".nv-stackedAreaChart .nv-legend .nv-series{cursor:default}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local]___[hash:base64:5]\"}!./~/postcss-loader/lib!./app/components/Chart/ChartTypes/NVD3Adapter/nvd3Styles.css\n// module id = 764\n// module chunks = 0","/* nvd3 version 1.8.6 (https://github.com/novus/nvd3) 2017-08-23 */\n(function(){\n\n// set up main nv object\nvar nv = {};\n\n// the major global objects under the nv namespace\nnv.dev = false; //set false when in production\nnv.tooltip = nv.tooltip || {}; // For the tooltip system\nnv.utils = nv.utils || {}; // Utility subsystem\nnv.models = nv.models || {}; //stores all the possible models/components\nnv.charts = {}; //stores all the ready to use charts\nnv.logs = {}; //stores some statistics and potential error messages\nnv.dom = {}; //DOM manipulation functions\n\n// Node/CommonJS - require D3\nif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined' && typeof(d3) == 'undefined') {\n    d3 = require('d3');\n}\n\nnv.dispatch = d3.dispatch('render_start', 'render_end');\n\n// Function bind polyfill\n// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment\n// https://github.com/ariya/phantomjs/issues/10522\n// http://kangax.github.io/compat-table/es5/#Function.prototype.bind\n// phantomJS is used for running the test suite\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== \"function\") {\n            // closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP = function () {},\n            fBound = function () {\n                return fToBind.apply(this instanceof fNOP && oThis\n                        ? this\n                        : oThis,\n                    aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n        return fBound;\n    };\n}\n\n//  Development render timers - disabled if dev = false\nif (nv.dev) {\n    nv.dispatch.on('render_start', function(e) {\n        nv.logs.startTime = +new Date();\n    });\n\n    nv.dispatch.on('render_end', function(e) {\n        nv.logs.endTime = +new Date();\n        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n    });\n}\n\n// Logs all arguments, and returns the last so you can test things in place\n// Note: in IE8 console.log is an object not a function, and if modernizr is used\n// then calling Function.prototype.bind with with anything other than a function\n// causes a TypeError to be thrown.\nnv.log = function() {\n    if (nv.dev && window.console && console.log && console.log.apply)\n        console.log.apply(console, arguments);\n    else if (nv.dev && window.console && typeof console.log == \"function\" && Function.prototype.bind) {\n        var log = Function.prototype.bind.call(console.log, console);\n        log.apply(console, arguments);\n    }\n    return arguments[arguments.length - 1];\n};\n\n// print console warning, should be used by deprecated functions\nnv.deprecated = function(name, info) {\n    if (console && console.warn) {\n        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');\n    }\n};\n\n// The nv.render function is used to queue up chart rendering\n// in non-blocking async functions.\n// When all queued charts are done rendering, nv.dispatch.render_end is invoked.\nnv.render = function render(step) {\n    // number of graphs to generate in each timeout loop\n    step = step || 1;\n\n    nv.render.active = true;\n    nv.dispatch.render_start();\n\n    var renderLoop = function() {\n        var chart, graph;\n\n        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n            chart = graph.generate();\n            if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n        }\n\n        nv.render.queue.splice(0, i);\n\n        if (nv.render.queue.length) {\n            setTimeout(renderLoop);\n        }\n        else {\n            nv.dispatch.render_end();\n            nv.render.active = false;\n        }\n    };\n\n    setTimeout(renderLoop);\n};\n\nnv.render.active = false;\nnv.render.queue = [];\n\n/*\nAdds a chart to the async rendering queue. This method can take arguments in two forms:\nnv.addGraph({\n    generate: <Function>\n    callback: <Function>\n})\n\nor\n\nnv.addGraph(<generate Function>, <callback Function>)\n\nThe generate function should contain code that creates the NVD3 model, sets options\non it, adds data to an SVG element, and invokes the chart model. The generate function\nshould return the chart model.  See examples/lineChart.html for a usage example.\n\nThe callback function is optional, and it is called when the generate function completes.\n*/\nnv.addGraph = function(obj) {\n    if (typeof arguments[0] === typeof(Function)) {\n        obj = {generate: arguments[0], callback: arguments[1]};\n    }\n\n    nv.render.queue.push(obj);\n\n    if (!nv.render.active) {\n        nv.render();\n    }\n};\n\n// Node/CommonJS exports\nif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined') {\n  module.exports = nv;\n}\n\nif (typeof(window) !== 'undefined') {\n  window.nv = nv;\n}\n/* Facade for queueing DOM write operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.write = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.mutate(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n\r\n/* Facade for queueing DOM read operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.read = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.measure(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n/* Utility class to handle creation of an interactive layer.\n This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\n containing the X-coordinate. It can also render a vertical line where the mouse is located.\n\n dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\n the rectangle. The dispatch is given one object which contains the mouseX/Y location.\n It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n */\nnv.interactiveGuideline = function() {\n    \"use strict\";\n\n    var margin = { left: 0, top: 0 } //Pass the chart's top and left magins. Used to calculate the mouseX/Y.\n        ,   width = null\n        ,   height = null\n        ,   xScale = d3.scale.linear()\n        ,   dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp')\n        ,   showGuideLine = true\n        ,   svgContainer = null // Must pass the chart's svg, we'll use its mousemove event.\n        ,   tooltip = nv.models.tooltip()\n        ,   isMSIE =  window.ActiveXObject// Checkt if IE by looking for activeX. (excludes IE11)\n    ;\n\n    tooltip\n        .duration(0)\n        .hideDelay(0)\n        .hidden(false);\n\n    function layer(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this);\n            var availableWidth = (width || 960), availableHeight = (height || 400);\n            var wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\")\n                .data([data]);\n            var wrapEnter = wrap.enter()\n                .append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n            wrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\n            if (!svgContainer) {\n                return;\n            }\n\n            function mouseHandler() {\n                var mouseX = d3.event.clientX - this.getBoundingClientRect().left;\n                var mouseY = d3.event.clientY - this.getBoundingClientRect().top;\n\n                var subtractMargin = true;\n                var mouseOutAnyReason = false;\n                if (isMSIE) {\n                    /*\n                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n                     over a rect in IE 10.\n                     However, d3.event.offsetX/Y also returns the mouse coordinates\n                     relative to the triggering <rect>. So we use offsetX/Y on IE.\n                     */\n                    mouseX = d3.event.offsetX;\n                    mouseY = d3.event.offsetY;\n\n                    /*\n                     On IE, if you attach a mouse event listener to the <svg> container,\n                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n                     When this happens on IE, the offsetX/Y is set to where ever the child element\n                     is located.\n                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n                     position under this scenario. Removing the line below *will* cause\n                     the interactive layer to not work right on IE.\n                     */\n                    if(d3.event.target.tagName !== \"svg\") {\n                        subtractMargin = false;\n                    }\n\n                    if (d3.event.target.className.baseVal.match(\"nv-legend\")) {\n                        mouseOutAnyReason = true;\n                    }\n\n                }\n\n                if(subtractMargin) {\n                    mouseX -= margin.left;\n                    mouseY -= margin.top;\n                }\n\n                /* If mouseX/Y is outside of the chart's bounds,\n                 trigger a mouseOut event.\n                 */\n                if (d3.event.type === 'mouseout'\n                    || mouseX < 0 || mouseY < 0\n                    || mouseX > availableWidth || mouseY > availableHeight\n                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n                    || mouseOutAnyReason\n                    ) {\n\n                    if (isMSIE) {\n                        if (d3.event.relatedTarget\n                            && d3.event.relatedTarget.ownerSVGElement === undefined\n                            && (d3.event.relatedTarget.className === undefined\n                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {\n\n                            return;\n                        }\n                    }\n                    dispatch.elementMouseout({\n                        mouseX: mouseX,\n                        mouseY: mouseY\n                    });\n                    layer.renderGuideLine(null); //hide the guideline\n                    tooltip.hidden(true);\n                    return;\n                } else {\n                    tooltip.hidden(false);\n                }\n\n\n                var scaleIsOrdinal = typeof xScale.rangeBands === 'function';\n                var pointXValue = undefined;\n\n                // Ordinal scale has no invert method\n                if (scaleIsOrdinal) {\n                    var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;\n                    // Check if mouseX is in the range band\n                    if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {\n                        pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];\n                    }\n                    else {\n                        dispatch.elementMouseout({\n                            mouseX: mouseX,\n                            mouseY: mouseY\n                        });\n                        layer.renderGuideLine(null); //hide the guideline\n                        tooltip.hidden(true);\n                        return;\n                    }\n                }\n                else {\n                    pointXValue = xScale.invert(mouseX);\n                }\n\n                dispatch.elementMousemove({\n                    mouseX: mouseX,\n                    mouseY: mouseY,\n                    pointXValue: pointXValue\n                });\n\n                //If user double clicks the layer, fire a elementDblclick\n                if (d3.event.type === \"dblclick\") {\n                    dispatch.elementDblclick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user single clicks the layer, fire elementClick\n                if (d3.event.type === 'click') {\n                    dispatch.elementClick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user presses mouse down the layer, fire elementMouseDown\n                if (d3.event.type === 'mousedown') {\n                \tdispatch.elementMouseDown({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n\n                // if user presses mouse down the layer, fire elementMouseUp\n                if (d3.event.type === 'mouseup') {\n                \tdispatch.elementMouseUp({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n            }\n\n            svgContainer\n                .on(\"touchmove\",mouseHandler)\n                .on(\"mousemove\",mouseHandler, true)\n                .on(\"mouseout\" ,mouseHandler,true)\n                .on(\"mousedown\" ,mouseHandler,true)\n                .on(\"mouseup\" ,mouseHandler,true)\n                .on(\"dblclick\" ,mouseHandler)\n                .on(\"click\", mouseHandler)\n            ;\n\n            layer.guideLine = null;\n            //Draws a vertical guideline at the given X postion.\n            layer.renderGuideLine = function(x) {\n                if (!showGuideLine) return;\n                if (layer.guideLine && layer.guideLine.attr(\"x1\") === x) return;\n                nv.dom.write(function() {\n                    var line = wrap.select(\".nv-interactiveGuideLine\")\n                        .selectAll(\"line\")\n                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n                    line.enter()\n                        .append(\"line\")\n                        .attr(\"class\", \"nv-guideline\")\n                        .attr(\"x1\", function(d) { return d;})\n                        .attr(\"x2\", function(d) { return d;})\n                        .attr(\"y1\", availableHeight)\n                        .attr(\"y2\",0);\n                    line.exit().remove();\n                });\n            }\n        });\n    }\n\n    layer.dispatch = dispatch;\n    layer.tooltip = tooltip;\n\n    layer.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return layer;\n    };\n\n    layer.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return layer;\n    };\n\n    layer.height = function(_) {\n        if (!arguments.length) return height;\n        height = _;\n        return layer;\n    };\n\n    layer.xScale = function(_) {\n        if (!arguments.length) return xScale;\n        xScale = _;\n        return layer;\n    };\n\n    layer.showGuideLine = function(_) {\n        if (!arguments.length) return showGuideLine;\n        showGuideLine = _;\n        return layer;\n    };\n\n    layer.svgContainer = function(_) {\n        if (!arguments.length) return svgContainer;\n        svgContainer = _;\n        return layer;\n    };\n\n    return layer;\n};\n\n/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\n This is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\n For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.\n Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\n because 28 is closer to 30 than 10.\n\n Unit tests can be found in: interactiveBisectTest.html\n\n Has the following known issues:\n * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n * Won't work if there are duplicate x coordinate values.\n */\nnv.interactiveBisect = function (values, searchVal, xAccessor) {\n    \"use strict\";\n    if (! (values instanceof Array)) {\n        return null;\n    }\n    var _xAccessor;\n    if (typeof xAccessor !== 'function') {\n        _xAccessor = function(d) {\n            return d.x;\n        }\n    } else {\n        _xAccessor = xAccessor;\n    }\n    var _cmp = function(d, v) {\n        // Accessors are no longer passed the index of the element along with\n        // the element itself when invoked by d3.bisector.\n        //\n        // Starting at D3 v3.4.4, d3.bisector() started inspecting the\n        // function passed to determine if it should consider it an accessor\n        // or a comparator. This meant that accessors that take two arguments\n        // (expecting an index as the second parameter) are treated as\n        // comparators where the second argument is the search value against\n        // which the first argument is compared.\n        return _xAccessor(d) - v;\n    };\n\n    var bisect = d3.bisector(_cmp).left;\n    var index = d3.max([0, bisect(values,searchVal) - 1]);\n    var currentValue = _xAccessor(values[index]);\n\n    if (typeof currentValue === 'undefined') {\n        currentValue = index;\n    }\n\n    if (currentValue === searchVal) {\n        return index; //found exact match\n    }\n\n    var nextIndex = d3.min([index+1, values.length - 1]);\n    var nextValue = _xAccessor(values[nextIndex]);\n\n    if (typeof nextValue === 'undefined') {\n        nextValue = nextIndex;\n    }\n\n    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {\n        return index;\n    } else {\n        return nextIndex\n    }\n};\n\n/*\n Returns the index in the array \"values\" that is closest to searchVal.\n Only returns an index if searchVal is within some \"threshold\".\n Otherwise, returns null.\n */\nnv.nearestValueIndex = function (values, searchVal, threshold) {\n    \"use strict\";\n    var yDistMax = Infinity, indexToHighlight = null;\n    values.forEach(function(d,i) {\n        var delta = Math.abs(searchVal - d);\n        if ( d != null && delta <= yDistMax && delta < threshold) {\n            yDistMax = delta;\n            indexToHighlight = i;\n        }\n    });\n    return indexToHighlight;\n};\n\n/* Model which can be instantiated to handle tooltip rendering.\n Example usage:\n var tip = nv.models.tooltip().gravity('w').distance(23)\n .data(myDataObject);\n\n tip();    //just invoke the returned function to render tooltip.\n */\nnv.models.tooltip = function() {\n    \"use strict\";\n\n    /*\n    Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n    Example Format of data:\n    {\n        key: \"Date\",\n        value: \"August 2009\",\n        series: [\n            {key: \"Series 1\", value: \"Value 1\", color: \"#000\"},\n            {key: \"Series 2\", value: \"Value 2\", color: \"#00f\"}\n        ]\n    }\n    */\n    var id = \"nvtooltip-\" + Math.floor(Math.random() * 100000) // Generates a unique id when you create a new tooltip() object.\n        ,   data = null\n        ,   gravity = 'w'   // Can be 'n','s','e','w'. Determines how tooltip is positioned.\n        ,   distance = 25 // Distance to offset tooltip from the mouse location.\n        ,   snapDistance = 0   // Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n        ,   classes = null  // Attaches additional CSS classes to the tooltip DIV that is created.\n        ,   hidden = true  // Start off hidden, toggle with hide/show functions below.\n        ,   hideDelay = 200  // Delay (in ms) before the tooltip hides after calling hide().\n        ,   tooltip = null // d3 select of the tooltip div.\n        ,   lastPosition = { left: null, top: null } // Last position the tooltip was in.\n        ,   enabled = true  // True -> tooltips are rendered. False -> don't render tooltips.\n        ,   duration = 100 // Tooltip movement duration, in ms.\n        ,   headerEnabled = true // If is to show the tooltip header.\n        ,   nvPointerEventsClass = \"nv-pointer-events-none\" // CSS class to specify whether element should not have mouse events.\n    ;\n\n    // Format function for the tooltip values column.\n    // d is value,\n    // i is series index\n    // p is point containing the value\n    var valueFormatter = function(d, i, p) {\n        return d;\n    };\n\n    // Format function for the tooltip header value.\n    var headerFormatter = function(d) {\n        return d;\n    };\n\n    var keyFormatter = function(d, i) {\n        return d;\n    };\n\n    // By default, the tooltip model renders a beautiful table inside a DIV, returned as HTML\n    // You can override this function if a custom tooltip is desired. For instance, you could directly manipulate\n    // the DOM by accessing elem and returning false.\n    var contentGenerator = function(d, elem) {\n        if (d === null) {\n            return '';\n        }\n\n        var table = d3.select(document.createElement(\"table\"));\n        if (headerEnabled) {\n            var theadEnter = table.selectAll(\"thead\")\n                .data([d])\n                .enter().append(\"thead\");\n\n            theadEnter.append(\"tr\")\n                .append(\"td\")\n                .attr(\"colspan\", 3)\n                .append(\"strong\")\n                .classed(\"x-value\", true)\n                .html(headerFormatter(d.value));\n        }\n\n        var tbodyEnter = table.selectAll(\"tbody\")\n            .data([d])\n            .enter().append(\"tbody\");\n\n        var trowEnter = tbodyEnter.selectAll(\"tr\")\n                .data(function(p) { return p.series})\n                .enter()\n                .append(\"tr\")\n                .classed(\"highlight\", function(p) { return p.highlight});\n\n        trowEnter.append(\"td\")\n            .classed(\"legend-color-guide\",true)\n            .append(\"div\")\n            .style(\"background-color\", function(p) { return p.color});\n\n        trowEnter.append(\"td\")\n            .classed(\"key\",true)\n            .classed(\"total\",function(p) { return !!p.total})\n            .html(function(p, i) { return keyFormatter(p.key, i)});\n\n        trowEnter.append(\"td\")\n            .classed(\"value\",true)\n            .html(function(p, i) { return valueFormatter(p.value, i, p) });\n\n        trowEnter.filter(function (p,i) { return p.percent !== undefined }).append(\"td\")\n            .classed(\"percent\", true)\n            .html(function(p, i) { return \"(\" + d3.format('%')(p.percent) + \")\" });\n\n        trowEnter.selectAll(\"td\").each(function(p) {\n            if (p.highlight) {\n                var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n                var opacity = 0.6;\n                d3.select(this)\n                    .style(\"border-bottom-color\", opacityScale(opacity))\n                    .style(\"border-top-color\", opacityScale(opacity))\n                ;\n            }\n        });\n\n        var html = table.node().outerHTML;\n        if (d.footer !== undefined)\n            html += \"<div class='footer'>\" + d.footer + \"</div>\";\n        return html;\n\n    };\n\n    /*\n     Function that returns the position (relative to the viewport/document.body)\n     the tooltip should be placed in.\n     Should return: {\n        left: <leftPos>,\n        top: <topPos>\n     }\n     */\n    var position = function() {\n        var pos = {\n            left: d3.event !== null ? d3.event.clientX : 0,\n            top: d3.event !== null ? d3.event.clientY : 0\n        };\n\n        if(getComputedStyle(document.body).transform != 'none') {\n            // Take the offset into account, as now the tooltip is relative\n            // to document.body.\n            var client = document.body.getBoundingClientRect();\n            pos.left -= client.left;\n            pos.top -= client.top;\n        }\n\n        return pos;\n    };\n\n    var dataSeriesExists = function(d) {\n        if (d && d.series) {\n            if (nv.utils.isArray(d.series)) {\n                return true;\n            }\n            // if object, it's okay just convert to array of the object\n            if (nv.utils.isObject(d.series)) {\n                d.series = [d.series];\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Calculates the gravity offset of the tooltip. Parameter is position of tooltip\n    // relative to the viewport.\n    var calcGravityOffset = function(pos) {\n        var height = tooltip.node().offsetHeight,\n            width = tooltip.node().offsetWidth,\n            clientWidth = document.documentElement.clientWidth, // Don't want scrollbars.\n            clientHeight = document.documentElement.clientHeight, // Don't want scrollbars.\n            left, top, tmp;\n\n        // calculate position based on gravity\n        switch (gravity) {\n            case 'e':\n                left = - width - distance;\n                top = - (height / 2);\n                if(pos.left + left < 0) left = distance;\n                if((tmp = pos.top + top) < 0) top -= tmp;\n                if((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'w':\n                left = distance;\n                top = - (height / 2);\n                if (pos.left + left + width > clientWidth) left = - width - distance;\n                if ((tmp = pos.top + top) < 0) top -= tmp;\n                if ((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'n':\n                left = - (width / 2) - 5; // - 5 is an approximation of the mouse's height.\n                top = distance;\n                if (pos.top + top + height > clientHeight) top = - height - distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 's':\n                left = - (width / 2);\n                top = - height - distance;\n                if (pos.top + top < 0) top = distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 'center':\n                left = - (width / 2);\n                top = - (height / 2);\n                break;\n            default:\n                left = 0;\n                top = 0;\n                break;\n        }\n\n        return { 'left': left, 'top': top };\n    };\n\n    /*\n     Positions the tooltip in the correct place, as given by the position() function.\n     */\n    var positionTooltip = function() {\n        nv.dom.read(function() {\n            var pos = position(),\n                gravityOffset = calcGravityOffset(pos),\n                left = pos.left + gravityOffset.left,\n                top = pos.top + gravityOffset.top;\n\n            // delay hiding a bit to avoid flickering\n            if (hidden) {\n                tooltip\n                    .interrupt()\n                    .transition()\n                    .delay(hideDelay)\n                    .duration(0)\n                    .style('opacity', 0);\n            } else {\n                // using tooltip.style('transform') returns values un-usable for tween\n                var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';\n                var new_translate = 'translate(' + Math.round(left) + 'px, ' + Math.round(top) + 'px)';\n                var translateInterpolator = d3.interpolateString(old_translate, new_translate);\n                var is_hidden = tooltip.style('opacity') < 0.1;\n\n                tooltip\n                    .interrupt() // cancel running transitions\n                    .transition()\n                    .duration(is_hidden ? 0 : duration)\n                    // using tween since some versions of d3 can't auto-tween a translate on a div\n                    .styleTween('transform', function (d) {\n                        return translateInterpolator;\n                    }, 'important')\n                    // Safari has its own `-webkit-transform` and does not support `transform`\n                    .styleTween('-webkit-transform', function (d) {\n                        return translateInterpolator;\n                    })\n                    .style('-ms-transform', new_translate)\n                    .style('opacity', 1);\n            }\n\n            lastPosition.left = left;\n            lastPosition.top = top;\n        });\n    };\n\n    // Creates new tooltip container, or uses existing one on DOM.\n    function initTooltip() {\n        if (!tooltip || !tooltip.node()) {\n            // Create new tooltip div if it doesn't exist on DOM.\n\n            var data = [1];\n            tooltip = d3.select(document.body).select('#'+id).data(data);\n\n            tooltip.enter().append('div')\n                   .attr(\"class\", \"nvtooltip \" + (classes ? classes : \"xy-tooltip\"))\n                   .attr(\"id\", id)\n                   .style(\"top\", 0).style(\"left\", 0)\n                   .style('opacity', 0)\n                   .style('position', 'fixed')\n                   .selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass, true)\n                   .classed(nvPointerEventsClass, true);\n\n            tooltip.exit().remove()\n        }\n    }\n\n    // Draw the tooltip onto the DOM.\n    function nvtooltip() {\n        if (!enabled) return;\n        if (!dataSeriesExists(data)) return;\n\n        nv.dom.write(function () {\n            initTooltip();\n            // Generate data and set it into tooltip.\n            // Bonus - If you override contentGenerator and return false, you can use something like\n            //         Angular, React or Knockout to bind the data for your tooltip directly to the DOM.\n            var newContent = contentGenerator(data, tooltip.node());\n            if (newContent) {\n                tooltip.node().innerHTML = newContent;\n            }\n\n            positionTooltip();\n        });\n\n        return nvtooltip;\n    }\n\n    nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n    nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);\n\n    nvtooltip._options = Object.create({}, {\n        // simple read/write options\n        duration: {get: function(){return duration;}, set: function(_){duration=_;}},\n        gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        distance: {get: function(){return distance;}, set: function(_){distance=_;}},\n        snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},\n        classes: {get: function(){return classes;}, set: function(_){classes=_;}},\n        enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},\n        hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},\n        contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},\n        valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},\n        headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},\n        keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        headerEnabled: {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},\n        position: {get: function(){return position;}, set: function(_){position=_;}},\n\n        // Deprecated options\n        chartContainer: {get: function(){return document.body;}, set: function(_){\n            // deprecated after 1.8.3\n            nv.deprecated('chartContainer', 'feature removed after 1.8.3');\n        }},\n        fixedTop: {get: function(){return null;}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('fixedTop', 'feature removed after 1.8.1');\n        }},\n        offset: {get: function(){return {left: 0, top: 0};}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('offset', 'use chart.tooltip.distance() instead');\n        }},\n\n        // options with extra logic\n        hidden: {get: function(){return hidden;}, set: function(_){\n            if (hidden != _) {\n                hidden = !!_;\n                nvtooltip();\n            }\n        }},\n        data: {get: function(){return data;}, set: function(_){\n            // if showing a single data point, adjust data format with that\n            if (_.point) {\n                _.value = _.point.x;\n                _.series = _.series || {};\n                _.series.value = _.point.y;\n                _.series.color = _.point.color || _.series.color;\n            }\n            data = _;\n        }},\n\n        // read only properties\n        node: {get: function(){return tooltip.node();}, set: function(_){}},\n        id: {get: function(){return id;}, set: function(_){}}\n    });\n\n    nv.utils.initOptions(nvtooltip);\n    return nvtooltip;\n};\n\n\n/*\nGets the browser window size\n\nReturns object with height and width properties\n */\nnv.utils.windowSize = function() {\n    // Sane defaults\n    var size = {width: 640, height: 480};\n\n    // Most recent browsers use\n    if (window.innerWidth && window.innerHeight) {\n        size.width = window.innerWidth;\n        size.height = window.innerHeight;\n        return (size);\n    }\n\n    // IE can use depending on mode it is in\n    if (document.compatMode=='CSS1Compat' &&\n        document.documentElement &&\n        document.documentElement.offsetWidth ) {\n\n        size.width = document.documentElement.offsetWidth;\n        size.height = document.documentElement.offsetHeight;\n        return (size);\n    }\n\n    // Earlier IE uses Doc.body\n    if (document.body && document.body.offsetWidth) {\n        size.width = document.body.offsetWidth;\n        size.height = document.body.offsetHeight;\n        return (size);\n    }\n\n    return (size);\n};\n\n\n/* handle dumb browser quirks...  isinstance breaks if you use frames\ntypeof returns 'object' for null, NaN is a number, etc.\n */\nnv.utils.isArray = Array.isArray;\nnv.utils.isObject = function(a) {\n    return a !== null && typeof a === 'object';\n};\nnv.utils.isFunction = function(a) {\n    return typeof a === 'function';\n};\nnv.utils.isDate = function(a) {\n    return toString.call(a) === '[object Date]';\n};\nnv.utils.isNumber = function(a) {\n    return !isNaN(a) && typeof a === 'number';\n};\n\n\n/*\nBinds callback function to run when window is resized\n */\nnv.utils.windowResize = function(handler) {\n    if (window.addEventListener) {\n        window.addEventListener('resize', handler);\n    } else {\n        nv.log(\"ERROR: Failed to bind to window.resize with: \", handler);\n    }\n    // return object with clear function to remove the single added callback.\n    return {\n        callback: handler,\n        clear: function() {\n            window.removeEventListener('resize', handler);\n        }\n    }\n};\n\n\n/*\nBackwards compatible way to implement more d3-like coloring of graphs.\nCan take in nothing, an array, or a function/scale\nTo use a normal scale, get the range and pass that because we must be able\nto take two arguments and use the index to keep backward compatibility\n*/\nnv.utils.getColor = function(color) {\n    //if you pass in nothing, get default colors back\n    if (color === undefined) {\n        return nv.utils.defaultColor();\n\n    //if passed an array, turn it into a color scale\n    } else if(nv.utils.isArray(color)) {\n        var color_scale = d3.scale.ordinal().range(color);\n        return function(d, i) {\n            var key = i === undefined ? d : i;\n            return d.color || color_scale(key);\n        };\n\n    //if passed a function or scale, return it, or whatever it may be\n    //external libs, such as angularjs-nvd3-directives use this\n    } else {\n        //can't really help it if someone passes rubbish as color\n        return color;\n    }\n};\n\n\n/*\nDefault color chooser uses a color scale of 20 colors from D3\n https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors\n */\nnv.utils.defaultColor = function() {\n    // get range of the scale so we'll turn it into our own function.\n    return nv.utils.getColor(d3.scale.category20().range());\n};\n\n\n/*\nReturns a color function that takes the result of 'getKey' for each series and\nlooks for a corresponding color from the dictionary\n*/\nnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n    // use default series.key if getKey is undefined\n    getKey = getKey || function(series) { return series.key };\n    defaultColors = defaultColors || d3.scale.category20().range();\n\n    // start at end of default color list and walk back to index 0\n    var defIndex = defaultColors.length;\n\n    return function(series, index) {\n        var key = getKey(series);\n        if (nv.utils.isFunction(dictionary[key])) {\n            return dictionary[key]();\n        } else if (dictionary[key] !== undefined) {\n            return dictionary[key];\n        } else {\n            // no match in dictionary, use a default color\n            if (!defIndex) {\n                // used all the default colors, start over\n                defIndex = defaultColors.length;\n            }\n            defIndex = defIndex - 1;\n            return defaultColors[defIndex];\n        }\n    };\n};\n\n\n/*\nFrom the PJAX example on d3js.org, while this is not really directly needed\nit's a very cool method for doing pjax, I may expand upon it a little bit,\nopen to suggestions on anything that may be useful\n*/\nnv.utils.pjax = function(links, content) {\n\n    var load = function(href) {\n        d3.html(href, function(fragment) {\n            var target = d3.select(content).node();\n            target.parentNode.replaceChild(\n                d3.select(fragment).select(content).node(),\n                target);\n            nv.utils.pjax(links, content);\n        });\n    };\n\n    d3.selectAll(links).on(\"click\", function() {\n        history.pushState(this.href, this.textContent, this.href);\n        load(this.href);\n        d3.event.preventDefault();\n    });\n\n    d3.select(window).on(\"popstate\", function() {\n        if (d3.event.state) {\n            load(d3.event.state);\n        }\n    });\n};\n\n\n/*\nFor when we want to approximate the width in pixels for an SVG:text element.\nMost common instance is when the element is in a display:none; container.\nForumla is : text.length * font-size * constant_factor\n*/\nnv.utils.calcApproxTextWidth = function (svgTextElem) {\n    if (nv.utils.isFunction(svgTextElem.style) && nv.utils.isFunction(svgTextElem.text)) {\n        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"), 10);\n        var textLength = svgTextElem.text().length;\n        return nv.utils.NaNtoZero(textLength * fontSize * 0.5);\n    }\n    return 0;\n};\n\n\n/*\nNumbers that are undefined, null or NaN, convert them to zeros.\n*/\nnv.utils.NaNtoZero = function(n) {\n    if (!nv.utils.isNumber(n)\n        || isNaN(n)\n        || n === null\n        || n === Infinity\n        || n === -Infinity) {\n\n        return 0;\n    }\n    return n;\n};\n\n/*\nAdd a way to watch for d3 transition ends to d3\n*/\nd3.selection.prototype.watchTransition = function(renderWatch){\n    var args = [this].concat([].slice.call(arguments, 1));\n    return renderWatch.transition.apply(renderWatch, args);\n};\n\n\n/*\nHelper object to watch when d3 has rendered something\n*/\nnv.utils.renderWatch = function(dispatch, duration) {\n    if (!(this instanceof nv.utils.renderWatch)) {\n        return new nv.utils.renderWatch(dispatch, duration);\n    }\n\n    var _duration = duration !== undefined ? duration : 250;\n    var renderStack = [];\n    var self = this;\n\n    this.models = function(models) {\n        models = [].slice.call(arguments, 0);\n        models.forEach(function(model){\n            model.__rendered = false;\n            (function(m){\n                m.dispatch.on('renderEnd', function(arg){\n                    m.__rendered = true;\n                    self.renderEnd('model');\n                });\n            })(model);\n\n            if (renderStack.indexOf(model) < 0) {\n                renderStack.push(model);\n            }\n        });\n    return this;\n    };\n\n    this.reset = function(duration) {\n        if (duration !== undefined) {\n            _duration = duration;\n        }\n        renderStack = [];\n    };\n\n    this.transition = function(selection, args, duration) {\n        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n\n        if (args.length > 1) {\n            duration = args.pop();\n        } else {\n            duration = _duration !== undefined ? _duration : 250;\n        }\n        selection.__rendered = false;\n\n        if (renderStack.indexOf(selection) < 0) {\n            renderStack.push(selection);\n        }\n\n        if (duration === 0) {\n            selection.__rendered = true;\n            selection.delay = function() { return this; };\n            selection.duration = function() { return this; };\n            return selection;\n        } else {\n            if (selection.length === 0) {\n                selection.__rendered = true;\n            } else if (selection.every( function(d){ return !d.length; } )) {\n                selection.__rendered = true;\n            } else {\n                selection.__rendered = false;\n            }\n\n            var n = 0;\n            return selection\n                .transition()\n                .duration(duration)\n                .each(function(){ ++n; })\n                .each('end', function(d, i) {\n                    if (--n === 0) {\n                        selection.__rendered = true;\n                        self.renderEnd.apply(this, args);\n                    }\n                });\n        }\n    };\n\n    this.renderEnd = function() {\n        if (renderStack.every( function(d){ return d.__rendered; } )) {\n            renderStack.forEach( function(d){ d.__rendered = false; });\n            dispatch.renderEnd.apply(this, arguments);\n        }\n    }\n\n};\n\n\n/*\nTakes multiple objects and combines them into the first one (dst)\nexample:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});\ngives:  {a: 2, b: 3, c: 4}\n*/\nnv.utils.deepExtend = function(dst){\n    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n    sources.forEach(function(source) {\n        for (var key in source) {\n            var isArray = nv.utils.isArray(dst[key]);\n            var isObject = nv.utils.isObject(dst[key]);\n            var srcObj = nv.utils.isObject(source[key]);\n\n            if (isObject && !isArray && srcObj) {\n                nv.utils.deepExtend(dst[key], source[key]);\n            } else {\n                dst[key] = source[key];\n            }\n        }\n    });\n};\n\n\n/*\nstate utility object, used to track d3 states in the models\n*/\nnv.utils.state = function(){\n    if (!(this instanceof nv.utils.state)) {\n        return new nv.utils.state();\n    }\n    var state = {};\n    var _self = this;\n    var _setState = function(){};\n    var _getState = function(){ return {}; };\n    var init = null;\n    var changed = null;\n\n    this.dispatch = d3.dispatch('change', 'set');\n\n    this.dispatch.on('set', function(state){\n        _setState(state, true);\n    });\n\n    this.getter = function(fn){\n        _getState = fn;\n        return this;\n    };\n\n    this.setter = function(fn, callback) {\n        if (!callback) {\n            callback = function(){};\n        }\n        _setState = function(state, update){\n            fn(state);\n            if (update) {\n                callback();\n            }\n        };\n        return this;\n    };\n\n    this.init = function(state){\n        init = init || {};\n        nv.utils.deepExtend(init, state);\n    };\n\n    var _set = function(){\n        var settings = _getState();\n\n        if (JSON.stringify(settings) === JSON.stringify(state)) {\n            return false;\n        }\n\n        for (var key in settings) {\n            if (state[key] === undefined) {\n                state[key] = {};\n            }\n            state[key] = settings[key];\n            changed = true;\n        }\n        return true;\n    };\n\n    this.update = function(){\n        if (init) {\n            _setState(init, false);\n            init = null;\n        }\n        if (_set.call(this)) {\n            this.dispatch.change(state);\n        }\n    };\n\n};\n\n\n/*\nSnippet of code you can insert into each nv.models.* to give you the ability to\ndo things like:\nchart.options({\n  showXAxis: true,\n  tooltips: true\n});\n\nTo enable in the chart:\nchart.options = nv.utils.optionsFunc.bind(chart);\n*/\nnv.utils.optionsFunc = function(args) {\n    if (args) {\n        d3.map(args).forEach((function(key,value) {\n            if (nv.utils.isFunction(this[key])) {\n                this[key](value);\n            }\n        }).bind(this));\n    }\n    return this;\n};\n\n\n/*\nnumTicks:  requested number of ticks\ndata:  the chart data\n\nreturns the number of ticks to actually use on X axis, based on chart data\nto avoid duplicate ticks with the same value\n*/\nnv.utils.calcTicksX = function(numTicks, data) {\n    // find max number of values from all data streams\n    var numValues = 1;\n    var i = 0;\n    for (i; i < data.length; i += 1) {\n        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;\n        numValues = stream_len > numValues ? stream_len : numValues;\n    }\n    nv.log(\"Requested number of ticks: \", numTicks);\n    nv.log(\"Calculated max values to be: \", numValues);\n    // make sure we don't have more ticks than values to avoid duplicates\n    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;\n    // make sure we have at least one tick\n    numTicks = numTicks < 1 ? 1 : numTicks;\n    // make sure it's an integer\n    numTicks = Math.floor(numTicks);\n    nv.log(\"Calculating tick count as: \", numTicks);\n    return numTicks;\n};\n\n\n/*\nreturns number of ticks to actually use on Y axis, based on chart data\n*/\nnv.utils.calcTicksY = function(numTicks, data) {\n    // currently uses the same logic but we can adjust here if needed later\n    return nv.utils.calcTicksX(numTicks, data);\n};\n\n\n/*\nAdd a particular option from an options object onto chart\nOptions exposed on a chart are a getter/setter function that returns chart\non set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');\n\noption objects should be generated via Object.create() to provide\nthe option of manipulating data via get/set functions.\n*/\nnv.utils.initOption = function(chart, name) {\n    // if it's a call option, just call it directly, otherwise do get/set\n    if (chart._calls && chart._calls[name]) {\n        chart[name] = chart._calls[name];\n    } else {\n        chart[name] = function (_) {\n            if (!arguments.length) return chart._options[name];\n            chart._overrides[name] = true;\n            chart._options[name] = _;\n            return chart;\n        };\n        // calling the option as _option will ignore if set by option already\n        // so nvd3 can set options internally but the stop if set manually\n        chart['_' + name] = function(_) {\n            if (!arguments.length) return chart._options[name];\n            if (!chart._overrides[name]) {\n                chart._options[name] = _;\n            }\n            return chart;\n        }\n    }\n};\n\n\n/*\nAdd all options in an options object to the chart\n*/\nnv.utils.initOptions = function(chart) {\n    chart._overrides = chart._overrides || {};\n    var ops = Object.getOwnPropertyNames(chart._options || {});\n    var calls = Object.getOwnPropertyNames(chart._calls || {});\n    ops = ops.concat(calls);\n    for (var i in ops) {\n        nv.utils.initOption(chart, ops[i]);\n    }\n};\n\n\n/*\nInherit options from a D3 object\nd3.rebind makes calling the function on target actually call it on source\nAlso use _d3options so we can track what we inherit for documentation and chained inheritance\n*/\nnv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {\n    target._d3options = oplist.concat(target._d3options || []);\n    // Find unique d3 options (string) and update d3options\n    target._d3options = (target._d3options || []).filter(function(item, i, ar){ return ar.indexOf(item) === i; });\n    oplist.unshift(d3_source);\n    oplist.unshift(target);\n    d3.rebind.apply(this, oplist);\n};\n\n\n/*\nRemove duplicates from an array\n*/\nnv.utils.arrayUnique = function(a) {\n    return a.sort().filter(function(item, pos) {\n        return !pos || item != a[pos - 1];\n    });\n};\n\n\n/*\nKeeps a list of custom symbols to draw from in addition to d3.svg.symbol\nNecessary since d3 doesn't let you extend its list -_-\nAdd new symbols by doing nv.utils.symbols.set('name', function(size){...});\n*/\nnv.utils.symbolMap = d3.map();\n\n\n/*\nReplaces d3.svg.symbol so that we can look both there and our own map\n */\nnv.utils.symbol = function() {\n    var type,\n        size = 64;\n    function symbol(d,i) {\n        var t = type.call(this,d,i);\n        var s = size.call(this,d,i);\n        if (d3.svg.symbolTypes.indexOf(t) !== -1) {\n            return d3.svg.symbol().type(t).size(s)();\n        } else {\n            return nv.utils.symbolMap.get(t)(s);\n        }\n    }\n    symbol.type = function(_) {\n        if (!arguments.length) return type;\n        type = d3.functor(_);\n        return symbol;\n    };\n    symbol.size = function(_) {\n        if (!arguments.length) return size;\n        size = d3.functor(_);\n        return symbol;\n    };\n    return symbol;\n};\n\n\n/*\nInherit option getter/setter functions from source to target\nd3.rebind makes calling the function on target actually call it on source\nAlso track via _inherited and _d3options so we can track what we inherit\nfor documentation generation purposes and chained inheritance\n*/\nnv.utils.inheritOptions = function(target, source) {\n    // inherit all the things\n    var ops = Object.getOwnPropertyNames(source._options || {});\n    var calls = Object.getOwnPropertyNames(source._calls || {});\n    var inherited = source._inherited || [];\n    var d3ops = source._d3options || [];\n    var args = ops.concat(calls).concat(inherited).concat(d3ops);\n    args.unshift(source);\n    args.unshift(target);\n    d3.rebind.apply(this, args);\n    // pass along the lists to keep track of them, don't allow duplicates\n    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));\n    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));\n};\n\n\n/*\nRuns common initialize code on the svg before the chart builds\n*/\nnv.utils.initSVG = function(svg) {\n    svg.classed({'nvd3-svg':true});\n};\n\n\n/*\nSanitize and provide default for the container height.\n*/\nnv.utils.sanitizeHeight = function(height, container) {\n    return (height || parseInt(container.style('height'), 10) || 400);\n};\n\n\n/*\nSanitize and provide default for the container width.\n*/\nnv.utils.sanitizeWidth = function(width, container) {\n    return (width || parseInt(container.style('width'), 10) || 960);\n};\n\n\n/*\nCalculate the available height for a chart.\n*/\nnv.utils.availableHeight = function(height, container, margin) {\n    return Math.max(0,nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n};\n\n/*\nCalculate the available width for a chart.\n*/\nnv.utils.availableWidth = function(width, container, margin) {\n    return Math.max(0,nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);\n};\n\n/*\nClear any rendered chart components and display a chart's 'noData' message\n*/\nnv.utils.noData = function(chart, container) {\n    var opt = chart.options(),\n        margin = opt.margin(),\n        noData = opt.noData(),\n        data = (noData == null) ? [\"No Data Available.\"] : [noData],\n        height = nv.utils.availableHeight(null, container, margin),\n        width = nv.utils.availableWidth(null, container, margin),\n        x = margin.left + width/2,\n        y = margin.top + height/2;\n\n    //Remove any previously created chart components\n    container.selectAll('g').remove();\n\n    var noDataText = container.selectAll('.nv-noData').data(data);\n\n    noDataText.enter().append('text')\n        .attr('class', 'nvd3 nv-noData')\n        .attr('dy', '-.7em')\n        .style('text-anchor', 'middle');\n\n    noDataText\n        .attr('x', x)\n        .attr('y', y)\n        .text(function(t){ return t; });\n};\n\n/*\n Wrap long labels.\n */\nnv.utils.wrapTicks = function (text, width) {\n    text.each(function() {\n        var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1,\n            y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(\" \"));\n                line = [word];\n                tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n            }\n        }\n    });\n};\n\n/*\nCheck equality of 2 array\n*/\nnv.utils.arrayEquals = function (array1, array2) {\n    if (array1 === array2)\n        return true;\n\n    if (!array1 || !array2)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (array1.length != array2.length)\n        return false;\n\n    for (var i = 0,\n        l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!nv.arrayEquals(array1[i], array2[i]))\n                return false;\n        } else if (array1[i] != array2[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n Check if a point within an arc\n */\nnv.utils.pointIsInArc = function(pt, ptData, d3Arc) {\n    // Center of the arc is assumed to be 0,0\n    // (pt.x, pt.y) are assumed to be relative to the center\n    var r1 = d3Arc.innerRadius()(ptData), // Note: Using the innerRadius\n      r2 = d3Arc.outerRadius()(ptData),\n      theta1 = d3Arc.startAngle()(ptData),\n      theta2 = d3Arc.endAngle()(ptData);\n\n    var dist = pt.x * pt.x + pt.y * pt.y,\n      angle = Math.atan2(pt.x, -pt.y); // Note: different coordinate system.\n\n    angle = (angle < 0) ? (angle + Math.PI * 2) : angle;\n\n    return (r1 * r1 <= dist) && (dist <= r2 * r2) &&\n      (theta1 <= angle) && (angle <= theta2);\n};\n\nnv.models.axis = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var axis = d3.svg.axis();\n    var scale = d3.scale.linear();\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 75 //only used for tickLabel currently\n        , height = 60 //only used for tickLabel currently\n        , axisLabelText = null\n        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n        , rotateLabels = 0\n        , rotateYLabel = true\n        , staggerLabels = false\n        , isOrdinal = false\n        , ticks = null\n        , axisLabelDistance = 0\n        , fontSize = undefined\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        , tickFormatMaxMin\n        ;\n    axis\n        .scale(scale)\n        .orient('bottom')\n        .tickFormat(function(d) { return d })\n    ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            if (ticks !== null)\n                axis.ticks(ticks);\n            else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\n            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n            g.watchTransition(renderWatch, 'axis').call(axis);\n\n            scale0 = scale0 || axis.scale();\n\n            var fmt = axis.tickFormat();\n            if (fmt == null) {\n                fmt = scale0.tickFormat();\n            }\n\n            var axisLabel = g.selectAll('text.nv-axislabel')\n                .data([axisLabelText || null]);\n            axisLabel.exit().remove();\n\n            //only skip when fontSize is undefined so it can be cleared with a null or blank string\n            if (fontSize !== undefined) {\n                g.selectAll('g').select(\"text\").style('font-size', fontSize);\n            }\n\n            var xLabelMargin;\n            var axisMaxMin;\n            var w;\n            switch (axis.orient()) {\n                case 'top':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                  w = 0;\n                  if (scale.range().length === 1) {\n                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                  } else if (scale.range().length === 2) {\n                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                  } else if ( scale.range().length > 2){\n                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                  };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', 0)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '-0.5em')\n                            .attr('y', -axis.tickPadding())\n                            .attr('text-anchor', 'middle')\n                            .text(function(d,i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max top')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'\n                            });\n                    }\n                    break;\n                case 'bottom':\n                    xLabelMargin = axisLabelDistance + 36;\n                    var maxTextWidth = 30;\n                    var textHeight = 0;\n                    var xTicks = g.selectAll('g').select(\"text\");\n                    var rotateLabelsRule = '';\n                    if (rotateLabels%360) {\n                        //Reset transform on ticks so textHeight can be calculated correctly\n                        xTicks.attr('transform', '');\n                        //Calculate the longest xTick width\n                        xTicks.each(function(d,i){\n                            var box = this.getBoundingClientRect();\n                            var width = box.width;\n                            textHeight = box.height;\n                            if(width > maxTextWidth) maxTextWidth = width;\n                        });\n                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';\n                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n                        //Rotate all xTicks\n                        xTicks\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n                    } else {\n                        if (staggerLabels) {\n                            xTicks\n                                .attr('transform', function(d,i) {\n                                    return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'\n                                });\n                        } else {\n                            xTicks.attr('transform', \"translate(0,0)\");\n                        }\n                    }\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    w = 0;\n                    if (scale.range().length === 1) {\n                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                    } else if (scale.range().length === 2) {\n                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                    } else if ( scale.range().length > 2){\n                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                    };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', xLabelMargin)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        //if (showMaxMin && !isOrdinal) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            //.data(scale.domain())\n                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '.71em')\n                            .attr('y', axis.tickPadding())\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n                            .text(function(d,i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            });\n                    }\n\n                    break;\n                case 'right':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12 - (axisLabelDistance || 0)) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                       \taxisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', axis.tickPadding())\n                            .style('text-anchor', 'start')\n                            .text(function(d, i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n                case 'left':\n                    /*\n                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n                     var yTicks = g.selectAll('g').select(\"text\");\n                     yTicks.each(function(d,i){\n                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;\n                     if(labelPadding > width) width = labelPadding;\n                     });\n                     */\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)\n                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', -axis.tickPadding())\n                            .attr('text-anchor', 'end')\n                            .text(function(d,i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n            }\n            axisLabel.text(function(d) { return d });\n\n            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n                //check if max and min overlap other values, if so, hide the values that overlap\n                g.selectAll('g') // the g's wrapping each tick\n                    .each(function(d,i) {\n                        d3.select(this).select('text').attr('opacity', 1);\n                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                                d3.select(this).attr('opacity', 0);\n\n                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n                        }\n                    });\n\n                //if Max and Min = 0 only show min, Issue #281\n                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {\n                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {\n                        return !i ? 1 : 0\n                    });\n                }\n            }\n\n            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n                var maxMinRange = [];\n                wrap.selectAll('g.nv-axisMaxMin')\n                    .each(function(d,i) {\n                        try {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)\n                        }catch (err) {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + 4);\n                        }\n                    });\n                // the g's wrapping each tick\n                g.selectAll('g').each(function(d, i) {\n                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                            d3.select(this).remove();\n                        else\n                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n                    }\n                });\n            }\n\n            //Highlight zero tick line\n            g.selectAll('.tick')\n                .filter(function (d) {\n                    /*\n                    The filter needs to return only ticks at or near zero.\n                    Numbers like 0.00001 need to count as zero as well,\n                    and the arithmetic trick below solves that.\n                    */\n                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)\n                })\n                .classed('zero', true);\n\n            //store old scales for use in transitions on update\n            scale0 = scale.copy();\n\n        });\n\n        renderWatch.renderEnd('axis immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.axis = axis;\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},\n        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},\n        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},\n        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},\n        height:            {get: function(){return height;}, set: function(_){height=_;}},\n        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        width:             {get: function(){return width;}, set: function(_){width=_;}},\n        fontSize:          {get: function(){return fontSize;}, set: function(_){fontSize=_;}},\n        tickFormatMaxMin:  {get: function(){return tickFormatMaxMin;}, set: function(_){tickFormatMaxMin=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top !== undefined    ? _.top    : margin.top;\n            margin.right  = _.right !== undefined  ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left !== undefined   ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration=_;\n            renderWatch.reset(duration);\n        }},\n        scale: {get: function(){return scale;}, set: function(_){\n            scale = _;\n            axis.scale(scale);\n            isOrdinal = typeof scale.rangeBands === 'function';\n            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);\n    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n\n    return chart;\n};\nnv.models.boxPlot = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0},\n        width = 960,\n        height = 500,\n        id = Math.floor(Math.random() * 10000), // Create semi-unique ID in case user doesn't select one\n        xScale = d3.scale.ordinal(),\n        yScale = d3.scale.linear(),\n        getX  = function(d) { return d.label }, // Default data model selectors.\n        getQ1 = function(d) { return d.values.Q1 },\n        getQ2 = function(d) { return d.values.Q2 },\n        getQ3 = function(d) { return d.values.Q3 },\n        getWl = function(d) { return d.values.whisker_low },\n        getWh = function(d) { return d.values.whisker_high },\n        getColor = function(d) { return d.color },\n        getOlItems  = function(d) { return d.values.outliers },\n        getOlValue = function(d, i, j) { return d },\n        getOlLabel = function(d, i, j) { return d },\n        getOlColor = function(d, i, j) { return undefined },\n        color = nv.utils.defaultColor(),\n        container = null,\n        xDomain, xRange,\n        yDomain, yRange,\n        dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'),\n        duration = 250,\n        maxBoxWidth = null;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var xScale0, yScale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            xScale.domain(xDomain || data.map(function(d,i) { return getX(d,i); }))\n                .rangeBands(xRange || [0, availableWidth], 0.1);\n\n            // if we know yDomain, no need to calculate\n            var yData = []\n            if (!yDomain) {\n                // (y-range is based on quartiles, whiskers and outliers)\n                var values = [], yMin, yMax;\n                data.forEach(function (d, i) {\n                    var q1 = getQ1(d), q3 = getQ3(d), wl = getWl(d), wh = getWh(d);\n                    var olItems = getOlItems(d);\n                    if (olItems) {\n                        olItems.forEach(function (e, i) {\n                            values.push(getOlValue(e, i, undefined));\n                        });\n                    }\n                    if (wl) { values.push(wl) }\n                    if (q1) { values.push(q1) }\n                    if (q3) { values.push(q3) }\n                    if (wh) { values.push(wh) }\n                });\n                yMin = d3.min(values);\n                yMax = d3.max(values);\n                yData = [ yMin, yMax ] ;\n            }\n\n            yScale.domain(yDomain || yData);\n            yScale.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            xScale0 = xScale0 || xScale;\n            yScale0 = yScale0 || yScale.copy().range([yScale(0),yScale(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });\n            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);\n            boxplots\n                .attr('class', 'nv-boxplot')\n                .attr('transform', function(d,i,j) { return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)'; })\n                .classed('hover', function(d) { return d.hover });\n            boxplots\n                .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', 0.75)\n                .delay(function(d,i) { return i * duration / data.length })\n                .attr('transform', function(d,i) {\n                    return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)';\n                });\n            boxplots.exit().remove();\n\n            // ----- add the SVG elements for each boxPlot -----\n\n            // conditionally append whisker lines\n            boxEnter.each(function(d,i) {\n                var box = d3.select(this);\n                [getWl, getWh].forEach(function (f) {\n                    if (f(d) !== undefined && f(d) !== null) {\n                        var key = (f === getWl) ? 'low' : 'high';\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);\n                    }\n                });\n            });\n\n            var box_width = function() { return (maxBoxWidth === null ? xScale.rangeBand() * 0.9 : Math.min(75, xScale.rangeBand() * 0.9)); };\n            var box_left  = function() { return xScale.rangeBand() * 0.45 - box_width()/2; };\n            var box_right = function() { return xScale.rangeBand() * 0.45 + box_width()/2; };\n\n            // update whisker lines and ticks\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                var endpoint = (f === getWl) ? getQ1 : getQ3;\n                boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', xScale.rangeBand() * 0.45 )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', xScale.rangeBand() * 0.45 )\n                    .attr('y2', function(d,i) { return yScale(endpoint(d)); });\n                boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', box_left )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', box_right )\n                    .attr('y2', function(d,i) { return yScale(f(d)); });\n            });\n\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                boxEnter.selectAll('.nv-boxplot-' + key)\n                  .on('mouseover', function(d,i,j) {\n                      d3.select(this).classed('hover', true);\n                      dispatch.elementMouseover({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mouseout', function(d,i,j) {\n                      d3.select(this).classed('hover', false);\n                      dispatch.elementMouseout({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mousemove', function(d,i) {\n                      dispatch.elementMousemove({e: d3.event});\n                  });\n            });\n\n            // boxes\n            boxEnter.append('rect')\n                .attr('class', 'nv-boxplot-box')\n                // tooltip events\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n\n            // box transitions\n            boxplots.select('rect.nv-boxplot-box')\n              .watchTransition(renderWatch, 'nv-boxplot: boxes')\n                .attr('y', function(d,i) { return yScale(getQ3(d)); })\n                .attr('width', box_width)\n                .attr('x', box_left )\n                .attr('height', function(d,i) { return Math.abs(yScale(getQ3(d)) - yScale(getQ1(d))) || 1 })\n                .style('fill', function(d,i) { return getColor(d) || color(d,i) })\n                .style('stroke', function(d,i) { return getColor(d) || color(d,i) });\n\n            // median line\n            boxEnter.append('line').attr('class', 'nv-boxplot-median');\n\n            boxplots.select('line.nv-boxplot-median')\n              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')\n                .attr('x1', box_left)\n                .attr('y1', function(d,i) { return yScale(getQ2(d)); })\n                .attr('x2', box_right)\n                .attr('y2', function(d,i) { return yScale(getQ2(d)); });\n\n            // outliers\n            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {\n                return getOlItems(d) || [];\n            });\n            outliers.enter().append('circle')\n                .style('fill', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('stroke', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('z-index', 9000)\n                .on('mouseover', function(d,i,j) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i,j) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n            outliers.attr('class', 'nv-boxplot-outlier');\n            outliers\n              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')\n                .attr('cx', xScale.rangeBand() * 0.45)\n                .attr('cy', function(d,i,j) { return yScale(getOlValue(d,i,j)); })\n                .attr('r', '3');\n            outliers.exit().remove();\n\n            //store old scales for use in transitions on update\n            xScale0 = xScale.copy();\n            yScale0 = yScale.copy();\n        });\n\n        renderWatch.renderEnd('nv-boxplot immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:       {get: function(){return width;}, set: function(_){width=_;}},\n        height:      {get: function(){return height;}, set: function(_){height=_;}},\n        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},\n        x:           {get: function(){return getX;}, set: function(_){getX=_;}},\n        q1: {get: function(){return getQ1;}, set: function(_){getQ1=_;}},\n        q2: {get: function(){return getQ2;}, set: function(_){getQ2=_;}},\n        q3: {get: function(){return getQ3;}, set: function(_){getQ3=_;}},\n        wl: {get: function(){return getWl;}, set: function(_){getWl=_;}},\n        wh: {get: function(){return getWh;}, set: function(_){getWh=_;}},\n        itemColor:    {get: function(){return getColor;}, set: function(_){getColor=_;}},\n        outliers:     {get: function(){return getOlItems;}, set: function(_){getOlItems=_;}},\n        outlierValue: {get: function(){return getOlValue;}, set: function(_){getOlValue=_;}},\n        outlierLabel: {get: function(){return getOlLabel;}, set: function(_){getOlLabel=_;}},\n        outlierColor: {get: function(){return getOlColor;}, set: function(_){getOlColor=_;}},\n        xScale:  {get: function(){return xScale;}, set: function(_){xScale=_;}},\n        yScale:  {get: function(){return yScale;}, set: function(_){yScale=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n        y: {\n            get: function() {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n                return {};\n            },\n            set: function(_) {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n            }\n        },\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.boxPlotChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var boxplot = nv.models.boxPlot(),\n        xAxis = nv.models.axis(),\n        yAxis = nv.models.axis();\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60},\n        width = null,\n        height = null,\n        color = nv.utils.getColor(),\n        showXAxis = true,\n        showYAxis = true,\n        rightAlignYAxis = false,\n        staggerLabels = false,\n        tooltip = nv.models.tooltip(),\n        x, y,\n        noData = 'No Data Available.',\n        dispatch = d3.dispatch('beforeUpdate', 'renderEnd'),\n        duration = 250;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip.duration(0);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(boxplot);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this), that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = (width  || parseInt(container.style('width')) || 960) - margin.left - margin.right;\n            var availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // TODO still need to find a way to validate quartile data presence using boxPlot callbacks.\n            // Display No Data message if there's nothing to show. (quartiles required at minimum).\n            if (!data || !data.length) {\n                var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n                noDataText.enter().append('text')\n                    .attr('class', 'nvd3 nv-noData')\n                    .attr('dy', '-.7em')\n                    .style('text-anchor', 'middle');\n\n                noDataText\n                    .attr('x', margin.left + availableWidth / 2)\n                    .attr('y', margin.top + availableHeight / 2)\n                    .text(function(d) { return d });\n\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = boxplot.xScale();\n            y = boxplot.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(' + availableWidth + ',0)');\n            }\n\n            // Main Chart Component(s)\n            boxplot.width(availableWidth).height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n\n            barsWrap.transition().call(boxplot);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + boxplot.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 === 0 ? '5' : '17') + ')' })\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select('.nv-zeroLine line')\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', y(0))\n                .attr('y2', y(0))\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n        });\n\n        renderWatch.renderEnd('nv-boxplot chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip.data(evt).hidden(false);\n    });\n\n    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.data(evt).hidden(true);\n    });\n\n    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.boxplot = boxplot;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            boxplot.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            boxplot.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, boxplot);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\n\nnv.models.bullet = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , orient = 'left' // TODO top & bottom\n        , reverse = false\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , markerLines = function(d) { return d.markerLines ? d.markerLines : [0] }\n        , measures = function(d) { return d.measures }\n        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n        , markerLineLabels = function(d) { return d.markerLineLabels ? d.markerLineLabels : []  }\n        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , width = 380\n        , height = 30\n        , container = null\n        , tickFormat = null\n        , color = nv.utils.getColor(['#1f77b4'])\n        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')\n        , defaultRangeLabels = [\"Maximum\", \"Mean\", \"Minimum\"]\n        , legacyRangeClassNames = [\"Max\", \"Avg\", \"Min\"]\n        , duration = 1000\n        ;\n\n    function sortLabels(labels, values){\n        var lz = labels.slice();\n        labels.sort(function(a, b){\n            var iA = lz.indexOf(a);\n            var iB = lz.indexOf(b);\n            return d3.descending(values[iA], values[iB]);\n        });\n    };\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var rangez = ranges.call(this, d, i).slice(),\n                markerz = markers.call(this, d, i).slice(),\n                markerLinez = markerLines.call(this, d, i).slice(),\n                measurez = measures.call(this, d, i).slice(),\n                rangeLabelz = rangeLabels.call(this, d, i).slice(),\n                markerLabelz = markerLabels.call(this, d, i).slice(),\n                markerLineLabelz = markerLineLabels.call(this, d, i).slice(),\n                measureLabelz = measureLabels.call(this, d, i).slice();\n\n            // Sort labels according to their sorted values\n            sortLabels(rangeLabelz, rangez);\n            sortLabels(markerLabelz, markerz);\n            sortLabels(markerLineLabelz, markerLinez);\n            sortLabels(measureLabelz, measurez);\n\n            // sort values descending\n            rangez.sort(d3.descending);\n            markerz.sort(d3.descending);\n            markerLinez.sort(d3.descending);\n            measurez.sort(d3.descending);\n\n            // Setup Scales\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain( d3.extent(d3.merge([forceX, rangez])) )\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var rangeMin = d3.min(rangez), //rangez[2]\n                rangeMax = d3.max(rangez), //rangez[0]\n                rangeAvg = rangez[1];\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var rangeClassNames = 'nv-range nv-range'+i;\n                if(i <= 2){\n                    rangeClassNames = rangeClassNames + ' nv-range'+legacyRangeClassNames[i];\n                }\n                gEnter.append('rect').attr('class', rangeClassNames);\n            }\n\n            gEnter.append('rect').attr('class', 'nv-measure');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var range = rangez[i];\n                g.select('rect.nv-range'+i)\n                    .datum(range)\n                    .attr('height', availableHeight)\n                    .transition()\n                    .duration(duration)\n                    .attr('width', w1(range))\n                    .attr('x', xp1(range))\n            }\n\n            g.select('rect.nv-measure')\n                .style('fill', color)\n                .attr('height', availableHeight / 3)\n                .attr('y', availableHeight / 3)\n                .on('mouseover', function() {\n                    dispatch.elementMouseover({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function() {\n                    dispatch.elementMouseout({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .transition()\n                .duration(duration)\n                .attr('width', measurez < 0 ?\n                    x1(0) - x1(measurez[0])\n                    : x1(measurez[0]) - x1(0))\n                .attr('x', xp1(measurez));\n\n            var h3 =  availableHeight / 6;\n\n            var markerData = markerz.map( function(marker, index) {\n                return {value: marker, label: markerLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .enter()\n              .append('path')\n              .attr('class', 'nv-markerTriangle')\n              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .transition()\n              .duration(duration)\n              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });\n\n            var markerLinesData = markerLinez.map( function(marker, index) {\n                return {value: marker, label: markerLineLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .enter()\n              .append('line')\n              .attr('cursor', '')\n              .attr('class', 'nv-markerLine')\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('y1', '2')\n              .attr('x2', function(d) { return x1(d.value) })\n              .attr('y2', availableHeight - 2)\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .transition()\n              .duration(duration)\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('x2', function(d) { return x1(d.value) });\n\n            wrap.selectAll('.nv-range')\n                .on('mouseover', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseover({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Previous',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseout({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        duration:    {get: function(){return duration;}, set: function(_){duration=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\n\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\nnv.models.bulletChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bullet = nv.models.bullet();\n    var tooltip = nv.models.tooltip();\n\n    var orient = 'left' // TODO top & bottom\n        , reverse = false\n        , margin = {top: 5, right: 40, bottom: 20, left: 120}\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , measures = function(d) { return d.measures }\n        , width = null\n        , height = 55\n        , tickFormat = null\n        , ticks = null\n        , noData = null\n        , dispatch = d3.dispatch()\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false);\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom,\n                that = this;\n\n            chart.update = function() { chart(selection) };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!d || !ranges.call(this, d, i)) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n                markerz = markers.call(this, d, i).slice().sort(d3.descending),\n                measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bulletWrap');\n            gEnter.append('g').attr('class', 'nv-titles');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain([0, Math.max(rangez[0], (markerz[0] || 0), measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\n            var title = gEnter.select('.nv-titles').append('g')\n                .attr('text-anchor', 'end')\n                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n            title.append('text')\n                .attr('class', 'nv-title')\n                .text(function(d) { return d.title; });\n\n            title.append('text')\n                .attr('class', 'nv-subtitle')\n                .attr('dy', '1em')\n                .text(function(d) { return d.subtitle; });\n\n            bullet\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var bulletWrap = g.select('.nv-bulletWrap');\n            d3.transition(bulletWrap).call(bullet);\n\n            // Compute the tick format.\n            var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\n            // Update the tick groups.\n            var tick = g.selectAll('g.nv-tick')\n                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {\n                    return this.textContent || format(d);\n                });\n\n            // Initialize the ticks with the old scale, x0.\n            var tickEnter = tick.enter().append('g')\n                .attr('class', 'nv-tick')\n                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n                .style('opacity', 1e-6);\n\n            tickEnter.append('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickEnter.append('text')\n                .attr('text-anchor', 'middle')\n                .attr('dy', '1em')\n                .attr('y', availableHeight * 7 / 6)\n                .text(format);\n\n            // Transition the updating ticks to the new scale, x1.\n            var tickUpdate = d3.transition(tick)\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1);\n\n            tickUpdate.select('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickUpdate.select('text')\n                .attr('y', availableHeight * 7 / 6);\n\n            // Transition the exiting ticks to the new scale, x1.\n            d3.transition(tick.exit())\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1e-6)\n                .remove();\n        });\n\n        d3.timer.flush();\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: evt.label,\n            value: evt.value,\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.bullet = bullet;\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bullet);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n\nnv.models.candlestickBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Width of the candlestick bars.\n            var barWidth = (availableWidth / data[0].values.length) * .45;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            var tickGroups = ticks.enter().append('g');\n\n            // The colors are currently controlled by CSS.\n            ticks\n                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});\n\n            var lines = tickGroups.append('line')\n                .attr('class', 'nv-candlestick-lines')\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            var rects = tickGroups.append('rect')\n                .attr('class', 'nv-candlestick-rects nv-bars')\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n\n            ticks.select('.nv-candlestick-lines').transition()\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            ticks.select('.nv-candlestick-rects').transition()\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-candlestickBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-candlestickBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.cumulativeLineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , showControls = true\n        , useInteractiveGuideline = false\n        , rescaleY = true\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , id = lines.id()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , average = function(d) { return d.average }\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        , duration = 250\n        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n        ;\n\n    state.index = 0;\n    state.rescaleY = rescaleY;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var dx = d3.scale.linear()\n        , index = {i: 0, x: 0}\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        , currentYDomain\n        ;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                index: index.i,\n                rescaleY: rescaleY\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.index !== undefined)\n                index.i = state.index;\n            if (state.rescaleY !== undefined)\n                rescaleY = state.rescaleY;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            container.classed('nv-chart-' + id, true);\n            var that = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart)\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            var indexDrag = d3.behavior.drag()\n                .on('dragstart', dragStart)\n                .on('drag', dragMove)\n                .on('dragend', dragEnd);\n\n\n            function dragStart(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'ew-resize');\n            }\n\n            function dragMove(d,i) {\n                index.x = d3.event.x;\n                index.i = Math.round(dx.invert(index.x));\n                updateZero();\n            }\n\n            function dragEnd(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'auto');\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n\n            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length\n                .range([0, availableWidth])\n                .clamp(true);\n\n            var data = indexify(index.i, data);\n\n            // initialize the starting yDomain for the not-rescale case after indexify (to have calculated point.display)\n            if (typeof(currentYDomain) === \"undefined\") {\n                currentYDomain = getCurrentYDomain(data);\n            }\n\n            if (!rescaleY) {\n                lines.yDomain(currentYDomain);\n                lines.clipEdge(true);\n            } else {\n                lines.yDomain(null);\n            }\n\n            // Setup containers and skeleton of chart\n            var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-interactive');\n            gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-background');\n            gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: 'Re-scale y-axis', disabled: !rescaleY }\n                ];\n\n                controls\n                    .width(140)\n                    .color(['#444', '#444', '#444'])\n                    .rightAlign(false)\n                    .margin({top: 5, right: 0, bottom: 5, left: 20})\n                ;\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Show error if index point value is 0 (division by zero avoided)\n            var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\n            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n            if (tempDisabled.length) {\n                wrap.append('text').attr('class', 'tempDisabled')\n                    .attr('x', availableWidth / 2)\n                    .attr('y', '-.71em')\n                    .style('text-anchor', 'end')\n                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left,top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            gEnter.select('.nv-background')\n                .append('rect');\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                //.x(function(d) { return d.x })\n                .y(function(d) { return d.display.y })\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\n            linesWrap.call(lines);\n\n            //Store a series index number in the data array.\n            data.forEach(function(d,i) {\n                d.seriesIndex = i;\n            });\n\n            var avgLineData = data.filter(function(d) {\n                return !d.disabled && !!average(d);\n            });\n\n            var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n                .data(avgLineData, function(d) { return d.key; });\n\n            var getAvgLineY = function(d) {\n                //If average lines go off the svg element, clamp them to the svg bounds.\n                var yVal = y(average(d));\n                if (yVal < 0) return 0;\n                if (yVal > availableHeight) return availableHeight;\n                return yVal;\n            };\n\n            avgLines.enter()\n                .append('line')\n                .style('stroke-width',2)\n                .style('stroke-dasharray','10,10')\n                .style('stroke',function (d,i) {\n                    return lines.color()(d,d.seriesIndex);\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines\n                .style('stroke-opacity',function(d){\n                    //If average lines go offscreen, make them transparent\n                    var yVal = y(average(d));\n                    if (yVal < 0 || yVal > availableHeight) return 0;\n                    return 1;\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines.exit().remove();\n\n            //Create index line\n            var indexLine = linesWrap.selectAll('.nv-indexLine')\n                .data([index]);\n            indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n                .attr('width', 3)\n                .attr('x', -2)\n                .attr('fill', 'red')\n                .attr('fill-opacity', .5)\n                .style(\"pointer-events\",\"all\")\n                .call(indexDrag);\n\n            indexLine\n                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n                .attr('height', availableHeight);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            function updateZero() {\n                indexLine\n                    .data([index]);\n\n                //When dragging the index line, turn off line transitions.\n                // Then turn them back on when done dragging.\n                var oldDuration = chart.duration();\n                chart.duration(0);\n                chart.update();\n                chart.duration(oldDuration);\n            }\n\n            g.select('.nv-background rect')\n                .on('click', function() {\n                    index.x = d3.mouse(this)[0];\n                    index.i = Math.round(dx.invert(index.x));\n\n                    // update state and send stateChange with new index\n                    state.index = index.i;\n                    dispatch.stateChange(state);\n\n                    updateZero();\n                });\n\n            lines.dispatch.on('elementClick', function(e) {\n                index.i = e.pointIndex;\n                index.x = dx(index.i);\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n\n                updateZero();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n                rescaleY = !d.disabled;\n                state.rescaleY = rescaleY;\n                if (!rescaleY) {\n                    currentYDomain = getCurrentYDomain(data); // rescale is turned off, so set the currentYDomain\n                }\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !(series.disabled || series.tempDisabled);\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        lines.highlightPoint(i, pointIndex, true);\n                        var point = series.values[pointIndex];\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex)\n                        });\n                    });\n\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.index !== 'undefined') {\n                    index.i = e.index;\n                    index.x = dx(index.i);\n\n                    state.index = e.index;\n\n                    indexLine\n                        .data([index]);\n                }\n\n                if (typeof e.rescaleY !== 'undefined') {\n                    rescaleY = e.rescaleY;\n                }\n\n                chart.update();\n            });\n\n        });\n\n        renderWatch.renderEnd('cumulativeLineChart immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        var point = {\n            x: chart.x()(evt.point),\n            y: chart.y()(evt.point),\n            color: evt.point.color\n        };\n        evt.point = point;\n        tooltip.data(evt).hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    //============================================================\n    // Functions\n    //------------------------------------------------------------\n\n    var indexifyYGetter = null;\n    /* Normalize the data according to an index point. */\n    function indexify(idx, data) {\n        if (!indexifyYGetter) indexifyYGetter = lines.y();\n        return data.map(function(line, i) {\n            if (!line.values) {\n                return line;\n            }\n            var indexValue = line.values[idx];\n            if (indexValue == null) {\n                return line;\n            }\n            var v = indexifyYGetter(indexValue, idx);\n\n            // avoid divide by zero\n            if (Math.abs(v) < 0.00001 && !noErrorCheck) {\n                line.tempDisabled = true;\n                return line;\n            }\n\n            line.tempDisabled = false;\n\n            line.values = line.values.map(function(point, pointIndex) {\n                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / v };\n                return point;\n            });\n\n            return line;\n        })\n    }\n\n    function getCurrentYDomain(data) {\n        var seriesDomains = data\n            .filter(function(series) { return !(series.disabled || series.tempDisabled)})\n            .map(function(series,i) {\n                return d3.extent(series.values, function (d) { return d.display.y });\n            });\n\n        return [\n            d3.min(seriesDomains, function(d) { return d[0] }),\n            d3.max(seriesDomains, function(d) { return d[1] })\n        ];\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        average: {get: function(){return average;}, set: function(_){average=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},\n\n        // options that require extra logic in the setter\n        rescaleY:     {get: function(){return rescaleY;}, set: function(_){\n            rescaleY = _;\n            chart.state.rescaleY = _; // also update state\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n                chart.useVoronoi(false);\n            }\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        duration:    {get: function(){return duration;}, set: function(_){\n            duration = _;\n            lines.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating by adding necessary features to multiBar model\nnv.models.discreteBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , showValues = false\n        , valueFormat = d3.format(',.2f')\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , rectClass = 'discreteBar'\n        , duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n                    })\n                });\n\n            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], .1);\n            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\n            // If showValues, pad the Y axis range to account for label height\n            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n            else y.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            x0 = x0 || x;\n            y0 = y0 || y.copy().range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .watchTransition(renderWatch, 'discreteBar: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover });\n            groups\n                .watchTransition(renderWatch, 'discreteBar: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .75);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n                })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            barsEnter.append('rect')\n                .attr('height', 0)\n                .attr('width', x.rangeBand() * .9 / data.length )\n\n            if (showValues) {\n                barsEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                ;\n\n                bars.select('text')\n                    .text(function(d,i) { return valueFormat(getY(d,i)) })\n                    .watchTransition(renderWatch, 'discreteBar: bars text')\n                    .attr('x', x.rangeBand() * .9 / 2)\n                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\n                ;\n            } else {\n                bars.selectAll('text').remove();\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n                .style('fill', function(d,i) { return d.color || color(d,i) })\n                .style('stroke', function(d,i) { return d.color || color(d,i) })\n                .select('rect')\n                .attr('class', rectClass)\n                .watchTransition(renderWatch, 'discreteBar: bars rect')\n                .attr('width', x.rangeBand() * .9 / data.length);\n            bars.watchTransition(renderWatch, 'discreteBar: bars')\n                //.delay(function(d,i) { return i * 1200 / data[0].values.length })\n                .attr('transform', function(d,i) {\n                    var left = x(getX(d,i)) + x.rangeBand() * .05,\n                        top = getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 : //make 1 px positive bars show up above y=0\n                            y(getY(d,i));\n\n                    return 'translate(' + left + ', ' + top + ')'\n                })\n                .select('rect')\n                .attr('height', function(d,i) {\n                    return  Math.max(Math.abs(y(getY(d,i)) - y(0)), 1)\n                });\n\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('discreteBar immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.discreteBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var discretebar = nv.models.discreteBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n\t, legend = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.getColor()\n\t, showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x\n        , y\n        , noData = null\n        , dispatch = d3.dispatch('beforeUpdate','renderEnd')\n        , duration = 250\n        ;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .keyFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(discretebar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = discretebar.xScale();\n            y = discretebar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t    gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            discretebar\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(discretebar);\n\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + discretebar.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n                }\n\n                if (rotateLabels) {\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\",0)\n                .attr(\"x2\",(rightAlignYAxis) ? -availableWidth : availableWidth)\n                .attr(\"y1\", y(0))\n                .attr(\"y2\", y(0))\n            ;\n        });\n\n        renderWatch.renderEnd('discreteBar chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.discretebar = discretebar;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\tshowLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:  {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        wrapLabels:  {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            discretebar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            discretebar.color(color);\n\t    legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, discretebar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\nnv.models.distribution = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 400 //technically width or height depending on x or y....\n        , size = 8\n        , axis = 'x' // 'x' or 'y'... horizontal or vertical\n        , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n        , color = nv.utils.defaultColor()\n        , scale = d3.scale.linear()\n        , domain\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n                naxis = axis == 'x' ? 'y' : 'x',\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //------------------------------------------------------------\n            // Setup Scales\n\n            scale0 = scale0 || scale;\n\n            //------------------------------------------------------------\n\n\n            //------------------------------------------------------------\n            // Setup containers and skeleton of chart\n\n            var wrap = container.selectAll('g.nv-distribution').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            //------------------------------------------------------------\n\n\n            var distWrap = g.selectAll('g.nv-dist')\n                .data(function(d) { return d }, function(d) { return d.key });\n\n            distWrap.enter().append('g');\n            distWrap\n                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n                .style('stroke', function(d,i) { return color(d, i) });\n\n            var dist = distWrap.selectAll('line.nv-dist' + axis)\n                .data(function(d) { return d.values })\n            dist.enter().append('line')\n                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n                .style('stroke-opacity', 0)\n                .remove();\n            dist\n                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n                .attr(naxis + '1', 0)\n                .attr(naxis + '2', size);\n            renderWatch.transition(dist, 'dist')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\n\n            scale0 = scale.copy();\n\n        });\n        renderWatch.renderEnd('distribution immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart.dispatch = dispatch;\n\n    chart.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return chart;\n    };\n\n    chart.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return chart;\n    };\n\n    chart.axis = function(_) {\n        if (!arguments.length) return axis;\n        axis = _;\n        return chart;\n    };\n\n    chart.size = function(_) {\n        if (!arguments.length) return size;\n        size = _;\n        return chart;\n    };\n\n    chart.getData = function(_) {\n        if (!arguments.length) return getData;\n        getData = d3.functor(_);\n        return chart;\n    };\n\n    chart.scale = function(_) {\n        if (!arguments.length) return scale;\n        scale = _;\n        return chart;\n    };\n\n    chart.color = function(_) {\n        if (!arguments.length) return color;\n        color = nv.utils.getColor(_);\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        return chart;\n    };\n    //============================================================\n\n\n    return chart;\n}\nnv.models.focus = function(content) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var content = content || nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , brush = d3.svg.brush()\n        ;\n\n    var margin = {top: 10, right: 0, bottom: 30, left: 0}\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = 70\n        , showXAxis = true\n        , showYAxis = false\n        , rightAlignYAxis = false\n        , ticks = null\n        , x\n        , y\n        , brushExtent = null\n        , duration = 250\n        , dispatch = d3.dispatch('brush', 'onBrush', 'renderEnd')\n        , syncBrushing = true\n        ;\n\n    content.interactive(false);\n    content.pointActive(function(d) { return false; });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(content);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom;\n\n            chart.update = function() { \n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            // Setup Scales\n            x = content.xScale();\n            y = content.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-focus').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-focus').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            gEnter.append('g').attr('class', 'nv-background').append('rect');\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-contentWrap');\n            gEnter.append('g').attr('class', 'nv-brushBackground');\n            gEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n                \n            content\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var contentWrap = g.select('.nv-contentWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            d3.transition(contentWrap).call(content);\n            \n            // Setup Brush\n            brush\n                .x(x)\n                .on('brush', function() {\n                    onBrush(syncBrushing);\n                });\n\n            brush.on('brushend', function () {\n                if (!syncBrushing) {\n                    dispatch.onBrush(brush.empty() ? x.domain() : brush.extent());\n                }\n            });\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n    \n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                .attr('height', availableHeight);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            onBrush(true);\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n  \n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                d3.transition(g.select('.nv-x.nv-axis'))\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                d3.transition(g.select('.nv-y.nv-axis'))\n                    .call(yAxis);\n            }\n            \n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n    \n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n    \n    \n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x(d[0]) - x.range()[0],\n                            rightWidth = availableWidth - x(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n    \n                        d3.select(this).select('.right')\n                            .attr('x', x(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n\n            function onBrush(shouldDispatch) {\n                brushExtent = brush.empty() ? null : brush.extent();\n                var extent = brush.empty() ? x.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n                if (shouldDispatch) {\n                    dispatch.onBrush(extent);\n                }\n            }\n        });\n\n        renderWatch.renderEnd('focus immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.content = content;\n    chart.brush = brush;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        syncBrushing: {get: function(){return syncBrushing;}, set: function(_){syncBrushing=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            content.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            content.color(color);\n        }},\n        interpolate: {get: function(){return content.interpolate();}, set: function(_){\n            content.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n        }},\n        x: {get: function(){return content.x();}, set: function(_){\n            content.x(_);\n        }},\n        y: {get: function(){return content.y();}, set: function(_){\n            content.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, content);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.forceDirectedGraph = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , dispatch = d3.dispatch('renderEnd')\n        , color = nv.utils.getColor(['#000'])\n        , tooltip      = nv.models.tooltip()\n        , noData = null\n        // Force directed graph specific parameters [default values]\n        , linkStrength = 0.1\n        , friction = 0.9\n        , linkDist = 30\n        , charge = -120\n        , gravity = 0.1\n        , theta = 0.8\n        , alpha = 0.1\n        , radius = 5\n        // These functions allow to add extra attributes to ndes and links\n        ,nodeExtras = function(nodes) { /* Do nothing */ }\n        ,linkExtras = function(links) { /* Do nothing */ }\n        , getX=d3.functor(0.0)\n        , getY=d3.functor(0.0)\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n          container = d3.select(this);\n          nv.utils.initSVG(container);\n\n          var availableWidth = nv.utils.availableWidth(width, container, margin),\n              availableHeight = nv.utils.availableHeight(height, container, margin);\n\n          container\n                  .attr(\"width\", availableWidth)\n                  .attr(\"height\", availableHeight);\n\n          // Display No Data message if there's nothing to show.\n          if (!data || !data.links || !data.nodes) {\n              nv.utils.noData(chart, container)\n              return chart;\n          } else {\n              container.selectAll('.nv-noData').remove();\n          }\n          container.selectAll('*').remove();\n\n          // Collect names of all fields in the nodes\n          var nodeFieldSet = new Set();\n          data.nodes.forEach(function(node) {\n            var keys = Object.keys(node);\n            keys.forEach(function(key) {\n              nodeFieldSet.add(key);\n            });\n          });\n\n          var force = d3.layout.force()\n                .nodes(data.nodes)\n                .links(data.links)\n                .size([availableWidth, availableHeight])\n                .linkStrength(linkStrength)\n                .friction(friction)\n                .linkDistance(linkDist)\n                .charge(charge)\n                .gravity(gravity)\n                .theta(theta)\n                .alpha(alpha)\n                .start();\n\n          var link = container.selectAll(\".link\")\n                .data(data.links)\n                .enter().append(\"line\")\n                .attr(\"class\", \"nv-force-link\")\n                .style(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\n          var node = container.selectAll(\".node\")\n                .data(data.nodes)\n                .enter()\n                .append(\"g\")\n                .attr(\"class\", \"nv-force-node\")\n                .call(force.drag);\n\n          node\n            .append(\"circle\")\n            .attr(\"r\", radius)\n            .style(\"fill\", function(d) { return color(d) } )\n            .on(\"mouseover\", function(evt) {\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                  .attr('y1', evt.py);\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                  .attr('x2', evt.px);\n\n              // Add 'series' object to\n              var nodeColor = color(evt);\n              evt.series = [];\n              nodeFieldSet.forEach(function(field) {\n                evt.series.push({\n                  color: nodeColor,\n                  key:   field,\n                  value: evt[field]\n                });\n              });\n              tooltip.data(evt).hidden(false);\n            })\n            .on(\"mouseout\",  function(d) {\n              tooltip.hidden(true);\n            });\n\n          tooltip.headerFormatter(function(d) {return \"Node\";});\n\n          // Apply extra attributes to nodes and links (if any)\n          linkExtras(link);\n          nodeExtras(node);\n\n          force.on(\"tick\", function() {\n              link.attr(\"x1\", function(d) { return d.source.x; })\n                  .attr(\"y1\", function(d) { return d.source.y; })\n                  .attr(\"x2\", function(d) { return d.target.x; })\n                  .attr(\"y2\", function(d) { return d.target.y; });\n\n              node.attr(\"transform\", function(d) {\n                return \"translate(\" + d.x + \", \" + d.y + \")\";\n              });\n            });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:     {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n\n        // Force directed graph specific parameters\n        linkStrength:{get: function(){return linkStrength;}, set: function(_){linkStrength=_;}},\n        friction:    {get: function(){return friction;}, set: function(_){friction=_;}},\n        linkDist:    {get: function(){return linkDist;}, set: function(_){linkDist=_;}},\n        charge:      {get: function(){return charge;}, set: function(_){charge=_;}},\n        gravity:     {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        theta:       {get: function(){return theta;}, set: function(_){theta=_;}},\n        alpha:       {get: function(){return alpha;}, set: function(_){alpha=_;}},\n        radius:      {get: function(){return radius;}, set: function(_){radius=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        nodeExtras: {get: function(){return nodeExtras;}, set: function(_){\n            nodeExtras = _;\n        }},\n        linkExtras: {get: function(){return linkExtras;}, set: function(_){\n            linkExtras = _;\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.furiousLegend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 28 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n\n            var seriesShape;\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('circle');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n\n                seriesShape = series.select('rect');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var legendWidth = 0;\n                var columnWidths = [];\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15)\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('stroke', function(d,i) { return d.color || color(d, i) });\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? color(d,i) : '#fff';\n            } else if (!expanded) {\n                return !!d.disabled ? color(d,i) : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#fff' : color(d,i);\n            } else {\n                return !!d.disabled ? '#fff' : color(d,i);\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating and using multibar with single series for this\nnv.models.historicalBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceX = []\n        , forceY = [0]\n        , padData = false\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , interactive = true\n        ;\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n                .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bars');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n                .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n            bars.exit().remove();\n\n            bars.enter().append('rect')\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                .on('mouseover', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n\n                })\n                .on('mouseout', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    if (!interactive) return;\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            bars\n                .attr('fill', function(d,i) { return color(d, i); })\n                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n                .watchTransition(renderWatch, 'bars')\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                //TODO: better width calculations that don't assume always uniform data spacing;w\n                .attr('width', (availableWidth / data[0].values.length) * .9 );\n\n            bars.watchTransition(renderWatch, 'bars')\n                .attr('y', function(d,i) {\n                    var rval = getY(d,i) < 0 ?\n                        y(0) :\n                            y(0) - y(getY(d,i)) < 1 ?\n                        y(0) - 1 :\n                        y(getY(d,i));\n                    return nv.utils.NaNtoZero(rval);\n                })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\n        });\n\n        renderWatch.renderEnd('historicalBar immediate');\n        return chart;\n    }\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        container\n            .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container\n            .select(\".nv-bars .nv-bar.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData: {get: function(){return padData;}, set: function(_){padData=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.historicalBarChart = function(bar_model) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bars = bar_model || nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n\n    var margin = {top: 30, right: 90, bottom: 50, left: 90}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , state = {}\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        ;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n            renderWatch.models(bars);\n            if (showXAxis) renderWatch.models(xAxis);\n            if (showYAxis) renderWatch.models(yAxis);\n\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };\n            chart.container = this;\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = bars.xScale();\n            y = bars.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n            bars\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n            barsWrap.transition().call(bars);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .transition()\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .transition()\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                bars.clearHighlights();\n\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        bars.highlightPoint(pointIndex,true);\n                        var point = series.values[pointIndex];\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex),\n                            data: series.values[pointIndex]\n                        });\n                    });\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data({\n                        value: xValue,\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                dispatch.tooltipHide();\n                bars.clearHighlights();\n            });\n\n            legend.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n\n                if (!data.filter(function(d) { return !d.disabled }).length) {\n                    data.map(function(d) {\n                        d.disabled = false;\n                        wrap.selectAll('.nv-series').classed('disabled', false);\n                        return d;\n                    });\n                }\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                selection.transition().call(chart);\n            });\n\n            legend.dispatch.on('legendDblclick', function(d) {\n                //Double clicking should always enable current series, and disabled all others.\n                data.forEach(function(d) {\n                    d.disabled = true;\n                });\n                d.disabled = false;\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('historicalBarChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.bars = bars;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            bars.color(color);\n        }},\n        duration:    {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration=_;\n            renderWatch.reset(transitionDuration);\n            yAxis.duration(transitionDuration);\n            xAxis.duration(transitionDuration);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bars);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n// ohlcChart is just a historical chart with ohlc bars and some tweaks\nnv.models.ohlcBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\n\n// candlestickChart is just a historical chart with candlestick bars and some tweaks\nnv.models.candlestickBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\nnv.models.legend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 32 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , enableDoubleClick = true   //If true, legend will enable double click handling\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            if (rightAlign)\n                wrap.attr('transform', 'translate(' + (- margin.right) + ',' + margin.top + ')');\n            else\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');\n            var seriesShape;\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('.nv-legend-symbol');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n                seriesShape = series.select('.nv-legend-symbol');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if (enableDoubleClick) {\n                        if (vers == 'furious' && expanded) return;\n                        dispatch.legendDblclick(d, i);\n                        if (updateState) {\n                            // make sure we re-get data in case it was modified\n                            var data = series.data();\n                            //the default behavior of NVD3 legends, when double clicking one,\n                            // is to set all other series' to false, and make the double clicked series enabled.\n                            data.forEach(function (series) {\n                                series.disabled = true;\n                                if (vers == 'furious') series.userDisabled = series.disabled;\n                            });\n                            d.disabled = false;\n                            if (vers == 'furious') d.userDisabled = d.disabled;\n                            dispatch.stateChange({\n                                disabled: data.map(function (d) {\n                                    return !!d.disabled\n                                })\n                            });\n                        }\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n            var legendWidth = 0;\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var columnWidths = [];\n                legendWidth = 0;\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        if(legendWidth < xpos + maxwidth) {\n                            legendWidth = xpos + maxwidth;\n                        }\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15);\n\n                // The background for the expanded legend (UI)\n                gEnter.insert('rect',':first-child')\n                    .attr('class', 'nv-legend-bg')\n                    .attr('fill', '#eee')\n                    // .attr('stroke', '#444')\n                    .attr('opacity',0);\n\n                var seriesBG = g.select('.nv-legend-bg');\n\n                seriesBG\n                .transition().duration(300)\n                    .attr('x', -versPadding )\n                    .attr('width', legendWidth + versPadding - 12)\n                    .attr('height', height + 10)\n                    .attr('y', -margin.top - 10)\n                    .attr('opacity', expanded ? 1 : 0);\n\n\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('fill-opacity', setBGOpacity)\n                .style('stroke', setBGColor);\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? '#000' : '#fff';\n            } else if (!expanded) {\n                if(!d.color) d.color = color(d,i);\n                return !!d.disabled ? d.color : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#eee' : d.color || color(d,i);\n            } else {\n                return d.color || color(d,i);\n            }\n        }\n\n\n        function setBGOpacity(d,i) {\n            if(expanded && vers == 'furious') {\n                return 1;\n            } else {\n                return !!d.disabled ? 0 : 1;\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        enableDoubleClick: {get: function(){return enableDoubleClick;}, set: function(_){enableDoubleClick=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.line = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var  scatter = nv.models.scatter()\n        ;\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , container = null\n        , strokeWidth = 1.5\n        , color = nv.utils.defaultColor() // a function that returns a color\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , interpolate = \"linear\" // controls the line interpolation\n        , duration = 250\n        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        ;\n\n    scatter\n        .pointSize(16) // default size\n        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n    ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            scatter\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var scatterWrap = wrap.select('.nv-scatterWrap');\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + scatter.id())\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n            scatterWrap\n                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })\n                .style('fill-opacity', 1e-6);\n\n            groups.exit().remove();\n\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i)});\n            groups.watchTransition(renderWatch, 'line: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', function(d) { return d.fillOpacity || .5});\n\n            var areaPaths = groups.selectAll('path.nv-area')\n                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n            areaPaths.enter().append('path')\n                .attr('class', 'nv-area')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n            groups.exit().selectAll('path.nv-area')\n                .remove();\n\n            areaPaths.watchTransition(renderWatch, 'line: areaPaths')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n\n            var linePaths = groups.selectAll('path.nv-line')\n                .data(function(d) { return [d.values] });\n\n            linePaths.enter().append('path')\n                .attr('class', 'nv-line')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n            );\n\n            linePaths.watchTransition(renderWatch, 'line: linePaths')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            );\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n        });\n        renderWatch.renderEnd('line immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    // Pass through events\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }},\n        isArea: {get: function(){return isArea;}, set: function(_){\n            isArea = d3.functor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            scatter.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            scatter.y(_);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            scatter.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.lineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.line())\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , focusEnable = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , duration = 250\n        ;\n\n    // set options on sub-objects for this chart\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient(rightAlignYAxis ? 'right' : 'left');\n\n    lines.clipEdge(true).duration(0);\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    interactiveLayer.tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled; })\n            };\n        };\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        };\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n            chart.update = function() {\n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled; });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length; }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (legendPosition === 'bottom') {\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                     g.select('.nv-legendWrap')\n                         .attr('transform', 'translate(0,' + (availableHeight + xAxis.height())  +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                }\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n\n            // Setup Main (Focus) Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n              if(showXAxis) {\n                g.select('.nv-focus .nv-x.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(xAxis)\n                ;\n              }\n            }\n\n            function updateYAxis() {\n              if(showYAxis) {\n                g.select('.nv-focus .nv-y.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(yAxis)\n                ;\n              }\n            }\n\n            g.select('.nv-focus .nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if (!focusEnable && focus.brush.extent() === null) {\n                linesWrap.call(lines);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .style('display', focusEnable ? 'initial' : 'none')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if (extent !== null) {\n                    onBrush(extent);\n                }\n            }\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled && !series.disableTooltip;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = focus.brush.extent() !== null ? (focus.brush.empty() ? focus.xScale().domain() : focus.brush.extent()) : x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            // Checks if the x point is between the extents, handling case where extent[0] is greater than extent[1]\n                            // (e.g. x domain is manually set to reverse the x-axis)\n                            if(extent[0] <= extent[1]) {\n                                return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                            } else {\n                                return lines.x()(d,i) >= extent[1] && lines.x()(d,i) <= extent[0];\n                            }\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            lines.highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point\n                        });\n                    });\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value;}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var defaultValueFormatter = function(d,i) {\n                    return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                };\n\n                interactiveLayer.tooltip\n                    .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                    .data({\n                        value: chart.x()( singlePoint,pointIndex ),\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on('elementClick', function(e) {\n                var pointXLocation, allData = [];\n\n                data.filter(function(series, i) {\n                    series.seriesIndex = i;\n                    return !series.disabled;\n                }).forEach(function(series) {\n                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                    var point = series.values[pointIndex];\n                    if (typeof point === 'undefined') return;\n                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                    var yPos = chart.yScale()(chart.y()(point,pointIndex));\n                    allData.push({\n                        point: point,\n                        pointIndex: pointIndex,\n                        pos: [pointXLocation, yPos],\n                        seriesIndex: series.seriesIndex,\n                        series: series\n                    });\n                });\n\n                lines.dispatch.elementClick(allData);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                focusLinesWrap.transition().duration(duration).call(lines);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n        });\n\n        renderWatch.renderEnd('lineChart immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        if(!evt.series.disableTooltip){\n            tooltip.data(evt).hidden(false);\n        }\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.focus = focus;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.state = state;\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        // Focus options, mostly passed onto focus model.\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        focusShowAxisX:    {get: function(){return focus.showXAxis();}, set: function(_){focus.showXAxis(_);}},\n        focusShowAxisY:    {get: function(){return focus.showYAxis();}, set: function(_){focus.showYAxis(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            lines.duration(duration);\n            focus.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            lines.color(color);\n            focus.color(color);\n        }},\n        interpolate: {get: function(){return lines.interpolate();}, set: function(_){\n            lines.interpolate(_);\n            focus.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n            focus.xTickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n            focus.yTickFormat(_);\n        }},\n        x: {get: function(){return lines.x();}, set: function(_){\n            lines.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return lines.y();}, set: function(_){\n            lines.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines.interactive(false);\n                lines.useVoronoi(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.lineWithFocusChart = function() {\n  return nv.models.lineChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\nnv.models.linePlusBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , lines2 = nv.models.line()\n        , bars = nv.models.historicalBar()\n        , bars2 = nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , x2Axis = nv.models.axis()\n        , y1Axis = nv.models.axis()\n        , y2Axis = nv.models.axis()\n        , y3Axis = nv.models.axis()\n        , y4Axis = nv.models.axis()\n        , legend = nv.models.legend()\n        , brush = d3.svg.brush()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 30, left: 60}\n        , marginTop = null\n        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n        , width = null\n        , height = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.defaultColor()\n        , showLegend = true\n        , focusEnable = true\n        , focusShowAxisY = false\n        , focusShowAxisX = true\n        , focusHeight = 50\n        , extent\n        , brushExtent = null\n        , x\n        , x2\n        , y1\n        , y2\n        , y3\n        , y4\n        , noData = null\n        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')\n        , transitionDuration = 0\n        , state = nv.utils.state()\n        , defaultState = null\n        , legendLeftAxisHint = ' (left axis)'\n        , legendRightAxisHint = ' (right axis)'\n        , switchYAxisOrder = false\n        ;\n\n    lines.clipEdge(true);\n    lines2.interactive(false);\n    // We don't want any points emitted for the focus chart's scatter graph.\n    lines2.pointActive(function(d) { return false });\n    xAxis.orient('bottom').tickPadding(5);\n    y1Axis.orient('left');\n    y2Axis.orient('right');\n    x2Axis.orient('bottom').tickPadding(5);\n    y3Axis.orient('left');\n    y4Axis.orient('right');\n\n    tooltip.headerEnabled(true).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var getBarsAxis = function() {\n        return switchYAxisOrder\n            ? { main: y2Axis, focus: y4Axis }\n            : { main: y1Axis, focus: y3Axis }\n    }\n\n    var getLinesAxis = function() {\n        return switchYAxisOrder\n            ? { main: y1Axis, focus: y3Axis }\n            : { main: y2Axis, focus: y4Axis }\n    }\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var allDisabled = function(data) {\n      return data.every(function(series) {\n        return series.disabled;\n      });\n    }\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight1 = nv.utils.availableHeight(height, container, margin)\n                    - (focusEnable ? focusHeight : 0),\n                availableHeight2 = focusHeight - margin2.top - margin2.bottom;\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n            if (dataBars.length && !switchYAxisOrder) {\n                x = bars.xScale();\n            } else {\n                x = lines.xScale();\n            }\n\n            x2 = x2Axis.scale();\n\n            // select the scales and series based on the position of the yAxis\n            y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();\n            y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();\n            y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();\n            y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();\n\n            var series1 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            var series2 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            x.range([0, availableWidth]);\n\n            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n                .range([0, availableWidth]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // this is the main chart\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-barsWrap');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n            // context chart is where you can focus in\n            var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n            contextEnter.append('g').attr('class', 'nv-x nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-barsWrap');\n            contextEnter.append('g').attr('class', 'nv-linesWrap');\n            contextEnter.append('g').attr('class', 'nv-brushBackground');\n            contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            //============================================================\n            // Legend\n            //------------------------------------------------------------\n\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        if(switchYAxisOrder) {\n                            series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);\n                        } else {\n                            series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);\n                        }\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    // FIXME: shouldn't this be \"- (focusEnabled ? focusHeight : 0)\"?\n                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //============================================================\n            // Context chart (focus chart) components\n            //------------------------------------------------------------\n\n            // hide or show the focus context chart\n            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');\n\n            bars2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && data[i].bar\n                }));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && !data[i].bar\n                }));\n\n            var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n                .datum(dataBars.length ? dataBars : [\n                    {values: []}\n                ]);\n            var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n                .datum(allDisabled(dataLines) ?\n                       [{values: []}] :\n                       dataLines.filter(function(dataLine) {\n                         return !dataLine.disabled;\n                       }));\n\n            g.select('.nv-context')\n                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');\n\n            bars2Wrap.transition().call(bars2);\n            lines2Wrap.transition().call(lines2);\n\n            // context (focus chart) axis controls\n            if (focusShowAxisX) {\n                x2Axis\n                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))\n                    .tickSize(-availableHeight2, 0);\n                g.select('.nv-context .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n                g.select('.nv-context .nv-x.nv-axis').transition()\n                    .call(x2Axis);\n            }\n\n            if (focusShowAxisY) {\n                y3Axis\n                    .scale(y3)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize( -availableWidth, 0);\n                y4Axis\n                    .scale(y4)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n                g.select('.nv-context .nv-y3.nv-axis')\n                    .style('opacity', dataBars.length ? 1 : 0)\n                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n                g.select('.nv-context .nv-y2.nv-axis')\n                    .style('opacity', dataLines.length ? 1 : 0)\n                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\n                g.select('.nv-context .nv-y1.nv-axis').transition()\n                    .call(y3Axis);\n                g.select('.nv-context .nv-y2.nv-axis').transition()\n                    .call(y4Axis);\n            }\n\n            // Setup Brush\n            brush.x(x2).on('brush', onBrush);\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n\n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                //.attr('y', -5)\n                .attr('height', availableHeight2);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight2 / 3;\n                return 'M' + (.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n\n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x2.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x2(d[0]) - x2.range()[0],\n                            rightWidth = x2.range()[1] - x2(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n                        d3.select(this).select('.right')\n                            .attr('x', x2(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n            function onBrush() {\n                brushExtent = brush.empty() ? null : brush.extent();\n                extent = brush.empty() ? x2.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n\n                // Prepare Main (Focus) Bars and Lines\n                bars\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n                lines\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\n                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n                    .datum(!dataBars.length ? [{values:[]}] :\n                        dataBars\n                            .map(function(d,i) {\n                                return {\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(allDisabled(dataLines) ? [{values:[]}] :\n                           dataLines\n                           .filter(function(dataLine) { return !dataLine.disabled; })\n                           .map(function(d,i) {\n                                return {\n                                    area: d.area,\n                                    fillOpacity: d.fillOpacity,\n                                    strokeWidth: d.strokeWidth,\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                // Update Main (Focus) X Axis\n                if (dataBars.length && !switchYAxisOrder) {\n                    x = bars.xScale();\n                } else {\n                    x = lines.xScale();\n                }\n\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight1, 0);\n\n                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n\n                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)\n                    .call(xAxis);\n\n                // Update Main (Focus) Bars and Lines\n                focusBarsWrap.transition().duration(transitionDuration).call(bars);\n                focusLinesWrap.transition().duration(transitionDuration).call(lines);\n\n                // Setup and Update Main (Focus) Y Axes\n                g.select('.nv-focus .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\n                y1Axis\n                    .scale(y1)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )\n                    .tickSize(-availableWidth, 0);\n                y2Axis\n                    .scale(y2)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) );\n\n                // Show the y2 rules only if y1 has none\n                if(!switchYAxisOrder) {\n                    y2Axis.tickSize(dataBars.length ? 0 : -availableWidth, 0);\n                } else {\n                    y2Axis.tickSize(dataLines.length ? 0 : -availableWidth, 0);\n                }\n\n                // Calculate opacity of the axis\n                var barsOpacity = dataBars.length ? 1 : 0;\n                var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;\n\n                var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;\n                var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;\n\n                g.select('.nv-focus .nv-y1.nv-axis')\n                    .style('opacity', y1Opacity);\n                g.select('.nv-focus .nv-y2.nv-axis')\n                    .style('opacity', y2Opacity)\n                    .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)\n                    .call(y1Axis);\n                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)\n                    .call(y2Axis);\n            }\n\n            onBrush();\n\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip\n            .duration(100)\n            .valueFormatter(function(d, i) {\n                return getLinesAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip\n            .duration(0)\n            .valueFormatter(function(d, i) {\n                return getBarsAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines = lines;\n    chart.lines2 = lines2;\n    chart.bars = bars;\n    chart.bars2 = bars2;\n    chart.xAxis = xAxis;\n    chart.x2Axis = x2Axis;\n    chart.y1Axis = y1Axis;\n    chart.y2Axis = y2Axis;\n    chart.y3Axis = y3Axis;\n    chart.y4Axis = y4Axis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},\n        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},\n        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},\n        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return margin2;}, set: function(_){\n            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;\n            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;\n            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;\n            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;\n        }},\n        duration: {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration = _;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines.x(_);\n            lines2.x(_);\n            bars.x(_);\n            bars2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines.y(_);\n            lines2.y(_);\n            bars.y(_);\n            bars2.y(_);\n        }},\n        switchYAxisOrder:    {get: function(){return switchYAxisOrder;}, set: function(_){\n            // Switch the tick format for the yAxis\n            if(switchYAxisOrder !== _) {\n                var y1 = y1Axis;\n                y1Axis = y2Axis;\n                y2Axis = y1;\n\n                var y3 = y3Axis;\n                y3Axis = y4Axis;\n                y4Axis = y3;\n            }\n            switchYAxisOrder=_;\n\n            y1Axis.orient('left');\n            y2Axis.orient('right');\n            y3Axis.orient('left');\n            y4Axis.orient('right');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , clipEdge = true\n        , stacked = false\n        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n        , color = nv.utils.defaultColor()\n        , hideable = false\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , duration = 500\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var last_datalength = 0;\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n            var nonStackableCount = 0;\n            // This function defines the requirements for render complete\n            var endFn = function(d, i) {\n                if (d.series === data.length - 1 && i === data[0].values.length - 1)\n                    return true;\n                return false;\n            };\n\n            if(hideable && data.length) hideable = [{\n                values: data[0].values.map(function(d) {\n                        return {\n                            x: d.x,\n                            y: 0,\n                            series: d.series,\n                            size: 0.01\n                        };}\n                )}];\n\n            if (stacked) {\n                var parsed = d3.layout.stack()\n                    .offset(stackOffset)\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (!data.length && hideable ? hideable : data);\n\n                parsed.forEach(function(series, i){\n                    // if series is non-stackable, use un-parsed data\n                    if (series.nonStackable) {\n                        data[i].nonStackableSeries = nonStackableCount++;\n                        parsed[i] = data[i];\n                    } else {\n                        // don't stack this seires on top of the nonStackable seriees\n                        if (i > 0 && parsed[i - 1].nonStackable){\n                            parsed[i].values.map(function(d,j){\n                                d.y0 -= parsed[i - 1].values[j].y;\n                                d.y1 = d.y0 + d.y;\n                            });\n                        }\n                    }\n                });\n                data = parsed;\n            }\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked && data.length > 0) {\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d, idx) {\n                        if (!data[idx].nonStackable) {\n                            var f = d.values[i]\n                            f.size = Math.abs(f.y);\n                            if (f.y<0)  {\n                                f.y1 = negBase;\n                                negBase = negBase - f.size;\n                            } else\n                            {\n                                f.y1 = f.size + posBase;\n                                posBase = posBase + f.size;\n                            }\n                        }\n\n                    });\n                });\n            }\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d, idx) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {\n                var domain = d.y;\n                // increase the domain range if this series is stackable\n                if (stacked && !data[d.idx].nonStackable) {\n                    if (d.y > 0){\n                        domain = d.y1\n                    } else {\n                        domain = d.y1 + d.y\n                    }\n                }\n                return domain;\n            }).concat(forceY)))\n            .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n\n            var exitTransition = renderWatch\n                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))\n                .attr('y', function(d, i, j) {\n                    var yVal = y0(0) || 0;\n                    if (stacked) {\n                        if (data[d.series] && !data[d.series].nonStackable) {\n                            yVal = y0(d.y0);\n                        }\n                    }\n                    return yVal;\n                })\n                .attr('height', 0)\n                .remove();\n            if (exitTransition.delay)\n                exitTransition.delay(function(d,i) {\n                    var delay = i * (duration / (last_datalength + 1)) - i;\n                    return delay;\n                });\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('rect.nv-bar')\n                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('rect')\n                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                    .attr('x', function(d,i,j) {\n                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )\n                    })\n                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })\n                    .attr('height', 0)\n                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })\n                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n                ;\n            bars\n                .style('fill', function(d,i,j){ return color(d, j, i);  })\n                .style('stroke', function(d,i,j){ return color(d, j, i); })\n                .on('mouseover', function(d,i,j) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i,j) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i,j) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i,j) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i,j) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            var barSelection =\n                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))\n                    .delay(function(d,i) {\n                        return i * duration / data[0].values.length;\n                    });\n            if (stacked){\n                barSelection\n                    .attr('y', function(d,i,j) {\n                        var yVal = 0;\n                        // if stackable, stack it on top of the previous series\n                        if (!data[j].nonStackable) {\n                            yVal = y(d.y1);\n                        } else {\n                            if (getY(d,i) < 0){\n                                yVal = y(0);\n                            } else {\n                                if (y(0) - y(getY(d,i)) < -1){\n                                    yVal = y(0) - 1;\n                                } else {\n                                    yVal = y(getY(d, i)) || 0;\n                                }\n                            }\n                        }\n                        return yVal;\n                    })\n                    .attr('height', function(d,i,j) {\n                        if (!data[j].nonStackable) {\n                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 0);\n                        } else {\n                            return Math.max(Math.abs(y(getY(d,i)) - y(0)), 0) || 0;\n                        }\n                    })\n                    .attr('x', function(d,i,j) {\n                        var width = 0;\n                        if (data[j].nonStackable) {\n                            width = d.series * x.rangeBand() / data.length;\n                            if (data.length !== nonStackableCount){\n                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);\n                            }\n                        }\n                        return width;\n                    })\n                    .attr('width', function(d,i,j){\n                        if (!data[j].nonStackable) {\n                            return x.rangeBand();\n                        } else {\n                            // if all series are nonStacable, take the full width\n                            var width = (x.rangeBand() / nonStackableCount);\n                            // otherwise, nonStackable graph will be only taking the half-width\n                            // of the x rangeBand\n                            if (data.length !== nonStackableCount) {\n                                width = x.rangeBand()/(nonStackableCount*2);\n                            }\n                            return width;\n                        }\n                    });\n            }\n            else {\n                barSelection\n                    .attr('x', function(d,i) {\n                        return d.series * x.rangeBand() / data.length;\n                    })\n                    .attr('width', x.rangeBand() / data.length)\n                    .attr('y', function(d,i) {\n                        return getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 :\n                            y(getY(d,i)) || 0;\n                    })\n                    .attr('height', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n                    });\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n            // keep track of the last data value length for transition calculations\n            if (data[0] && data[0].values) {\n                last_datalength = data[0].values.length;\n            }\n\n        });\n\n        renderWatch.renderEnd('multibar immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},\n        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity: {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , interactiveLayer = nv.interactiveGuideline()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , legendPosition = null\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , reduceXTicks = true // if false a tick will show for every data point\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        , useInteractiveGuideline = false\n        ;\n\n    state.stacked = false // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(false);\n    xAxis\n        .orient('bottom')\n        .tickPadding(7)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function (d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function (d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var stacked = false;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition()\n                        .duration(duration)\n                        .call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                if (legendPosition === 'bottom') {\n                    legend.width(availableWidth - margin.right);\n\n                     g.select('.nv-legendWrap')\n                         .datum(data)\n                         .call(legend);\n\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                     g.select('.nv-legendWrap')\n                         .attr('transform', 'translate(0,' + (availableHeight + xAxis.height())  +')');\n                } else {\n                    legend.width(availableWidth - controlWidth());\n\n                    g.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n                }\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text')\n                    .style('opacity', 1)\n\n                if (staggerLabels) {\n                    var getTranslate = function(x,y) {\n                        return \"translate(\" + x + \",\" + y + \")\";\n                    };\n\n                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n                    // Issue #140\n                    xTicks\n                        .selectAll(\"text\")\n                        .attr('transform', function(d,i,j) {\n                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n                        });\n\n                    var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n                    g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n                        .attr(\"transform\", function(d,i) {\n                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n                        });\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n\n                if (reduceXTicks)\n                    xTicks\n                        .filter(function(d,i) {\n                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n                        })\n                        .selectAll('text, line')\n                        .style('opacity', 0);\n\n                if(rotateLabels)\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\n                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n                    .style('opacity', 1);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n                chart.update();\n            });\n\n            if (useInteractiveGuideline) {\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    if (e.pointXValue == undefined) return;\n\n                    var singlePoint, pointIndex, pointXLocation, xValue, allData = [];\n                    data\n                        .filter(function(series, i) {\n                            series.seriesIndex = i;\n                            return !series.disabled;\n                        })\n                        .forEach(function(series,i) {\n                            pointIndex = x.domain().indexOf(e.pointXValue)\n\n                            var point = series.values[pointIndex];\n                            if (point === undefined) return;\n\n                            xValue = point.x;\n                            if (singlePoint === undefined) singlePoint = point;\n                            if (pointXLocation === undefined) pointXLocation = e.mouseX\n                            allData.push({\n                                key: series.key,\n                                value: chart.y()(point, pointIndex),\n                                color: color(series,series.seriesIndex),\n                                data: series.values[pointIndex]\n                            });\n                        });\n\n                    interactiveLayer.tooltip\n                        .data({\n                            value: xValue,\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    interactiveLayer.tooltip.hidden(true);\n                });\n            }\n            else {\n                multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n                    evt.value = chart.x()(evt.data);\n                    evt['series'] = {\n                        key: evt.data.key,\n                        value: chart.y()(evt.data),\n                        color: evt.color\n                    };\n                    tooltip.data(evt).hidden(false);\n                });\n\n                multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n\n                multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        renderWatch.renderEnd('multibarchart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},\n        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        wrapLabels:   {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontal = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getYerr = function(d) { return d.yErr }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , stacked = false\n        , showValues = false\n        , showBarLabels = false\n        , valuePadding = 60\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , valueFormat = d3.format(',.2f')\n        , delay = 1200\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , duration = 250\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0; //used to store previous scales\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            if (stacked)\n                data = d3.layout.stack()\n                    .offset('zero')\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (data);\n\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked)\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d) {\n                        var f = d.values[i]\n                        f.size = Math.abs(f.y);\n                        if (f.y<0)  {\n                            f.y1 = negBase - f.size;\n                            negBase = negBase - f.size;\n                        } else\n                        {\n                            f.y1 = posBase;\n                            posBase = posBase + f.size;\n                        }\n                    });\n                });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableHeight], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\n            if (showValues && !stacked)\n                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n            else\n                y.range(yRange || [0, availableWidth]);\n\n            x0 = x0 || x;\n            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n                });\n\n            barsEnter.append('rect')\n                .attr('width', 0)\n                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\n            bars\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            if (getYerr(data[0],0)) {\n                barsEnter.append('polyline');\n\n                bars.select('polyline')\n                    .attr('fill', 'none')\n                    .attr('points', function(d,i) {\n                        var xerr = getYerr(d,i)\n                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];\n                        xerr = xerr.map(function(e) { return y(e + ((getY(d,i) < 0) ? 0 : getY(d,i))) - y(0); });\n                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];\n                        return a.map(function (path) { return path.join(',') }).join(' ');\n                    })\n                    .attr('transform', function(d,i) {\n                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        return 'translate(0, ' + mid + ')';\n                    });\n            }\n\n            barsEnter.append('text');\n\n            if (showValues && !stacked) {\n                bars.select('text')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) {\n                        var t = valueFormat(getY(d,i))\n                            , yerr = getYerr(d,i);\n                        if (yerr === undefined)\n                            return t;\n                        if (!yerr.length)\n                            return t + '±' + valueFormat(Math.abs(yerr));\n                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));\n                    });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n            } else {\n                bars.selectAll('text').text('');\n            }\n\n            if (showBarLabels && !stacked) {\n                barsEnter.append('text').classed('nv-bar-label',true);\n                bars.select('text.nv-bar-label')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) { return getX(d,i) });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text.nv-bar-label')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n            }\n            else {\n                bars.selectAll('text.nv-bar-label').text('');\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            if (stacked)\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n                    })\n                    .select('rect')\n                    .attr('width', function(d,i) {\n                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0)) || 0\n                    })\n                    .attr('height', x.rangeBand() );\n            else\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        //TODO: stacked must be all positive or all negative, not both?\n                        return 'translate(' +\n                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n                            + ',' +\n                            (d.series * x.rangeBand() / data.length\n                                +\n                                x(getX(d,i)) )\n                            + ')'\n                    })\n                    .select('rect')\n                    .attr('height', x.rangeBand() / data.length )\n                    .attr('width', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0\n                    });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('multibarHorizontal immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        // this shows the group name, seems pointless?\n        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},\n        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},\n        groupSpacing: {get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity:  {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontalChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBarHorizontal()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend().height(30)\n        , controls = nv.models.legend().height(30)\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlsPosition = 'top'        \n        , controlLabels = {}\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , stacked = false\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        ;\n\n    state.stacked = false; // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(stacked);\n\n    xAxis\n        .orient('left')\n        .tickPadding(5)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient('bottom')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(duration).call(chart) };\n            chart.container = this;\n\n            stacked = multibar.stacked();\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n                if (legendPosition === 'bottom') {\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                     g.select('.nv-legendWrap')\n                         .attr('transform', 'translate(' + controlWidth() + ',' + (availableHeight + xAxis.height())  +')');\n                } else if (legendPosition === 'top') {\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n                }                    \n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n\n                if (controlsPosition === 'bottom') {\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                    g.select('.nv-controlsWrap')\n                        .datum(controlsData)\n                        .attr('transform', 'translate(0,' + (availableHeight + xAxis.height()) +')')\n                        .call(controls);  \n\n                } else if (controlsPosition === 'top') {\n                    g.select('.nv-controlsWrap')\n                        .datum(controlsData)\n                        .attr('transform', 'translate(0,' + (-margin.top) +')')\n                        .call(controls);                        \n                }\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )\n                    .tickSize(-availableWidth, 0);\n\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text');\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(0,' + availableHeight + ')');\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\", y(0))\n                .attr(\"x2\", y(0))\n                .attr(\"y1\", 0)\n                .attr(\"y2\", -availableHeight)\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                stacked = multibar.stacked();\n\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n\n                chart.update();\n            });\n        });\n        renderWatch.renderEnd('multibar horizontal chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            key: evt.data.key,\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        controlsPosition: {get: function(){return controlsPosition;}, set: function(_){controlsPosition=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60},\n        marginTop = null,\n        color = nv.utils.defaultColor(),\n        width = null,\n        height = null,\n        showLegend = true,\n        noData = null,\n        yDomain1,\n        yDomain2,\n        getX = function(d) { return d.x },\n        getY = function(d) { return d.y},\n        interpolate = 'linear',\n        useVoronoi = true,\n        interactiveLayer = nv.interactiveGuideline(),\n        useInteractiveGuideline = false,\n        legendRightAxisHint = ' (right axis)',\n        duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear(),\n        yScale1 = d3.scale.linear(),\n        yScale2 = d3.scale.linear(),\n\n        lines1 = nv.models.line().yScale(yScale1).duration(duration),\n        lines2 = nv.models.line().yScale(yScale2).duration(duration),\n\n        scatters1 = nv.models.scatter().yScale(yScale1).duration(duration),\n        scatters2 = nv.models.scatter().yScale(yScale2).duration(duration),\n\n        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1).duration(duration),\n        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2).duration(duration),\n\n        stack1 = nv.models.stackedArea().yScale(yScale1).duration(duration),\n        stack2 = nv.models.stackedArea().yScale(yScale2).duration(duration),\n\n        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5).duration(duration),\n        yAxis1 = nv.models.axis().scale(yScale1).orient('left').duration(duration),\n        yAxis2 = nv.models.axis().scale(yScale2).orient('right').duration(duration),\n\n        legend = nv.models.legend().height(30),\n        tooltip = nv.models.tooltip(),\n        dispatch = d3.dispatch();\n\n    var charts = [lines1, lines2, scatters1, scatters2, bars1, bars2, stack1, stack2];\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});\n            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});\n            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});\n            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});\n            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});\n            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});\n            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});\n            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x }))\n                .range([0, availableWidth]);\n\n            var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            gEnter.append('g').attr('class', 'stack1Wrap');\n            gEnter.append('g').attr('class', 'stack2Wrap');\n            gEnter.append('g').attr('class', 'bars1Wrap');\n            gEnter.append('g').attr('class', 'bars2Wrap');\n            gEnter.append('g').attr('class', 'scatters1Wrap');\n            gEnter.append('g').attr('class', 'scatters2Wrap');\n            gEnter.append('g').attr('class', 'lines1Wrap');\n            gEnter.append('g').attr('class', 'lines2Wrap');\n            gEnter.append('g').attr('class', 'legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            var g = wrap.select('g');\n\n            var color_array = data.map(function(d,i) {\n                return data[i].color || color(d, i);\n            });\n\n            // Legend\n            if (!showLegend) {\n                g.select('.legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n                legend.color(color_array);\n\n                g.select('.legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            lines1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n            scatters1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));\n            scatters2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));\n            bars1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n            bars2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n            stack1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n            stack2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var lines1Wrap = g.select('.lines1Wrap')\n                .datum(dataLines1.filter(function(d){return !d.disabled}));\n            var scatters1Wrap = g.select('.scatters1Wrap')\n                .datum(dataScatters1.filter(function(d){return !d.disabled}));\n            var bars1Wrap = g.select('.bars1Wrap')\n                .datum(dataBars1.filter(function(d){return !d.disabled}));\n            var stack1Wrap = g.select('.stack1Wrap')\n                .datum(dataStack1.filter(function(d){return !d.disabled}));\n            var lines2Wrap = g.select('.lines2Wrap')\n                .datum(dataLines2.filter(function(d){return !d.disabled}));\n            var scatters2Wrap = g.select('.scatters2Wrap')\n                .datum(dataScatters2.filter(function(d){return !d.disabled}));\n            var bars2Wrap = g.select('.bars2Wrap')\n                .datum(dataBars2.filter(function(d){return !d.disabled}));\n            var stack2Wrap = g.select('.stack2Wrap')\n                .datum(dataStack2.filter(function(d){return !d.disabled}));\n\n            var extraValue1BarStacked = [];\n            if (bars1.stacked() && dataBars1.length) {\n                var extraValue1BarStacked = dataBars1.filter(function(d){return !d.disabled}).map(function(a){return a.values});\n                \n                if (extraValue1BarStacked.length > 0)\n                    extraValue1BarStacked = extraValue1BarStacked.reduce(function(a,b){\n                        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n                    });\n            }\n            if (dataBars1.length) {\n                extraValue1BarStacked.push({x:0, y:0});\n            }\n            \n            var extraValue2BarStacked = [];\n            if (bars2.stacked() && dataBars2.length) {\n                var extraValue2BarStacked = dataBars2.filter(function(d){return !d.disabled}).map(function(a){return a.values});\n                \n                if (extraValue2BarStacked.length > 0)\n                    extraValue2BarStacked = extraValue2BarStacked.reduce(function(a,b){\n                        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n                    });\n            }\n            if (dataBars2.length) {\n                extraValue2BarStacked.push({x:0, y:0});\n            }\n            \n            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1BarStacked), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2BarStacked), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            lines1.yDomain(yScale1.domain());\n            scatters1.yDomain(yScale1.domain());\n            bars1.yDomain(yScale1.domain());\n            stack1.yDomain(yScale1.domain());\n\n            lines2.yDomain(yScale2.domain());\n            scatters2.yDomain(yScale2.domain());\n            bars2.yDomain(yScale2.domain());\n            stack2.yDomain(yScale2.domain());\n\n            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\n            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\n            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n\n            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}\n            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}\n\n            xAxis\n                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                .tickSize(-availableHeight, 0);\n\n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n            d3.transition(g.select('.nv-x.nv-axis'))\n                .call(xAxis);\n\n            yAxis1\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n\n            d3.transition(g.select('.nv-y1.nv-axis'))\n                .call(yAxis1);\n\n            yAxis2\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n            d3.transition(g.select('.nv-y2.nv-axis'))\n                .call(yAxis2);\n\n            g.select('.nv-y1.nv-axis')\n                .classed('nv-disabled', series1.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[0] + ',0)');\n\n            g.select('.nv-y2.nv-axis')\n                .classed('nv-disabled', series2.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n            legend.dispatch.on('stateChange', function(newState) {\n                chart.update();\n            });\n\n            if(useInteractiveGuideline){\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching\n            //------------------------------------------------------------\n\n            function mouseover_line(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_scatter(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(100)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_stack(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n                evt.point['x'] = stack1.x()(evt.point);\n                evt.point['y'] = stack1.y()(evt.point);\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_bar(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n\n                evt.value = bars1.x()(evt.data);\n                evt['series'] = {\n                    value: bars1.y()(evt.data),\n                    color: evt.color,\n                    key: evt.data.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n\n\n            function clearHighlights() {\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.clearHighlights();\n                } catch(e){}\n              }\n            }\n\n            function highlightPoint(serieIndex, pointIndex, b){\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.highlightPoint(serieIndex, pointIndex, b);\n                } catch(e){}\n              }\n            }\n\n            if(useInteractiveGuideline){\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    clearHighlights();\n                    var singlePoint, pointIndex, pointXLocation, allData = [];\n                    data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            return chart.x()(d,i) >= extent[0] && chart.x()(d,i) <= extent[1];\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = x(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point,\n                            yAxis: series.yAxis == 2 ? yAxis2 : yAxis1\n                        });\n                    });\n\n                    var defaultValueFormatter = function(d,i) {\n                        var yAxis = allData[i].yAxis;\n                        return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                    };\n\n                    interactiveLayer.tooltip\n                        .headerFormatter(function(d, i) {\n                            return xAxis.tickFormat()(d, i);\n                        })\n                        .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                        .data({\n                            value: chart.x()( singlePoint,pointIndex ),\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    clearHighlights();\n                });\n            } else {\n                lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                lines2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                stack2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n                bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n\n                bars1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars1.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n                bars2.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines1 = lines1;\n    chart.lines2 = lines2;\n    chart.scatters1 = scatters1;\n    chart.scatters2 = scatters2;\n    chart.bars1 = bars1;\n    chart.bars2 = bars2;\n    chart.stack1 = stack1;\n    chart.stack2 = stack2;\n    chart.xAxis = xAxis;\n    chart.yAxis1 = yAxis1;\n    chart.yAxis2 = yAxis2;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},\n        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines1.x(_);\n            lines2.x(_);\n            scatters1.x(_);\n            scatters2.x(_);\n            bars1.x(_);\n            bars2.x(_);\n            stack1.x(_);\n            stack2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines1.y(_);\n            lines2.y(_);\n            scatters1.y(_);\n            scatters2.y(_);\n            stack1.y(_);\n            stack2.y(_);\n            bars1.y(_);\n            bars2.y(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi=_;\n            lines1.useVoronoi(_);\n            lines2.useVoronoi(_);\n            stack1.useVoronoi(_);\n            stack2.useVoronoi(_);\n        }},\n\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines1.interactive(false);\n                lines1.useVoronoi(false);\n                lines2.interactive(false);\n                lines2.useVoronoi(false);\n                stack1.interactive(false);\n                stack1.useVoronoi(false);\n                stack2.interactive(false);\n                stack2.useVoronoi(false);\n                scatters1.interactive(false);\n                scatters2.interactive(false);\n            }\n        }},\n\n        duration: {get: function(){return duration;}, set: function(_) {\n            duration = _;\n            [lines1, lines2, stack1, stack2, scatters1, scatters2, xAxis, yAxis1, yAxis2].forEach(function(model){\n              model.duration(duration);\n            });\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.ohlcBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // ohlc bar width.\n            var w = (availableWidth / data[0].values.length) * .9;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            ticks.enter().append('path')\n                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n                .attr('d', function(d,i) {\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i)) - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                })\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('fill', function(d,i) { return color[0]; })\n                .attr('stroke', function(d,i) { return color[0]; })\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n\n            // the bar colors are controlled by CSS currently\n            ticks.attr('class', function(d,i,j) {\n                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;\n            });\n\n            d3.transition(ticks)\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('d', function(d,i) {\n                    var w = (availableWidth / data[0].values.length) * .9;\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i))\n                            - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-ohlcBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-ohlcBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n// Code adapted from Jason Davies' \"Parallel Coordinates\"\n// http://bl.ocks.org/jasondavies/1341281\nnv.models.parallelCoordinates = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 0, bottom: 10, left: 0}\n        , width = null\n        , height = null\n        , availableWidth = null\n        , availableHeight = null\n        , x = d3.scale.ordinal()\n        , y = {}\n        , undefinedValuesLabel = \"undefined values\"\n        , dimensionData = []\n        , enabledDimensions = []\n        , dimensionNames = []\n        , displayBrush = true\n        , color = nv.utils.defaultColor()\n        , filters = []\n        , active = []\n        , dragging = []\n        , axisWithUndefinedValues = []\n        , lineTension = 1\n        , foreground\n        , background\n        , dimensions\n        , line = d3.svg.line()\n        , axis = d3.svg.axis()\n        , dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', \"stateChange\", 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n           //Convert old data to new format (name, values)\n            if (data[0].values === undefined) {\n                var newData = [];\n                data.forEach(function (d) {\n                        var val = {};\n                        var key = Object.keys(d);\n                        key.forEach(function (k) { if (k !== \"name\") val[k] = d[k] });\n                        newData.push({ key: d.name, values: val });\n                });\n                data = newData;\n            }\n\n            var dataValues = data.map(function (d) {return d.values});\n            if (active.length === 0) {\n                active = data;\n            }; //set all active before first brush call\n            \n            dimensionNames = dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; }).map(function (d) { return d.key });\n            enabledDimensions = dimensionData.filter(function (d) { return !d.disabled; });\n            \n            // Setup Scales\n            x.rangePoints([0, availableWidth], 1).domain(enabledDimensions.map(function (d) { return d.key; }));\n\n            //Set as true if all values on an axis are missing.\n            // Extract the list of dimensions and create a scale for each.\n            var oldDomainMaxValue = {};\n            var displayMissingValuesline = false;\n            var currentTicks = [];\n            \n            dimensionNames.forEach(function(d) {\n                var extent = d3.extent(dataValues, function (p) { return +p[d]; });\n                var min = extent[0];\n                var max = extent[1];\n                var onlyUndefinedValues = false;\n                //If there is no values to display on an axis, set the extent to 0\n                if (isNaN(min) || isNaN(max)) {\n                    onlyUndefinedValues = true;\n                    min = 0;\n                    max = 0;\n                }\n                //Scale axis if there is only one value\n                if (min === max) {\n                    min = min - 1;\n                    max = max + 1;\n                }\n                var f = filters.filter(function (k) { return k.dimension == d; });\n                if (f.length !== 0) {\n                    //If there is only NaN values, keep the existing domain.\n                    if (onlyUndefinedValues) {\n                        min = y[d].domain()[0];\n                        max = y[d].domain()[1];\n                    }\n                        //If the brush extent is > max (< min), keep the extent value.\n                    else if (!f[0].hasOnlyNaN && displayBrush) {\n                        min = min > f[0].extent[0] ? f[0].extent[0] : min;\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                    }\n                        //If there is NaN values brushed be sure the brush extent is on the domain.\n                    else if (f[0].hasNaN) {\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                        oldDomainMaxValue[d] = y[d].domain()[1];\n                        displayMissingValuesline = true;\n                    }\n                }\n                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display \"undefined values\" text.\n                //The remaining 10% are used to display the missingValue line.\n                y[d] = d3.scale.linear()\n                    .domain([min, max])\n                    .range([(availableHeight - 12) * 0.9, 0]);\n\n                axisWithUndefinedValues = [];\n                y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);\n            });\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            line.interpolate('cardinal').tension(lineTension);\n            axis.orient('left');\n            var axisDrag = d3.behavior.drag()\n                        .on('dragstart', dragStart)\n                        .on('drag', dragMove)\n                        .on('dragend', dragEnd);\n\n            //Add missing value line at the bottom of the chart\n            var missingValuesline, missingValueslineText;\n            var step = x.range()[1] - x.range()[0];\n            step = isNaN(step) ? x.range()[0] : step;\n            if (!isNaN(step)) {\n                var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];\n                missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);\n                missingValuesline.enter().append('line');\n                missingValuesline.exit().remove();\n                missingValuesline.attr(\"x1\", function(d) { return d[0]; })\n                        .attr(\"y1\", function(d) { return d[1]; })\n                        .attr(\"x2\", function(d) { return d[2]; })\n                        .attr(\"y2\", function(d) { return d[3]; });\n    \n                //Add the text \"undefined values\" under the missing value line\n                missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data([undefinedValuesLabel]);\n                missingValueslineText.append('text').data([undefinedValuesLabel]);\n                missingValueslineText.enter().append('text');\n                missingValueslineText.exit().remove();\n                missingValueslineText.attr(\"y\", availableHeight)\n                        //To have the text right align with the missingValues line, substract 92 representing the text size.\n                        .attr(\"x\", availableWidth - 92 - step / 2)\n                        .text(function(d) { return d; });\n            }\n            // Add grey background lines for context.\n            background = wrap.select('.background').selectAll('path').data(data);\n            background.enter().append('path');\n            background.exit().remove();\n            background.attr('d', path);\n\n            // Add blue foreground lines for focus.\n            foreground = wrap.select('.foreground').selectAll('path').data(data);\n            foreground.enter().append('path')\n            foreground.exit().remove();\n            foreground.attr('d', path)\n                .style(\"stroke-width\", function (d, i) {\n                if (isNaN(d.strokeWidth)) { d.strokeWidth = 1;} return d.strokeWidth;})\n                .attr('stroke', function (d, i) { return d.color || color(d, i); });\n            foreground.on(\"mouseover\", function (d, i) {\n                d3.select(this).classed('hover', true).style(\"stroke-width\", d.strokeWidth + 2 + \"px\").style(\"stroke-opacity\", 1);\n                dispatch.elementMouseover({\n                    label: d.name,\n                    color: d.color || color(d, i),\n                    values: d.values,\n                    dimensions: enabledDimensions\n                });\n\n            });\n            foreground.on(\"mouseout\", function (d, i) {\n                d3.select(this).classed('hover', false).style(\"stroke-width\", d.strokeWidth + \"px\").style(\"stroke-opacity\", 0.7);\n                dispatch.elementMouseout({\n                    label: d.name,\n                    index: i\n                });\n            });\n            foreground.on('mousemove', function (d, i) {\n                dispatch.elementMousemove();\n            });\n            foreground.on('click', function (d) {\n                dispatch.elementClick({\n                    id: d.id\n                });\n            });\n            // Add a group element for each dimension.\n            dimensions = g.selectAll('.dimension').data(enabledDimensions);\n            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');\n\n            dimensions.attr('transform', function(d) { return 'translate(' + x(d.key) + ',0)'; });\n            dimensionsEnter.append('g').attr('class', 'nv-axis');\n\n            // Add an axis and title.\n            dimensionsEnter.append('text')\n                .attr('class', 'nv-label')\n                .style(\"cursor\", \"move\")\n                .attr('dy', '-1em')\n                .attr('text-anchor', 'middle')\n                .on(\"mouseover\", function(d, i) {\n                    dispatch.elementMouseover({\n                        label: d.tooltip || d.key,\n                        color: d.color \n                    });\n                })\n                .on(\"mouseout\", function(d, i) {\n                    dispatch.elementMouseout({\n                        label: d.tooltip\n                    });\n                })\n                .on('mousemove', function (d, i) {\n                    dispatch.elementMousemove();\n                })\n                .call(axisDrag);\n\n            dimensionsEnter.append('g').attr('class', 'nv-brushBackground');\n            dimensions.exit().remove();\n            dimensions.select('.nv-label').text(function (d) { return d.key });\n\n            // Add and store a brush for each axis.\n            restoreBrush(displayBrush);\n\n            var actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),\n                    extents = actives.map(function (p) { return y[p].brush.extent(); });\n            var formerActive = active.slice(0);\n\n            //Restore active values\n            active = [];\n            foreground.style(\"display\", function (d) {\n                var isActive = actives.every(function (p, i) {\n                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {\n                        return true;\n                    }\n                    return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                });\n                if (isActive)\n                    active.push(d);\n                return !isActive ? \"none\" : null;\n\n            });\n\n            if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {\n               dispatch.activeChanged(active);\n            }\n\n            // Returns the path for a given data point.\n            function path(d) {\n                return line(enabledDimensions.map(function (p) {\n                    //If value if missing, put the value on the missing value line\n                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {\n                        var domain = y[p.key].domain();\n                        var range = y[p.key].range();\n                        var min = domain[0] - (domain[1] - domain[0]) / 9;\n\n                        //If it's not already the case, allow brush to select undefined values\n                        if (axisWithUndefinedValues.indexOf(p.key) < 0) {\n\n                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);\n                            y[p.key].brush.y(newscale);\n                            axisWithUndefinedValues.push(p.key);\n                        }\n                        if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {\n                            return [x(p.key), y[p.key](min)];\n                        }\n                    }\n\n                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.\n                    if (missingValuesline !== undefined) {\n                        if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {\n                            missingValuesline.style(\"display\", \"inline\");\n                            missingValueslineText.style(\"display\", \"inline\");\n                        } else {\n                            missingValuesline.style(\"display\", \"none\");\n                            missingValueslineText.style(\"display\", \"none\");\n                        }\n                    }\n                    return [x(p.key), y[p.key](d.values[p.key])];\n                }));\n            }\n\n            function restoreBrush(visible) {\n                filters.forEach(function (f) {\n                    //If filter brushed NaN values, keep the brush on the bottom of the axis.\n                    var brushDomain = y[f.dimension].brush.y().domain();\n                    if (f.hasOnlyNaN) {\n                        f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];\n                    }\n                    if (f.hasNaN) {\n                        f.extent[0] = brushDomain[0];\n                    }\n                    if (visible)\n                        y[f.dimension].brush.extent(f.extent);\n                });\n                \n                dimensions.select('.nv-brushBackground')\n                    .each(function (d) {\n                        d3.select(this).call(y[d.key].brush);\n\n                    })\n                    .selectAll('rect')\n                    .attr('x', -8)\n                    .attr('width', 16);\n                \n                updateTicks();\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brushstart() {\n                //If brush aren't visible, show it before brushing again.\n                if (displayBrush === false) {\n                    displayBrush = true;\n                    restoreBrush(true);\n                }\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brush() {\n                actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); });\n                extents = actives.map(function(p) { return y[p].brush.extent(); });\n\n                filters = []; //erase current filters\n                actives.forEach(function(d,i) {\n                    filters[i] = {\n                        dimension: d,\n                        extent: extents[i],\n                        hasNaN: false,\n                        hasOnlyNaN: false\n                    }\n                });\n\n                active = []; //erase current active list\n                foreground.style('display', function(d) {\n                    var isActive = actives.every(function(p, i) {\n                        if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) return true;\n                        return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                    });\n                    if (isActive) active.push(d);\n                    return isActive ? null : 'none';\n                });\n                \n                updateTicks();\n                \n                dispatch.brush({\n                    filters: filters,\n                    active: active\n                });\n            }\n            function brushend() {\n                var hasActiveBrush = actives.length > 0 ? true : false;\n                filters.forEach(function (f) {\n                    if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)\n                        f.hasNaN = true;\n                    if (f.extent[1] < y[f.dimension].domain()[0])\n                        f.hasOnlyNaN = true;\n                });\n                dispatch.brushEnd(active, hasActiveBrush);\n            }           \n            function updateTicks() {\n                dimensions.select('.nv-axis')\n                    .each(function (d, i) {\n                        var f = filters.filter(function (k) { return k.dimension == d.key; });\n                        currentTicks[d.key] = y[d.key].domain();\n                        \n                        //If brush are available, display brush extent\n                        if (f.length != 0 && displayBrush)\n                        {\n                            currentTicks[d.key] = [];\n                            if (f[0].extent[1] > y[d.key].domain()[0]) \n                                currentTicks[d.key] = [f[0].extent[1]];\n                            if (f[0].extent[0] >= y[d.key].domain()[0])\n                                currentTicks[d.key].push(f[0].extent[0]);    \n                        }\n                            \n                        d3.select(this).call(axis.scale(y[d.key]).tickFormat(d.format).tickValues(currentTicks[d.key]));\n                });\n            }\n            function dragStart(d) {\n                dragging[d.key] = this.parentNode.__origin__ = x(d.key);\n                background.attr(\"visibility\", \"hidden\");\n            }\n            function dragMove(d) {\n                dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));\n                foreground.attr(\"d\", path);\n                enabledDimensions.sort(function (a, b) { return dimensionPosition(a.key) - dimensionPosition(b.key); });\n                enabledDimensions.forEach(function (d, i) { return d.currentPosition = i; });\n                x.domain(enabledDimensions.map(function (d) { return d.key; }));\n                dimensions.attr(\"transform\", function(d) { return \"translate(\" + dimensionPosition(d.key) + \")\"; });\n            }\n            function dragEnd(d, i) {\n                delete this.parentNode.__origin__;\n                delete dragging[d.key];\n                d3.select(this.parentNode).attr(\"transform\", \"translate(\" + x(d.key) + \")\");\n                foreground\n                  .attr(\"d\", path);\n                background\n                  .attr(\"d\", path)\n                  .attr(\"visibility\", null);\n\n                dispatch.dimensionsOrder(enabledDimensions);\n            }\n            function dimensionPosition(d) {\n                var v = dragging[d];\n                return v == null ? x(d) : v;\n            }\n        });\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:         {get: function(){return width;},           set: function(_){width= _;}},\n        height:        {get: function(){return height;},          set: function(_){height= _;}},\n        dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n        displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n        filters: { get: function () { return filters; }, set: function (_) { filters = _; } },\n        active: { get: function () { return active; }, set: function (_) { active = _; } },\n        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},\n        undefinedValuesLabel : {get: function(){return undefinedValuesLabel;}, set: function(_){undefinedValuesLabel=_;}},\n        \n        // deprecated options\n        dimensions: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensions', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key= k })\n            }\n        }},\n        dimensionNames: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionNames', 'use dimensionData instead');\n            dimensionNames = [];\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key = k })\n            }\n \n        }},\n        dimensionFormats: {get: function () { return dimensionData.map(function (d) { return d.format }); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionFormats', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (f) { dimensionData.push({ format: f }) })\n            } else {\n                _.forEach(function (f, i) { dimensionData[i].format = f })\n            }\n\n        }},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    =  _.top    !== undefined ? _.top    : margin.top;\n            margin.right  =  _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   =  _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.parallelCoordinatesChart = function () {\n        \"use strict\";\n        //============================================================\n        // Public Variables with Default Settings\n        //------------------------------------------------------------\n\n        var parallelCoordinates = nv.models.parallelCoordinates()\n        var legend = nv.models.legend()\n        var tooltip = nv.models.tooltip();\n        var dimensionTooltip = nv.models.tooltip();\n\n        var margin = { top: 0, right: 0, bottom: 0, left: 0 }\n        , marginTop = null\n        , width = null\n        , height = null\n        , showLegend = true\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , dimensionData = []\n        , displayBrush = true\n        , defaultState = null\n        , noData = null\n        , nanValue = \"undefined\"\n        , dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function () { return showControls ? 180 : 0 }\n        ;\n\n\t    //============================================================\n\n\t\t//============================================================\n        // Private Variables\n        //------------------------------------------------------------\n\n        var renderWatch = nv.utils.renderWatch(dispatch);\n\n        var stateGetter = function(data) {\n            return function() {\n                return {\n                    active: data.map(function(d) { return !d.disabled })\n                };\n            }\n        };\n\n        var stateSetter = function(data) {\n            return function(state) {\n                if(state.active !== undefined) {\n                    data.forEach(function(series, i) {\n                        series.disabled = !state.active[i];\n                    });\n                }\n            }\n        };\n\n        tooltip.contentGenerator(function(data) {\n            var str = '<table><thead><tr><td class=\"legend-color-guide\"><div style=\"background-color:' + data.color + '\"></div></td><td><strong>' + data.key + '</strong></td></tr></thead>';\n            if(data.series.length !== 0)\n            {\n                str = str + '<tbody><tr><td height =\"10px\"></td></tr>';\n                data.series.forEach(function(d){\n                    str = str + '<tr><td class=\"legend-color-guide\"><div style=\"background-color:' + d.color + '\"></div></td><td class=\"key\">' + d.key + '</td><td class=\"value\">' + d.value + '</td></tr>';\n                });\n                str = str + '</tbody>';\n            }\n            str = str + '</table>';\n            return str;\n        });\n\n        //============================================================\n        // Chart function\n        //------------------------------------------------------------\n\n        function chart(selection) {\n            renderWatch.reset();\n            renderWatch.models(parallelCoordinates);\n\n            selection.each(function(data) {\n                var container = d3.select(this);\n                nv.utils.initSVG(container);\n\n                var that = this;\n\n                var availableWidth = nv.utils.availableWidth(width, container, margin),\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\n                chart.update = function() { container.call(chart); };\n                chart.container = this;\n\n                state.setter(stateSetter(dimensionData), chart.update)\n                    .getter(stateGetter(dimensionData))\n                    .update();\n\n                //set state.disabled\n                state.disabled = dimensionData.map(function (d) { return !!d.disabled });\n\n                //Keep dimensions position in memory\n                dimensionData = dimensionData.map(function (d) {d.disabled = !!d.disabled; return d});\n                dimensionData.forEach(function (d, i) {\n                    d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;\n                    d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;\n                });\n\n               if (!defaultState) {\n                    var key;\n                    defaultState = {};\n                    for(key in state) {\n                        if(state[key] instanceof Array)\n                            defaultState[key] = state[key].slice(0);\n                        else\n                            defaultState[key] = state[key];\n                    }\n                }\n\n                // Display No Data message if there's nothing to show.\n                if(!data || !data.length) {\n                    nv.utils.noData(chart, container);\n                    return chart;\n                } else {\n                    container.selectAll('.nv-noData').remove();\n                }\n\n                //------------------------------------------------------------\n                // Setup containers and skeleton of chart\n\n                var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);\n                var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');\n\n                var g = wrap.select('g');\n\n                gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');\n                gEnter.append('g').attr('class', 'nv-legendWrap');\n\n                g.select(\"rect\")\n                    .attr(\"width\", availableWidth)\n                    .attr(\"height\", (availableHeight > 0) ? availableHeight : 0);\n\n                // Legend\n                if (!showLegend) {\n                    g.select('.nv-legendWrap').selectAll('*').remove();\n                } else {\n                    legend.width(availableWidth)\n                        .color(function (d) { return \"rgb(188,190,192)\"; });\n\n                    g.select('.nv-legendWrap')\n                        .datum(dimensionData.sort(function (a, b) { return a.originalPosition - b.originalPosition; }))\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n                    wrap.select('.nv-legendWrap')\n                       .attr('transform', 'translate( 0 ,' + (-margin.top) + ')');\n                }\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n                // Main Chart Component(s)\n                parallelCoordinates\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .dimensionData(dimensionData)\n                    .displayBrush(displayBrush);\n\n\t\t        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ')\n                  .datum(data);\n\n\t\t        parallelCoordinatesWrap.transition().call(parallelCoordinates);\n\n\t\t\t\t//============================================================\n                // Event Handling/Dispatching (in chart's scope)\n                //------------------------------------------------------------\n                //Display reset brush button\n\t\t        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {\n\t\t            if (hasActiveBrush) {\n\t\t                displayBrush = true;\n\t\t                dispatch.brushEnd(active);\n\t\t            } else {\n\n\t\t                displayBrush = false;\n\t\t            }\n\t\t        });\n\n\t\t        legend.dispatch.on('stateChange', function(newState) {\n\t\t            for(var key in newState) {\n\t\t                state[key] = newState[key];\n\t\t            }\n\t\t            dispatch.stateChange(state);\n\t\t            chart.update();\n\t\t        });\n\n                //Update dimensions order and display reset sorting button\n\t\t        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {\n\t\t            dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; });\n\t\t            var isSorted = false;\n\t\t            dimensionData.forEach(function (d, i) {\n\t\t                d.currentPosition = i;\n\t\t                if (d.currentPosition !== d.originalPosition)\n\t\t                    isSorted = true;\n\t\t            });\n\t\t            dispatch.dimensionsOrder(dimensionData, isSorted);\n\t\t        });\n\n\t\t\t\t// Update chart from a state object passed to event handler\n                dispatch.on('changeState', function (e) {\n\n                    if (typeof e.disabled !== 'undefined') {\n                        dimensionData.forEach(function (series, i) {\n                            series.disabled = e.disabled[i];\n                        });\n                        state.disabled = e.disabled;\n                    }\n                    chart.update();\n                });\n            });\n\n            renderWatch.renderEnd('parraleleCoordinateChart immediate');\n            return chart;\n        }\n\n\t\t//============================================================\n        // Event Handling/Dispatching (out of chart's scope)\n        //------------------------------------------------------------\n\n        parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {\n            var tp = {\n                key: evt.label,\n                color: evt.color,\n                series: []\n             }\n            if(evt.values){\n                Object.keys(evt.values).forEach(function (d) {\n                    var dim = evt.dimensions.filter(function (dd) {return dd.key === d;})[0];\n                    if(dim){\n                        var v;\n                        if (isNaN(evt.values[d]) || isNaN(parseFloat(evt.values[d]))) {\n                            v = nanValue;\n                        } else {\n                            v = dim.format(evt.values[d]);\n                        }\n                        tp.series.push({ idx: dim.currentPosition, key: d, value: v, color: dim.color });\n                    }\n                });\n                tp.series.sort(function(a,b) {return a.idx - b.idx});\n             }\n            tooltip.data(tp).hidden(false);\n        });\n\n        parallelCoordinates.dispatch.on('elementMouseout.tooltip', function(evt) {\n            tooltip.hidden(true)\n        });\n\n        parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {\n            tooltip();\n        });\n\t\t //============================================================\n        // Expose Public Variables\n        //------------------------------------------------------------\n\n\t\t// expose chart's sub-components\n        chart.dispatch = dispatch;\n        chart.parallelCoordinates = parallelCoordinates;\n        chart.legend = legend;\n        chart.tooltip = tooltip;\n        chart.options = nv.utils.optionsFunc.bind(chart);\n\n        chart._options = Object.create({}, {\n            // simple options, just get/set the necessary values\n            width: { get: function () { return width; }, set: function (_) { width = _; } },\n            height: { get: function () { return height; }, set: function (_) { height = _; } },\n            showLegend: { get: function () { return showLegend; }, set: function (_) { showLegend = _; } },\n            defaultState: { get: function () { return defaultState; }, set: function (_) { defaultState = _; } },\n            dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n            displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n            noData: { get: function () { return noData; }, set: function (_) { noData = _; } },\n            nanValue: { get: function () { return nanValue; }, set: function (_) { nanValue = _; } },\n\n            // options that require extra logic in the setter\n            margin: {\n                get: function () { return margin; },\n                set: function (_) {\n                    if (_.top !== undefined) {\n                        margin.top = _.top;\n                        marginTop = _.top;\n                    }\n                    margin.right = _.right !== undefined ? _.right : margin.right;\n                    margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n                    margin.left = _.left !== undefined ? _.left : margin.left;\n                }\n            },\n            color: {get: function(){return color;}, set: function(_){\n                    color = nv.utils.getColor(_);\n                    legend.color(color);\n                    parallelCoordinates.color(color);\n                }}\n        });\n\n        nv.utils.inheritOptions(chart, parallelCoordinates);\n        nv.utils.initOptions(chart);\n\n        return chart;\n    };\nnv.models.pie = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 500\n        , height = 500\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , valueFormat = d3.format(',.2f')\n        , showLabels = true\n        , labelsOutside = false\n        , labelType = \"key\"\n        , labelThreshold = .02 //if slice percentage is under this, don't show label\n        , hideOverlapLabels = false //Hide labels that don't fit in slice\n        , donut = false\n        , title = false\n        , growOnHover = true\n        , titleOffset = 0\n        , labelSunbeamLayout = false\n        , startAngle = false\n        , padAngle = false\n        , endAngle = false\n        , cornerRadius = 0\n        , donutRatio = 0.5\n        , duration = 250\n        , arcsRadius = []\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    var arcs = [];\n    var arcsOver = [];\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right\n                , availableHeight = height - margin.top - margin.bottom\n                , radius = Math.min(availableWidth, availableHeight) / 2\n                , arcsRadiusOuter = []\n                , arcsRadiusInner = []\n                ;\n\n            container = d3.select(this)\n            if (arcsRadius.length === 0) {\n                var outer = radius - radius / 10;\n                var inner = donutRatio * radius;\n                for (var i = 0; i < data[0].length; i++) {\n                    arcsRadiusOuter.push(outer);\n                    arcsRadiusInner.push(inner);\n                }\n            } else {\n                if(growOnHover){\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 10) * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 10) * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 10); }));\n                } else {\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return d.outer * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return d.inner * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return d.inner; }));\n                }\n            }\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n            var g_pie = gEnter.append('g').attr('class', 'nv-pie');\n            gEnter.append('g').attr('class', 'nv-pieLabels');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\n            //\n            container.on('click', function(d,i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            arcs = [];\n            arcsOver = [];\n            for (var i = 0; i < data[0].length; i++) {\n\n                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);\n                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);\n\n                if (startAngle !== false) {\n                    arc.startAngle(startAngle);\n                    arcOver.startAngle(startAngle);\n                }\n                if (endAngle !== false) {\n                    arc.endAngle(endAngle);\n                    arcOver.endAngle(endAngle);\n                }\n                if (donut) {\n                    arc.innerRadius(arcsRadiusInner[i]);\n                    arcOver.innerRadius(arcsRadiusInner[i]);\n                }\n\n                if (arc.cornerRadius && cornerRadius) {\n                    arc.cornerRadius(cornerRadius);\n                    arcOver.cornerRadius(cornerRadius);\n                }\n\n                arcs.push(arc);\n                arcsOver.push(arcOver);\n            }\n\n            // Setup the Pie chart and choose the data element\n            var pie = d3.layout.pie()\n                .sort(null)\n                .value(function(d) { return d.disabled ? 0 : getY(d) });\n\n            // padAngle added in d3 3.5\n            if (pie.padAngle && padAngle) {\n                pie.padAngle(padAngle);\n            }\n\n            // if title is specified and donut, put it in the middle\n            if (donut && title) {\n                g_pie.append(\"text\").attr('class', 'nv-pie-title');\n\n                wrap.select('.nv-pie-title')\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function (d) {\n                        return title;\n                    })\n                    .style(\"font-size\", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + \"px\")\n                    .attr(\"dy\", \"0.35em\") // trick to vertically center text\n                    .attr('transform', function(d, i) {\n                        return 'translate(0, '+ titleOffset + ')';\n                    });\n            }\n\n            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);\n            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);\n\n            slices.exit().remove();\n            pieLabels.exit().remove();\n\n            var ae = slices.enter().append('g');\n            ae.attr('class', 'nv-slice');\n            ae.on('mouseover', function(d, i) {\n                d3.select(this).classed('hover', true);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(70)\n                        .attr(\"d\", arcsOver[i]);\n                }\n                dispatch.elementMouseover({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    percent: (d.endAngle - d.startAngle) / (2 * Math.PI)\n                });\n            });\n            ae.on('mouseout', function(d, i) {\n                d3.select(this).classed('hover', false);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(50)\n                        .attr(\"d\", arcs[i]);\n                }\n                dispatch.elementMouseout({data: d.data, index: i});\n            });\n            ae.on('mousemove', function(d, i) {\n                dispatch.elementMousemove({data: d.data, index: i});\n            });\n            ae.on('click', function(d, i) {\n                var element = this;\n                dispatch.elementClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    event: d3.event,\n                    element: element\n                });\n            });\n            ae.on('dblclick', function(d, i) {\n                dispatch.elementDblClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\")\n                });\n            });\n\n            slices.attr('fill', function(d,i) { return color(d.data, i); });\n            slices.attr('stroke', function(d,i) { return color(d.data, i); });\n\n            var paths = ae.append('path').each(function(d) {\n                this._current = d;\n            });\n\n            slices.select('path')\n                .transition()\n                .duration(duration)\n                .attr('d', function (d, i) { return arcs[i](d); })\n                .attrTween('d', arcTween);\n\n            if (showLabels) {\n                // This does the normal label\n                var labelsArc = [];\n                for (var i = 0; i < data[0].length; i++) {\n                    labelsArc.push(arcs[i]);\n\n                    if (labelsOutside) {\n                        if (donut) {\n                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());\n                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);\n                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);\n                        }\n                    } else if (!donut) {\n                            labelsArc[i].innerRadius(0);\n                    }\n                }\n\n                pieLabels.enter().append(\"g\").classed(\"nv-label\",true).each(function(d,i) {\n                    var group = d3.select(this);\n\n                    group.attr('transform', function (d, i) {\n                        if (labelSunbeamLayout) {\n                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                                rotateAngle -= 90;\n                            } else {\n                                rotateAngle += 90;\n                            }\n                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                        } else {\n                            d.outerRadius = radius + 10; // Set Outer Coordinate\n                            d.innerRadius = radius + 15; // Set Inner Coordinate\n                            return 'translate(' + labelsArc[i].centroid(d) + ')'\n                        }\n                    });\n\n                    group.append('rect')\n                        .style('stroke', '#fff')\n                        .style('fill', '#fff')\n                        .attr(\"rx\", 3)\n                        .attr(\"ry\", 3);\n\n                    group.append('text')\n                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                        .style('fill', '#000')\n                });\n\n                var labelLocationHash = {};\n                var avgHeight = 14;\n                var avgWidth = 140;\n                var createHashKey = function(coordinates) {\n                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n                };\n                var getSlicePercentage = function(d) {\n                    return (d.endAngle - d.startAngle) / (2 * Math.PI);\n                };\n\n                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {\n                    if (labelSunbeamLayout) {\n                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                            rotateAngle -= 90;\n                        } else {\n                            rotateAngle += 90;\n                        }\n                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                    } else {\n                        d.outerRadius = radius + 10; // Set Outer Coordinate\n                        d.innerRadius = radius + 15; // Set Inner Coordinate\n\n                        /*\n                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n                        Adjust the label's y-position to remove the overlap.\n                        */\n                        var center = labelsArc[i].centroid(d);\n                        var percent = getSlicePercentage(d);\n                        if (d.value && percent >= labelThreshold) {\n                            var hashKey = createHashKey(center);\n                            if (labelLocationHash[hashKey]) {\n                                center[1] -= avgHeight;\n                            }\n                            labelLocationHash[createHashKey(center)] = true;\n                        }\n                        return 'translate(' + center + ')'\n                    }\n                });\n\n                pieLabels.select(\".nv-label text\")\n                    .style('text-anchor', function(d,i) {\n                        //center the text on it's origin or begin/end if orthogonal aligned\n                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';\n                    })\n                    .text(function(d, i) {\n                        var percent = getSlicePercentage(d);\n                        var label = '';\n                        if (!d.value || percent < labelThreshold) return '';\n\n                        if(typeof labelType === 'function') {\n                            label = labelType(d, i, {\n                                'key': getX(d.data),\n                                'value': getY(d.data),\n                                'percent': valueFormat(percent)\n                            });\n                        } else {\n                            switch (labelType) {\n                                case 'key':\n                                    label = getX(d.data);\n                                    break;\n                                case 'value':\n                                    label = valueFormat(getY(d.data));\n                                    break;\n                                case 'percent':\n                                    label = d3.format('%')(percent);\n                                    break;\n                            }\n                        }\n                        return label;\n                    })\n                ;\n\n                if (hideOverlapLabels) {\n                    pieLabels\n                        .each(function (d, i) {\n                            if (!this.getBBox) return;\n                            var bb = this.getBBox(),\n                            center = labelsArc[i].centroid(d);\n                            var topLeft = {\n                              x : center[0] + bb.x,\n                              y : center[1] + bb.y\n                            };\n\n                            var topRight = {\n                              x : topLeft.x + bb.width,\n                              y : topLeft.y\n                            };\n\n                            var bottomLeft = {\n                              x : topLeft.x,\n                              y : topLeft.y + bb.height\n                            };\n\n                            var bottomRight = {\n                              x : topLeft.x + bb.width,\n                              y : topLeft.y + bb.height\n                            };\n\n                            d.visible = nv.utils.pointIsInArc(topLeft, d, arc) &&\n                            nv.utils.pointIsInArc(topRight, d, arc) &&\n                            nv.utils.pointIsInArc(bottomLeft, d, arc) &&\n                            nv.utils.pointIsInArc(bottomRight, d, arc);\n                        })\n                        .style('display', function (d) {\n                            return d.visible ? null : 'none';\n                        })\n                    ;\n                }\n\n            }\n\n\n            // Computes the angle of an arc, converting from radians to degrees.\n            function angle(d) {\n                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n                return a > 90 ? a - 180 : a;\n            }\n\n            function arcTween(a, idx) {\n                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n                if (!donut) a.innerRadius = 0;\n                var i = d3.interpolate(this._current, a);\n                this._current = i(0);\n                return function (t) {\n                    return arcs[idx](i(t));\n                };\n            }\n        });\n\n        renderWatch.renderEnd('pie immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n        title:      {get: function(){return title;}, set: function(_){title=_;}},\n        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},\n        hideOverlapLabels: {get: function(){return hideOverlapLabels;}, set: function(_){hideOverlapLabels=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        x:          {get: function(){return getX;}, set: function(_){getX=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},\n        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},\n        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},\n        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},\n        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},\n        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},\n        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},\n        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},\n        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},\n\n        // depreciated after 1.7.1\n        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');\n        }},\n        // depreciated after 1.7.1\n        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');\n        }},\n        // deprecated after 1.7.1\n        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {\n            valueFormat=_;\n            nv.deprecated('labelFormat','use valueFormat instead');\n        }},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY=d3.functor(_);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }},\n        labelType:          {get: function(){return labelType;}, set: function(_){\n            labelType= _ || 'key';\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.pieChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var pie = nv.models.pie();\n    var legend = nv.models.legend();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , marginTop = null\n        , width = null\n        , height = null\n        , showTooltipPercent = false\n        , showLegend = true\n        , legendPosition = \"top\"\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return pie.valueFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined) {\n                data.forEach(function (series, i) {\n                    series.disabled = !state.active[i];\n                });\n            }\n        }\n    };\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(pie);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var that = this;\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            state.setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-pieWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                if (legendPosition === \"top\") {\n                    legend.width( availableWidth ).key(pie.x());\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                } else if (legendPosition === \"right\") {\n                    var legendWidth = nv.models.legend().width();\n                    if (availableWidth / 2 < legendWidth) {\n                        legendWidth = (availableWidth / 2)\n                    }\n                    legend.height(availableHeight).key(pie.x());\n                    legend.width(legendWidth);\n                    availableWidth -= legend.width();\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend)\n                        .attr('transform', 'translate(' + (availableWidth) +',0)');\n                } else if (legendPosition === \"bottom\") {\n                    legend.width( availableWidth ).key(pie.x());\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    margin.bottom = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + availableHeight +')');\n                }\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            pie.width(availableWidth).height(availableHeight);\n            var pieWrap = g.select('.nv-pieWrap').datum([data]);\n            d3.transition(pieWrap).call(pie);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState) {\n                    state[key] = newState[key];\n                }\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('pieChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    pie.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    pie.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    pie.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.legend = legend;\n    chart.dispatch = dispatch;\n    chart.pie = pie;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:              {get: function(){return width;},                set: function(_){width=_;}},\n        height:             {get: function(){return height;},               set: function(_){height=_;}},\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n        showLegend:         {get: function(){return showLegend;},           set: function(_){showLegend=_;}},\n        legendPosition:     {get: function(){return legendPosition;},       set: function(_){legendPosition=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            legend.color(color);\n            pie.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            pie.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n    nv.utils.inheritOptions(chart, pie);\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sankey = function() {\n    'use strict';\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sankey = {},\n        nodeWidth = 24,\n        nodePadding = 8,\n        size = [1, 1],\n        nodes = [],\n        links = [],\n        sinksRight = true;\n\n    var layout = function(iterations) {\n        computeNodeLinks();\n        computeNodeValues();\n        computeNodeBreadths();\n        computeNodeDepths(iterations);\n    };\n\n    var relayout = function() {\n        computeLinkDepths();\n    };\n\n    // SVG path data generator, to be used as 'd' attribute on 'path' element selection.\n    var link = function() {\n        var curvature = .5;\n\n        function link(d) {\n\n            var x0 = d.source.x + d.source.dx,\n                x1 = d.target.x,\n                xi = d3.interpolateNumber(x0, x1),\n                x2 = xi(curvature),\n                x3 = xi(1 - curvature),\n                y0 = d.source.y + d.sy + d.dy / 2,\n                y1 = d.target.y + d.ty + d.dy / 2;\n            var linkPath = 'M' + x0 + ',' + y0\n                + 'C' + x2 + ',' + y0\n                + ' ' + x3 + ',' + y1\n                + ' ' + x1 + ',' + y1;\n            return linkPath;\n        }\n\n        link.curvature = function(_) {\n            if (!arguments.length) return curvature;\n            curvature = +_;\n            return link;\n        };\n\n        return link;\n    };\n\n    // Y-position of the middle of a node.\n    var center = function(node) {\n        return node.y + node.dy / 2;\n    };\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    // Populate the sourceLinks and targetLinks for each node.\n    // Also, if the source and target are not objects, assume they are indices.\n    function computeNodeLinks() {\n        nodes.forEach(function(node) {\n            // Links that have this node as source.\n            node.sourceLinks = [];\n            // Links that have this node as target.\n            node.targetLinks = [];\n        });\n        links.forEach(function(link) {\n            var source = link.source,\n                target = link.target;\n            if (typeof source === 'number') source = link.source = nodes[link.source];\n            if (typeof target === 'number') target = link.target = nodes[link.target];\n            source.sourceLinks.push(link);\n            target.targetLinks.push(link);\n        });\n    }\n\n    // Compute the value (size) of each node by summing the associated links.\n    function computeNodeValues() {\n        nodes.forEach(function(node) {\n            node.value = Math.max(\n                d3.sum(node.sourceLinks, value),\n                d3.sum(node.targetLinks, value)\n            );\n        });\n    }\n\n    // Iteratively assign the breadth (x-position) for each node.\n    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n    // nodes with no incoming links are assigned breadth zero, while\n    // nodes with no outgoing links are assigned the maximum breadth.\n    function computeNodeBreadths() {\n        //\n        var remainingNodes = nodes,\n            nextNodes,\n            x = 0;\n\n        // Work from left to right.\n        // Keep updating the breath (x-position) of nodes that are target of recently updated nodes.\n        //\n        while (remainingNodes.length && x < nodes.length) {\n            nextNodes = [];\n            remainingNodes.forEach(function(node) {\n                node.x = x;\n                node.dx = nodeWidth;\n                node.sourceLinks.forEach(function(link) {\n                    if (nextNodes.indexOf(link.target) < 0) {\n                        nextNodes.push(link.target);\n                    }\n                });\n            });\n            remainingNodes = nextNodes;\n            ++x;\n            //\n        }\n\n        // Optionally move pure sinks always to the right.\n        if (sinksRight) {\n            moveSinksRight(x);\n        }\n\n        scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n    }\n\n    function moveSourcesRight() {\n        nodes.forEach(function(node) {\n            if (!node.targetLinks.length) {\n                node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n            }\n        });\n    }\n\n    function moveSinksRight(x) {\n        nodes.forEach(function(node) {\n            if (!node.sourceLinks.length) {\n                node.x = x - 1;\n            }\n        });\n    }\n\n    function scaleNodeBreadths(kx) {\n        nodes.forEach(function(node) {\n            node.x *= kx;\n        });\n    }\n\n    // Compute the depth (y-position) for each node.\n    function computeNodeDepths(iterations) {\n        // Group nodes by breath.\n        var nodesByBreadth = d3.nest()\n            .key(function(d) { return d.x; })\n            .sortKeys(d3.ascending)\n            .entries(nodes)\n            .map(function(d) { return d.values; });\n\n        //\n        initializeNodeDepth();\n        resolveCollisions();\n        computeLinkDepths();\n        for (var alpha = 1; iterations > 0; --iterations) {\n            relaxRightToLeft(alpha *= .99);\n            resolveCollisions();\n            computeLinkDepths();\n            relaxLeftToRight(alpha);\n            resolveCollisions();\n            computeLinkDepths();\n        }\n\n        function initializeNodeDepth() {\n            // Calculate vertical scaling factor.\n            var ky = d3.min(nodesByBreadth, function(nodes) {\n                return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n            });\n\n            nodesByBreadth.forEach(function(nodes) {\n                nodes.forEach(function(node, i) {\n                    node.y = i;\n                    node.dy = node.value * ky;\n                });\n            });\n\n            links.forEach(function(link) {\n                link.dy = link.value * ky;\n            });\n        }\n\n        function relaxLeftToRight(alpha) {\n            nodesByBreadth.forEach(function(nodes, breadth) {\n                nodes.forEach(function(node) {\n                    if (node.targetLinks.length) {\n                        // Value-weighted average of the y-position of source node centers linked to this node.\n                        var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedSource(link) {\n                return (link.source.y + link.sy + link.dy / 2) * link.value;\n            }\n        }\n\n        function relaxRightToLeft(alpha) {\n            nodesByBreadth.slice().reverse().forEach(function(nodes) {\n                nodes.forEach(function(node) {\n                    if (node.sourceLinks.length) {\n                        // Value-weighted average of the y-positions of target nodes linked to this node.\n                        var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedTarget(link) {\n                return (link.target.y + link.ty + link.dy / 2) * link.value;\n            }\n        }\n\n        function resolveCollisions() {\n            nodesByBreadth.forEach(function(nodes) {\n                var node,\n                    dy,\n                    y0 = 0,\n                    n = nodes.length,\n                    i;\n\n                // Push any overlapping nodes down.\n                nodes.sort(ascendingDepth);\n                for (i = 0; i < n; ++i) {\n                    node = nodes[i];\n                    dy = y0 - node.y;\n                    if (dy > 0) node.y += dy;\n                    y0 = node.y + node.dy + nodePadding;\n                }\n\n                // If the bottommost node goes outside the bounds, push it back up.\n                dy = y0 - nodePadding - size[1];\n                if (dy > 0) {\n                    y0 = node.y -= dy;\n\n                    // Push any overlapping nodes back up.\n                    for (i = n - 2; i >= 0; --i) {\n                        node = nodes[i];\n                        dy = node.y + node.dy + nodePadding - y0;\n                        if (dy > 0) node.y -= dy;\n                        y0 = node.y;\n                    }\n                }\n            });\n        }\n\n        function ascendingDepth(a, b) {\n            return a.y - b.y;\n        }\n    }\n\n    // Compute y-offset of the source endpoint (sy) and target endpoints (ty) of links,\n    // relative to the source/target node's y-position.\n    function computeLinkDepths() {\n        nodes.forEach(function(node) {\n            node.sourceLinks.sort(ascendingTargetDepth);\n            node.targetLinks.sort(ascendingSourceDepth);\n        });\n        nodes.forEach(function(node) {\n            var sy = 0, ty = 0;\n            node.sourceLinks.forEach(function(link) {\n                link.sy = sy;\n                sy += link.dy;\n            });\n            node.targetLinks.forEach(function(link) {\n                link.ty = ty;\n                ty += link.dy;\n            });\n        });\n\n        function ascendingSourceDepth(a, b) {\n            return a.source.y - b.source.y;\n        }\n\n        function ascendingTargetDepth(a, b) {\n            return a.target.y - b.target.y;\n        }\n    }\n\n    // Value property accessor.\n    function value(x) {\n        return x.value;\n    }\n\n    sankey.options = nv.utils.optionsFunc.bind(sankey);\n    sankey._options = Object.create({}, {\n        nodeWidth:    {get: function(){return nodeWidth;},   set: function(_){nodeWidth=+_;}},\n        nodePadding:  {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        nodes:        {get: function(){return nodes;},       set: function(_){nodes=_;}},\n        links:        {get: function(){return links ;},      set: function(_){links=_;}},\n        size:         {get: function(){return size;},        set: function(_){size=_;}},\n        sinksRight:   {get: function(){return sinksRight;},  set: function(_){sinksRight=_;}},\n\n        layout:       {get: function(){layout(32);},         set: function(_){layout(_);}},\n        relayout:     {get: function(){relayout();},         set: function(_){}},\n        center:       {get: function(){return center();},    set: function(_){\n            if(typeof _ === 'function'){\n                center=_;\n            }\n        }},\n        link:         {get: function(){return link();},      set: function(_){\n            if(typeof _ === 'function'){\n                link=_;\n            }\n            return link();\n        }}\n    });\n\n    nv.utils.initOptions(sankey);\n\n    return sankey;\n};\nnv.models.sankeyChart = function() {\n    \"use strict\";\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , sankey = nv.models.sankey()\n        , width = 600\n        , height = 400\n        , nodeWidth = 36\n        , nodePadding =  40\n        , units = 'units'\n        , center = undefined\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var formatNumber = d3.format(',.0f');    // zero decimal places\n    var format = function(d) {\n        return formatNumber(d) + ' ' + units;\n    };\n    var color = d3.scale.category20();\n    var linkTitle = function(d){\n        return d.source.name + ' → ' + d.target.name + '\\n' + format(d.value);\n    };\n    var nodeFillColor = function(d){\n        return d.color = color(d.name.replace(/ .*/, ''));\n    };\n    var nodeStrokeColor = function(d){\n        return d3.rgb(d.color).darker(2);\n    };\n    var nodeTitle = function(d){\n        return d.name + '\\n' + format(d.value);\n    };\n\n    var showError = function(element, message) {\n        element.append('text')\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('class', 'nvd3-sankey-chart-error')\n            .attr('text-anchor', 'middle')\n            .text(message);\n    };\n\n    function chart(selection) {\n        selection.each(function(data) {\n\n            var testData = {\n                nodes:\n                    [\n                        {'node': 1, 'name': 'Test 1'},\n                        {'node': 2, 'name': 'Test 2'},\n                        {'node': 3, 'name': 'Test 3'},\n                        {'node': 4, 'name': 'Test 4'},\n                        {'node': 5, 'name': 'Test 5'},\n                        {'node': 6, 'name': 'Test 6'}\n                    ],\n                links:\n                    [\n                        {'source': 0, 'target': 1, 'value': 2295},\n                        {'source': 0, 'target': 5, 'value': 1199},\n                        {'source': 1, 'target': 2, 'value': 1119},\n                        {'source': 1, 'target': 5, 'value': 1176},\n                        {'source': 2, 'target': 3, 'value': 487},\n                        {'source': 2, 'target': 5, 'value': 632},\n                        {'source': 3, 'target': 4, 'value': 301},\n                        {'source': 3, 'target': 5, 'value': 186}\n                    ]\n            };\n\n            // Error handling\n            var isDataValid = false;\n            var dataAvailable = false;\n\n            // check if data is valid\n            if(\n                (typeof data['nodes'] === 'object' && data['nodes'].length) >= 0 &&\n                (typeof data['links'] === 'object' && data['links'].length) >= 0\n            ){\n                isDataValid = true;\n            }\n\n            // check if data is available\n            if(\n                data['nodes'] && data['nodes'].length > 0 &&\n                data['links'] && data['links'].length > 0\n            ) {\n                dataAvailable = true;\n            }\n\n            // show error\n            if(!isDataValid) {\n                console.error('NVD3 Sankey chart error:', 'invalid data format for', data);\n                console.info('Valid data format is: ', testData, JSON.stringify(testData));\n                showError(selection, 'Error loading chart, data is invalid');\n                return false;\n            }\n\n            // TODO use nv.utils.noData\n            if(!dataAvailable) {\n                showError(selection, 'No data available');\n                return false;\n            }\n\n            // No errors, continue\n\n            // append the svg canvas to the page\n            var svg = selection.append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .append('g')\n                .attr('class', 'nvd3 nv-wrap nv-sankeyChart');\n\n            // Set the sankey diagram properties\n            sankey\n                .nodeWidth(nodeWidth)\n                .nodePadding(nodePadding)\n                .size([width, height]);\n\n            var path = sankey.link();\n\n            sankey\n                .nodes(data.nodes)\n                .links(data.links)\n                .layout(32)\n                .center(center);\n\n            // add in the links\n            var link = svg.append('g').selectAll('.link')\n                .data(data.links)\n                .enter().append('path')\n                .attr('class', 'link')\n                .attr('d', path)\n                .style('stroke-width', function(d) { return Math.max(1, d.dy); })\n            .sort(function(a,b) { return b.dy - a.dy; });\n\n            // add the link titles\n            link.append('title')\n                .text(linkTitle);\n\n            // add in the nodes\n            var node = svg.append('g').selectAll('.node')\n                .data(data.nodes)\n                .enter().append('g')\n                .attr('class', 'node')\n                .attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; })\n                .call(\n                    d3.behavior\n                        .drag()\n                        .origin(function(d) { return d; })\n                        .on('dragstart', function() {\n                            this.parentNode.appendChild(this);\n                        })\n                        .on('drag', dragmove)\n                );\n\n            // add the rectangles for the nodes\n            node.append('rect')\n                .attr('height', function(d) { return d.dy; })\n                .attr('width', sankey.nodeWidth())\n                .style('fill', nodeFillColor)\n                .style('stroke', nodeStrokeColor)\n                .append('title')\n                .text(nodeTitle);\n\n            // add in the title for the nodes\n            node.append('text')\n                .attr('x', -6)\n                .attr('y', function(d) { return d.dy / 2; })\n                .attr('dy', '.35em')\n                .attr('text-anchor', 'end')\n                .attr('transform', null)\n                .text(function(d) { return d.name; })\n                .filter(function(d) { return d.x < width / 2; })\n                .attr('x', 6 + sankey.nodeWidth())\n                .attr('text-anchor', 'start');\n\n            // the function for moving the nodes\n            function dragmove(d) {\n                d3.select(this).attr('transform',\n                'translate(' + d.x + ',' + (\n                    d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))\n                ) + ')');\n                sankey.relayout();\n                link.attr('d', path);\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        units:           {get: function(){return units;},       set: function(_){units=_;}},\n        width:           {get: function(){return width;},       set: function(_){width=_;}},\n        height:          {get: function(){return height;},      set: function(_){height=_;}},\n        format:          {get: function(){return format;},      set: function(_){format=_;}},\n        linkTitle:       {get: function(){return linkTitle;},   set: function(_){linkTitle=_;}},\n        nodeWidth:       {get: function(){return nodeWidth;},   set: function(_){nodeWidth=_;}},\n        nodePadding:     {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        center:          {get: function(){return center},       set: function(_){center=_}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        nodeStyle: {get: function(){return {};}, set: function(_){\n            nodeFillColor   = _.fillColor   !== undefined ? _.fillColor   : nodeFillColor;\n            nodeStrokeColor = _.strokeColor !== undefined ? _.strokeColor : nodeStrokeColor;\n            nodeTitle       = _.title       !== undefined ? _.title       : nodeTitle;\n        }}\n\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.scatter = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n        , width        = null\n        , height       = null\n        , color        = nv.utils.defaultColor() // chooses color\n        , pointBorderColor = null\n        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n        , container    = null\n        , x            = d3.scale.linear()\n        , y            = d3.scale.linear()\n        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n        , getX         = function(d) { return d.x } // accessor to get the x value\n        , getY         = function(d) { return d.y } // accessor to get the y value\n        , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , forceY       = [] // List of numbers to Force into the Y scale\n        , forceSize    = [] // List of numbers to Force into the Size scale\n        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n        , clipEdge     = false // if true, masks points within x and y scale\n        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n        , showVoronoi  = false // display the voronoi areas\n        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n        , xDomain      = null // Override x domain (skips the calculation from data)\n        , yDomain      = null // Override y domain\n        , xRange       = null // Override x range\n        , yRange       = null // Override y range\n        , sizeDomain   = null // Override point size domain\n        , sizeRange    = null\n        , singlePoint  = false\n        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        , useVoronoi   = true\n        , duration     = 250\n        , interactiveUpdateDelay = 300\n        , showLabels    = false\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0, z0 // used to store previous scales\n        , xDom, yDom // used to store previous domains\n        , width0\n        , height0\n        , timeoutID\n        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        , _sizeRange_def = [16, 256]\n        , _cache = {}\n        ;\n\n    //============================================================\n    // Diff and Cache Utilities\n    //------------------------------------------------------------\n    // getDiffs is used to filter unchanged points from the update\n    // selection. It implicitly updates it's cache when called and\n    // therefor the diff is based upon the previous invocation NOT\n    // the previous update.\n    //\n    // getDiffs takes a point as its first argument followed by n\n    // key getter pairs (d, [key, get... key, get]) this approach\n    // was chosen for efficiency. (The filter will call it a LOT).\n    //\n    // It is important to call delCache on point exit to prevent a\n    // memory leak. It is also needed to prevent invalid caches if\n    // a new point uses the same series and point id key.\n    //\n    // Argument Performance Concerns:\n    // - Object property lists for key getter pairs would be very\n    // expensive (points * objects for the GC every update).\n    // - ES6 function names for implicit keys would be nice but\n    // they are not guaranteed to be unique.\n    // - function.toString to obtain implicit keys is possible\n    // but long object keys are not free (internal hash).\n    // - Explicit key without objects are the most efficient.\n\n    function getCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        val = _cache[key] = _cache[key] || {};\n        return val;\n    }\n\n    function delCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        delete _cache[key];\n    }\n\n    function getDiffs(d) {\n        var i, key, val,\n            cache = getCache(d),\n            diffs = false;\n        for (i = 1; i < arguments.length; i += 2) {\n            key = arguments[i];\n            val = arguments[i + 1](d[0], d[1]);\n            if (cache[key] !== val || !cache.hasOwnProperty(key)) {\n                cache[key] = val;\n                diffs = true;\n            }\n        }\n        return diffs;\n    }\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            var logScale = (typeof(chart.yScale().base) === \"function\"); // Only log scale has a method \"base()\"\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n                d3.merge(\n                    data.map(function(d) {\n                        return d.values.map(function(d,i) {\n                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n                        })\n                    })\n                );\n\n            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\n            if (padData && data[0])\n                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n             if (logScale) {\n                    var min = d3.min(seriesData.map(function(d) { if (d.y !== 0) return d.y; }));\n                    y.clamp(true)\n                        .domain(yDomain || d3.extent(seriesData.map(function(d) {\n                            if (d.y !== 0) return d.y;\n                            else return min * 0.1;\n                        }).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                } else {\n                        y.domain(yDomain || d3.extent(seriesData.map(function (d) { return d.y;}).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                }\n\n            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n                .range(sizeRange || _sizeRange_def);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];\n\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            if ( isNaN(x.domain()[0])) {\n                x.domain([-1,1]);\n            }\n\n            if ( isNaN(y.domain()[0])) {\n                y.domain([-1,1]);\n            }\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n            z0 = z0 || z;\n\n            var scaleDiff = x(1) !== x0(1) || y(1) !== y0(1) || z(1) !== z0(1);\n\n            width0 = width0 || width;\n            height0 = height0 || height;\n\n            var sizeDiff = width0 !== width || height0 !== height;\n\n            // Domain Diffs\n\n            xDom = xDom || [];\n            var domainDiff = xDom[0] !== x.domain()[0] || xDom[1] !== x.domain()[1];\n            xDom = x.domain();\n\n            yDom = yDom || [];\n            domainDiff = domainDiff || yDom[0] !== y.domain()[0] || yDom[1] !== y.domain()[1];\n            yDom = y.domain();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.classed('nv-single-point', singlePoint);\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-point-paths');\n            wrapEnter.append('g').attr('class', 'nv-point-clips');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect')\n                .attr('transform', 'translate( -10, -10)');\n\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth + 20)\n                .attr('height', (availableHeight > 0) ? availableHeight + 20 : 0);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            function updateInteractiveLayer() {\n                // Always clear needs-update flag regardless of whether or not\n                // we will actually do anything (avoids needless invocations).\n                needsUpdate = false;\n\n                if (!interactive) return false;\n\n                // inject series and point index for reference into voronoi\n                if (useVoronoi === true) {\n\n                    // nuke all voronoi paths on reload and recreate them\n                    wrap.select('.nv-point-paths').selectAll('path').remove();\n\n                    var vertices = d3.merge(data.map(function(group, groupIndex) {\n                            return group.values\n                                .map(function(point, pointIndex) {\n                                    // *Adding noise to make duplicates very unlikely\n                                    // *Injecting series and point index for reference\n                                    // *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n                                    var pX = getX(point,pointIndex);\n                                    var pY = getY(point,pointIndex);\n\n                                    return [nv.utils.NaNtoZero(x(pX)) + Math.random() * 1e-4,\n                                            nv.utils.NaNtoZero(y(pY)) + Math.random() * 1e-4,\n                                        groupIndex,\n                                        pointIndex, point];\n                                })\n                                .filter(function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n                                })\n                        })\n                    );\n\n                    if (vertices.length == 0) return false;  // No active points, we're done\n                    if (vertices.length < 3) {\n                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n                    }\n\n                    // keep voronoi sections from going more than 10 outside of graph\n                    // to avoid overlap with other things like legend etc\n                    var bounds = d3.geom.polygon([\n                        [-10,-10],\n                        [-10,height + 10],\n                        [width + 10,height + 10],\n                        [width + 10,-10]\n                    ]);\n\n                    // delete duplicates from vertices - essential assumption for d3.geom.voronoi\n                    var epsilon = 1e-4; // Uses 1e-4 to determine equivalence.\n                    vertices = vertices.sort(function(a,b){return ((a[0] - b[0]) || (a[1] - b[1]))});\n                    for (var i = 0; i < vertices.length - 1; ) {\n                        if ((Math.abs(vertices[i][0] - vertices[i+1][0]) < epsilon) &&\n                        (Math.abs(vertices[i][1] - vertices[i+1][1]) < epsilon)) {\n                            vertices.splice(i+1, 1);\n                        } else {\n                            i++;\n                        }\n                    }\n\n                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n                        return {\n                            'data': bounds.clip(d),\n                            'series': vertices[i][2],\n                            'point': vertices[i][3]\n                        }\n                    });\n\n                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);\n                    var vPointPaths = pointPaths\n                        .enter().append(\"svg:path\")\n                        .attr(\"d\", function(d) {\n                            if (!d || !d.data || d.data.length === 0)\n                                return 'M 0 0';\n                            else\n                                return \"M\" + d.data.join(\",\") + \"Z\";\n                        })\n                        .attr(\"id\", function(d,i) {\n                            return \"nv-path-\"+i; })\n                        .attr(\"clip-path\", function(d,i) { return \"url(#nv-clip-\"+id+\"-\"+i+\")\"; })\n                        ;\n\n                    // good for debugging point hover issues\n                    if (showVoronoi) {\n                        vPointPaths.style(\"fill\", d3.rgb(230, 230, 230))\n                            .style('fill-opacity', 0.4)\n                            .style('stroke-opacity', 1)\n                            .style(\"stroke\", d3.rgb(200,200,200));\n                    }\n\n                    if (clipVoronoi) {\n                        // voronoi sections are already set to clip,\n                        // just create the circles with the IDs they expect\n                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom\n                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);\n                        var vPointClips = pointClips\n                            .enter().append(\"svg:clipPath\")\n                            .attr(\"id\", function(d, i) { return \"nv-clip-\"+id+\"-\"+i;})\n                            .append(\"svg:circle\")\n                            .attr('cx', function(d) { return d[0]; })\n                            .attr('cy', function(d) { return d[1]; })\n                            .attr('r', clipRadius);\n                    }\n\n                    var mouseEventCallback = function(el, d, mDispatch) {\n                        if (needsUpdate) return 0;\n                        var series = data[d.series];\n                        if (series === undefined) return;\n                        var point  = series.values[d.point];\n                        point['color'] = color(series, d.series);\n\n                        // standardize attributes for tooltip.\n                        point['x'] = getX(point);\n                        point['y'] = getY(point);\n\n                        // can't just get box of event node since it's actually a voronoi polygon\n                        var box = container.node().getBoundingClientRect();\n                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;\n                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n\n                        var pos = {\n                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,\n                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10\n                        };\n\n                        mDispatch({\n                            point: point,\n                            series: series,\n                            pos: pos,\n                            relativePos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n                            seriesIndex: d.series,\n                            pointIndex: d.point,\n                            event: d3.event,\n                            element: el\n                        });\n                    };\n\n                    pointPaths\n                        .on('click', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementClick);\n                        })\n                        .on('dblclick', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementDblClick);\n                        })\n                        .on('mouseover', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementMouseover);\n                        })\n                        .on('mouseout', function(d, i) {\n                            mouseEventCallback(this, d, dispatch.elementMouseout);\n                        });\n\n                } else {\n                    // add event handlers to points instead voronoi paths\n                    wrap.select('.nv-groups').selectAll('.nv-group')\n                        .selectAll('.nv-point')\n                        //.data(dataWithPoints)\n                        //.style('pointer-events', 'auto') // recativate events, disabled by css\n                        .on('click', function(d,i) {\n                            //nv.log('test', d, i);\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n                            var element = this;\n                            dispatch.elementClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top], //TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                event: d3.event,\n                                element: element\n                            });\n                        })\n                        .on('dblclick', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementDblClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i\n                            });\n                        })\n                        .on('mouseover', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseover({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        })\n                        .on('mouseout', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseout({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        });\n                }\n            }\n\n            needsUpdate = true;\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .remove();\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('nv-noninteractive', !interactive)\n                .classed('hover', function(d) { return d.hover });\n            groups.watchTransition(renderWatch, 'scatter: groups')\n                .style('fill', function(d,i) { return color(d, i) })\n                .style('stroke', function(d,i) { return d.pointBorderColor || pointBorderColor || color(d, i) })\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .5);\n\n            // create the points, maintaining their IDs from the original data set\n            var points = groups.selectAll('path.nv-point')\n                .data(function(d) {\n                    return d.values.map(\n                        function (point, pointIndex) {\n                            return [point, pointIndex]\n                        }).filter(\n                            function(pointArray, pointIndex) {\n                                return pointActive(pointArray[0], pointIndex)\n                            })\n                    });\n            points.enter().append('path')\n                .attr('class', function (d) {\n                    return 'nv-point nv-point-' + d[1];\n                })\n                .style('fill', function (d) { return d.color })\n                .style('stroke', function (d) { return d.color })\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')'\n                })\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n            points.exit().each(delCache).remove();\n            groups.exit().selectAll('path.nv-point')\n                .watchTransition(renderWatch, 'scatter exit')\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                })\n                .remove();\n\n            //============================================================\n            // Point Update Optimisation Notes\n            //------------------------------------------------------------\n            // The following update selections are filtered with getDiffs\n            // (defined at the top of this file) this brings a performance\n            // benefit for charts with large data sets that accumulate a\n            // subset of changes or additions over time.\n            //\n            // Uneccesary and expensive DOM calls are avoided by culling\n            // unchanged points from the selection in exchange for the\n            // cheaper overhead of caching and diffing each point first.\n            //\n            // Due to the way D3 and NVD3 work, other global changes need\n            // to be considered in addition to local point properties.\n            // This is a potential source of bugs (if any of the global\n            // changes that possibly affect points are missed).\n\n            // Update Point Positions [x, y]\n            points.filter(function (d) {\n                // getDiffs must always be called to update cache\n                return getDiffs(d, 'x', getX, 'y', getY) ||\n                    scaleDiff || sizeDiff || domainDiff;\n            })\n            .watchTransition(renderWatch, 'scatter points')\n            .attr('transform', function (d) {\n                return 'translate(' +\n                    nv.utils.NaNtoZero(x(getX(d[0], d[1]))) + ',' +\n                    nv.utils.NaNtoZero(y(getY(d[0], d[1]))) + ')'\n            });\n\n            // Update Point Appearance [shape, size]\n            points.filter(function (d) {\n                // getDiffs must always be called to update cache\n                return getDiffs(d, 'shape', getShape, 'size', getSize) ||\n                    scaleDiff || sizeDiff || domainDiff;\n            })\n            .watchTransition(renderWatch, 'scatter points')\n            .attr('d', nv.utils.symbol()\n                .type(function (d) { return getShape(d[0]) })\n                .size(function (d) { return z(getSize(d[0], d[1])) })\n            );\n\n            // add label a label to scatter chart\n            if(showLabels)\n            {\n                var titles =  groups.selectAll('.nv-label')\n                    .data(function(d) {\n                        return d.values.map(\n                            function (point, pointIndex) {\n                                return [point, pointIndex]\n                            }).filter(\n                                function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[0], pointIndex)\n                                })\n                        });\n\n                titles.enter().append('text')\n                    .style('fill', function (d,i) {\n                        return d.color })\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 1)\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + Math.sqrt(z(getSize(d[0],d[1]))/Math.PI) + 2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')';\n                    })\n                    .text(function(d,i){\n                        return d[0].label;});\n\n                titles.exit().remove();\n                groups.exit().selectAll('path.nv-label')\n                    .watchTransition(renderWatch, 'scatter exit')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')';\n                    })\n                    .remove();\n               titles.each(function(d) {\n                  d3.select(this)\n                    .classed('nv-label', true)\n                    .classed('nv-label-' + d[1], false)\n                    .classed('hover',false);\n                });\n                titles.watchTransition(renderWatch, 'scatter labels')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                    });\n            }\n\n            // Delay updating the invisible interactive layer for smoother animation\n            if( interactiveUpdateDelay )\n            {\n                clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n                timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay );\n            }\n            else\n            {\n                updateInteractiveLayer();\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n            z0 = z.copy();\n\n            width0 = width;\n            height0 = height;\n\n        });\n        renderWatch.renderEnd('scatter immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // utility function calls provided by this chart\n    chart._calls = new function() {\n        this.clearHighlights = function () {\n            nv.dom.write(function() {\n                container.selectAll(\".nv-point.hover\").classed(\"hover\", false);\n            });\n            return null;\n        };\n        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {\n            nv.dom.write(function() {\n                container.select('.nv-groups')\n                  .selectAll(\".nv-series-\" + seriesIndex)\n                  .selectAll(\".nv-point-\" + pointIndex)\n                  .classed(\"hover\", isHoverOver);\n            });\n        };\n    };\n\n    // trigger calls from events too\n    dispatch.on('elementMouseover.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);\n    });\n\n    dispatch.on('elementMouseout.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);\n    });\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:        {get: function(){return width;}, set: function(_){width=_;}},\n        height:       {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:       {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:       {get: function(){return y;}, set: function(_){y=_;}},\n        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},\n        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},\n        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},\n        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},\n        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},\n        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},\n        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},\n        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},\n        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},\n        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        interactiveUpdateDelay: {get:function(){return interactiveUpdateDelay;}, set: function(_){interactiveUpdateDelay=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){ showLabels = _;}},\n        pointBorderColor: {get: function(){return pointBorderColor;}, set: function(_){pointBorderColor=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},\n        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi = _;\n            if (useVoronoi === false) {\n                clipVoronoi = false;\n            }\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.scatterChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var scatter      = nv.models.scatter()\n        , xAxis        = nv.models.axis()\n        , yAxis        = nv.models.axis()\n        , legend       = nv.models.legend()\n        , distX        = nv.models.distribution()\n        , distY        = nv.models.distribution()\n        , tooltip      = nv.models.tooltip()\n        ;\n\n    var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n        , marginTop = null\n        , width        = null\n        , height       = null\n        , container    = null\n        , color        = nv.utils.defaultColor()\n        , x            = scatter.xScale()\n        , y            = scatter.yScale()\n        , showDistX    = false\n        , showDistY    = false\n        , showLegend   = true\n        , showXAxis    = true\n        , showYAxis    = true\n        , rightAlignYAxis = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , noData       = null\n        , duration = 250\n        , showLabels    = false\n        ;\n\n    scatter.xScale(x).yScale(y);\n    xAxis.orient('bottom').tickPadding(10);\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickPadding(10)\n    ;\n    distX.axis('x');\n    distY.axis('y');\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0\n        , renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        if (showDistX) renderWatch.models(distX);\n        if (showDistY) renderWatch.models(distY);\n\n        selection.each(function(data) {\n            var that = this;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                renderWatch.renderEnd('scatter immediate');\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            // background for pointer events\n            gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n            gEnter.append('g').attr('class', 'nv-distWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = availableWidth;\n                legend.width(legendWidth);\n\n                wrap.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, i);\n                    return d.color;\n                }).filter(function(d,i) { return !data[i].disabled }))\n                .showLabels(showLabels);\n\n            wrap.select('.nv-scatterWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n                .call(scatter);\n\n\n            wrap.select('.nv-regressionLinesWrap')\n                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\n            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n                .data(function (d) {\n                    return d;\n                });\n\n            regWrap.enter().append('g').attr('class', 'nv-regLines');\n\n            var regLine = regWrap.selectAll('.nv-regLine')\n                .data(function (d) {\n                    return [d]\n                });\n\n            regLine.enter()\n                .append('line').attr('class', 'nv-regLine')\n                .style('stroke-opacity', 0);\n\n            // don't add lines unless we have slope and intercept to use\n            regLine.filter(function(d) {\n                return d.intercept && d.slope;\n            })\n                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')\n                .attr('x1', x.range()[0])\n                .attr('x2', x.range()[1])\n                .attr('y1', function (d, i) {\n                    return y(x.domain()[0] * d.slope + d.intercept)\n                })\n                .attr('y2', function (d, i) {\n                    return y(x.domain()[1] * d.slope + d.intercept)\n                })\n                .style('stroke', function (d, i, j) {\n                    return color(d, j)\n                })\n                .style('stroke-opacity', function (d, i) {\n                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1\n                });\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight , 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            // Setup Distribution\n            if (showDistX) {\n                distX\n                    .getData(scatter.x())\n                    .scale(x)\n                    .width(availableWidth)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionX');\n                g.select('.nv-distributionX')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distX);\n            }\n\n            if (showDistY) {\n                distY\n                    .getData(scatter.y())\n                    .scale(y)\n                    .width(availableHeight)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionY');\n                g.select('.nv-distributionY')\n                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distY);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block\n            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {\n                tooltip.hidden(true);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', 0);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', distY.size());\n            });\n\n            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', evt.relativePos[1] - availableHeight);\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', evt.relativePos[0] + distX.size());\n                tooltip.data(evt).hidden(false);\n            });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('scatter with line immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.distX = distX;\n    chart.distY = distY;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        container:  {get: function(){return container;}, set: function(_){container=_;}},\n        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},\n        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            distX.color(color);\n            distY.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparkline = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , animate = true\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.getColor(['#000'])\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , showMinMaxPoints = true\n        , showCurrentPoint = true\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    \n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x   .domain(xDomain || d3.extent(data, getX ))\n                .range(xRange || [0, availableWidth]);\n\n            y   .domain(yDomain || d3.extent(data, getY ))\n                .range(yRange || [availableHeight, 0]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            var paths = wrap.selectAll('path')\n                .data(function(d) { return [d] });\n            paths.enter().append('path');\n            paths.exit().remove();\n            paths\n                .style('stroke', function(d,i) { return d.color || color(d, i) })\n                .attr('d', d3.svg.line()\n                    .x(function(d,i) { return x(getX(d,i)) })\n                    .y(function(d,i) { return y(getY(d,i)) })\n            );\n\n            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n            var points = wrap.selectAll('circle.nv-point')\n                .data(function(data) {\n                    var yValues = data.map(function(d, i) { return getY(d,i); });\n                    function pointIndex(index) {\n                        if (index != -1) {\n                            var result = data[index];\n                            result.pointIndex = index;\n                            return result;\n                        } else {\n                            return null;\n                        }\n                    }\n                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n                        currentPoint = pointIndex(yValues.length - 1);\n                    return [(showMinMaxPoints ? minPoint : null), (showMinMaxPoints ? maxPoint : null), (showCurrentPoint ? currentPoint : null)].filter(function (d) {return d != null;});\n                });\n            points.enter().append('circle');\n            points.exit().remove();\n            points\n                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n                .attr('r', 2)\n                .attr('class', function(d,i) {\n                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n                });\n        });\n        \n        renderWatch.renderEnd('sparkline immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:            {get: function(){return width;}, set: function(_){width=_;}},\n        height:           {get: function(){return height;}, set: function(_){height=_;}},\n        xDomain:          {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:          {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:           {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:           {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        xScale:           {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:           {get: function(){return y;}, set: function(_){y=_;}},\n        animate:          {get: function(){return animate;}, set: function(_){animate=_;}},\n        showMinMaxPoints: {get: function(){return showMinMaxPoints;}, set: function(_){showMinMaxPoints=_;}},\n        showCurrentPoint: {get: function(){return showCurrentPoint;}, set: function(_){showCurrentPoint=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparklinePlus = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sparkline = nv.models.sparkline();\n\n    var margin = {top: 15, right: 100, bottom: 10, left: 50}\n        , width = null\n        , height = null\n        , x\n        , y\n        , index = []\n        , paused = false\n        , xTickFormat = d3.format(',r')\n        , yTickFormat = d3.format(',.2f')\n        , showLastValue = true\n        , alignValue = true\n        , rightAlignValue = false\n        , noData = null\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n        \n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sparkline);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.call(chart); };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\n            // Setup Scales\n            x = sparkline.xScale();\n            y = sparkline.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-sparklineWrap');\n            gEnter.append('g').attr('class', 'nv-valueWrap');\n            gEnter.append('g').attr('class', 'nv-hoverArea');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            var sparklineWrap = g.select('.nv-sparklineWrap');\n\n            sparkline.width(availableWidth).height(availableHeight);\n            sparklineWrap.call(sparkline);\n\n            if (showLastValue) {\n                var valueWrap = g.select('.nv-valueWrap');\n                var value = valueWrap.selectAll('.nv-currentValue')\n                    .data([currentValue]);\n\n                value.enter().append('text').attr('class', 'nv-currentValue')\n                    .attr('dx', rightAlignValue ? -8 : 8)\n                    .attr('dy', '.9em')\n                    .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\n                value\n                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n                    .attr('y', alignValue ? function (d) {\n                        return y(d)\n                    } : 0)\n                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))\n                    .text(yTickFormat(currentValue));\n            }\n\n            gEnter.select('.nv-hoverArea').append('rect')\n                .on('mousemove', sparklineHover)\n                .on('click', function() { paused = !paused })\n                .on('mouseout', function() { index = []; updateValueLine(); });\n\n            g.select('.nv-hoverArea rect')\n                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n                .attr('width', availableWidth + margin.left + margin.right)\n                .attr('height', availableHeight + margin.top);\n\n            //index is currently global (within the chart), may or may not keep it that way\n            function updateValueLine() {\n                if (paused) return;\n\n                var hoverValue = g.selectAll('.nv-hoverValue').data(index);\n\n                var hoverEnter = hoverValue.enter()\n                    .append('g').attr('class', 'nv-hoverValue')\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0);\n\n                hoverValue.exit()\n                    .transition().duration(250)\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0)\n                    .remove();\n\n                hoverValue\n                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n                    .transition().duration(250)\n                    .style('stroke-opacity', 1)\n                    .style('fill-opacity', 1);\n\n                if (!index.length) return;\n\n                hoverEnter.append('line')\n                    .attr('x1', 0)\n                    .attr('y1', -margin.top)\n                    .attr('x2', 0)\n                    .attr('y2', availableHeight);\n\n                hoverEnter.append('text').attr('class', 'nv-xValue')\n                    .attr('x', -6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'end')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-xValue')\n                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\n                hoverEnter.append('text').attr('class', 'nv-yValue')\n                    .attr('x', 6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'start')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-yValue')\n                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n            }\n\n            function sparklineHover() {\n                if (paused) return;\n\n                var pos = d3.mouse(this)[0] - margin.left;\n\n                function getClosestIndex(data, x) {\n                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n                    var closestIndex = 0;\n                    for (var i = 0; i < data.length; i++){\n                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n                            distance = Math.abs(sparkline.x()(data[i], i) - x);\n                            closestIndex = i;\n                        }\n                    }\n                    return closestIndex;\n                }\n\n                index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n                updateValueLine();\n            }\n\n        });\n        renderWatch.renderEnd('sparklinePlus immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sparkline = sparkline;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:           {get: function(){return width;}, set: function(_){width=_;}},\n        height:          {get: function(){return height;}, set: function(_){height=_;}},\n        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},\n        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},\n        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},\n        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},\n        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},\n        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, sparkline);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedArea = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , color = nv.utils.defaultColor() // a function that computes the color\n        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n        , container = null\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , style = 'stack'\n        , offset = 'zero'\n        , order = 'default'\n        , interpolate = 'linear'  // controls the line interpolation\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , scatter = nv.models.scatter()\n        , duration = 250\n        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')\n        ;\n\n    scatter\n        .pointSize(2.2) // default size\n        .pointDomain([2.2, 2.2]) // all the same size by default\n    ;\n\n    /************************************\n     * offset:\n     *   'wiggle' (stream)\n     *   'zero' (stacked)\n     *   'expand' (normalize to 100%)\n     *   'silhouette' (simple centered)\n     *\n     * order:\n     *   'inside-out' (stream)\n     *   'default' (input order)\n     ************************************/\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            var dataRaw = data;\n            // Injecting point index into each point because d3.layout.stack().out does not give index\n            data.forEach(function(aseries, i) {\n                aseries.seriesIndex = i;\n                aseries.values = aseries.values.map(function(d, j) {\n                    d.index = j;\n                    d.seriesIndex = i;\n                    return d;\n                });\n            });\n\n            var dataFiltered = data.filter(function(series) {\n                return !series.disabled;\n            });\n\n            data = d3.layout.stack()\n                .order(order)\n                .offset(offset)\n                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n                .x(getX)\n                .y(getY)\n                .out(function(d, y0, y) {\n                    d.display = {\n                        y: y,\n                        y0: y0\n                    };\n                })\n            (dataFiltered);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-areaWrap');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            \n            // If the user has not specified forceY, make sure 0 is included in the domain\n            // Otherwise, use user-specified values for forceY\n            if (scatter.forceY().length == 0) {\n                scatter.forceY().push(0);\n            }\n            \n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .x(getX)\n                .y(function(d) {\n                    if (d.display !== undefined) { return d.display.y + d.display.y0; }\n                })\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, d.seriesIndex);\n                    return d.color;\n                }));\n\n            var scatterWrap = g.select('.nv-scatterWrap')\n                .datum(data);\n\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var area = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) {\n                    return y(d.display.y0)\n                })\n                .y1(function(d) {\n                    return y(d.display.y + d.display.y0)\n                })\n                .interpolate(interpolate);\n\n            var zeroArea = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) { return y(d.display.y0) })\n                .y1(function(d) { return y(d.display.y0) });\n\n            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n                .data(function(d) { return d });\n\n            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n                .attr('d', function(d,i){\n                    return zeroArea(d.values, d.seriesIndex);\n                })\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.areaMouseover({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaMouseout({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('click', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaClick({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                });\n\n            path.exit().remove();\n            path.style('fill', function(d,i){\n                    return d.color || color(d, d.seriesIndex)\n                })\n                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n            path.watchTransition(renderWatch,'stackedArea path')\n                .attr('d', function(d,i) {\n                    return area(d.values,i)\n                });\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            scatter.dispatch.on('elementMouseover.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n            });\n            scatter.dispatch.on('elementMouseout.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n            });\n\n            //Special offset functions\n            chart.d3_stackedOffset_stackPercent = function(stackData) {\n                var n = stackData.length,    //How many series\n                    m = stackData[0].length,     //how many points per series\n                    i,\n                    j,\n                    o,\n                    y0 = [];\n\n                for (j = 0; j < m; ++j) { //Looping through all points\n                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series\n                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.\n                    }\n\n                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0\n                        stackData[i][j][1] /= o;\n                    } else { //(total y value of all series at point in time i) == 0\n                        for (i = 0; i < n; i++) {\n                            stackData[i][j][1] = 0;\n                        }\n                    }\n                }\n                for (j = 0; j < m; ++j) y0[j] = 0;\n                return y0;\n            };\n\n        });\n\n        renderWatch.renderEnd('stackedArea immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.interpolate = function(_) {\n        if (!arguments.length) return interpolate;\n        interpolate = _;\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        scatter.duration(duration);\n        return chart;\n    };\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},\n        order:    {get: function(){return order;}, set: function(_){order=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        style: {get: function(){return style;}, set: function(_){\n            style = _;\n            switch (style) {\n                case 'stack':\n                    chart.offset('zero');\n                    chart.order('default');\n                    break;\n                case 'stream':\n                    chart.offset('wiggle');\n                    chart.order('inside-out');\n                    break;\n                case 'stream-center':\n                    chart.offset('silhouette');\n                    chart.order('inside-out');\n                    break;\n                case 'expand':\n                    chart.offset('expand');\n                    chart.order('default');\n                    break;\n                case 'stack_percent':\n                    chart.offset(chart.d3_stackedOffset_stackPercent);\n                    chart.order('default');\n                    break;\n            }\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var stacked = nv.models.stackedArea()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.stackedArea())\n        ;\n\n    var margin = {top: 10, right: 25, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , focusEnable = false\n        , useInteractiveGuideline = false\n        , showTotalInTooltip = true\n        , totalLabel = 'TOTAL'\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = 250\n        , controlOptions = ['Stacked','Stream','Expanded']\n        , controlLabels = {}\n        , duration = 250\n        ;\n\n    state.style = stacked.style();\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        });\n\n    var oldYTickFormat = null,\n        oldValueFormatter = null;\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var style = stacked.style();\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                style: stacked.style()\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.style !== undefined)\n                style = state.style;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var percentFormatter = d3.format('%');\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(stacked);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\n            chart.update = function() { container.transition().duration(duration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n            // Setup Scales\n            x = stacked.xScale();\n            y = stacked.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-stackedWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            // g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = (showControls && legendPosition === 'top') ? availableWidth - controlWidth : availableWidth;\n\n                legend.width(legendWidth);\n                g.select('.nv-legendWrap').datum(data).call(legend);\n\n                if (legendPosition === 'bottom') {\n                \t// constant from axis.js, plus some margin for better layout\n                \tvar xAxisHeight = (showXAxis ? 12 : 0) + 10;\n                   \tmargin.bottom = Math.max(legend.height() + xAxisHeight, margin.bottom);\n                   \tavailableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                \tvar legendTop = availableHeight + xAxisHeight;\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + legendTop +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && margin.top != legend.height()) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    g.select('.nv-legendWrap')\n                    \t.attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n                }\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    {\n                        key: controlLabels.stacked || 'Stacked',\n                        metaKey: 'Stacked',\n                        disabled: stacked.style() != 'stack',\n                        style: 'stack'\n                    },\n                    {\n                        key: controlLabels.stream || 'Stream',\n                        metaKey: 'Stream',\n                        disabled: stacked.style() != 'stream',\n                        style: 'stream'\n                    },\n                    {\n                        key: controlLabels.expanded || 'Expanded',\n                        metaKey: 'Expanded',\n                        disabled: stacked.style() != 'expand',\n                        style: 'expand'\n                    },\n                    {\n                        key: controlLabels.stack_percent || 'Stack %',\n                        metaKey: 'Stack_Percent',\n                        disabled: stacked.style() != 'stack_percent',\n                        style: 'stack_percent'\n                    }\n                ];\n\n                controlWidth = (controlOptions.length/3) * 260;\n                controlsData = controlsData.filter(function(d) {\n                    return controlOptions.indexOf(d.metaKey) !== -1;\n                });\n\n                controls\n                    .width( controlWidth )\n                    .color(['#444', '#444', '#444']);\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .call(controls);\n\n                var requiredTop = Math.max(controls.height(), showLegend && (legendPosition === 'top') ? legend.height() : 0);\n\n                if ( margin.top != requiredTop ) {\n                    margin.top = requiredTop;\n                    availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                }\n\n                g.select('.nv-controlsWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left: margin.left, top: margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            stacked\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                var ticks;\n                if (stacked.offset() === 'wiggle') {\n                    ticks = 0;\n                }\n                else {\n                    ticks = nv.utils.calcTicksY(availableHeight/36, data);\n                }\n                yAxis.scale(y)\n                    ._ticks(ticks)\n                    .tickSize(-availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n                if(showXAxis) {\n                    g.select('.nv-focus .nv-x.nv-axis')\n                        .attr('transform', 'translate(0,' + availableHeight + ')')\n                        .transition()\n                        .duration(duration)\n                        .call(xAxis)\n                        ;\n                }\n            }\n\n            function updateYAxis() {\n                if(showYAxis) {\n                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                        var currentFormat = yAxis.tickFormat();\n\n                        if ( !oldYTickFormat || currentFormat !== percentFormatter )\n                            oldYTickFormat = currentFormat;\n\n                        //Forces the yAxis to use percentage in 'expand' mode.\n                        yAxis.tickFormat(percentFormatter);\n                    }\n                    else {\n                        if (oldYTickFormat) {\n                            yAxis.tickFormat(oldYTickFormat);\n                            oldYTickFormat = null;\n                        }\n                    }\n\n                    g.select('.nv-focus .nv-y.nv-axis')\n                    .transition().duration(0)\n                    .call(yAxis);\n                }\n            }\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                stackedWrap.transition().call(stacked);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            stacked.dispatch.on('areaClick.toggle', function(e) {\n                if (data.filter(function(d) { return !d.disabled }).length === 1)\n                    data.forEach(function(d) {\n                        d.disabled = false;\n                    });\n                else\n                    data.forEach(function(d,i) {\n                        d.disabled = (i != e.seriesIndex);\n                    });\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                stacked.style(d.style);\n\n\n                state.style = stacked.style();\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                stacked.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0, allNullValues = true, atleastOnePoint = false;\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        var point = series.values[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue != null && pointYValue > 0) {\n                            stacked.highlightPoint(i, pointIndex, true);\n                            atleastOnePoint = true;\n                        }\n                    \n                        // Draw at least one point if all values are zero.\n                        if (i === (data.length - 1) && !atleastOnePoint) {\n                            stacked.highlightPoint(i, pointIndex, true);\n                        }\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\n                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n                        allData.push({\n                            key: series.key,\n                            value: tooltipValue,\n                            color: color(series,series.seriesIndex),\n                            point: point\n                        });\n\n                        if (showTotalInTooltip && stacked.style() != 'expand' && tooltipValue != null) {\n                          valueSum += tooltipValue;\n                          allNullValues = false;\n                        };\n                    });\n\n                allData.reverse();\n\n                //Highlight the tooltip entry based on which stack the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var yDistMax = Infinity, indexToHighlight = null;\n                    allData.forEach(function(series,i) {\n\n                        //To handle situation where the stacked area chart is negative, we need to use absolute values\n                        //when checking if the mouse Y value is within the stack area.\n                        yValue = Math.abs(yValue);\n                        var stackedY0 = Math.abs(series.point.display.y0);\n                        var stackedY = Math.abs(series.point.display.y);\n                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n                        {\n                            indexToHighlight = i;\n                            return;\n                        }\n                    });\n                    if (indexToHighlight != null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.\n                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2 && !allNullValues) {\n                    allData.push({\n                        key: totalLabel,\n                        value: valueSum,\n                        total: true\n                    });\n                }\n\n                var xValue = chart.x()(singlePoint,pointIndex);\n\n                var valueFormatter = interactiveLayer.tooltip.valueFormatter();\n                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view\n                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                    if ( !oldValueFormatter ) {\n                        oldValueFormatter = valueFormatter;\n                    }\n                    //Forces the tooltip to use percentage in 'expand' mode.\n                    valueFormatter = d3.format(\".1%\");\n                }\n                else {\n                    if (oldValueFormatter) {\n                        valueFormatter = oldValueFormatter;\n                        oldValueFormatter = null;\n                    }\n                }\n\n                interactiveLayer.tooltip\n                    .valueFormatter(valueFormatter)\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                stacked.clearHighlights();\n            });\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.style !== 'undefined') {\n                    stacked.style(e.style);\n                    style = e.style;\n                }\n\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return stacked.x()(d,i) >= extent[0] && stacked.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                stackedWrap.transition().duration(duration).call(stacked);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n\n        });\n\n        renderWatch.renderEnd('stacked Area chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.point['x'] = stacked.x()(evt.point);\n        evt.point['y'] = stacked.y()(evt.point);\n        tooltip.data(evt).hidden(false);\n    });\n\n    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.stacked = stacked;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis;\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.focus = focus;\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},\n        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},\n        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            focus.margin.top    = _.top    !== undefined ? _.top    : focus.margin.top;\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            stacked.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            stacked.color(color);\n            focus.color(color);\n        }},\n        x: {get: function(){return stacked.x();}, set: function(_){\n            stacked.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return stacked.y();}, set: function(_){\n            stacked.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = !!_;\n            chart.interactive(!_);\n            chart.useVoronoi(!_);\n            stacked.scatter.interactive(!_);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, stacked);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaWithFocusChart = function() {\n  return nv.models.stackedAreaChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\n// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad\nnv.models.sunburst = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 600\n        , height = 600\n        , mode = \"count\"\n        , modes = {count: function(d) { return 1; }, value: function(d) { return d.value || d.size }, size: function(d) { return d.value || d.size }}\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , showLabels = false\n        , labelFormat = function(d){if(mode === 'count'){return d.name + ' #' + d.value}else{return d.name + ' ' + (d.value || d.size)}}\n        , labelThreshold = 0.02\n        , sort = function(d1, d2){return d1.name > d2.name;}\n        , key = function(d,i){\n            if (d.parent !== undefined) {\n                return d.name + '-' + d.parent.name + '-' + i;\n            } else {\n                return d.name;\n            }\n        }\n        , groupColorByParent = true\n        , duration = 500\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd');\n\n    //============================================================\n    // aux functions and setup\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear().range([0, 2 * Math.PI]);\n    var y = d3.scale.sqrt();\n\n    var partition = d3.layout.partition().sort(sort);\n\n    var node, availableWidth, availableHeight, radius;\n    var prevPositions = {};\n\n    var arc = d3.svg.arc()\n        .startAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x))) })\n        .endAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))) })\n        .innerRadius(function(d) {return Math.max(0, y(d.y)) })\n        .outerRadius(function(d) {return Math.max(0, y(d.y + d.dy)) });\n\n    function rotationToAvoidUpsideDown(d) {\n        var centerAngle = computeCenterAngle(d);\n        if(centerAngle > 90){\n            return 180;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    function computeCenterAngle(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        var centerAngle = (((startAngle + endAngle) / 2) * (180 / Math.PI)) - 90;\n        return centerAngle;\n    }\n\n    function computeNodePercentage(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        return (endAngle - startAngle) / (2 * Math.PI);\n    }\n\n    function labelThresholdMatched(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n\n        var size = endAngle - startAngle;\n        return size > labelThreshold;\n    }\n\n    // When zooming: interpolate the scales.\n    function arcTweenZoom(e,i) {\n        var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]),\n        yd = d3.interpolate(y.domain(), [node.y, 1]),\n        yr = d3.interpolate(y.range(), [node.y ? 20 : 0, radius]);\n\n        if (i === 0) {\n            return function() {return arc(e);}\n        }\n        else {\n            return function (t) {\n                x.domain(xd(t));\n                y.domain(yd(t)).range(yr(t));\n                return arc(e);\n            }\n        };\n    }\n\n    function arcTweenUpdate(d) {\n        var ipo = d3.interpolate({x: d.x0, dx: d.dx0, y: d.y0, dy: d.dy0}, d);\n\n        return function (t) {\n            var b = ipo(t);\n\n            d.x0 = b.x;\n            d.dx0 = b.dx;\n            d.y0 = b.y;\n            d.dy0 = b.dy;\n\n            return arc(b);\n        };\n    }\n\n    function updatePrevPosition(node) {\n        var k = key(node);\n        if(! prevPositions[k]) prevPositions[k] = {};\n        var pP = prevPositions[k];\n        pP.dx = node.dx;\n        pP.x = node.x;\n        pP.dy = node.dy;\n        pP.y = node.y;\n    }\n\n    function storeRetrievePrevPositions(nodes) {\n        nodes.forEach(function(n){\n            var k = key(n);\n            var pP = prevPositions[k];\n            //console.log(k,n,pP);\n            if( pP ){\n                n.dx0 = pP.dx;\n                n.x0 = pP.x;\n                n.dy0 = pP.dy;\n                n.y0 = pP.y;\n            }\n            else {\n                n.dx0 = n.dx;\n                n.x0 = n.x;\n                n.dy0 = n.dy;\n                n.y0 = n.y;\n            }\n            updatePrevPosition(n);\n        });\n    }\n\n    function zoomClick(d) {\n        var labels = container.selectAll('text')\n        var path = container.selectAll('path')\n\n        // fade out all text elements\n        labels.transition().attr(\"opacity\",0);\n\n        // to allow reference to the new center node\n        node = d;\n\n        path.transition()\n            .duration(duration)\n            .attrTween(\"d\", arcTweenZoom)\n            .each('end', function(e) {\n                // partially taken from here: http://bl.ocks.org/metmajer/5480307\n                // check if the animated element's data e lies within the visible angle span given in d\n                if(e.x >= d.x && e.x < (d.x + d.dx) ){\n                    if(e.depth >= d.depth){\n                        // get a selection of the associated text element\n                        var parentNode = d3.select(this.parentNode);\n                        var arcText = parentNode.select('text');\n\n                        // fade in the text element and recalculate positions\n                        arcText.transition().duration(duration)\n                        .text( function(e){return labelFormat(e) })\n                        .attr(\"opacity\", function(d){\n                            if(labelThresholdMatched(d)) {\n                                return 1;\n                            }\n                            else {\n                                return 0;\n                            }\n                        })\n                        .attr(\"transform\", function() {\n                            var width = this.getBBox().width;\n                            if(e.depth === 0)\n                            return \"translate(\" + (width / 2 * - 1) + \",0)\";\n                            else if(e.depth === d.depth){\n                                return \"translate(\" + (y(e.y) + 5) + \",0)\";\n                            }\n                            else {\n                                var centerAngle = computeCenterAngle(e);\n                                var rotation = rotationToAvoidUpsideDown(e);\n                                if (rotation === 0) {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + 5) + ',0)';\n                                }\n                                else {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                                }\n                            }\n                        });\n                    }\n                }\n            })\n    }\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n            container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n            radius = Math.min(availableWidth, availableHeight) / 2;\n\n            y.range([0, radius]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.select('g.nvd3.nv-wrap.nv-sunburst');\n            if( !wrap[0][0] ) {\n                wrap = container.append('g')\n                    .attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id)\n                    .attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            } else {\n                wrap.attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            }\n\n            container.on('click', function (d, i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            partition.value(modes[mode] || modes[\"count\"]);\n\n            //reverse the drawing order so that the labels of inner\n            //arcs are drawn on top of the outer arcs.\n            var nodes = partition.nodes(data[0]).reverse()\n\n            storeRetrievePrevPositions(nodes);\n            var cG = wrap.selectAll('.arc-container').data(nodes, key)\n\n            //handle new datapoints\n            var cGE = cG.enter()\n                .append(\"g\")\n                .attr(\"class\",'arc-container')\n\n            cGE.append(\"path\")\n                .attr(\"d\", arc)\n                .style(\"fill\", function (d) {\n                    if (d.color) {\n                        return d.color;\n                    }\n                    else if (groupColorByParent) {\n                        return color((d.children ? d : d.parent).name);\n                    }\n                    else {\n                        return color(d.name);\n                    }\n                })\n                .style(\"stroke\", \"#FFF\")\n                .on(\"click\", function(d,i){\n                    zoomClick(d);\n                    dispatch.elementClick({\n                        data: d,\n                        index: i\n                    })\n                })\n                .on('mouseover', function(d,i){\n                    d3.select(this).classed('hover', true).style('opacity', 0.8);\n                    dispatch.elementMouseover({\n                        data: d,\n                        color: d3.select(this).style(\"fill\"),\n                        percent: computeNodePercentage(d)\n                    });\n                })\n                .on('mouseout', function(d,i){\n                    d3.select(this).classed('hover', false).style('opacity', 1);\n                    dispatch.elementMouseout({\n                        data: d\n                    });\n                })\n                .on('mousemove', function(d,i){\n                    dispatch.elementMousemove({\n                        data: d\n                    });\n                });\n\n            ///Iterating via each and selecting based on the this\n            ///makes it work ... a cG.selectAll('path') doesn't.\n            ///Without iteration the data (in the element) didn't update.\n            cG.each(function(d){\n                d3.select(this).select('path')\n                    .transition()\n                    .duration(duration)\n                    .attrTween('d', arcTweenUpdate);\n            });\n\n            if(showLabels){\n                //remove labels first and add them back\n                cG.selectAll('text').remove();\n\n                //this way labels are on top of newly added arcs\n                cG.append('text')\n                    .text( function(e){ return labelFormat(e)})\n                    .transition()\n                    .duration(duration)\n                    .attr(\"opacity\", function(d){\n                        if(labelThresholdMatched(d)) {\n                            return 1;\n                        }\n                        else {\n                            return 0;\n                        }\n                    })\n                    .attr(\"transform\", function(d) {\n                        var width = this.getBBox().width;\n                        if(d.depth === 0){\n                            return \"rotate(0)translate(\" + (width / 2 * -1) + \",0)\";\n                        }\n                        else {\n                            var centerAngle = computeCenterAngle(d);\n                            var rotation = rotationToAvoidUpsideDown(d);\n                            if (rotation === 0) {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + 5) + ',0)';\n                            }\n                            else {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                            }\n                        }\n                    });\n            }\n\n            //zoom out to the center when the data is updated.\n            zoomClick(nodes[nodes.length - 1])\n\n\n            //remove unmatched elements ...\n            cG.exit()\n                .transition()\n                .duration(duration)\n                .attr('opacity',0)\n                .each('end',function(d){\n                    var k = key(d);\n                    prevPositions[k] = undefined;\n                })\n                .remove();\n        });\n\n\n        renderWatch.renderEnd('sunburst immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        groupColorByParent: {get: function(){return groupColorByParent;}, set: function(_){groupColorByParent=!!_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=!!_}},\n        labelFormat: {get: function(){return labelFormat;}, set: function(_){labelFormat=_}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_}},\n        sort: {get: function(){return sort;}, set: function(_){sort=_}},\n        key: {get: function(){return key;}, set: function(_){key=_}},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sunburstChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sunburst = nv.models.sunburst();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showTooltipPercent = false\n        , id = Math.round(Math.random() * 100000)\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd');\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d){return d;});\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sunburst);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin);\n            var availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0) {\n                    container.call(chart);\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = container;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            sunburst.width(availableWidth).height(availableHeight).margin(margin);\n            container.call(sunburst);\n        });\n\n        renderWatch.renderEnd('sunburstChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.series = {\n            key: evt.data.name,\n            value: (evt.data.value || evt.data.size),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sunburst = sunburst;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            sunburst.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            sunburst.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n            sunburst.margin(margin);\n        }}\n    });\n    nv.utils.inheritOptions(chart, sunburst);\n    nv.utils.initOptions(chart);\n    return chart;\n\n};\n\nnv.version = \"1.8.6\";\n})();\n//# sourceMappingURL=nv.d3.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/nvd3/build/nv.d3.js\n// module id = 765\n// module chunks = 0","!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e(require(\"react\"),require(\"d3\"),require(\"nvd3\")):\"function\"==typeof define&&define.amd?define([\"react\",\"d3\",\"nvd3\"],e):\"object\"==typeof exports?exports.NVD3Chart=e(require(\"react\"),require(\"d3\"),require(\"nvd3\")):t.NVD3Chart=e(t.React,t.d3,t.nv)}(this,function(t,e,n){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p=\"\",e(0)}([function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),i=r(o),u=n(2),c=r(u),s=n(17),a=r(s),f=n(21),p=r(f),l=n(22),d=r(l),h=n(25),y=r(h),v=n(48),b=r(v),g=n(55),m=r(g),_=n(56),x=r(_),O=n(57),j=r(O),w=n(58),S=[\"x\",\"y\",\"type\",\"datum\",\"configure\"],P=[\"width\",\"height\"],E=\"margin\",M=\"containerStyle\",k=\"renderStart\",C=\"renderEnd\",D=\"ready\",F=function(t){function e(){return(0,p[\"default\"])(this,e),(0,y[\"default\"])(this,(0,a[\"default\"])(e).apply(this,arguments))}return(0,b[\"default\"])(e,t),(0,d[\"default\"])(e,[{key:\"componentDidMount\",value:function(){var t=this;j[\"default\"].addGraph(this.renderChart.bind(this),function(e){(0,w.isCallable)(t.props.ready)&&t.props.ready(e,D)})}},{key:\"componentDidUpdate\",value:function(){this.renderChart()}},{key:\"componentWillUnmount\",value:function(){this.resizeHandler&&this.resizeHandler.clear()}},{key:\"renderChart\",value:function(){var t=void 0;switch(this.chart=this.chart&&!this.rendering?this.chart:j[\"default\"].models[this.props.type](),(0,w.isCallable)(this.props.renderStart)&&this.props.renderStart(this.chart,k),this.parsedProps=(0,w.bindFunctions)(this.props,this.props.context),this.chart.x&&this.chart.x((0,w.getValueFunction)(this.parsedProps.x,\"x\")),this.chart.y&&this.chart.y((0,w.getValueFunction)(this.parsedProps.y,\"y\")),this.props.margin&&this.chart.margin(this.options(E,w.pick).margin||(0,w.propsByPrefix)(\"margin\",this.props)||{}),this.configureComponents(this.chart,this.options(S.concat(M),w.without)),!this.props.configure||this.props.configure(this.chart),this.selection=x[\"default\"].select(this.refs.svg).datum(this.props.datum).call(this.chart),this.resizeHandler||(this.resizeHandler=j[\"default\"].utils.windowResize(this.chart.update)),this.props.type){case\"pieChart\":t=this.chart.pie.dispatch;break;case\"lineChart\":t=this.chart.lines.dispatch;break;default:t=this.chart.dispatch}return t.renderEnd&&t.on(\"renderEnd\",this.renderEnd.bind(this)),this.rendering=!0,this.chart}},{key:\"renderEnd\",value:function(t){(0,w.isCallable)(this.props.renderEnd)&&this.props.renderEnd(this.chart,C),this.rendering=!1}},{key:\"configureComponents\",value:function(t,e){for(var n in e){var r=e[n];t&&((0,w.isPlainObject)(r)?this.configureComponents(t[n],r):\"function\"==typeof t[n]&&t[n](r))}}},{key:\"options\",value:function(t,e){var n=this.parsedProps.options||this.parsedProps||this.props.chartOptions;return(e=e||w.pick)(n,t)}},{key:\"render\",value:function(){var t=(0,w.pick)(this.props,P),e=(0,c[\"default\"])({},t,this.props.containerStyle);return m[\"default\"].createElement(\"div\",{ref:\"root\",className:\"nv-chart\",style:e},m[\"default\"].createElement(\"svg\",(0,i[\"default\"])({ref:\"svg\"},t)))}}]),e}(m[\"default\"].Component);e[\"default\"]=F,t.exports=F},function(t,e,n){\"use strict\";var r=n(2)[\"default\"];e[\"default\"]=r||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(3),__esModule:!0}},function(t,e,n){n(4),t.exports=n(7).Object.assign},function(t,e,n){var r=n(5);r(r.S+r.F,\"Object\",{assign:n(10)})},function(t,e,n){var r=n(6),o=n(7),i=n(8),u=\"prototype\",c=function(t,e,n){var s,a,f,p=t&c.F,l=t&c.G,d=t&c.S,h=t&c.P,y=t&c.B,v=t&c.W,b=l?o:o[e]||(o[e]={}),g=l?r:d?r[e]:(r[e]||{})[u];l&&(n=e);for(s in n)a=!p&&g&&s in g,a&&s in b||(f=a?g[s]:n[s],b[s]=l&&\"function\"!=typeof g[s]?n[s]:y&&a?i(f,r):v&&g[s]==f?function(t){var e=function(e){return this instanceof t?new t(e):t(e)};return e[u]=t[u],e}(f):h&&\"function\"==typeof f?i(Function.call,f):f,h&&((b[u]||(b[u]={}))[s]=f))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,t.exports=c},function(t,e){var n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:\"1.2.6\"};\"number\"==typeof __e&&(__e=n)},function(t,e,n){var r=n(9);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,e,n){var r=n(11),o=n(12),i=n(14);t.exports=n(16)(function(){var t=Object.assign,e={},n={},r=Symbol(),o=\"abcdefghijklmnopqrst\";return e[r]=7,o.split(\"\").forEach(function(t){n[t]=t}),7!=t({},e)[r]||Object.keys(t({},n)).join(\"\")!=o})?function(t,e){for(var n=o(t),u=arguments,c=u.length,s=1,a=r.getKeys,f=r.getSymbols,p=r.isEnum;c>s;)for(var l,d=i(u[s++]),h=f?a(d).concat(f(d)):a(d),y=h.length,v=0;y>v;)p.call(d,l=h[v++])&&(n[l]=d[l]);return n}:Object.assign},function(t,e){var n=Object;t.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},function(t,e,n){var r=n(13);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,e,n){var r=n(15);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==r(t)?t.split(\"\"):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},function(t,e,n){t.exports={\"default\":n(18),__esModule:!0}},function(t,e,n){n(19),t.exports=n(7).Object.getPrototypeOf},function(t,e,n){var r=n(12);n(20)(\"getPrototypeOf\",function(t){return function(e){return t(r(e))}})},function(t,e,n){var r=n(5),o=n(7),i=n(16);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),\"Object\",u)}},function(t,e){\"use strict\";e[\"default\"]=function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")},e.__esModule=!0},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(23),i=r(o);e[\"default\"]=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,i[\"default\"])(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(24),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e,n){return r.setDesc(t,e,n)}},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(26),i=r(o);e[\"default\"]=function(t,e){if(!t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!e||\"object\"!==(\"undefined\"==typeof e?\"undefined\":(0,i[\"default\"])(e))&&\"function\"!=typeof e?t:e},e.__esModule=!0},function(t,e,n){\"use strict\";var r=n(27)[\"default\"];e[\"default\"]=function(t){return t&&t.constructor===r?\"symbol\":typeof t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(28),__esModule:!0}},function(t,e,n){n(29),n(47),t.exports=n(7).Symbol},function(t,e,n){\"use strict\";var r=n(11),o=n(6),i=n(30),u=n(31),c=n(5),s=n(32),a=n(16),f=n(35),p=n(36),l=n(38),d=n(37),h=n(39),y=n(41),v=n(42),b=n(43),g=n(44),m=n(40),_=n(34),x=r.getDesc,O=r.setDesc,j=r.create,w=y.get,S=o.Symbol,P=o.JSON,E=P&&P.stringify,M=!1,k=d(\"_hidden\"),C=r.isEnum,D=f(\"symbol-registry\"),F=f(\"symbols\"),N=\"function\"==typeof S,T=Object.prototype,q=u&&a(function(){return 7!=j(O({},\"a\",{get:function(){return O(this,\"a\",{value:7}).a}})).a})?function(t,e,n){var r=x(T,e);r&&delete T[e],O(t,e,n),r&&t!==T&&O(T,e,r)}:O,z=function(t){var e=F[t]=j(S.prototype);return e._k=t,u&&M&&q(T,t,{configurable:!0,set:function(e){i(this,k)&&i(this[k],t)&&(this[k][t]=!1),q(this,t,_(1,e))}}),e},A=function(t){return\"symbol\"==typeof t},V=function(t,e,n){return n&&i(F,e)?(n.enumerable?(i(t,k)&&t[k][e]&&(t[k][e]=!1),n=j(n,{enumerable:_(0,!1)})):(i(t,k)||O(t,k,_(1,{})),t[k][e]=!0),q(t,e,n)):O(t,e,n)},W=function(t,e){g(t);for(var n,r=v(e=m(e)),o=0,i=r.length;i>o;)V(t,n=r[o++],e[n]);return t},B=function(t,e){return void 0===e?j(t):W(j(t),e)},G=function(t){var e=C.call(this,t);return e||!i(this,t)||!i(F,t)||i(this,k)&&this[k][t]?e:!0},H=function(t,e){var n=x(t=m(t),e);return!n||!i(F,e)||i(t,k)&&t[k][e]||(n.enumerable=!0),n},I=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])||e==k||r.push(e);return r},J=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])&&r.push(F[e]);return r},K=function(t){if(void 0!==t&&!A(t)){for(var e,n,r=[t],o=1,i=arguments;i.length>o;)r.push(i[o++]);return e=r[1],\"function\"==typeof e&&(n=e),(n||!b(e))&&(e=function(t,e){return n&&(e=n.call(this,t,e)),A(e)?void 0:e}),r[1]=e,E.apply(P,r)}},R=a(function(){var t=S();return\"[null]\"!=E([t])||\"{}\"!=E({a:t})||\"{}\"!=E(Object(t))});N||(S=function(){if(A(this))throw TypeError(\"Symbol is not a constructor\");return z(l(arguments.length>0?arguments[0]:void 0))},s(S.prototype,\"toString\",function(){return this._k}),A=function(t){return t instanceof S},r.create=B,r.isEnum=G,r.getDesc=H,r.setDesc=V,r.setDescs=W,r.getNames=y.get=I,r.getSymbols=J,u&&!n(46)&&s(T,\"propertyIsEnumerable\",G,!0));var U={\"for\":function(t){return i(D,t+=\"\")?D[t]:D[t]=S(t)},keyFor:function(t){return h(D,t)},useSetter:function(){M=!0},useSimple:function(){M=!1}};r.each.call(\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),function(t){var e=d(t);U[t]=N?e:z(e)}),M=!0,c(c.G+c.W,{Symbol:S}),c(c.S,\"Symbol\",U),c(c.S+c.F*!N,\"Object\",{create:B,defineProperty:V,defineProperties:W,getOwnPropertyDescriptor:H,getOwnPropertyNames:I,getOwnPropertySymbols:J}),P&&c(c.S+c.F*(!N||R),\"JSON\",{stringify:K}),p(S,\"Symbol\"),p(Math,\"Math\",!0),p(o.JSON,\"JSON\",!0)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){t.exports=!n(16)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,e,n){t.exports=n(33)},function(t,e,n){var r=n(11),o=n(34);t.exports=n(31)?function(t,e,n){return r.setDesc(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(6),o=\"__core-js_shared__\",i=r[o]||(r[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,e,n){var r=n(11).setDesc,o=n(30),i=n(37)(\"toStringTag\");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(35)(\"wks\"),o=n(38),i=n(6).Symbol;t.exports=function(t){return r[t]||(r[t]=i&&i[t]||(i||o)(\"Symbol.\"+t))}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++n+r).toString(36))}},function(t,e,n){var r=n(11),o=n(40);t.exports=function(t,e){for(var n,i=o(t),u=r.getKeys(i),c=u.length,s=0;c>s;)if(i[n=u[s++]]===e)return n}},function(t,e,n){var r=n(14),o=n(13);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(40),o=n(11).getNames,i={}.toString,u=\"object\"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return o(t)}catch(e){return u.slice()}};t.exports.get=function(t){return u&&\"[object Window]\"==i.call(t)?c(t):o(r(t))}},function(t,e,n){var r=n(11);t.exports=function(t){var e=r.getKeys(t),n=r.getSymbols;if(n)for(var o,i=n(t),u=r.isEnum,c=0;i.length>c;)u.call(t,o=i[c++])&&e.push(o);return e}},function(t,e,n){var r=n(15);t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},function(t,e,n){var r=n(45);t.exports=function(t){if(!r(t))throw TypeError(t+\" is not an object!\");return t}},function(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,e){t.exports=!0},function(t,e){},function(t,e,n){\"use strict\";var r=n(49)[\"default\"],o=n(51)[\"default\"];e[\"default\"]=function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof e);t.prototype=r(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(o?o(t,e):t.__proto__=e)},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(50),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){t.exports={\"default\":n(52),__esModule:!0}},function(t,e,n){n(53),t.exports=n(7).Object.setPrototypeOf},function(t,e,n){var r=n(5);r(r.S,\"Object\",{setPrototypeOf:n(54).set})},function(t,e,n){var r=n(11).getDesc,o=n(45),i=n(44),u=function(t,e){if(i(t),!o(e)&&null!==e)throw TypeError(e+\": can't set as prototype!\")};t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(t,e,o){try{o=n(8)(Function.call,r(Object.prototype,\"__proto__\").set,2),o(t,[]),e=!(t instanceof Array)}catch(i){e=!0}return function(t,n){return u(t,n),e?t.__proto__=n:o(t,n),t}}({},!1):void 0),check:u}},function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}function o(t,e){return t.indexOf(e)>=0}function i(t){return function(){return!t.apply(this,arguments)}}function u(t,e,n){for(var r={},o=(0,m[\"default\"])(t),i=0,u=o.length;u>i;i++){var c=o[i],s=t[c];n(e,c)&&(r[c]=s)}return r}function c(t,e){return u(t,e,o)}function s(t,e){return u(t,e,i(o))}function a(t){if(\"object\"==(\"undefined\"==typeof t?\"undefined\":(0,b[\"default\"])(t))&&null!==t){if(\"function\"==typeof y[\"default\"]){var e=(0,y[\"default\"])(t);return e===Object.prototype||null===e}return\"[object Object]\"==Object.prototype.toString.call(t)}return!1}function f(t,e){var n,r,o;n=Array.isArray(t)?[]:{};for(o in t)r=t[o],null!=r&&(\"object\"===(\"undefined\"==typeof r?\"undefined\":(0,b[\"default\"])(r))&&null!==r&&\"function\"!==r.type?n[o]=f(r,e):\"function\"===r.type?n[o]=e[r.name]:n[o]=r);return n}function p(t,e){return\"function\"==typeof t?t:function(n){return\"undefined\"!=typeof n[t]?n[t]:n[e]}}function l(t,e){return console.warn(\"Set margin with prefixes is deprecated use an object instead\"),t+=\"-\",(0,m[\"default\"])(e).reduce(function(n,r){return r.substr(0,t.length)===t&&(n[r.replace(t,\"\")]=e[r]),n},{})}function d(t){return t&&\"function\"==typeof t}Object.defineProperty(e,\"__esModule\",{value:!0}),e.includes=o,e.negate=i,e.filterObject=u,e.pick=c,e.without=s,e.isPlainObject=a,e.bindFunctions=f,e.getValueFunction=p,e.propsByPrefix=l,e.isCallable=d;var h=n(17),y=r(h),v=n(26),b=r(v),g=n(59),m=r(g)},function(t,e,n){t.exports={\"default\":n(60),__esModule:!0}},function(t,e,n){n(61),t.exports=n(7).Object.keys},function(t,e,n){var r=n(12);n(20)(\"keys\",function(t){return function(e){return t(r(e))}})}])});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-nvd3/dist/react-nvd3.min.js\n// module id = 766\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js??ref--2-1!../../../../../node_modules/postcss-loader/lib/index.js!./nvd3Styles.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js??ref--2-1!../../../../../node_modules/postcss-loader/lib/index.js!./nvd3Styles.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js??ref--2-1!../../../../../node_modules/postcss-loader/lib/index.js!./nvd3Styles.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/components/Chart/ChartTypes/NVD3Adapter/nvd3Styles.css\n// module id = 767\n// module chunks = 0"],"sourceRoot":""}