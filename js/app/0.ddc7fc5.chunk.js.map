{"version":3,"sources":["webpack:///0.ddc7fc5.chunk.js","webpack:///./app/reducers/utils/applyYDomain.js","webpack:///./app/utils/dataFormats/getRangeDomain.js","webpack:///./app/components/Chart/ChartTypes ^\\.\\/.*\\/index$","webpack:///./app/components/Chart/ChartTypes/NVD3Adapter/index.js","webpack:///./~/nvd3/build/nv.d3.js","webpack:///./~/react-nvd3/dist/react-nvd3.min.js"],"names":["simplechartJsonp","277","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","shouldSetupYDomain","typeConfig","dataFormat","indexOf","modules","settings","applyYDomain","chartOptions","chartData","yDomain","hasOwnProperty","getNiceDomain","_getRangeDomain2","_immutabilityHelper2","$set","Object","defineProperty","value","_immutabilityHelper","_getRangeDomain","__REACT_HOT_LOADER__","register","278","_getSeriesDomain","series","format","key","values","map","point","_d","min","max","_getMultiSeriesDomain","mins","maxs","forEach","singleSeries","domain","push","_makeNice","range","scale","linear","nice","getRangeDomain","data","279","webpackContext","req","webpackContextResolve","id","Error","./NVD3Adapter/index","keys","resolve","689","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_extends","assign","target","i","arguments","length","source","_createClass","defineProperties","props","descriptor","protoProps","staticProps","_react","_react2","_propTypes","_propTypes2","_reactNvd","_reactNvd2","_cloneDeep","_cloneDeep2","_chartTypeUtils","_applyYDomain","_applyYDomain2","_applyTickFormatters","_applyTickFormatters2","NVD3Adapter","_Component","this","_this","getPrototypeOf","_mapToChartProps","bind","_props","options","widget","chartProps","datum","_dataTransform","type","ref","getChartTypeObject","config","defaultOpts","getChartTypeDefaultOpts","chartType","createElement","Math","random","Component","_default","propTypes","array","object","oneOfType","string","bool","690","nv","dev","tooltip","utils","models","charts","logs","dom","t","e","d3","dispatch","Function","oThis","aArgs","Array","slice","fToBind","fNOP","fBound","apply","concat","on","startTime","Date","endTime","totalTime","log","window","console","deprecated","name","info","warn","render","step","active","render_start","renderLoop","chart","graph","queue","generate","callback","splice","setTimeout","render_end","addGraph","write","fastdom","mutate","read","measure","interactiveGuideline","layer","selection","each","mouseHandler","d3mouse","mouse","mouseX","mouseY","subtractMargin","mouseOutAnyReason","isMSIE","event","offsetX","offsetY","tagName","className","baseVal","match","margin","left","top","availableWidth","availableHeight","relatedTarget","ownerSVGElement","nvPointerEventsClass","elementMouseout","renderGuideLine","hidden","scaleIsOrdinal","xScale","rangeBands","pointXValue","elementIndex","bisect","rangeBand","invert","elementMousemove","elementDblclick","elementClick","elementMouseDown","elementMouseUp","container","select","width","height","wrap","selectAll","enter","append","attr","svgContainer","guideLine","x","showGuideLine","line","NaNtoZero","String","d","exit","remove","ActiveXObject","duration","hideDelay","_","interactiveBisect","searchVal","xAccessor","_xAccessor","_cmp","v","bisector","index","currentValue","nextIndex","nextValue","abs","nearestValueIndex","threshold","yDistMax","Infinity","indexToHighlight","delta","initTooltip","node","document","body","classes","style","classed","nvtooltip","enabled","dataSeriesExists","newContent","contentGenerator","innerHTML","positionTooltip","floor","gravity","distance","snapDistance","lastPosition","headerEnabled","valueFormatter","headerFormatter","keyFormatter","table","html","tbodyEnter","trowEnter","p","highlight","color","total","filter","percent","opacityScale","outerHTML","footer","position","pos","clientX","clientY","getComputedStyle","transform","client","getBoundingClientRect","isArray","isObject","calcGravityOffset","tmp","offsetHeight","offsetWidth","clientWidth","documentElement","clientHeight","gravityOffset","interrupt","transition","delay","old_translate","new_translate","round","translateInterpolator","interpolateString","is_hidden","styleTween","optionsFunc","_options","get","set","chartContainer","fixedTop","offset","y","initOptions","windowSize","size","innerWidth","innerHeight","compatMode","a","isFunction","isDate","toString","isNumber","isNaN","windowResize","handler","addEventListener","clear","removeEventListener","getColor","defaultColor","color_scale","ordinal","category20","customTheme","dictionary","getKey","defaultColors","defIndex","pjax","links","content","load","href","fragment","parentNode","replaceChild","history","pushState","textContent","preventDefault","state","calcApproxTextWidth","svgTextElem","text","fontSize","parseInt","replace","textLength","n","watchTransition","renderWatch","args","_duration","renderStack","model","__rendered","m","arg","renderEnd","reset","pop","every","deepExtend","dst","srcObj","_setState","_getState","init","changed","getter","fn","setter","update","_set","JSON","stringify","change","calcTicksX","numTicks","numValues","stream_len","calcTicksY","initOption","_calls","_overrides","ops","getOwnPropertyNames","calls","inheritOptionsD3","d3_source","oplist","_d3options","unshift","rebind","arrayUnique","sort","item","symbolMap","symbol","s","svg","symbolTypes","functor","inheritOptions","inherited","_inherited","d3ops","initSVG","nvd3-svg","sanitizeHeight","sanitizeWidth","bottom","right","noData","opt","noDataText","wrapTicks","word","words","split","reverse","lineNumber","dy","parseFloat","tspan","join","getComputedTextLength","arrayEquals","array1","array2","l","axis","wrapEnter","g","ticks","orient","scale0","fmt","tickFormat","axisLabel","axisLabelText","xLabelMargin","axisMaxMin","w","isOrdinal","showMaxMin","tickPadding","axisLabelDistance","maxTextWidth","textHeight","xTicks","rotateLabelsRule","rotateLabels","box","sin","PI","staggerLabels","rotateYLabel","maxMinRange","err","copy","boxPlot","xDomain","getX","xRange","yData","yMin","yMax","q1","getQ1","q3","getQ3","wl","getWl","wh","getWh","olItems","getOlItems","getOlValue","yScale","yRange","xScale0","yScale0","boxplots","boxEnter","j","hover","f","box_width","maxBoxWidth","box_left","box_right","endpoint","elementMouseover","getQ2","outliers","getOlColor","getOlLabel","label","Q1","Q2","Q3","whisker_low","whisker_high","q2","itemColor","outlierValue","outlierLabel","outlierColor","boxPlotChart","boxplot","showXAxis","xAxis","showYAxis","yAxis","beforeUpdate","clamp","gEnter","defsEnter","rightAlignYAxis","disabled","tickSize","evt","tooltipContent","bullet","sortLabels","labels","lz","b","iA","iB","descending","rangez","ranges","markerz","markers","markerLinez","markerLines","measurez","measures","rangeLabelz","rangeLabels","markerLabelz","markerLabels","markerLineLabelz","markerLineLabels","measureLabelz","measureLabels","x1","extent","merge","forceX","__chart__","il","rangeClassNames","legacyRangeClassNames","xp1","h3","markerData","marker","markerLinesData","defaultRangeLabels","bulletChart","x0","title","subtitle","bulletWrap","tick","tickEnter","tickUpdate","timer","flush","candlestickBar","barWidth","padData","getLow","forceY","getHigh","chartClick","clipEdge","tickGroups","getOpen","getClose","getY","open","close","high","low","interactive","highlightPoint","pointIndex","isHoverOver","clearHighlights","cumulativeLineChart","lines","dragStart","dragMove","dx","updateZero","dragEnd","stateChange","indexLine","oldDuration","stateSetter","stateGetter","defaultState","indexDrag","behavior","drag","rescaleY","seriesDomains","initialDomain","completeDomain","indexify","interactivePointerEvents","showLegend","legend","marginTop","showControls","controlsData","controls","rightAlign","tempDisabled","useInteractiveGuideline","interactiveLayer","display","linesWrap","seriesIndex","avgLineData","average","avgLines","getAvgLineY","yVal","_ticks","newState","singlePoint","pointXLocation","allData","yValue","domainExtent","xValue","idx","indexifyYGetter","indexValue","noErrorCheck","updateState","useVoronoi","discreteBar","seriesData","y0","showValues","groups","bars","barsEnter","element","stopPropagation","elementDblClick","valueFormat","rectClass","discreteBarChart","discretebar","wrapLabels","distribution","naxis","distWrap","dist","getData","focus","resizePath","updateBrushBG","brush","empty","brushExtent","brushBG","leftWidth","rightWidth","onBrush","shouldDispatch","contentWrap","syncBrushing","brushBGenter","gBrush","pointActive","interpolate","xTickFormat","yTickFormat","forceDirectedGraph","nodes","nodeFieldSet","Set","add","force","layout","linkStrength","friction","linkDistance","linkDist","charge","theta","alpha","start","link","sqrt","radius","py","px","nodeColor","field","linkExtras","nodeExtras","furiousLegend","setTextColor","vers","expanded","disengaged","setBGColor","seriesShape","seriesEnter","property","seriesCheckbox","seriesText","legendMouseover","legendMouseout","legendClick","radioButtonMode","userDisabled","engaged","legendDblclick","versPadding","align","seriesWidths","legendText","maxKeyLength","trimmedKey","substring","nodeTextLength","padding","seriesPerRow","legendWidth","columnWidths","k","reduce","prev","cur","xPositions","curX","ceil","xpos","ypos","newxpos","maxwidth","historicalBar","rval","historicalBarChart","bar_model","transitionDuration","tooltipHide","ohlcBarChart","ohlcBar","candlestickBarChart","setBGOpacity","insert","scatter","scatterWrap","strokeWidth","fillOpacity","areaPaths","isArea","area","defined","y1","linePaths","pointSize","pointDomain","lineChart","updateXAxis","updateYAxis","disableTooltip","focusEnable","focusEnter","legendPosition","currentValues","pointYValue","defaultValueFormatter","yPos","x2Axis","y2Axis","focusHeight","focusShowAxisX","focusShowAxisY","focusMargin","lineWithFocusChart","linePlusBarChart","availableHeight2","x2","availableHeight1","bar","focusBarsWrap","dataBars","focusLinesWrap","allDisabled","dataLines","dataLine","switchYAxisOrder","y1Axis","y2","barsOpacity","linesOpacity","y1Opacity","y2Opacity","margin2","y3","lines2","bars2","y4","series1","series2","contextEnter","legendXPosition","originalKey","legendRightAxisHint","legendLeftAxisHint","bars2Wrap","lines2Wrap","y3Axis","y4Axis","getBarsAxis","main","getLinesAxis","multiBar","nonStackableCount","hideable","stacked","parsed","stack","stackOffset","nonStackable","nonStackableSeries","posBase","negBase","groupSpacing","exitTransition","last_datalength","barColor","rgb","darker","barSelection","multiBarChart","multibar","controlWidth","controlLabels","grouped","getTranslate","totalInBetweenTicks","reduceXTicks","multiBarHorizontal","valuePadding","getYerr","xerr","mid","path","yerr","showBarLabels","yErr","multiBarHorizontalChart","multiChart","mouseover_line","yaxis","yAxis2","yAxis1","mouseover_scatter","mouseover_stack","stack1","mouseover_bar","bars1","serieIndex","dataLines1","dataLines2","dataScatters1","dataScatters2","dataBars1","dataBars2","dataStack1","dataStack2","color_array","lines1","scatters1","scatters2","stack2","lines1Wrap","scatters1Wrap","bars1Wrap","stack1Wrap","scatters2Wrap","stack2Wrap","extraValue1","aVal","extraValue2","yScale1","yDomain1","yScale2","yDomain2","stackedArea","parallelCoordinates","enabledDimensions","displayMissingValuesline","axisWithUndefinedValues","newscale","missingValuesline","missingValueslineText","restoreBrush","visible","filters","brushDomain","dimension","hasOnlyNaN","oldDomainMaxValue","hasNaN","dimensions","updateTicks","brushstart","displayBrush","actives","dimensionNames","extents","foreground","isActive","brushend","hasActiveBrush","brushEnd","currentTicks","tickValues","dragging","__origin__","background","dimensionPosition","currentPosition","dimensionsOrder","newData","val","dataValues","dimensionData","rangePoints","onlyUndefinedValues","tension","lineTension","axisDrag","lineData","undefinedValuesLabel","dimensionsEnter","formerActive","activeChanged","dimensionFormats","parallelCoordinatesChart","originalPosition","isSorted","nanValue","str","tp","dim","dd","pie","arcTween","endAngle","startAngle","donut","innerRadius","_current","arcs","arcsRadiusOuter","arcsRadiusInner","arcsRadius","outer","inner","donutRatio","growOnHover","g_pie","arcsOver","arc","outerRadius","arcOver","cornerRadius","padAngle","titleOffset","slices","pieLabels","ae","attrTween","showLabels","labelsArc","labelsOutside","group","labelSunbeamLayout","rotateAngle","centroid","labelLocationHash","createHashKey","coordinates","getSlicePercentage","center","labelThreshold","hashKey","labelType","pieLabelsOutside","donutLabelsOutside","labelFormat","pieChart","pieWrap","showTooltipPercent","sankey","computeNodeLinks","sourceLinks","targetLinks","computeNodeValues","sum","computeNodeBreadths","nextNodes","remainingNodes","nodeWidth","sinksRight","moveSinksRight","scaleNodeBreadths","kx","computeNodeDepths","iterations","resolveCollisions","nodesByBreadth","ascendingDepth","nodePadding","nest","sortKeys","ascending","entries","ky","computeLinkDepths","weightedTarget","ty","weightedSource","sy","breadth","ascendingSourceDepth","ascendingTargetDepth","relayout","xi","interpolateNumber","curvature","x3","sankeyChart","dragmove","testData","isDataValid","dataAvailable","error","showError","linkTitle","origin","appendChild","nodeFillColor","nodeStrokeColor","nodeTitle","units","formatNumber","message","nodeStyle","fillColor","strokeColor","getCache","_cache","delCache","getDiffs","cache","diffs","updateInteractiveLayer","needsUpdate","vertices","groupIndex","pX","pY","pointArray","bounds","geom","polygon","voronoi","clip","pointPaths","vPointPaths","showVoronoi","clipVoronoi","clipRadius","mouseEventCallback","el","mDispatch","scrollTop","pageYOffset","scrollLeft","pageXOffset","relativePos","logScale","sizeDomain","getSize","padDataOuter","z","forceSize","sizeRange","_sizeRange_def","z0","scaleDiff","width0","height0","sizeDiff","pointBorderColor","points","getShape","titles","interactiveUpdateDelay","clearTimeout","timeoutID","shape","notActive","pointScale","pointRange","forcePoint","pointShape","scatterChart","showDistX","distX","showDistY","distY","regWrap","regLine","intercept","slope","sparkline","paths","result","yValues","maxPoint","lastIndexOf","minPoint","currentPoint","showMinMaxPoints","showCurrentPoint","animate","sparklinePlus","updateValueLine","paused","hoverValue","hoverEnter","sparklineHover","closestIndex","sparklineWrap","showLastValue","valueWrap","rightAlignValue","alignValue","dataRaw","aseries","dataFiltered","order","out","zeroArea","areaMouseover","pageX","pageY","areaMouseout","areaClick","d3_stackedOffset_stackPercent","stackData","o","stackedAreaChart","currentFormat","oldYTickFormat","percentFormatter","xAxisHeight","legendTop","metaKey","stream","stack_percent","controlOptions","requiredTop","stackedWrap","valueSum","allNullValues","tooltipValue","showTotalInTooltip","stackedY0","stackedY","totalLabel","oldValueFormatter","stackedAreaWithFocusChart","sunburst","rotationToAvoidUpsideDown","computeCenterAngle","computeNodePercentage","labelThresholdMatched","arcTweenZoom","xd","yd","yr","arcTweenUpdate","ipo","dx0","dy0","updatePrevPosition","prevPositions","pP","storeRetrievePrevPositions","zoomClick","depth","getBBox","centerAngle","rotation","partition","modes","mode","count","cG","groupColorByParent","children","parent","d1","d2","sunburstChart","version","691","r","loaded","c","u","h","O","S","P","F","renderChart","isCallable","ready","resizeHandler","rendering","renderStart","parsedProps","bindFunctions","context","getValueFunction","pick","propsByPrefix","configureComponents","without","configure","refs","isPlainObject","containerStyle","G","B","W","__g","__e","Symbol","getKeys","getSymbols","isEnum","getProto","propertyIsEnumerable","getDesc","getOwnPropertyDescriptor","setDesc","setDescs","getNames","getOwnPropertySymbols","E","M","C","D","N","T","q","_k","A","V","H","I","J","K","R","U","for","keyFor","useSetter","useSimple","check","substr","includes","negate","filterObject"],"mappings":"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","file":"0.ddc7fc5.chunk.js","sourcesContent":["simplechartJsonp([0],{\n\n/***/ 277:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldSetupYDomain = shouldSetupYDomain;\nexports.default = applyYDomain;\n\nvar _immutabilityHelper = __webpack_require__(9);\n\nvar _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);\n\nvar _getRangeDomain = __webpack_require__(278);\n\nvar _getRangeDomain2 = _interopRequireDefault(_getRangeDomain);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Need to setup yDomain for NVD3 chart that requires YAXis\n * @param {Object} typeConfig Chart type config\n * @return {Boolean}\n */\nfunction shouldSetupYDomain(typeConfig) {\n  return 0 === typeConfig.dataFormat.indexOf('nvd3') && -1 !== typeConfig.modules.settings.indexOf('YAxis');\n}\n\n/**\n * add nicely rounded yDomain to chart options, if chart has a yAxis\n * @param {Object} chartOptions\n * @param {Object} typeConfig\n * @param {Object[]}  chartData\n * @return {Object} Cloned chart options object with new yDomain\n */\nfunction applyYDomain(chartOptions, typeConfig, chartData) {\n  if (!shouldSetupYDomain(typeConfig)) {\n    return chartOptions;\n  }\n\n  var yDomain = void 0;\n  if (typeConfig.hasOwnProperty('getNiceDomain')) {\n    yDomain = typeConfig.getNiceDomain(typeConfig.dataFormat, chartData);\n  } else {\n    yDomain = (0, _getRangeDomain2.default)(typeConfig.dataFormat, chartData);\n  }\n\n  /**\n   * @todo Recalculate yDomain when series visibility is toggled by clicking on dots in the legend\n   */\n  return (0, _immutabilityHelper2.default)(chartOptions, { yDomain: { $set: yDomain } });\n}\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(shouldSetupYDomain, 'shouldSetupYDomain', '/Users/maxeddy/code/simplechart/app/reducers/utils/applyYDomain.js');\n\n  __REACT_HOT_LOADER__.register(applyYDomain, 'applyYDomain', '/Users/maxeddy/code/simplechart/app/reducers/utils/applyYDomain.js');\n}();\n\n;\n\n/***/ }),\n\n/***/ 278:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getRangeDomain;\n\nvar _d = __webpack_require__(95);\n\n/**\n * Get [min, max] array for data series in nvd3SingleSeries or nvd3MultiSeries format\n *\n * @param array series Data series\n * @param string format Data format\n * @return array Range of [min, max] for series\n */\nfunction _getSeriesDomain(series, format) {\n  var key = 'nvd3SingleSeries' === format ? 'value' : 'y';\n  var values = series.map(function (point) {\n    return point[key];\n  });\n  return [(0, _d.min)(values), (0, _d.max)(values)];\n}\n\nfunction _getMultiSeriesDomain(series, format) {\n  var mins = [];\n  var maxs = [];\n  series.forEach(function (singleSeries) {\n    var domain = _getSeriesDomain(singleSeries.values, format);\n    mins.push(domain[0]);\n    maxs.push(domain[1]);\n  });\n  return [(0, _d.min)(mins), (0, _d.max)(maxs)];\n}\n\nfunction _makeNice(range) {\n  return _d.scale.linear().domain(range).nice().domain();\n}\n\n/**\n * Get \"nice\" rounded domain from dataset\n *\n * @param {String} format Data format from chart config object\n * @param {Object[]} data Chart data transformed for data format\n * @return {Array} Domain array of [min, max] values\n */\nfunction getRangeDomain(format, data) {\n  var domain = 'nvd3SingleSeries' === format ? _getSeriesDomain(data, format) : _getMultiSeriesDomain(data, format);\n  return _makeNice(domain);\n}\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(_getSeriesDomain, '_getSeriesDomain', '/Users/maxeddy/code/simplechart/app/utils/dataFormats/getRangeDomain.js');\n\n  __REACT_HOT_LOADER__.register(_getMultiSeriesDomain, '_getMultiSeriesDomain', '/Users/maxeddy/code/simplechart/app/utils/dataFormats/getRangeDomain.js');\n\n  __REACT_HOT_LOADER__.register(_makeNice, '_makeNice', '/Users/maxeddy/code/simplechart/app/utils/dataFormats/getRangeDomain.js');\n\n  __REACT_HOT_LOADER__.register(getRangeDomain, 'getRangeDomain', '/Users/maxeddy/code/simplechart/app/utils/dataFormats/getRangeDomain.js');\n}();\n\n;\n\n/***/ }),\n\n/***/ 279:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar map = {\n\t\"./NVD3Adapter/index\": 689\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 279;\n\n/***/ }),\n\n/***/ 689:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(5);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactNvd = __webpack_require__(691);\n\nvar _reactNvd2 = _interopRequireDefault(_reactNvd);\n\nvar _immutabilityHelper = __webpack_require__(9);\n\nvar _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);\n\nvar _cloneDeep = __webpack_require__(163);\n\nvar _cloneDeep2 = _interopRequireDefault(_cloneDeep);\n\nvar _chartTypeUtils = __webpack_require__(31);\n\nvar _applyYDomain = __webpack_require__(277);\n\nvar _applyYDomain2 = _interopRequireDefault(_applyYDomain);\n\nvar _applyTickFormatters = __webpack_require__(65);\n\nvar _applyTickFormatters2 = _interopRequireDefault(_applyTickFormatters);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar NVD3Adapter = function (_Component) {\n  _inherits(NVD3Adapter, _Component);\n\n  function NVD3Adapter(props) {\n    _classCallCheck(this, NVD3Adapter);\n\n    var _this = _possibleConstructorReturn(this, (NVD3Adapter.__proto__ || Object.getPrototypeOf(NVD3Adapter)).call(this, props));\n\n    _this._mapToChartProps = _this._mapToChartProps.bind(_this);\n    return _this;\n  }\n\n  /**\n   * In editor, merge data into options and add a ref\n   * In widget, also recreate function-based options that can't be sent as JSON\n   */\n\n\n  _createClass(NVD3Adapter, [{\n    key: '_mapToChartProps',\n    value: function _mapToChartProps() {\n      var _props = this.props,\n          options = _props.options,\n          data = _props.data,\n          widget = _props.widget;\n\n      var chartProps = (0, _immutabilityHelper2.default)(options, {\n        datum: { $set: this._dataTransform(options.type, data) },\n        ref: { $set: 'chartNode' }\n      });\n\n      if (!widget) {\n        return chartProps;\n      }\n\n      // TODO: This isn't an ideal place for this logic, and it's also duplicated within middleware/reducers.\n      // Widgets need to recreate function-based options\n      var typeConfig = (0, _chartTypeUtils.getChartTypeObject)(options.type).config;\n      var defaultOpts = (0, _chartTypeUtils.getChartTypeDefaultOpts)(options.type);\n      chartProps = Object.assign({}, defaultOpts, chartProps, typeConfig);\n      chartProps = (0, _applyYDomain2.default)(chartProps, typeConfig, data);\n\n      return (0, _applyTickFormatters2.default)(chartProps, typeConfig);\n    }\n\n    /**\n     * Apply any special formatting specfic to a chart type\n     */\n\n  }, {\n    key: '_dataTransform',\n    value: function _dataTransform(chartType, data) {\n      switch (chartType) {\n        case 'discreteBarChart':\n          return [{\n            key: '',\n            values: data\n          }];\n\n        default:\n          return data;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // We clone the props, because nvd3 will mutate the datum that you pass to it.\n      var chartProps = (0, _cloneDeep2.default)(this._mapToChartProps());\n\n      // Key prop is for forcing re-render of the chart to avoid chart refresh issue when the chart type changes.\n      // https://github.com/NuCivic/react-nvd3/issues/59\n      return _react2.default.createElement(_reactNvd2.default, _extends({ key: Math.random() }, chartProps));\n    }\n  }]);\n\n  return NVD3Adapter;\n}(_react.Component);\n\nvar _default = NVD3Adapter;\nexports.default = _default;\n\n\nNVD3Adapter.propTypes = {\n  data: _propTypes2.default.array,\n  options: _propTypes2.default.object,\n  widget: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool])\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(NVD3Adapter, 'NVD3Adapter', '/Users/maxeddy/code/simplechart/app/components/Chart/ChartTypes/NVD3Adapter/index.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/Users/maxeddy/code/simplechart/app/components/Chart/ChartTypes/NVD3Adapter/index.js');\n}();\n\n;\n\n/***/ }),\n\n/***/ 690:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* nvd3 version 1.8.5 (https://github.com/novus/nvd3) 2016-12-01 */\n(function(){\n\n// set up main nv object\nvar nv = {};\n\n// the major global objects under the nv namespace\nnv.dev = false; //set false when in production\nnv.tooltip = nv.tooltip || {}; // For the tooltip system\nnv.utils = nv.utils || {}; // Utility subsystem\nnv.models = nv.models || {}; //stores all the possible models/components\nnv.charts = {}; //stores all the ready to use charts\nnv.logs = {}; //stores some statistics and potential error messages\nnv.dom = {}; //DOM manipulation functions\n\n// Node/CommonJS - require D3\nif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined' && typeof(d3) == 'undefined') {\n    d3 = __webpack_require__(95);\n}\n\nnv.dispatch = d3.dispatch('render_start', 'render_end');\n\n// Function bind polyfill\n// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment\n// https://github.com/ariya/phantomjs/issues/10522\n// http://kangax.github.io/compat-table/es5/#Function.prototype.bind\n// phantomJS is used for running the test suite\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== \"function\") {\n            // closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP = function () {},\n            fBound = function () {\n                return fToBind.apply(this instanceof fNOP && oThis\n                        ? this\n                        : oThis,\n                    aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n        return fBound;\n    };\n}\n\n//  Development render timers - disabled if dev = false\nif (nv.dev) {\n    nv.dispatch.on('render_start', function(e) {\n        nv.logs.startTime = +new Date();\n    });\n\n    nv.dispatch.on('render_end', function(e) {\n        nv.logs.endTime = +new Date();\n        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n    });\n}\n\n// Logs all arguments, and returns the last so you can test things in place\n// Note: in IE8 console.log is an object not a function, and if modernizr is used\n// then calling Function.prototype.bind with with anything other than a function\n// causes a TypeError to be thrown.\nnv.log = function() {\n    if (nv.dev && window.console && console.log && console.log.apply)\n        console.log.apply(console, arguments);\n    else if (nv.dev && window.console && typeof console.log == \"function\" && Function.prototype.bind) {\n        var log = Function.prototype.bind.call(console.log, console);\n        log.apply(console, arguments);\n    }\n    return arguments[arguments.length - 1];\n};\n\n// print console warning, should be used by deprecated functions\nnv.deprecated = function(name, info) {\n    if (console && console.warn) {\n        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');\n    }\n};\n\n// The nv.render function is used to queue up chart rendering\n// in non-blocking async functions.\n// When all queued charts are done rendering, nv.dispatch.render_end is invoked.\nnv.render = function render(step) {\n    // number of graphs to generate in each timeout loop\n    step = step || 1;\n\n    nv.render.active = true;\n    nv.dispatch.render_start();\n\n    var renderLoop = function() {\n        var chart, graph;\n\n        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n            chart = graph.generate();\n            if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n        }\n\n        nv.render.queue.splice(0, i);\n\n        if (nv.render.queue.length) {\n            setTimeout(renderLoop);\n        }\n        else {\n            nv.dispatch.render_end();\n            nv.render.active = false;\n        }\n    };\n\n    setTimeout(renderLoop);\n};\n\nnv.render.active = false;\nnv.render.queue = [];\n\n/*\nAdds a chart to the async rendering queue. This method can take arguments in two forms:\nnv.addGraph({\n    generate: <Function>\n    callback: <Function>\n})\n\nor\n\nnv.addGraph(<generate Function>, <callback Function>)\n\nThe generate function should contain code that creates the NVD3 model, sets options\non it, adds data to an SVG element, and invokes the chart model. The generate function\nshould return the chart model.  See examples/lineChart.html for a usage example.\n\nThe callback function is optional, and it is called when the generate function completes.\n*/\nnv.addGraph = function(obj) {\n    if (typeof arguments[0] === typeof(Function)) {\n        obj = {generate: arguments[0], callback: arguments[1]};\n    }\n\n    nv.render.queue.push(obj);\n\n    if (!nv.render.active) {\n        nv.render();\n    }\n};\n\n// Node/CommonJS exports\nif (true) {\n  module.exports = nv;\n}\n\nif (typeof(window) !== 'undefined') {\n  window.nv = nv;\n}\n/* Facade for queueing DOM write operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.write = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.mutate(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n\r\n/* Facade for queueing DOM read operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.read = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.measure(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n/* Utility class to handle creation of an interactive layer.\n This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\n containing the X-coordinate. It can also render a vertical line where the mouse is located.\n\n dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\n the rectangle. The dispatch is given one object which contains the mouseX/Y location.\n It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n */\nnv.interactiveGuideline = function() {\n    \"use strict\";\n\n    var margin = { left: 0, top: 0 } //Pass the chart's top and left magins. Used to calculate the mouseX/Y.\n        ,   width = null\n        ,   height = null\n        ,   xScale = d3.scale.linear()\n        ,   dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp')\n        ,   showGuideLine = true\n        ,   svgContainer = null // Must pass the chart's svg, we'll use its mousemove event.\n        ,   tooltip = nv.models.tooltip()\n        ,   isMSIE =  window.ActiveXObject// Checkt if IE by looking for activeX. (excludes IE11)\n    ;\n\n    tooltip\n        .duration(0)\n        .hideDelay(0)\n        .hidden(false);\n\n    function layer(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this);\n            var availableWidth = (width || 960), availableHeight = (height || 400);\n            var wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\")\n                .data([data]);\n            var wrapEnter = wrap.enter()\n                .append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n            wrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\n            if (!svgContainer) {\n                return;\n            }\n\n            function mouseHandler() {\n                var d3mouse = d3.mouse(this);\n                var mouseX = d3mouse[0];\n                var mouseY = d3mouse[1];\n                var subtractMargin = true;\n                var mouseOutAnyReason = false;\n                if (isMSIE) {\n                    /*\n                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n                     over a rect in IE 10.\n                     However, d3.event.offsetX/Y also returns the mouse coordinates\n                     relative to the triggering <rect>. So we use offsetX/Y on IE.\n                     */\n                    mouseX = d3.event.offsetX;\n                    mouseY = d3.event.offsetY;\n\n                    /*\n                     On IE, if you attach a mouse event listener to the <svg> container,\n                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n                     When this happens on IE, the offsetX/Y is set to where ever the child element\n                     is located.\n                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n                     position under this scenario. Removing the line below *will* cause\n                     the interactive layer to not work right on IE.\n                     */\n                    if(d3.event.target.tagName !== \"svg\") {\n                        subtractMargin = false;\n                    }\n\n                    if (d3.event.target.className.baseVal.match(\"nv-legend\")) {\n                        mouseOutAnyReason = true;\n                    }\n\n                }\n\n                if(subtractMargin) {\n                    mouseX -= margin.left;\n                    mouseY -= margin.top;\n                }\n\n                /* If mouseX/Y is outside of the chart's bounds,\n                 trigger a mouseOut event.\n                 */\n                if (d3.event.type === 'mouseout'\n                    || mouseX < 0 || mouseY < 0\n                    || mouseX > availableWidth || mouseY > availableHeight\n                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n                    || mouseOutAnyReason\n                    ) {\n\n                    if (isMSIE) {\n                        if (d3.event.relatedTarget\n                            && d3.event.relatedTarget.ownerSVGElement === undefined\n                            && (d3.event.relatedTarget.className === undefined\n                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {\n\n                            return;\n                        }\n                    }\n                    dispatch.elementMouseout({\n                        mouseX: mouseX,\n                        mouseY: mouseY\n                    });\n                    layer.renderGuideLine(null); //hide the guideline\n                    tooltip.hidden(true);\n                    return;\n                } else {\n                    tooltip.hidden(false);\n                }\n\n\n                var scaleIsOrdinal = typeof xScale.rangeBands === 'function';\n                var pointXValue = undefined;\n\n                // Ordinal scale has no invert method\n                if (scaleIsOrdinal) {\n                    var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;\n                    // Check if mouseX is in the range band\n                    if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {\n                        pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];\n                    }\n                    else {\n                        dispatch.elementMouseout({\n                            mouseX: mouseX,\n                            mouseY: mouseY\n                        });\n                        layer.renderGuideLine(null); //hide the guideline\n                        tooltip.hidden(true);\n                        return;\n                    }\n                }\n                else {\n                    pointXValue = xScale.invert(mouseX);\n                }\n\n                dispatch.elementMousemove({\n                    mouseX: mouseX,\n                    mouseY: mouseY,\n                    pointXValue: pointXValue\n                });\n\n                //If user double clicks the layer, fire a elementDblclick\n                if (d3.event.type === \"dblclick\") {\n                    dispatch.elementDblclick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user single clicks the layer, fire elementClick\n                if (d3.event.type === 'click') {\n                    dispatch.elementClick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user presses mouse down the layer, fire elementMouseDown\n                if (d3.event.type === 'mousedown') {\n                \tdispatch.elementMouseDown({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n\n                // if user presses mouse down the layer, fire elementMouseUp\n                if (d3.event.type === 'mouseup') {\n                \tdispatch.elementMouseUp({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n            }\n\n            svgContainer\n                .on(\"touchmove\",mouseHandler)\n                .on(\"mousemove\",mouseHandler, true)\n                .on(\"mouseout\" ,mouseHandler,true)\n                .on(\"mousedown\" ,mouseHandler,true)\n                .on(\"mouseup\" ,mouseHandler,true)\n                .on(\"dblclick\" ,mouseHandler)\n                .on(\"click\", mouseHandler)\n            ;\n\n            layer.guideLine = null;\n            //Draws a vertical guideline at the given X postion.\n            layer.renderGuideLine = function(x) {\n                if (!showGuideLine) return;\n                if (layer.guideLine && layer.guideLine.attr(\"x1\") === x) return;\n                nv.dom.write(function() {\n                    var line = wrap.select(\".nv-interactiveGuideLine\")\n                        .selectAll(\"line\")\n                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n                    line.enter()\n                        .append(\"line\")\n                        .attr(\"class\", \"nv-guideline\")\n                        .attr(\"x1\", function(d) { return d;})\n                        .attr(\"x2\", function(d) { return d;})\n                        .attr(\"y1\", availableHeight)\n                        .attr(\"y2\",0);\n                    line.exit().remove();\n                });\n            }\n        });\n    }\n\n    layer.dispatch = dispatch;\n    layer.tooltip = tooltip;\n\n    layer.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return layer;\n    };\n\n    layer.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return layer;\n    };\n\n    layer.height = function(_) {\n        if (!arguments.length) return height;\n        height = _;\n        return layer;\n    };\n\n    layer.xScale = function(_) {\n        if (!arguments.length) return xScale;\n        xScale = _;\n        return layer;\n    };\n\n    layer.showGuideLine = function(_) {\n        if (!arguments.length) return showGuideLine;\n        showGuideLine = _;\n        return layer;\n    };\n\n    layer.svgContainer = function(_) {\n        if (!arguments.length) return svgContainer;\n        svgContainer = _;\n        return layer;\n    };\n\n    return layer;\n};\n\n/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\n This is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\n For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.\n Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\n because 28 is closer to 30 than 10.\n\n Unit tests can be found in: interactiveBisectTest.html\n\n Has the following known issues:\n * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n * Won't work if there are duplicate x coordinate values.\n */\nnv.interactiveBisect = function (values, searchVal, xAccessor) {\n    \"use strict\";\n    if (! (values instanceof Array)) {\n        return null;\n    }\n    var _xAccessor;\n    if (typeof xAccessor !== 'function') {\n        _xAccessor = function(d) {\n            return d.x;\n        }\n    } else {\n        _xAccessor = xAccessor;\n    }\n    var _cmp = function(d, v) {\n        // Accessors are no longer passed the index of the element along with\n        // the element itself when invoked by d3.bisector.\n        //\n        // Starting at D3 v3.4.4, d3.bisector() started inspecting the\n        // function passed to determine if it should consider it an accessor\n        // or a comparator. This meant that accessors that take two arguments\n        // (expecting an index as the second parameter) are treated as\n        // comparators where the second argument is the search value against\n        // which the first argument is compared.\n        return _xAccessor(d) - v;\n    };\n\n    var bisect = d3.bisector(_cmp).left;\n    var index = d3.max([0, bisect(values,searchVal) - 1]);\n    var currentValue = _xAccessor(values[index]);\n\n    if (typeof currentValue === 'undefined') {\n        currentValue = index;\n    }\n\n    if (currentValue === searchVal) {\n        return index; //found exact match\n    }\n\n    var nextIndex = d3.min([index+1, values.length - 1]);\n    var nextValue = _xAccessor(values[nextIndex]);\n\n    if (typeof nextValue === 'undefined') {\n        nextValue = nextIndex;\n    }\n\n    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {\n        return index;\n    } else {\n        return nextIndex\n    }\n};\n\n/*\n Returns the index in the array \"values\" that is closest to searchVal.\n Only returns an index if searchVal is within some \"threshold\".\n Otherwise, returns null.\n */\nnv.nearestValueIndex = function (values, searchVal, threshold) {\n    \"use strict\";\n    var yDistMax = Infinity, indexToHighlight = null;\n    values.forEach(function(d,i) {\n        var delta = Math.abs(searchVal - d);\n        if ( d != null && delta <= yDistMax && delta < threshold) {\n            yDistMax = delta;\n            indexToHighlight = i;\n        }\n    });\n    return indexToHighlight;\n};\n\n/* Model which can be instantiated to handle tooltip rendering.\n Example usage:\n var tip = nv.models.tooltip().gravity('w').distance(23)\n .data(myDataObject);\n\n tip();    //just invoke the returned function to render tooltip.\n */\nnv.models.tooltip = function() {\n    \"use strict\";\n\n    /*\n    Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n    Example Format of data:\n    {\n        key: \"Date\",\n        value: \"August 2009\",\n        series: [\n            {key: \"Series 1\", value: \"Value 1\", color: \"#000\"},\n            {key: \"Series 2\", value: \"Value 2\", color: \"#00f\"}\n        ]\n    }\n    */\n    var id = \"nvtooltip-\" + Math.floor(Math.random() * 100000) // Generates a unique id when you create a new tooltip() object.\n        ,   data = null\n        ,   gravity = 'w'   // Can be 'n','s','e','w'. Determines how tooltip is positioned.\n        ,   distance = 25 // Distance to offset tooltip from the mouse location.\n        ,   snapDistance = 0   // Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n        ,   classes = null  // Attaches additional CSS classes to the tooltip DIV that is created.\n        ,   hidden = true  // Start off hidden, toggle with hide/show functions below.\n        ,   hideDelay = 200  // Delay (in ms) before the tooltip hides after calling hide().\n        ,   tooltip = null // d3 select of the tooltip div.\n        ,   lastPosition = { left: null, top: null } // Last position the tooltip was in.\n        ,   enabled = true  // True -> tooltips are rendered. False -> don't render tooltips.\n        ,   duration = 100 // Tooltip movement duration, in ms.\n        ,   headerEnabled = true // If is to show the tooltip header.\n        ,   nvPointerEventsClass = \"nv-pointer-events-none\" // CSS class to specify whether element should not have mouse events.\n    ;\n\n    // Format function for the tooltip values column.\n    var valueFormatter = function(d, i) {\n        return d;\n    };\n\n    // Format function for the tooltip header value.\n    var headerFormatter = function(d) {\n        return d;\n    };\n\n    var keyFormatter = function(d, i) {\n        return d;\n    };\n\n    // By default, the tooltip model renders a beautiful table inside a DIV.\n    // You can override this function if a custom tooltip is desired.\n    var contentGenerator = function(d) {\n        if (d === null) {\n            return '';\n        }\n\n        var table = d3.select(document.createElement(\"table\"));\n        if (headerEnabled) {\n            var theadEnter = table.selectAll(\"thead\")\n                .data([d])\n                .enter().append(\"thead\");\n\n            theadEnter.append(\"tr\")\n                .append(\"td\")\n                .attr(\"colspan\", 3)\n                .append(\"strong\")\n                .classed(\"x-value\", true)\n                .html(headerFormatter(d.value));\n        }\n\n        var tbodyEnter = table.selectAll(\"tbody\")\n            .data([d])\n            .enter().append(\"tbody\");\n\n        var trowEnter = tbodyEnter.selectAll(\"tr\")\n                .data(function(p) { return p.series})\n                .enter()\n                .append(\"tr\")\n                .classed(\"highlight\", function(p) { return p.highlight});\n\n        trowEnter.append(\"td\")\n            .classed(\"legend-color-guide\",true)\n            .append(\"div\")\n            .style(\"background-color\", function(p) { return p.color});\n\n        trowEnter.append(\"td\")\n            .classed(\"key\",true)\n            .classed(\"total\",function(p) { return !!p.total})\n            .html(function(p, i) { return keyFormatter(p.key, i)});\n\n        trowEnter.append(\"td\")\n            .classed(\"value\",true)\n            .html(function(p, i) { return valueFormatter(p.value, i) });\n\n        trowEnter.filter(function (p,i) { return p.percent !== undefined }).append(\"td\")\n            .classed(\"percent\", true)\n            .html(function(p, i) { return \"(\" + d3.format('%')(p.percent) + \")\" });\n\n        trowEnter.selectAll(\"td\").each(function(p) {\n            if (p.highlight) {\n                var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n                var opacity = 0.6;\n                d3.select(this)\n                    .style(\"border-bottom-color\", opacityScale(opacity))\n                    .style(\"border-top-color\", opacityScale(opacity))\n                ;\n            }\n        });\n\n        var html = table.node().outerHTML;\n        if (d.footer !== undefined)\n            html += \"<div class='footer'>\" + d.footer + \"</div>\";\n        return html;\n\n    };\n\n    /*\n     Function that returns the position (relative to the viewport/document.body)\n     the tooltip should be placed in.\n     Should return: {\n        left: <leftPos>,\n        top: <topPos>\n     }\n     */\n    var position = function() {\n        var pos = {\n            left: d3.event !== null ? d3.event.clientX : 0,\n            top: d3.event !== null ? d3.event.clientY : 0\n        };\n\n        if(getComputedStyle(document.body).transform != 'none') {\n            // Take the offset into account, as now the tooltip is relative\n            // to document.body.\n            var client = document.body.getBoundingClientRect();\n            pos.left -= client.left;\n            pos.top -= client.top;\n        }\n\n        return pos;\n    };\n\n    var dataSeriesExists = function(d) {\n        if (d && d.series) {\n            if (nv.utils.isArray(d.series)) {\n                return true;\n            }\n            // if object, it's okay just convert to array of the object\n            if (nv.utils.isObject(d.series)) {\n                d.series = [d.series];\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Calculates the gravity offset of the tooltip. Parameter is position of tooltip\n    // relative to the viewport.\n    var calcGravityOffset = function(pos) {\n        var height = tooltip.node().offsetHeight,\n            width = tooltip.node().offsetWidth,\n            clientWidth = document.documentElement.clientWidth, // Don't want scrollbars.\n            clientHeight = document.documentElement.clientHeight, // Don't want scrollbars.\n            left, top, tmp;\n\n        // calculate position based on gravity\n        switch (gravity) {\n            case 'e':\n                left = - width - distance;\n                top = - (height / 2);\n                if(pos.left + left < 0) left = distance;\n                if((tmp = pos.top + top) < 0) top -= tmp;\n                if((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'w':\n                left = distance;\n                top = - (height / 2);\n                if (pos.left + left + width > clientWidth) left = - width - distance;\n                if ((tmp = pos.top + top) < 0) top -= tmp;\n                if ((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'n':\n                left = - (width / 2) - 5; // - 5 is an approximation of the mouse's height.\n                top = distance;\n                if (pos.top + top + height > clientHeight) top = - height - distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 's':\n                left = - (width / 2);\n                top = - height - distance;\n                if (pos.top + top < 0) top = distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 'center':\n                left = - (width / 2);\n                top = - (height / 2);\n                break;\n            default:\n                left = 0;\n                top = 0;\n                break;\n        }\n\n        return { 'left': left, 'top': top };\n    };\n\n    /*\n     Positions the tooltip in the correct place, as given by the position() function.\n     */\n    var positionTooltip = function() {\n        nv.dom.read(function() {\n            var pos = position(),\n                gravityOffset = calcGravityOffset(pos),\n                left = pos.left + gravityOffset.left,\n                top = pos.top + gravityOffset.top;\n\n            // delay hiding a bit to avoid flickering\n            if (hidden) {\n                tooltip\n                    .interrupt()\n                    .transition()\n                    .delay(hideDelay)\n                    .duration(0)\n                    .style('opacity', 0);\n            } else {\n                // using tooltip.style('transform') returns values un-usable for tween\n                var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';\n                var new_translate = 'translate(' + Math.round(left) + 'px, ' + Math.round(top) + 'px)';\n                var translateInterpolator = d3.interpolateString(old_translate, new_translate);\n                var is_hidden = tooltip.style('opacity') < 0.1;\n\n                tooltip\n                    .interrupt() // cancel running transitions\n                    .transition()\n                    .duration(is_hidden ? 0 : duration)\n                    // using tween since some versions of d3 can't auto-tween a translate on a div\n                    .styleTween('transform', function (d) {\n                        return translateInterpolator;\n                    }, 'important')\n                    // Safari has its own `-webkit-transform` and does not support `transform`\n                    .styleTween('-webkit-transform', function (d) {\n                        return translateInterpolator;\n                    })\n                    .style('-ms-transform', new_translate)\n                    .style('opacity', 1);\n            }\n\n            lastPosition.left = left;\n            lastPosition.top = top;\n        });\n    };\n\n    // Creates new tooltip container, or uses existing one on DOM.\n    function initTooltip() {\n        if (!tooltip || !tooltip.node()) {\n            // Create new tooltip div if it doesn't exist on DOM.\n\n            var data = [1];\n            tooltip = d3.select(document.body).select('#'+id).data(data);\n\n            tooltip.enter().append('div')\n                   .attr(\"class\", \"nvtooltip \" + (classes ? classes : \"xy-tooltip\"))\n                   .attr(\"id\", id)\n                   .style(\"top\", 0).style(\"left\", 0)\n                   .style('opacity', 0)\n                   .style('position', 'fixed')\n                   .selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass, true)\n                   .classed(nvPointerEventsClass, true);\n\n            tooltip.exit().remove()\n        }\n    }\n\n    // Draw the tooltip onto the DOM.\n    function nvtooltip() {\n        if (!enabled) return;\n        if (!dataSeriesExists(data)) return;\n\n        nv.dom.write(function () {\n            initTooltip();\n            // Generate data and set it into tooltip.\n            // Bonus - If you override contentGenerator and return falsey you can use something like\n            //         React or Knockout to bind the data for your tooltip.\n            var newContent = contentGenerator(data);\n            if (newContent) {\n                tooltip.node().innerHTML = newContent;\n            }\n\n            positionTooltip();\n        });\n\n        return nvtooltip;\n    }\n\n    nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n    nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);\n\n    nvtooltip._options = Object.create({}, {\n        // simple read/write options\n        duration: {get: function(){return duration;}, set: function(_){duration=_;}},\n        gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        distance: {get: function(){return distance;}, set: function(_){distance=_;}},\n        snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},\n        classes: {get: function(){return classes;}, set: function(_){classes=_;}},\n        enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},\n        hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},\n        contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},\n        valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},\n        headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},\n        keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        headerEnabled: {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},\n        position: {get: function(){return position;}, set: function(_){position=_;}},\n\n        // Deprecated options\n        chartContainer: {get: function(){return document.body;}, set: function(_){\n            // deprecated after 1.8.3\n            nv.deprecated('chartContainer', 'feature removed after 1.8.3');\n        }},\n        fixedTop: {get: function(){return null;}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('fixedTop', 'feature removed after 1.8.1');\n        }},\n        offset: {get: function(){return {left: 0, top: 0};}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('offset', 'use chart.tooltip.distance() instead');\n        }},\n\n        // options with extra logic\n        hidden: {get: function(){return hidden;}, set: function(_){\n            if (hidden != _) {\n                hidden = !!_;\n                nvtooltip();\n            }\n        }},\n        data: {get: function(){return data;}, set: function(_){\n            // if showing a single data point, adjust data format with that\n            if (_.point) {\n                _.value = _.point.x;\n                _.series = _.series || {};\n                _.series.value = _.point.y;\n                _.series.color = _.point.color || _.series.color;\n            }\n            data = _;\n        }},\n\n        // read only properties\n        node: {get: function(){return tooltip.node();}, set: function(_){}},\n        id: {get: function(){return id;}, set: function(_){}}\n    });\n\n    nv.utils.initOptions(nvtooltip);\n    return nvtooltip;\n};\n\n\n/*\nGets the browser window size\n\nReturns object with height and width properties\n */\nnv.utils.windowSize = function() {\n    // Sane defaults\n    var size = {width: 640, height: 480};\n\n    // Most recent browsers use\n    if (window.innerWidth && window.innerHeight) {\n        size.width = window.innerWidth;\n        size.height = window.innerHeight;\n        return (size);\n    }\n\n    // IE can use depending on mode it is in\n    if (document.compatMode=='CSS1Compat' &&\n        document.documentElement &&\n        document.documentElement.offsetWidth ) {\n\n        size.width = document.documentElement.offsetWidth;\n        size.height = document.documentElement.offsetHeight;\n        return (size);\n    }\n\n    // Earlier IE uses Doc.body\n    if (document.body && document.body.offsetWidth) {\n        size.width = document.body.offsetWidth;\n        size.height = document.body.offsetHeight;\n        return (size);\n    }\n\n    return (size);\n};\n\n\n/* handle dumb browser quirks...  isinstance breaks if you use frames\ntypeof returns 'object' for null, NaN is a number, etc.\n */\nnv.utils.isArray = Array.isArray;\nnv.utils.isObject = function(a) {\n    return a !== null && typeof a === 'object';\n};\nnv.utils.isFunction = function(a) {\n    return typeof a === 'function';\n};\nnv.utils.isDate = function(a) {\n    return toString.call(a) === '[object Date]';\n};\nnv.utils.isNumber = function(a) {\n    return !isNaN(a) && typeof a === 'number';\n};\n\n\n/*\nBinds callback function to run when window is resized\n */\nnv.utils.windowResize = function(handler) {\n    if (window.addEventListener) {\n        window.addEventListener('resize', handler);\n    } else {\n        nv.log(\"ERROR: Failed to bind to window.resize with: \", handler);\n    }\n    // return object with clear function to remove the single added callback.\n    return {\n        callback: handler,\n        clear: function() {\n            window.removeEventListener('resize', handler);\n        }\n    }\n};\n\n\n/*\nBackwards compatible way to implement more d3-like coloring of graphs.\nCan take in nothing, an array, or a function/scale\nTo use a normal scale, get the range and pass that because we must be able\nto take two arguments and use the index to keep backward compatibility\n*/\nnv.utils.getColor = function(color) {\n    //if you pass in nothing, get default colors back\n    if (color === undefined) {\n        return nv.utils.defaultColor();\n\n    //if passed an array, turn it into a color scale\n    } else if(nv.utils.isArray(color)) {\n        var color_scale = d3.scale.ordinal().range(color);\n        return function(d, i) {\n            var key = i === undefined ? d : i;\n            return d.color || color_scale(key);\n        };\n\n    //if passed a function or scale, return it, or whatever it may be\n    //external libs, such as angularjs-nvd3-directives use this\n    } else {\n        //can't really help it if someone passes rubbish as color\n        return color;\n    }\n};\n\n\n/*\nDefault color chooser uses a color scale of 20 colors from D3\n https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors\n */\nnv.utils.defaultColor = function() {\n    // get range of the scale so we'll turn it into our own function.\n    return nv.utils.getColor(d3.scale.category20().range());\n};\n\n\n/*\nReturns a color function that takes the result of 'getKey' for each series and\nlooks for a corresponding color from the dictionary\n*/\nnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n    // use default series.key if getKey is undefined\n    getKey = getKey || function(series) { return series.key };\n    defaultColors = defaultColors || d3.scale.category20().range();\n\n    // start at end of default color list and walk back to index 0\n    var defIndex = defaultColors.length;\n\n    return function(series, index) {\n        var key = getKey(series);\n        if (nv.utils.isFunction(dictionary[key])) {\n            return dictionary[key]();\n        } else if (dictionary[key] !== undefined) {\n            return dictionary[key];\n        } else {\n            // no match in dictionary, use a default color\n            if (!defIndex) {\n                // used all the default colors, start over\n                defIndex = defaultColors.length;\n            }\n            defIndex = defIndex - 1;\n            return defaultColors[defIndex];\n        }\n    };\n};\n\n\n/*\nFrom the PJAX example on d3js.org, while this is not really directly needed\nit's a very cool method for doing pjax, I may expand upon it a little bit,\nopen to suggestions on anything that may be useful\n*/\nnv.utils.pjax = function(links, content) {\n\n    var load = function(href) {\n        d3.html(href, function(fragment) {\n            var target = d3.select(content).node();\n            target.parentNode.replaceChild(\n                d3.select(fragment).select(content).node(),\n                target);\n            nv.utils.pjax(links, content);\n        });\n    };\n\n    d3.selectAll(links).on(\"click\", function() {\n        history.pushState(this.href, this.textContent, this.href);\n        load(this.href);\n        d3.event.preventDefault();\n    });\n\n    d3.select(window).on(\"popstate\", function() {\n        if (d3.event.state) {\n            load(d3.event.state);\n        }\n    });\n};\n\n\n/*\nFor when we want to approximate the width in pixels for an SVG:text element.\nMost common instance is when the element is in a display:none; container.\nForumla is : text.length * font-size * constant_factor\n*/\nnv.utils.calcApproxTextWidth = function (svgTextElem) {\n    if (nv.utils.isFunction(svgTextElem.style) && nv.utils.isFunction(svgTextElem.text)) {\n        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"), 10);\n        var textLength = svgTextElem.text().length;\n        return nv.utils.NaNtoZero(textLength * fontSize * 0.5);\n    }\n    return 0;\n};\n\n\n/*\nNumbers that are undefined, null or NaN, convert them to zeros.\n*/\nnv.utils.NaNtoZero = function(n) {\n    if (!nv.utils.isNumber(n)\n        || isNaN(n)\n        || n === null\n        || n === Infinity\n        || n === -Infinity) {\n\n        return 0;\n    }\n    return n;\n};\n\n/*\nAdd a way to watch for d3 transition ends to d3\n*/\nd3.selection.prototype.watchTransition = function(renderWatch){\n    var args = [this].concat([].slice.call(arguments, 1));\n    return renderWatch.transition.apply(renderWatch, args);\n};\n\n\n/*\nHelper object to watch when d3 has rendered something\n*/\nnv.utils.renderWatch = function(dispatch, duration) {\n    if (!(this instanceof nv.utils.renderWatch)) {\n        return new nv.utils.renderWatch(dispatch, duration);\n    }\n\n    var _duration = duration !== undefined ? duration : 250;\n    var renderStack = [];\n    var self = this;\n\n    this.models = function(models) {\n        models = [].slice.call(arguments, 0);\n        models.forEach(function(model){\n            model.__rendered = false;\n            (function(m){\n                m.dispatch.on('renderEnd', function(arg){\n                    m.__rendered = true;\n                    self.renderEnd('model');\n                });\n            })(model);\n\n            if (renderStack.indexOf(model) < 0) {\n                renderStack.push(model);\n            }\n        });\n    return this;\n    };\n\n    this.reset = function(duration) {\n        if (duration !== undefined) {\n            _duration = duration;\n        }\n        renderStack = [];\n    };\n\n    this.transition = function(selection, args, duration) {\n        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n\n        if (args.length > 1) {\n            duration = args.pop();\n        } else {\n            duration = _duration !== undefined ? _duration : 250;\n        }\n        selection.__rendered = false;\n\n        if (renderStack.indexOf(selection) < 0) {\n            renderStack.push(selection);\n        }\n\n        if (duration === 0) {\n            selection.__rendered = true;\n            selection.delay = function() { return this; };\n            selection.duration = function() { return this; };\n            return selection;\n        } else {\n            if (selection.length === 0) {\n                selection.__rendered = true;\n            } else if (selection.every( function(d){ return !d.length; } )) {\n                selection.__rendered = true;\n            } else {\n                selection.__rendered = false;\n            }\n\n            var n = 0;\n            return selection\n                .transition()\n                .duration(duration)\n                .each(function(){ ++n; })\n                .each('end', function(d, i) {\n                    if (--n === 0) {\n                        selection.__rendered = true;\n                        self.renderEnd.apply(this, args);\n                    }\n                });\n        }\n    };\n\n    this.renderEnd = function() {\n        if (renderStack.every( function(d){ return d.__rendered; } )) {\n            renderStack.forEach( function(d){ d.__rendered = false; });\n            dispatch.renderEnd.apply(this, arguments);\n        }\n    }\n\n};\n\n\n/*\nTakes multiple objects and combines them into the first one (dst)\nexample:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});\ngives:  {a: 2, b: 3, c: 4}\n*/\nnv.utils.deepExtend = function(dst){\n    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n    sources.forEach(function(source) {\n        for (var key in source) {\n            var isArray = nv.utils.isArray(dst[key]);\n            var isObject = nv.utils.isObject(dst[key]);\n            var srcObj = nv.utils.isObject(source[key]);\n\n            if (isObject && !isArray && srcObj) {\n                nv.utils.deepExtend(dst[key], source[key]);\n            } else {\n                dst[key] = source[key];\n            }\n        }\n    });\n};\n\n\n/*\nstate utility object, used to track d3 states in the models\n*/\nnv.utils.state = function(){\n    if (!(this instanceof nv.utils.state)) {\n        return new nv.utils.state();\n    }\n    var state = {};\n    var _self = this;\n    var _setState = function(){};\n    var _getState = function(){ return {}; };\n    var init = null;\n    var changed = null;\n\n    this.dispatch = d3.dispatch('change', 'set');\n\n    this.dispatch.on('set', function(state){\n        _setState(state, true);\n    });\n\n    this.getter = function(fn){\n        _getState = fn;\n        return this;\n    };\n\n    this.setter = function(fn, callback) {\n        if (!callback) {\n            callback = function(){};\n        }\n        _setState = function(state, update){\n            fn(state);\n            if (update) {\n                callback();\n            }\n        };\n        return this;\n    };\n\n    this.init = function(state){\n        init = init || {};\n        nv.utils.deepExtend(init, state);\n    };\n\n    var _set = function(){\n        var settings = _getState();\n\n        if (JSON.stringify(settings) === JSON.stringify(state)) {\n            return false;\n        }\n\n        for (var key in settings) {\n            if (state[key] === undefined) {\n                state[key] = {};\n            }\n            state[key] = settings[key];\n            changed = true;\n        }\n        return true;\n    };\n\n    this.update = function(){\n        if (init) {\n            _setState(init, false);\n            init = null;\n        }\n        if (_set.call(this)) {\n            this.dispatch.change(state);\n        }\n    };\n\n};\n\n\n/*\nSnippet of code you can insert into each nv.models.* to give you the ability to\ndo things like:\nchart.options({\n  showXAxis: true,\n  tooltips: true\n});\n\nTo enable in the chart:\nchart.options = nv.utils.optionsFunc.bind(chart);\n*/\nnv.utils.optionsFunc = function(args) {\n    if (args) {\n        d3.map(args).forEach((function(key,value) {\n            if (nv.utils.isFunction(this[key])) {\n                this[key](value);\n            }\n        }).bind(this));\n    }\n    return this;\n};\n\n\n/*\nnumTicks:  requested number of ticks\ndata:  the chart data\n\nreturns the number of ticks to actually use on X axis, based on chart data\nto avoid duplicate ticks with the same value\n*/\nnv.utils.calcTicksX = function(numTicks, data) {\n    // find max number of values from all data streams\n    var numValues = 1;\n    var i = 0;\n    for (i; i < data.length; i += 1) {\n        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;\n        numValues = stream_len > numValues ? stream_len : numValues;\n    }\n    nv.log(\"Requested number of ticks: \", numTicks);\n    nv.log(\"Calculated max values to be: \", numValues);\n    // make sure we don't have more ticks than values to avoid duplicates\n    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;\n    // make sure we have at least one tick\n    numTicks = numTicks < 1 ? 1 : numTicks;\n    // make sure it's an integer\n    numTicks = Math.floor(numTicks);\n    nv.log(\"Calculating tick count as: \", numTicks);\n    return numTicks;\n};\n\n\n/*\nreturns number of ticks to actually use on Y axis, based on chart data\n*/\nnv.utils.calcTicksY = function(numTicks, data) {\n    // currently uses the same logic but we can adjust here if needed later\n    return nv.utils.calcTicksX(numTicks, data);\n};\n\n\n/*\nAdd a particular option from an options object onto chart\nOptions exposed on a chart are a getter/setter function that returns chart\non set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');\n\noption objects should be generated via Object.create() to provide\nthe option of manipulating data via get/set functions.\n*/\nnv.utils.initOption = function(chart, name) {\n    // if it's a call option, just call it directly, otherwise do get/set\n    if (chart._calls && chart._calls[name]) {\n        chart[name] = chart._calls[name];\n    } else {\n        chart[name] = function (_) {\n            if (!arguments.length) return chart._options[name];\n            chart._overrides[name] = true;\n            chart._options[name] = _;\n            return chart;\n        };\n        // calling the option as _option will ignore if set by option already\n        // so nvd3 can set options internally but the stop if set manually\n        chart['_' + name] = function(_) {\n            if (!arguments.length) return chart._options[name];\n            if (!chart._overrides[name]) {\n                chart._options[name] = _;\n            }\n            return chart;\n        }\n    }\n};\n\n\n/*\nAdd all options in an options object to the chart\n*/\nnv.utils.initOptions = function(chart) {\n    chart._overrides = chart._overrides || {};\n    var ops = Object.getOwnPropertyNames(chart._options || {});\n    var calls = Object.getOwnPropertyNames(chart._calls || {});\n    ops = ops.concat(calls);\n    for (var i in ops) {\n        nv.utils.initOption(chart, ops[i]);\n    }\n};\n\n\n/*\nInherit options from a D3 object\nd3.rebind makes calling the function on target actually call it on source\nAlso use _d3options so we can track what we inherit for documentation and chained inheritance\n*/\nnv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {\n    target._d3options = oplist.concat(target._d3options || []);\n    oplist.unshift(d3_source);\n    oplist.unshift(target);\n    d3.rebind.apply(this, oplist);\n};\n\n\n/*\nRemove duplicates from an array\n*/\nnv.utils.arrayUnique = function(a) {\n    return a.sort().filter(function(item, pos) {\n        return !pos || item != a[pos - 1];\n    });\n};\n\n\n/*\nKeeps a list of custom symbols to draw from in addition to d3.svg.symbol\nNecessary since d3 doesn't let you extend its list -_-\nAdd new symbols by doing nv.utils.symbols.set('name', function(size){...});\n*/\nnv.utils.symbolMap = d3.map();\n\n\n/*\nReplaces d3.svg.symbol so that we can look both there and our own map\n */\nnv.utils.symbol = function() {\n    var type,\n        size = 64;\n    function symbol(d,i) {\n        var t = type.call(this,d,i);\n        var s = size.call(this,d,i);\n        if (d3.svg.symbolTypes.indexOf(t) !== -1) {\n            return d3.svg.symbol().type(t).size(s)();\n        } else {\n            return nv.utils.symbolMap.get(t)(s);\n        }\n    }\n    symbol.type = function(_) {\n        if (!arguments.length) return type;\n        type = d3.functor(_);\n        return symbol;\n    };\n    symbol.size = function(_) {\n        if (!arguments.length) return size;\n        size = d3.functor(_);\n        return symbol;\n    };\n    return symbol;\n};\n\n\n/*\nInherit option getter/setter functions from source to target\nd3.rebind makes calling the function on target actually call it on source\nAlso track via _inherited and _d3options so we can track what we inherit\nfor documentation generation purposes and chained inheritance\n*/\nnv.utils.inheritOptions = function(target, source) {\n    // inherit all the things\n    var ops = Object.getOwnPropertyNames(source._options || {});\n    var calls = Object.getOwnPropertyNames(source._calls || {});\n    var inherited = source._inherited || [];\n    var d3ops = source._d3options || [];\n    var args = ops.concat(calls).concat(inherited).concat(d3ops);\n    args.unshift(source);\n    args.unshift(target);\n    d3.rebind.apply(this, args);\n    // pass along the lists to keep track of them, don't allow duplicates\n    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));\n    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));\n};\n\n\n/*\nRuns common initialize code on the svg before the chart builds\n*/\nnv.utils.initSVG = function(svg) {\n    svg.classed({'nvd3-svg':true});\n};\n\n\n/*\nSanitize and provide default for the container height.\n*/\nnv.utils.sanitizeHeight = function(height, container) {\n    return (height || parseInt(container.style('height'), 10) || 400);\n};\n\n\n/*\nSanitize and provide default for the container width.\n*/\nnv.utils.sanitizeWidth = function(width, container) {\n    return (width || parseInt(container.style('width'), 10) || 960);\n};\n\n\n/*\nCalculate the available height for a chart.\n*/\nnv.utils.availableHeight = function(height, container, margin) {\n    return Math.max(0,nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n};\n\n/*\nCalculate the available width for a chart.\n*/\nnv.utils.availableWidth = function(width, container, margin) {\n    return Math.max(0,nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);\n};\n\n/*\nClear any rendered chart components and display a chart's 'noData' message\n*/\nnv.utils.noData = function(chart, container) {\n    var opt = chart.options(),\n        margin = opt.margin(),\n        noData = opt.noData(),\n        data = (noData == null) ? [\"No Data Available.\"] : [noData],\n        height = nv.utils.availableHeight(null, container, margin),\n        width = nv.utils.availableWidth(null, container, margin),\n        x = margin.left + width/2,\n        y = margin.top + height/2;\n\n    //Remove any previously created chart components\n    container.selectAll('g').remove();\n\n    var noDataText = container.selectAll('.nv-noData').data(data);\n\n    noDataText.enter().append('text')\n        .attr('class', 'nvd3 nv-noData')\n        .attr('dy', '-.7em')\n        .style('text-anchor', 'middle');\n\n    noDataText\n        .attr('x', x)\n        .attr('y', y)\n        .text(function(t){ return t; });\n};\n\n/*\n Wrap long labels.\n */\nnv.utils.wrapTicks = function (text, width) {\n    text.each(function() {\n        var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1,\n            y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(\" \"));\n                line = [word];\n                tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n            }\n        }\n    });\n};\n\n/*\nCheck equality of 2 array\n*/\nnv.utils.arrayEquals = function (array1, array2) {\n    if (array1 === array2)\n        return true;\n\n    if (!array1 || !array2)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (array1.length != array2.length)\n        return false;\n\n    for (var i = 0,\n        l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!nv.arrayEquals(array1[i], array2[i]))\n                return false;\n        } else if (array1[i] != array2[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\nnv.models.axis = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var axis = d3.svg.axis();\n    var scale = d3.scale.linear();\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 75 //only used for tickLabel currently\n        , height = 60 //only used for tickLabel currently\n        , axisLabelText = null\n        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n        , rotateLabels = 0\n        , rotateYLabel = true\n        , staggerLabels = false\n        , isOrdinal = false\n        , ticks = null\n        , axisLabelDistance = 0\n        , fontSize = undefined\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n    axis\n        .scale(scale)\n        .orient('bottom')\n        .tickFormat(function(d) { return d })\n    ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            if (ticks !== null)\n                axis.ticks(ticks);\n            else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\n            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n            g.watchTransition(renderWatch, 'axis').call(axis);\n\n            scale0 = scale0 || axis.scale();\n\n            var fmt = axis.tickFormat();\n            if (fmt == null) {\n                fmt = scale0.tickFormat();\n            }\n\n            var axisLabel = g.selectAll('text.nv-axislabel')\n                .data([axisLabelText || null]);\n            axisLabel.exit().remove();\n\n            //only skip when fontSize is undefined so it can be cleared with a null or blank string\n            if (fontSize !== undefined) {\n                g.selectAll('g').select(\"text\").style('font-size', fontSize);\n            }\n\n            var xLabelMargin;\n            var axisMaxMin;\n            var w;\n            switch (axis.orient()) {\n                case 'top':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                  w = 0;\n                  if (scale.range().length === 1) {\n                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                  } else if (scale.range().length === 2) {\n                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                  } else if ( scale.range().length > 2){\n                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                  };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', 0)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '-0.5em')\n                            .attr('y', -axis.tickPadding())\n                            .attr('text-anchor', 'middle')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max top')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'\n                            });\n                    }\n                    break;\n                case 'bottom':\n                    xLabelMargin = axisLabelDistance + 36;\n                    var maxTextWidth = 30;\n                    var textHeight = 0;\n                    var xTicks = g.selectAll('g').select(\"text\");\n                    var rotateLabelsRule = '';\n                    if (rotateLabels%360) {\n                        //Reset transform on ticks so textHeight can be calculated correctly\n                        xTicks.attr('transform', ''); \n                        //Calculate the longest xTick width\n                        xTicks.each(function(d,i){\n                            var box = this.getBoundingClientRect();\n                            var width = box.width;\n                            textHeight = box.height;\n                            if(width > maxTextWidth) maxTextWidth = width;\n                        });\n                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';\n                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n                        //Rotate all xTicks\n                        xTicks\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n                    } else {\n                        if (staggerLabels) {\n                            xTicks\n                                .attr('transform', function(d,i) {\n                                    return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'\n                                });\n                        } else {\n                            xTicks.attr('transform', \"translate(0,0)\");\n                        }\n                    }\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    w = 0;\n                    if (scale.range().length === 1) {\n                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                    } else if (scale.range().length === 2) {\n                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                    } else if ( scale.range().length > 2){\n                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                    };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', xLabelMargin)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        //if (showMaxMin && !isOrdinal) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            //.data(scale.domain())\n                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '.71em')\n                            .attr('y', axis.tickPadding())\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            });\n                    }\n\n                    break;\n                case 'right':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12 - (axisLabelDistance || 0)) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                       \taxisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', axis.tickPadding())\n                            .style('text-anchor', 'start')\n                            .text(function(d, i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n                case 'left':\n                    /*\n                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n                     var yTicks = g.selectAll('g').select(\"text\");\n                     yTicks.each(function(d,i){\n                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;\n                     if(labelPadding > width) width = labelPadding;\n                     });\n                     */\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)\n                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', -axis.tickPadding())\n                            .attr('text-anchor', 'end')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n            }\n            axisLabel.text(function(d) { return d });\n\n            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n                //check if max and min overlap other values, if so, hide the values that overlap\n                g.selectAll('g') // the g's wrapping each tick\n                    .each(function(d,i) {\n                        d3.select(this).select('text').attr('opacity', 1);\n                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                                d3.select(this).attr('opacity', 0);\n\n                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n                        }\n                    });\n\n                //if Max and Min = 0 only show min, Issue #281\n                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {\n                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {\n                        return !i ? 1 : 0\n                    });\n                }\n            }\n\n            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n                var maxMinRange = [];\n                wrap.selectAll('g.nv-axisMaxMin')\n                    .each(function(d,i) {\n                        try {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)\n                        }catch (err) {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + 4);\n                        }\n                    });\n                // the g's wrapping each tick\n                g.selectAll('g').each(function(d, i) {\n                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                            d3.select(this).remove();\n                        else\n                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n                    }\n                });\n            }\n\n            //Highlight zero tick line\n            g.selectAll('.tick')\n                .filter(function (d) {\n                    /*\n                    The filter needs to return only ticks at or near zero.\n                    Numbers like 0.00001 need to count as zero as well,\n                    and the arithmetic trick below solves that.\n                    */\n                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)\n                }) \n                .classed('zero', true);\n            \n            //store old scales for use in transitions on update\n            scale0 = scale.copy();\n\n        });\n\n        renderWatch.renderEnd('axis immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.axis = axis;\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},\n        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},\n        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},\n        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},\n        height:            {get: function(){return height;}, set: function(_){height=_;}},\n        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        width:             {get: function(){return width;}, set: function(_){width=_;}},\n        fontSize:          {get: function(){return fontSize;}, set: function(_){fontSize=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top !== undefined    ? _.top    : margin.top;\n            margin.right  = _.right !== undefined  ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left !== undefined   ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration=_;\n            renderWatch.reset(duration);\n        }},\n        scale: {get: function(){return scale;}, set: function(_){\n            scale = _;\n            axis.scale(scale);\n            isOrdinal = typeof scale.rangeBands === 'function';\n            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);\n    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n\n    return chart;\n};\nnv.models.boxPlot = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0},\n        width = 960,\n        height = 500,\n        id = Math.floor(Math.random() * 10000), // Create semi-unique ID in case user doesn't select one\n        xScale = d3.scale.ordinal(),\n        yScale = d3.scale.linear(),\n        getX  = function(d) { return d.label }, // Default data model selectors.\n        getQ1 = function(d) { return d.values.Q1 },\n        getQ2 = function(d) { return d.values.Q2 },\n        getQ3 = function(d) { return d.values.Q3 },\n        getWl = function(d) { return d.values.whisker_low },\n        getWh = function(d) { return d.values.whisker_high },\n        getColor = function(d) { return d.color },\n        getOlItems  = function(d) { return d.values.outliers },\n        getOlValue = function(d, i, j) { return d },\n        getOlLabel = function(d, i, j) { return d },\n        getOlColor = function(d, i, j) { return undefined },\n        color = nv.utils.defaultColor(),\n        container = null,\n        xDomain, xRange,\n        yDomain, yRange,\n        dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'),\n        duration = 250,\n        maxBoxWidth = null;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var xScale0, yScale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            xScale.domain(xDomain || data.map(function(d,i) { return getX(d,i); }))\n                .rangeBands(xRange || [0, availableWidth], 0.1);\n\n            // if we know yDomain, no need to calculate\n            var yData = []\n            if (!yDomain) {\n                // (y-range is based on quartiles, whiskers and outliers)\n                var values = [], yMin, yMax;\n                data.forEach(function (d, i) {\n                    var q1 = getQ1(d), q3 = getQ3(d), wl = getWl(d), wh = getWh(d);\n                    var olItems = getOlItems(d);\n                    if (olItems) {\n                        olItems.forEach(function (e, i) {\n                            values.push(getOlValue(e, i, undefined));\n                        });\n                    }\n                    if (wl) { values.push(wl) }\n                    if (q1) { values.push(q1) }\n                    if (q3) { values.push(q3) }\n                    if (wh) { values.push(wh) }\n                });\n                yMin = d3.min(values);\n                yMax = d3.max(values);\n                yData = [ yMin, yMax ] ;\n            }\n\n            yScale.domain(yDomain || yData);\n            yScale.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            xScale0 = xScale0 || xScale;\n            yScale0 = yScale0 || yScale.copy().range([yScale(0),yScale(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });\n            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);\n            boxplots\n                .attr('class', 'nv-boxplot')\n                .attr('transform', function(d,i,j) { return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)'; })\n                .classed('hover', function(d) { return d.hover });\n            boxplots\n                .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', 0.75)\n                .delay(function(d,i) { return i * duration / data.length })\n                .attr('transform', function(d,i) {\n                    return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)';\n                });\n            boxplots.exit().remove();\n\n            // ----- add the SVG elements for each boxPlot -----\n\n            // conditionally append whisker lines\n            boxEnter.each(function(d,i) {\n                var box = d3.select(this);\n                [getWl, getWh].forEach(function (f) {\n                    if (f(d) !== undefined && f(d) !== null) {\n                        var key = (f === getWl) ? 'low' : 'high';\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);\n                    }\n                });\n            });\n\n            var box_width = function() { return (maxBoxWidth === null ? xScale.rangeBand() * 0.9 : Math.min(75, xScale.rangeBand() * 0.9)); };\n            var box_left  = function() { return xScale.rangeBand() * 0.45 - box_width()/2; };\n            var box_right = function() { return xScale.rangeBand() * 0.45 + box_width()/2; };\n\n            // update whisker lines and ticks\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                var endpoint = (f === getWl) ? getQ1 : getQ3;\n                boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', xScale.rangeBand() * 0.45 )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', xScale.rangeBand() * 0.45 )\n                    .attr('y2', function(d,i) { return yScale(endpoint(d)); });\n                boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', box_left )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', box_right )\n                    .attr('y2', function(d,i) { return yScale(f(d)); });\n            });\n\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                boxEnter.selectAll('.nv-boxplot-' + key)\n                  .on('mouseover', function(d,i,j) {\n                      d3.select(this).classed('hover', true);\n                      dispatch.elementMouseover({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mouseout', function(d,i,j) {\n                      d3.select(this).classed('hover', false);\n                      dispatch.elementMouseout({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mousemove', function(d,i) {\n                      dispatch.elementMousemove({e: d3.event});\n                  });\n            });\n\n            // boxes\n            boxEnter.append('rect')\n                .attr('class', 'nv-boxplot-box')\n                // tooltip events\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n\n            // box transitions\n            boxplots.select('rect.nv-boxplot-box')\n              .watchTransition(renderWatch, 'nv-boxplot: boxes')\n                .attr('y', function(d,i) { return yScale(getQ3(d)); })\n                .attr('width', box_width)\n                .attr('x', box_left )\n                .attr('height', function(d,i) { return Math.abs(yScale(getQ3(d)) - yScale(getQ1(d))) || 1 })\n                .style('fill', function(d,i) { return getColor(d) || color(d,i) })\n                .style('stroke', function(d,i) { return getColor(d) || color(d,i) });\n\n            // median line\n            boxEnter.append('line').attr('class', 'nv-boxplot-median');\n\n            boxplots.select('line.nv-boxplot-median')\n              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')\n                .attr('x1', box_left)\n                .attr('y1', function(d,i) { return yScale(getQ2(d)); })\n                .attr('x2', box_right)\n                .attr('y2', function(d,i) { return yScale(getQ2(d)); });\n\n            // outliers\n            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {\n                return getOlItems(d) || [];\n            });\n            outliers.enter().append('circle')\n                .style('fill', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('stroke', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('z-index', 9000)\n                .on('mouseover', function(d,i,j) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i,j) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n            outliers.attr('class', 'nv-boxplot-outlier');\n            outliers\n              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')\n                .attr('cx', xScale.rangeBand() * 0.45)\n                .attr('cy', function(d,i,j) { return yScale(getOlValue(d,i,j)); })\n                .attr('r', '3');\n            outliers.exit().remove();\n\n            //store old scales for use in transitions on update\n            xScale0 = xScale.copy();\n            yScale0 = yScale.copy();\n        });\n\n        renderWatch.renderEnd('nv-boxplot immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:       {get: function(){return width;}, set: function(_){width=_;}},\n        height:      {get: function(){return height;}, set: function(_){height=_;}},\n        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},\n        x:           {get: function(){return getX;}, set: function(_){getX=_;}},\n        q1: {get: function(){return getQ1;}, set: function(_){getQ1=_;}},\n        q2: {get: function(){return getQ2;}, set: function(_){getQ2=_;}},\n        q3: {get: function(){return getQ3;}, set: function(_){getQ3=_;}},\n        wl: {get: function(){return getWl;}, set: function(_){getWl=_;}},\n        wh: {get: function(){return getWh;}, set: function(_){getWh=_;}},\n        itemColor:    {get: function(){return getColor;}, set: function(_){getColor=_;}},\n        outliers:     {get: function(){return getOlItems;}, set: function(_){getOlItems=_;}},\n        outlierValue: {get: function(){return getOlValue;}, set: function(_){getOlValue=_;}},\n        outlierLabel: {get: function(){return getOlLabel;}, set: function(_){getOlLabel=_;}},\n        outlierColor: {get: function(){return getOlColor;}, set: function(_){getOlColor=_;}},\n        xScale:  {get: function(){return xScale;}, set: function(_){xScale=_;}},\n        yScale:  {get: function(){return yScale;}, set: function(_){yScale=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n        y: {\n            get: function() {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n                return {};\n            },\n            set: function(_) {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n            }\n        },\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.boxPlotChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var boxplot = nv.models.boxPlot(),\n        xAxis = nv.models.axis(),\n        yAxis = nv.models.axis();\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60},\n        width = null,\n        height = null,\n        color = nv.utils.getColor(),\n        showXAxis = true,\n        showYAxis = true,\n        rightAlignYAxis = false,\n        staggerLabels = false,\n        tooltip = nv.models.tooltip(),\n        x, y,\n        noData = 'No Data Available.',\n        dispatch = d3.dispatch('beforeUpdate', 'renderEnd'),\n        duration = 250;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip.duration(0);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(boxplot);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this), that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = (width  || parseInt(container.style('width')) || 960) - margin.left - margin.right;\n            var availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // TODO still need to find a way to validate quartile data presence using boxPlot callbacks.\n            // Display No Data message if there's nothing to show. (quartiles required at minimum).\n            if (!data || !data.length) {\n                var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n                noDataText.enter().append('text')\n                    .attr('class', 'nvd3 nv-noData')\n                    .attr('dy', '-.7em')\n                    .style('text-anchor', 'middle');\n\n                noDataText\n                    .attr('x', margin.left + availableWidth / 2)\n                    .attr('y', margin.top + availableHeight / 2)\n                    .text(function(d) { return d });\n\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = boxplot.xScale();\n            y = boxplot.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(' + availableWidth + ',0)');\n            }\n\n            // Main Chart Component(s)\n            boxplot.width(availableWidth).height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n\n            barsWrap.transition().call(boxplot);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + boxplot.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 === 0 ? '5' : '17') + ')' })\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select('.nv-zeroLine line')\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', y(0))\n                .attr('y2', y(0))\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n        });\n\n        renderWatch.renderEnd('nv-boxplot chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip.data(evt).hidden(false);\n    });\n\n    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.data(evt).hidden(true);\n    });\n\n    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.boxplot = boxplot;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            boxplot.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            boxplot.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, boxplot);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\n\nnv.models.bullet = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , orient = 'left' // TODO top & bottom\n        , reverse = false\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , markerLines = function(d) { return d.markerLines ? d.markerLines : [0] }\n        , measures = function(d) { return d.measures }\n        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n        , markerLineLabels = function(d) { return d.markerLineLabels ? d.markerLineLabels : []  }\n        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , width = 380\n        , height = 30\n        , container = null\n        , tickFormat = null\n        , color = nv.utils.getColor(['#1f77b4'])\n        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')\n        , defaultRangeLabels = [\"Maximum\", \"Mean\", \"Minimum\"]\n        , legacyRangeClassNames = [\"Max\", \"Avg\", \"Min\"]\n        , duration = 1000\n        ;\n\n    function sortLabels(labels, values){\n        var lz = labels.slice();\n        labels.sort(function(a, b){\n            var iA = lz.indexOf(a);\n            var iB = lz.indexOf(b);\n            return d3.descending(values[iA], values[iB]);\n        });\n    };\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var rangez = ranges.call(this, d, i).slice(),\n                markerz = markers.call(this, d, i).slice(),\n                markerLinez = markerLines.call(this, d, i).slice(),\n                measurez = measures.call(this, d, i).slice(),\n                rangeLabelz = rangeLabels.call(this, d, i).slice(),\n                markerLabelz = markerLabels.call(this, d, i).slice(),\n                markerLineLabelz = markerLineLabels.call(this, d, i).slice(),\n                measureLabelz = measureLabels.call(this, d, i).slice();\n\n            // Sort labels according to their sorted values\n            sortLabels(rangeLabelz, rangez);\n            sortLabels(markerLabelz, markerz);\n            sortLabels(markerLineLabelz, markerLinez);\n            sortLabels(measureLabelz, measurez);\n\n            // sort values descending\n            rangez.sort(d3.descending);\n            markerz.sort(d3.descending);\n            markerLinez.sort(d3.descending);\n            measurez.sort(d3.descending);\n\n            // Setup Scales\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain( d3.extent(d3.merge([forceX, rangez])) )\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var rangeMin = d3.min(rangez), //rangez[2]\n                rangeMax = d3.max(rangez), //rangez[0]\n                rangeAvg = rangez[1];\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var rangeClassNames = 'nv-range nv-range'+i;\n                if(i <= 2){\n                    rangeClassNames = rangeClassNames + ' nv-range'+legacyRangeClassNames[i];\n                }\n                gEnter.append('rect').attr('class', rangeClassNames);\n            }\n\n            gEnter.append('rect').attr('class', 'nv-measure');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var range = rangez[i];\n                g.select('rect.nv-range'+i)\n                    .datum(range)\n                    .attr('height', availableHeight)\n                    .transition()\n                    .duration(duration)\n                    .attr('width', w1(range))\n                    .attr('x', xp1(range))\n            }\n\n            g.select('rect.nv-measure')\n                .style('fill', color)\n                .attr('height', availableHeight / 3)\n                .attr('y', availableHeight / 3)\n                .on('mouseover', function() {\n                    dispatch.elementMouseover({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function() {\n                    dispatch.elementMouseout({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .transition()\n                .duration(duration)\n                .attr('width', measurez < 0 ?\n                    x1(0) - x1(measurez[0])\n                    : x1(measurez[0]) - x1(0))\n                .attr('x', xp1(measurez));\n\n            var h3 =  availableHeight / 6;\n\n            var markerData = markerz.map( function(marker, index) {\n                return {value: marker, label: markerLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .enter()\n              .append('path')\n              .attr('class', 'nv-markerTriangle')\n              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .transition()\n              .duration(duration)\n              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });\n\n            var markerLinesData = markerLinez.map( function(marker, index) {\n                return {value: marker, label: markerLineLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .enter()\n              .append('line')\n              .attr('cursor', '')\n              .attr('class', 'nv-markerLine')\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('y1', '2')\n              .attr('x2', function(d) { return x1(d.value) })\n              .attr('y2', availableHeight - 2)\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .transition()\n              .duration(duration)\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('x2', function(d) { return x1(d.value) });\n\n            wrap.selectAll('.nv-range')\n                .on('mouseover', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseover({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Previous',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseout({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        duration:    {get: function(){return duration;}, set: function(_){duration=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\n\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\nnv.models.bulletChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bullet = nv.models.bullet();\n    var tooltip = nv.models.tooltip();\n\n    var orient = 'left' // TODO top & bottom\n        , reverse = false\n        , margin = {top: 5, right: 40, bottom: 20, left: 120}\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , measures = function(d) { return d.measures }\n        , width = null\n        , height = 55\n        , tickFormat = null\n        , ticks = null\n        , noData = null\n        , dispatch = d3.dispatch()\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false);\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom,\n                that = this;\n\n            chart.update = function() { chart(selection) };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!d || !ranges.call(this, d, i)) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n                markerz = markers.call(this, d, i).slice().sort(d3.descending),\n                measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bulletWrap');\n            gEnter.append('g').attr('class', 'nv-titles');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain([0, Math.max(rangez[0], (markerz[0] || 0), measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\n            var title = gEnter.select('.nv-titles').append('g')\n                .attr('text-anchor', 'end')\n                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n            title.append('text')\n                .attr('class', 'nv-title')\n                .text(function(d) { return d.title; });\n\n            title.append('text')\n                .attr('class', 'nv-subtitle')\n                .attr('dy', '1em')\n                .text(function(d) { return d.subtitle; });\n\n            bullet\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var bulletWrap = g.select('.nv-bulletWrap');\n            d3.transition(bulletWrap).call(bullet);\n\n            // Compute the tick format.\n            var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\n            // Update the tick groups.\n            var tick = g.selectAll('g.nv-tick')\n                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {\n                    return this.textContent || format(d);\n                });\n\n            // Initialize the ticks with the old scale, x0.\n            var tickEnter = tick.enter().append('g')\n                .attr('class', 'nv-tick')\n                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n                .style('opacity', 1e-6);\n\n            tickEnter.append('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickEnter.append('text')\n                .attr('text-anchor', 'middle')\n                .attr('dy', '1em')\n                .attr('y', availableHeight * 7 / 6)\n                .text(format);\n\n            // Transition the updating ticks to the new scale, x1.\n            var tickUpdate = d3.transition(tick)\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1);\n\n            tickUpdate.select('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickUpdate.select('text')\n                .attr('y', availableHeight * 7 / 6);\n\n            // Transition the exiting ticks to the new scale, x1.\n            d3.transition(tick.exit())\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1e-6)\n                .remove();\n        });\n\n        d3.timer.flush();\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: evt.label,\n            value: evt.value,\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.bullet = bullet;\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bullet);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n\nnv.models.candlestickBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Width of the candlestick bars.\n            var barWidth = (availableWidth / data[0].values.length) * .45;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            var tickGroups = ticks.enter().append('g');\n\n            // The colors are currently controlled by CSS.\n            ticks\n                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});\n\n            var lines = tickGroups.append('line')\n                .attr('class', 'nv-candlestick-lines')\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            var rects = tickGroups.append('rect')\n                .attr('class', 'nv-candlestick-rects nv-bars')\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n\n            ticks.select('.nv-candlestick-lines').transition()\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            ticks.select('.nv-candlestick-rects').transition()\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-candlestickBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-candlestickBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.cumulativeLineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , showControls = true\n        , useInteractiveGuideline = false\n        , rescaleY = true\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , id = lines.id()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , average = function(d) { return d.average }\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        , duration = 250\n        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n        ;\n\n    state.index = 0;\n    state.rescaleY = rescaleY;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var dx = d3.scale.linear()\n        , index = {i: 0, x: 0}\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                index: index.i,\n                rescaleY: rescaleY\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.index !== undefined)\n                index.i = state.index;\n            if (state.rescaleY !== undefined)\n                rescaleY = state.rescaleY;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            container.classed('nv-chart-' + id, true);\n            var that = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart)\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            var indexDrag = d3.behavior.drag()\n                .on('dragstart', dragStart)\n                .on('drag', dragMove)\n                .on('dragend', dragEnd);\n\n\n            function dragStart(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'ew-resize');\n            }\n\n            function dragMove(d,i) {\n                index.x = d3.event.x;\n                index.i = Math.round(dx.invert(index.x));\n                updateZero();\n            }\n\n            function dragEnd(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'auto');\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            if (!rescaleY) {\n                var seriesDomains = data\n                    .filter(function(series) { return !series.disabled })\n                    .map(function(series,i) {\n                        var initialDomain = d3.extent(series.values, lines.y());\n\n                        //account for series being disabled when losing 95% or more\n                        if (initialDomain[0] < -.95) initialDomain[0] = -.95;\n\n                        return [\n                                (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),\n                                (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])\n                        ];\n                    });\n\n                var completeDomain = [\n                    d3.min(seriesDomains, function(d) { return d[0] }),\n                    d3.max(seriesDomains, function(d) { return d[1] })\n                ];\n\n                lines.yDomain(completeDomain);\n            } else {\n                lines.yDomain(null);\n            }\n\n            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length\n                .range([0, availableWidth])\n                .clamp(true);\n\n            var data = indexify(index.i, data);\n\n            // Setup containers and skeleton of chart\n            var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-interactive');\n            gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-background');\n            gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: 'Re-scale y-axis', disabled: !rescaleY }\n                ];\n\n                controls\n                    .width(140)\n                    .color(['#444', '#444', '#444'])\n                    .rightAlign(false)\n                    .margin({top: 5, right: 0, bottom: 5, left: 20})\n                ;\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Show error if series goes below 100%\n            var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\n            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n            if (tempDisabled.length) {\n                wrap.append('text').attr('class', 'tempDisabled')\n                    .attr('x', availableWidth / 2)\n                    .attr('y', '-.71em')\n                    .style('text-anchor', 'end')\n                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left,top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            gEnter.select('.nv-background')\n                .append('rect');\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                //.x(function(d) { return d.x })\n                .y(function(d) { return d.display.y })\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\n            linesWrap.call(lines);\n\n            //Store a series index number in the data array.\n            data.forEach(function(d,i) {\n                d.seriesIndex = i;\n            });\n\n            var avgLineData = data.filter(function(d) {\n                return !d.disabled && !!average(d);\n            });\n\n            var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n                .data(avgLineData, function(d) { return d.key; });\n\n            var getAvgLineY = function(d) {\n                //If average lines go off the svg element, clamp them to the svg bounds.\n                var yVal = y(average(d));\n                if (yVal < 0) return 0;\n                if (yVal > availableHeight) return availableHeight;\n                return yVal;\n            };\n\n            avgLines.enter()\n                .append('line')\n                .style('stroke-width',2)\n                .style('stroke-dasharray','10,10')\n                .style('stroke',function (d,i) {\n                    return lines.color()(d,d.seriesIndex);\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines\n                .style('stroke-opacity',function(d){\n                    //If average lines go offscreen, make them transparent\n                    var yVal = y(average(d));\n                    if (yVal < 0 || yVal > availableHeight) return 0;\n                    return 1;\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines.exit().remove();\n\n            //Create index line\n            var indexLine = linesWrap.selectAll('.nv-indexLine')\n                .data([index]);\n            indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n                .attr('width', 3)\n                .attr('x', -2)\n                .attr('fill', 'red')\n                .attr('fill-opacity', .5)\n                .style(\"pointer-events\",\"all\")\n                .call(indexDrag);\n\n            indexLine\n                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n                .attr('height', availableHeight);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            function updateZero() {\n                indexLine\n                    .data([index]);\n\n                //When dragging the index line, turn off line transitions.\n                // Then turn them back on when done dragging.\n                var oldDuration = chart.duration();\n                chart.duration(0);\n                chart.update();\n                chart.duration(oldDuration);\n            }\n\n            g.select('.nv-background rect')\n                .on('click', function() {\n                    index.x = d3.mouse(this)[0];\n                    index.i = Math.round(dx.invert(index.x));\n\n                    // update state and send stateChange with new index\n                    state.index = index.i;\n                    dispatch.stateChange(state);\n\n                    updateZero();\n                });\n\n            lines.dispatch.on('elementClick', function(e) {\n                index.i = e.pointIndex;\n                index.x = dx(index.i);\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n\n                updateZero();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n                rescaleY = !d.disabled;\n\n                state.rescaleY = rescaleY;\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        lines.highlightPoint(i, pointIndex, true);\n                        var point = series.values[pointIndex];\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex)\n                        });\n                    });\n\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.index !== 'undefined') {\n                    index.i = e.index;\n                    index.x = dx(index.i);\n\n                    state.index = e.index;\n\n                    indexLine\n                        .data([index]);\n                }\n\n                if (typeof e.rescaleY !== 'undefined') {\n                    rescaleY = e.rescaleY;\n                }\n\n                chart.update();\n            });\n\n        });\n\n        renderWatch.renderEnd('cumulativeLineChart immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        var point = {\n            x: chart.x()(evt.point),\n            y: chart.y()(evt.point),\n            color: evt.point.color\n        };\n        evt.point = point;\n        tooltip.data(evt).hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    //============================================================\n    // Functions\n    //------------------------------------------------------------\n\n    var indexifyYGetter = null;\n    /* Normalize the data according to an index point. */\n    function indexify(idx, data) {\n        if (!indexifyYGetter) indexifyYGetter = lines.y();\n        return data.map(function(line, i) {\n            if (!line.values) {\n                return line;\n            }\n            var indexValue = line.values[idx];\n            if (indexValue == null) {\n                return line;\n            }\n            var v = indexifyYGetter(indexValue, idx);\n\n            //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue\n            if (v < -.95 && !noErrorCheck) {\n                //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)\n\n                line.tempDisabled = true;\n                return line;\n            }\n\n            line.tempDisabled = false;\n\n            line.values = line.values.map(function(point, pointIndex) {\n                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / (1 + v) };\n                return point;\n            });\n\n            return line;\n        })\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        rescaleY:     {get: function(){return rescaleY;}, set: function(_){rescaleY=_;}},\n        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        average: {get: function(){return average;}, set: function(_){average=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n                chart.useVoronoi(false);\n            }\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        duration:    {get: function(){return duration;}, set: function(_){\n            duration = _;\n            lines.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating by adding necessary features to multiBar model\nnv.models.discreteBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , showValues = false\n        , valueFormat = d3.format(',.2f')\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , rectClass = 'discreteBar'\n        , duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n                    })\n                });\n\n            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], .1);\n            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\n            // If showValues, pad the Y axis range to account for label height\n            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n            else y.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            x0 = x0 || x;\n            y0 = y0 || y.copy().range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .watchTransition(renderWatch, 'discreteBar: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover });\n            groups\n                .watchTransition(renderWatch, 'discreteBar: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .75);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n                })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            barsEnter.append('rect')\n                .attr('height', 0)\n                .attr('width', x.rangeBand() * .9 / data.length )\n\n            if (showValues) {\n                barsEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                ;\n\n                bars.select('text')\n                    .text(function(d,i) { return valueFormat(getY(d,i)) })\n                    .watchTransition(renderWatch, 'discreteBar: bars text')\n                    .attr('x', x.rangeBand() * .9 / 2)\n                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\n                ;\n            } else {\n                bars.selectAll('text').remove();\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n                .style('fill', function(d,i) { return d.color || color(d,i) })\n                .style('stroke', function(d,i) { return d.color || color(d,i) })\n                .select('rect')\n                .attr('class', rectClass)\n                .watchTransition(renderWatch, 'discreteBar: bars rect')\n                .attr('width', x.rangeBand() * .9 / data.length);\n            bars.watchTransition(renderWatch, 'discreteBar: bars')\n                //.delay(function(d,i) { return i * 1200 / data[0].values.length })\n                .attr('transform', function(d,i) {\n                    var left = x(getX(d,i)) + x.rangeBand() * .05,\n                        top = getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 : //make 1 px positive bars show up above y=0\n                            y(getY(d,i));\n\n                    return 'translate(' + left + ', ' + top + ')'\n                })\n                .select('rect')\n                .attr('height', function(d,i) {\n                    return  Math.max(Math.abs(y(getY(d,i)) - y(0)), 1)\n                });\n\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('discreteBar immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.discreteBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var discretebar = nv.models.discreteBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n\t, legend = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.getColor()\n\t, showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x\n        , y\n        , noData = null\n        , dispatch = d3.dispatch('beforeUpdate','renderEnd')\n        , duration = 250\n        ;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .keyFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(discretebar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = discretebar.xScale();\n            y = discretebar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t    gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            discretebar\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(discretebar);\n\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + discretebar.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n                }\n\n                if (rotateLabels) {\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\",0)\n                .attr(\"x2\",(rightAlignYAxis) ? -availableWidth : availableWidth)\n                .attr(\"y1\", y(0))\n                .attr(\"y2\", y(0))\n            ;\n        });\n\n        renderWatch.renderEnd('discreteBar chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.discretebar = discretebar;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\tshowLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:  {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        wrapLabels:  {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            discretebar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            discretebar.color(color);\n\t    legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, discretebar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\nnv.models.distribution = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 400 //technically width or height depending on x or y....\n        , size = 8\n        , axis = 'x' // 'x' or 'y'... horizontal or vertical\n        , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n        , color = nv.utils.defaultColor()\n        , scale = d3.scale.linear()\n        , domain\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n                naxis = axis == 'x' ? 'y' : 'x',\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //------------------------------------------------------------\n            // Setup Scales\n\n            scale0 = scale0 || scale;\n\n            //------------------------------------------------------------\n\n\n            //------------------------------------------------------------\n            // Setup containers and skeleton of chart\n\n            var wrap = container.selectAll('g.nv-distribution').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            //------------------------------------------------------------\n\n\n            var distWrap = g.selectAll('g.nv-dist')\n                .data(function(d) { return d }, function(d) { return d.key });\n\n            distWrap.enter().append('g');\n            distWrap\n                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n                .style('stroke', function(d,i) { return color(d, i) });\n\n            var dist = distWrap.selectAll('line.nv-dist' + axis)\n                .data(function(d) { return d.values })\n            dist.enter().append('line')\n                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n                .style('stroke-opacity', 0)\n                .remove();\n            dist\n                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n                .attr(naxis + '1', 0)\n                .attr(naxis + '2', size);\n            renderWatch.transition(dist, 'dist')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\n\n            scale0 = scale.copy();\n\n        });\n        renderWatch.renderEnd('distribution immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart.dispatch = dispatch;\n\n    chart.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return chart;\n    };\n\n    chart.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return chart;\n    };\n\n    chart.axis = function(_) {\n        if (!arguments.length) return axis;\n        axis = _;\n        return chart;\n    };\n\n    chart.size = function(_) {\n        if (!arguments.length) return size;\n        size = _;\n        return chart;\n    };\n\n    chart.getData = function(_) {\n        if (!arguments.length) return getData;\n        getData = d3.functor(_);\n        return chart;\n    };\n\n    chart.scale = function(_) {\n        if (!arguments.length) return scale;\n        scale = _;\n        return chart;\n    };\n\n    chart.color = function(_) {\n        if (!arguments.length) return color;\n        color = nv.utils.getColor(_);\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        return chart;\n    };\n    //============================================================\n\n\n    return chart;\n}\nnv.models.focus = function(content) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var content = content || nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , brush = d3.svg.brush()\n        ;\n\n    var margin = {top: 10, right: 0, bottom: 30, left: 0}\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = 70\n        , showXAxis = true\n        , showYAxis = false\n        , rightAlignYAxis = false\n        , ticks = null\n        , x\n        , y\n        , brushExtent = null\n        , duration = 250\n        , dispatch = d3.dispatch('brush', 'onBrush', 'renderEnd')\n        , syncBrushing = true\n        ;\n\n    content.interactive(false);\n    content.pointActive(function(d) { return false; });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(content);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom;\n\n            chart.update = function() { \n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            // Setup Scales\n            x = content.xScale();\n            y = content.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-focus').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-focus').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            gEnter.append('g').attr('class', 'nv-background').append('rect');\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-contentWrap');\n            gEnter.append('g').attr('class', 'nv-brushBackground');\n            gEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n                \n            content\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var contentWrap = g.select('.nv-contentWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            d3.transition(contentWrap).call(content);\n            \n            // Setup Brush\n            brush\n                .x(x)\n                .on('brush', function() {\n                    onBrush(syncBrushing);\n                });\n\n            brush.on('brushend', function () {\n                if (!syncBrushing) {\n                    dispatch.onBrush(brush.empty() ? x.domain() : brush.extent());\n                }\n            });\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n    \n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                .attr('height', availableHeight);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            onBrush(true);\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n  \n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                d3.transition(g.select('.nv-x.nv-axis'))\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                d3.transition(g.select('.nv-y.nv-axis'))\n                    .call(yAxis);\n            }\n            \n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n    \n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n    \n    \n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x(d[0]) - x.range()[0],\n                            rightWidth = availableWidth - x(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n    \n                        d3.select(this).select('.right')\n                            .attr('x', x(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n\n            function onBrush(shouldDispatch) {\n                brushExtent = brush.empty() ? null : brush.extent();\n                var extent = brush.empty() ? x.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n                if (shouldDispatch) {\n                    dispatch.onBrush(extent);\n                }\n            }\n        });\n\n        renderWatch.renderEnd('focus immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.content = content;\n    chart.brush = brush;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        syncBrushing: {get: function(){return syncBrushing;}, set: function(_){syncBrushing=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            content.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            content.color(color);\n        }},\n        interpolate: {get: function(){return content.interpolate();}, set: function(_){\n            content.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n        }},\n        x: {get: function(){return content.x();}, set: function(_){\n            content.x(_);\n        }},\n        y: {get: function(){return content.y();}, set: function(_){\n            content.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, content);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.forceDirectedGraph = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , dispatch = d3.dispatch('renderEnd')\n        , color = nv.utils.getColor(['#000'])\n        , tooltip      = nv.models.tooltip()\n        , noData = null\n        // Force directed graph specific parameters [default values]\n        , linkStrength = 0.1\n        , friction = 0.9\n        , linkDist = 30\n        , charge = -120\n        , gravity = 0.1\n        , theta = 0.8\n        , alpha = 0.1\n        , radius = 5\n        // These functions allow to add extra attributes to ndes and links\n        ,nodeExtras = function(nodes) { /* Do nothing */ }\n        ,linkExtras = function(links) { /* Do nothing */ }\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n          container = d3.select(this);\n          nv.utils.initSVG(container);\n\n          var availableWidth = nv.utils.availableWidth(width, container, margin),\n              availableHeight = nv.utils.availableHeight(height, container, margin);\n\n          container\n                  .attr(\"width\", availableWidth)\n                  .attr(\"height\", availableHeight);\n\n          // Display No Data message if there's nothing to show.\n          if (!data || !data.links || !data.nodes) {\n              nv.utils.noData(chart, container)\n              return chart;\n          } else {\n              container.selectAll('.nv-noData').remove();\n          }\n          container.selectAll('*').remove();\n\n          // Collect names of all fields in the nodes\n          var nodeFieldSet = new Set();\n          data.nodes.forEach(function(node) {\n            var keys = Object.keys(node);\n            keys.forEach(function(key) {\n              nodeFieldSet.add(key);\n            });\n          });\n\n          var force = d3.layout.force()\n                .nodes(data.nodes)\n                .links(data.links)\n                .size([availableWidth, availableHeight])\n                .linkStrength(linkStrength)\n                .friction(friction)\n                .linkDistance(linkDist)\n                .charge(charge)\n                .gravity(gravity)\n                .theta(theta)\n                .alpha(alpha)\n                .start();\n\n          var link = container.selectAll(\".link\")\n                .data(data.links)\n                .enter().append(\"line\")\n                .attr(\"class\", \"nv-force-link\")\n                .style(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\n          var node = container.selectAll(\".node\")\n                .data(data.nodes)\n                .enter()\n                .append(\"g\")\n                .attr(\"class\", \"nv-force-node\")\n                .call(force.drag);\n\n          node\n            .append(\"circle\")\n            .attr(\"r\", radius)\n            .style(\"fill\", function(d) { return color(d) } )\n            .on(\"mouseover\", function(evt) {\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                  .attr('y1', evt.py);\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                  .attr('x2', evt.px);\n\n              // Add 'series' object to\n              var nodeColor = color(evt);\n              evt.series = [];\n              nodeFieldSet.forEach(function(field) {\n                evt.series.push({\n                  color: nodeColor,\n                  key:   field,\n                  value: evt[field]\n                });\n              });\n              tooltip.data(evt).hidden(false);\n            })\n            .on(\"mouseout\",  function(d) {\n              tooltip.hidden(true);\n            });\n\n          tooltip.headerFormatter(function(d) {return \"Node\";});\n\n          // Apply extra attributes to nodes and links (if any)\n          linkExtras(link);\n          nodeExtras(node);\n\n          force.on(\"tick\", function() {\n              link.attr(\"x1\", function(d) { return d.source.x; })\n                  .attr(\"y1\", function(d) { return d.source.y; })\n                  .attr(\"x2\", function(d) { return d.target.x; })\n                  .attr(\"y2\", function(d) { return d.target.y; });\n\n              node.attr(\"transform\", function(d) {\n                return \"translate(\" + d.x + \", \" + d.y + \")\";\n              });\n            });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:     {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n\n        // Force directed graph specific parameters\n        linkStrength:{get: function(){return linkStrength;}, set: function(_){linkStrength=_;}},\n        friction:    {get: function(){return friction;}, set: function(_){friction=_;}},\n        linkDist:    {get: function(){return linkDist;}, set: function(_){linkDist=_;}},\n        charge:      {get: function(){return charge;}, set: function(_){charge=_;}},\n        gravity:     {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        theta:       {get: function(){return theta;}, set: function(_){theta=_;}},\n        alpha:       {get: function(){return alpha;}, set: function(_){alpha=_;}},\n        radius:      {get: function(){return radius;}, set: function(_){radius=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        nodeExtras: {get: function(){return nodeExtras;}, set: function(_){\n            nodeExtras = _;\n        }},\n        linkExtras: {get: function(){return linkExtras;}, set: function(_){\n            linkExtras = _;\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.furiousLegend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 28 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n\n            var seriesShape;\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('circle');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n\n                seriesShape = series.select('rect');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var legendWidth = 0;\n                var columnWidths = [];\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15)\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('stroke', function(d,i) { return d.color || color(d, i) });\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? color(d,i) : '#fff';\n            } else if (!expanded) {\n                return !!d.disabled ? color(d,i) : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#fff' : color(d,i);\n            } else {\n                return !!d.disabled ? '#fff' : color(d,i);\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating and using multibar with single series for this\nnv.models.historicalBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceX = []\n        , forceY = [0]\n        , padData = false\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , interactive = true\n        ;\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n                .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bars');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n                .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n            bars.exit().remove();\n\n            bars.enter().append('rect')\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                .on('mouseover', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n\n                })\n                .on('mouseout', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    if (!interactive) return;\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            bars\n                .attr('fill', function(d,i) { return color(d, i); })\n                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n                .watchTransition(renderWatch, 'bars')\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                //TODO: better width calculations that don't assume always uniform data spacing;w\n                .attr('width', (availableWidth / data[0].values.length) * .9 );\n\n            bars.watchTransition(renderWatch, 'bars')\n                .attr('y', function(d,i) {\n                    var rval = getY(d,i) < 0 ?\n                        y(0) :\n                            y(0) - y(getY(d,i)) < 1 ?\n                        y(0) - 1 :\n                        y(getY(d,i));\n                    return nv.utils.NaNtoZero(rval);\n                })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\n        });\n\n        renderWatch.renderEnd('historicalBar immediate');\n        return chart;\n    }\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        container\n            .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container\n            .select(\".nv-bars .nv-bar.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData: {get: function(){return padData;}, set: function(_){padData=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.historicalBarChart = function(bar_model) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bars = bar_model || nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n\n    var margin = {top: 30, right: 90, bottom: 50, left: 90}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , state = {}\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        ;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n            renderWatch.models(bars);\n            if (showXAxis) renderWatch.models(xAxis);\n            if (showYAxis) renderWatch.models(yAxis);\n\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };\n            chart.container = this;\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = bars.xScale();\n            y = bars.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n            bars\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n            barsWrap.transition().call(bars);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .transition()\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .transition()\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                bars.clearHighlights();\n\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        bars.highlightPoint(pointIndex,true);\n                        var point = series.values[pointIndex];\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex),\n                            data: series.values[pointIndex]\n                        });\n                    });\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data({\n                        value: xValue,\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                dispatch.tooltipHide();\n                bars.clearHighlights();\n            });\n\n            legend.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n\n                if (!data.filter(function(d) { return !d.disabled }).length) {\n                    data.map(function(d) {\n                        d.disabled = false;\n                        wrap.selectAll('.nv-series').classed('disabled', false);\n                        return d;\n                    });\n                }\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                selection.transition().call(chart);\n            });\n\n            legend.dispatch.on('legendDblclick', function(d) {\n                //Double clicking should always enable current series, and disabled all others.\n                data.forEach(function(d) {\n                    d.disabled = true;\n                });\n                d.disabled = false;\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('historicalBarChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.bars = bars;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            bars.color(color);\n        }},\n        duration:    {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration=_;\n            renderWatch.reset(transitionDuration);\n            yAxis.duration(transitionDuration);\n            xAxis.duration(transitionDuration);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bars);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n// ohlcChart is just a historical chart with ohlc bars and some tweaks\nnv.models.ohlcBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\n\n// candlestickChart is just a historical chart with candlestick bars and some tweaks\nnv.models.candlestickBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\nnv.models.legend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 32 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            if (rightAlign)\n                wrap.attr('transform', 'translate(' + (- margin.right) + ',' + margin.top + ')');\n            else\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');\n            var seriesShape;\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('.nv-legend-symbol');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n                seriesShape = series.select('.nv-legend-symbol');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n            var legendWidth = 0;\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var columnWidths = [];\n                legendWidth = 0;\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        if(legendWidth < xpos + maxwidth) {\n                            legendWidth = xpos + maxwidth;\n                        }\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15);\n\n                // The background for the expanded legend (UI)\n                gEnter.insert('rect',':first-child')\n                    .attr('class', 'nv-legend-bg')\n                    .attr('fill', '#eee')\n                    // .attr('stroke', '#444')\n                    .attr('opacity',0);\n\n                var seriesBG = g.select('.nv-legend-bg');\n\n                seriesBG\n                .transition().duration(300)\n                    .attr('x', -versPadding )\n                    .attr('width', legendWidth + versPadding - 12)\n                    .attr('height', height + 10)\n                    .attr('y', -margin.top - 10)\n                    .attr('opacity', expanded ? 1 : 0);\n\n\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('fill-opacity', setBGOpacity)\n                .style('stroke', setBGColor);\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? '#000' : '#fff';\n            } else if (!expanded) {\n                if(!d.color) d.color = color(d,i);\n                return !!d.disabled ? d.color : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#eee' : d.color || color(d,i);\n            } else {\n                return d.color || color(d,i);\n            }\n        }\n\n\n        function setBGOpacity(d,i) {\n            if(expanded && vers == 'furious') {\n                return 1;\n            } else {\n                return !!d.disabled ? 0 : 1;\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.line = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var  scatter = nv.models.scatter()\n        ;\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , container = null\n        , strokeWidth = 1.5\n        , color = nv.utils.defaultColor() // a function that returns a color\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , interpolate = \"linear\" // controls the line interpolation\n        , duration = 250\n        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        ;\n\n    scatter\n        .pointSize(16) // default size\n        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n    ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            scatter\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var scatterWrap = wrap.select('.nv-scatterWrap');\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + scatter.id())\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n            scatterWrap\n                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })\n                .style('fill-opacity', 1e-6);\n\n            groups.exit().remove();\n\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i)});\n            groups.watchTransition(renderWatch, 'line: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', function(d) { return d.fillOpacity || .5});\n\n            var areaPaths = groups.selectAll('path.nv-area')\n                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n            areaPaths.enter().append('path')\n                .attr('class', 'nv-area')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n            groups.exit().selectAll('path.nv-area')\n                .remove();\n\n            areaPaths.watchTransition(renderWatch, 'line: areaPaths')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n\n            var linePaths = groups.selectAll('path.nv-line')\n                .data(function(d) { return [d.values] });\n\n            linePaths.enter().append('path')\n                .attr('class', 'nv-line')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n            );\n\n            linePaths.watchTransition(renderWatch, 'line: linePaths')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            );\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n        });\n        renderWatch.renderEnd('line immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    // Pass through events\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }},\n        isArea: {get: function(){return isArea;}, set: function(_){\n            isArea = d3.functor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            scatter.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            scatter.y(_);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            scatter.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.lineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.line())\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , focusEnable = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , duration = 250\n        ;\n\n    // set options on sub-objects for this chart\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient(rightAlignYAxis ? 'right' : 'left');\n\n    lines.clipEdge(true).duration(0);\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    interactiveLayer.tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled; })\n            };\n        };\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        };\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n            chart.update = function() {\n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled; });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length; }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (legendPosition === 'bottom') {\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + availableHeight +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                }\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n\n            // Setup Main (Focus) Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n              if(showXAxis) {\n                g.select('.nv-focus .nv-x.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(xAxis)\n                ;\n              }\n            }\n\n            function updateYAxis() {\n              if(showYAxis) {\n                g.select('.nv-focus .nv-y.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(yAxis)\n                ;\n              }\n            }\n\n            g.select('.nv-focus .nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                linesWrap.call(lines);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled && !series.disableTooltip;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = focusEnable ? (focus.brush.empty() ? focus.xScale().domain() : focus.brush.extent()) : x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            // Checks if the x point is between the extents, handling case where extent[0] is greater than extent[1]\n                            // (e.g. x domain is manually set to reverse the x-axis)\n                            if(extent[0] <= extent[1]) {\n                                return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                            } else {\n                                return lines.x()(d,i) >= extent[1] && lines.x()(d,i) <= extent[0];\n                            }\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            lines.highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point\n                        });\n                    });\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value;}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var defaultValueFormatter = function(d,i) {\n                    return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                };\n\n                interactiveLayer.tooltip\n                    .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                    .data({\n                        value: chart.x()( singlePoint,pointIndex ),\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on('elementClick', function(e) {\n                var pointXLocation, allData = [];\n\n                data.filter(function(series, i) {\n                    series.seriesIndex = i;\n                    return !series.disabled;\n                }).forEach(function(series) {\n                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                    var point = series.values[pointIndex];\n                    if (typeof point === 'undefined') return;\n                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                    var yPos = chart.yScale()(chart.y()(point,pointIndex));\n                    allData.push({\n                        point: point,\n                        pointIndex: pointIndex,\n                        pos: [pointXLocation, yPos],\n                        seriesIndex: series.seriesIndex,\n                        series: series\n                    });\n                });\n\n                lines.dispatch.elementClick(allData);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                focusLinesWrap.transition().duration(duration).call(lines);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n        });\n\n        renderWatch.renderEnd('lineChart immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        if(!evt.series.disableTooltip){\n            tooltip.data(evt).hidden(false);\n        }\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.focus = focus;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.state = state;\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        // Focus options, mostly passed onto focus model.\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        focusShowAxisX:    {get: function(){return focus.showXAxis();}, set: function(_){focus.showXAxis(_);}},\n        focusShowAxisY:    {get: function(){return focus.showYAxis();}, set: function(_){focus.showYAxis(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            lines.duration(duration);\n            focus.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            lines.color(color);\n            focus.color(color);\n        }},\n        interpolate: {get: function(){return lines.interpolate();}, set: function(_){\n            lines.interpolate(_);\n            focus.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n            focus.xTickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n            focus.yTickFormat(_);\n        }},\n        x: {get: function(){return lines.x();}, set: function(_){\n            lines.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return lines.y();}, set: function(_){\n            lines.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines.interactive(false);\n                lines.useVoronoi(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.lineWithFocusChart = function() {\n  return nv.models.lineChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\nnv.models.linePlusBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , lines2 = nv.models.line()\n        , bars = nv.models.historicalBar()\n        , bars2 = nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , x2Axis = nv.models.axis()\n        , y1Axis = nv.models.axis()\n        , y2Axis = nv.models.axis()\n        , y3Axis = nv.models.axis()\n        , y4Axis = nv.models.axis()\n        , legend = nv.models.legend()\n        , brush = d3.svg.brush()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 30, left: 60}\n        , marginTop = null\n        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n        , width = null\n        , height = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.defaultColor()\n        , showLegend = true\n        , focusEnable = true\n        , focusShowAxisY = false\n        , focusShowAxisX = true\n        , focusHeight = 50\n        , extent\n        , brushExtent = null\n        , x\n        , x2\n        , y1\n        , y2\n        , y3\n        , y4\n        , noData = null\n        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')\n        , transitionDuration = 0\n        , state = nv.utils.state()\n        , defaultState = null\n        , legendLeftAxisHint = ' (left axis)'\n        , legendRightAxisHint = ' (right axis)'\n        , switchYAxisOrder = false\n        ;\n\n    lines.clipEdge(true);\n    lines2.interactive(false);\n    // We don't want any points emitted for the focus chart's scatter graph.\n    lines2.pointActive(function(d) { return false });\n    xAxis.orient('bottom').tickPadding(5);\n    y1Axis.orient('left');\n    y2Axis.orient('right');\n    x2Axis.orient('bottom').tickPadding(5);\n    y3Axis.orient('left');\n    y4Axis.orient('right');\n\n    tooltip.headerEnabled(true).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var getBarsAxis = function() {\n        return switchYAxisOrder\n            ? { main: y2Axis, focus: y4Axis }\n            : { main: y1Axis, focus: y3Axis }\n    }\n\n    var getLinesAxis = function() {\n        return switchYAxisOrder\n            ? { main: y1Axis, focus: y3Axis }\n            : { main: y2Axis, focus: y4Axis }\n    }\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var allDisabled = function(data) {\n      return data.every(function(series) {\n        return series.disabled;\n      });\n    }\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight1 = nv.utils.availableHeight(height, container, margin)\n                    - (focusEnable ? focusHeight : 0),\n                availableHeight2 = focusHeight - margin2.top - margin2.bottom;\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n            if (dataBars.length && !switchYAxisOrder) {\n                x = bars.xScale();\n            } else {\n                x = lines.xScale();\n            }\n\n            x2 = x2Axis.scale();\n\n            // select the scales and series based on the position of the yAxis\n            y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();\n            y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();\n            y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();\n            y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();\n\n            var series1 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            var series2 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            x.range([0, availableWidth]);\n\n            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n                .range([0, availableWidth]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // this is the main chart\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-barsWrap');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n            // context chart is where you can focus in\n            var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n            contextEnter.append('g').attr('class', 'nv-x nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-barsWrap');\n            contextEnter.append('g').attr('class', 'nv-linesWrap');\n            contextEnter.append('g').attr('class', 'nv-brushBackground');\n            contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            //============================================================\n            // Legend\n            //------------------------------------------------------------\n\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        if(switchYAxisOrder) {\n                            series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);\n                        } else {\n                            series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);\n                        }\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    // FIXME: shouldn't this be \"- (focusEnabled ? focusHeight : 0)\"?\n                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //============================================================\n            // Context chart (focus chart) components\n            //------------------------------------------------------------\n\n            // hide or show the focus context chart\n            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');\n\n            bars2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && data[i].bar\n                }));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && !data[i].bar\n                }));\n\n            var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n                .datum(dataBars.length ? dataBars : [\n                    {values: []}\n                ]);\n            var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n                .datum(allDisabled(dataLines) ?\n                       [{values: []}] :\n                       dataLines.filter(function(dataLine) {\n                         return !dataLine.disabled;\n                       }));\n\n            g.select('.nv-context')\n                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');\n\n            bars2Wrap.transition().call(bars2);\n            lines2Wrap.transition().call(lines2);\n\n            // context (focus chart) axis controls\n            if (focusShowAxisX) {\n                x2Axis\n                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))\n                    .tickSize(-availableHeight2, 0);\n                g.select('.nv-context .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n                g.select('.nv-context .nv-x.nv-axis').transition()\n                    .call(x2Axis);\n            }\n\n            if (focusShowAxisY) {\n                y3Axis\n                    .scale(y3)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize( -availableWidth, 0);\n                y4Axis\n                    .scale(y4)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n                g.select('.nv-context .nv-y3.nv-axis')\n                    .style('opacity', dataBars.length ? 1 : 0)\n                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n                g.select('.nv-context .nv-y2.nv-axis')\n                    .style('opacity', dataLines.length ? 1 : 0)\n                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\n                g.select('.nv-context .nv-y1.nv-axis').transition()\n                    .call(y3Axis);\n                g.select('.nv-context .nv-y2.nv-axis').transition()\n                    .call(y4Axis);\n            }\n\n            // Setup Brush\n            brush.x(x2).on('brush', onBrush);\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n\n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                //.attr('y', -5)\n                .attr('height', availableHeight2);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight2 / 3;\n                return 'M' + (.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n\n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x2.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x2(d[0]) - x2.range()[0],\n                            rightWidth = x2.range()[1] - x2(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n                        d3.select(this).select('.right')\n                            .attr('x', x2(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n            function onBrush() {\n                brushExtent = brush.empty() ? null : brush.extent();\n                extent = brush.empty() ? x2.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n\n                // Prepare Main (Focus) Bars and Lines\n                bars\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n                lines\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\n                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n                    .datum(!dataBars.length ? [{values:[]}] :\n                        dataBars\n                            .map(function(d,i) {\n                                return {\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(allDisabled(dataLines) ? [{values:[]}] :\n                           dataLines\n                           .filter(function(dataLine) { return !dataLine.disabled; })\n                           .map(function(d,i) {\n                                return {\n                                    area: d.area,\n                                    fillOpacity: d.fillOpacity,\n                                    strokeWidth: d.strokeWidth,\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                // Update Main (Focus) X Axis\n                if (dataBars.length && !switchYAxisOrder) {\n                    x = bars.xScale();\n                } else {\n                    x = lines.xScale();\n                }\n\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight1, 0);\n\n                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n\n                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)\n                    .call(xAxis);\n\n                // Update Main (Focus) Bars and Lines\n                focusBarsWrap.transition().duration(transitionDuration).call(bars);\n                focusLinesWrap.transition().duration(transitionDuration).call(lines);\n\n                // Setup and Update Main (Focus) Y Axes\n                g.select('.nv-focus .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\n                y1Axis\n                    .scale(y1)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )\n                    .tickSize(-availableWidth, 0);\n                y2Axis\n                    .scale(y2)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) );\n\n                // Show the y2 rules only if y1 has none\n                if(!switchYAxisOrder) {\n                    y2Axis.tickSize(dataBars.length ? 0 : -availableWidth, 0);\n                } else {\n                    y2Axis.tickSize(dataLines.length ? 0 : -availableWidth, 0);\n                }\n\n                // Calculate opacity of the axis\n                var barsOpacity = dataBars.length ? 1 : 0;\n                var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;\n\n                var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;\n                var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;\n\n                g.select('.nv-focus .nv-y1.nv-axis')\n                    .style('opacity', y1Opacity);\n                g.select('.nv-focus .nv-y2.nv-axis')\n                    .style('opacity', y2Opacity)\n                    .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)\n                    .call(y1Axis);\n                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)\n                    .call(y2Axis);\n            }\n\n            onBrush();\n\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip\n            .duration(100)\n            .valueFormatter(function(d, i) {\n                return getLinesAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip\n            .duration(0)\n            .valueFormatter(function(d, i) {\n                return getBarsAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines = lines;\n    chart.lines2 = lines2;\n    chart.bars = bars;\n    chart.bars2 = bars2;\n    chart.xAxis = xAxis;\n    chart.x2Axis = x2Axis;\n    chart.y1Axis = y1Axis;\n    chart.y2Axis = y2Axis;\n    chart.y3Axis = y3Axis;\n    chart.y4Axis = y4Axis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},\n        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},\n        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},\n        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return margin2;}, set: function(_){\n            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;\n            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;\n            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;\n            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;\n        }},\n        duration: {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration = _;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines.x(_);\n            lines2.x(_);\n            bars.x(_);\n            bars2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines.y(_);\n            lines2.y(_);\n            bars.y(_);\n            bars2.y(_);\n        }},\n        switchYAxisOrder:    {get: function(){return switchYAxisOrder;}, set: function(_){\n            // Switch the tick format for the yAxis\n            if(switchYAxisOrder !== _) {\n                var y1 = y1Axis;\n                y1Axis = y2Axis;\n                y2Axis = y1;\n\n                var y3 = y3Axis;\n                y3Axis = y4Axis;\n                y4Axis = y3;\n            }\n            switchYAxisOrder=_;\n\n            y1Axis.orient('left');\n            y2Axis.orient('right');\n            y3Axis.orient('left');\n            y4Axis.orient('right');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , clipEdge = true\n        , stacked = false\n        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n        , color = nv.utils.defaultColor()\n        , hideable = false\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , duration = 500\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var last_datalength = 0;\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n            var nonStackableCount = 0;\n            // This function defines the requirements for render complete\n            var endFn = function(d, i) {\n                if (d.series === data.length - 1 && i === data[0].values.length - 1)\n                    return true;\n                return false;\n            };\n\n            if(hideable && data.length) hideable = [{\n                values: data[0].values.map(function(d) {\n                        return {\n                            x: d.x,\n                            y: 0,\n                            series: d.series,\n                            size: 0.01\n                        };}\n                )}];\n\n            if (stacked) {\n                var parsed = d3.layout.stack()\n                    .offset(stackOffset)\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (!data.length && hideable ? hideable : data);\n\n                parsed.forEach(function(series, i){\n                    // if series is non-stackable, use un-parsed data\n                    if (series.nonStackable) {\n                        data[i].nonStackableSeries = nonStackableCount++;\n                        parsed[i] = data[i];\n                    } else {\n                        // don't stack this seires on top of the nonStackable seriees\n                        if (i > 0 && parsed[i - 1].nonStackable){\n                            parsed[i].values.map(function(d,j){\n                                d.y0 -= parsed[i - 1].values[j].y;\n                                d.y1 = d.y0 + d.y;\n                            });\n                        }\n                    }\n                });\n                data = parsed;\n            }\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked && data.length > 0) {\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d, idx) {\n                        if (!data[idx].nonStackable) {\n                            var f = d.values[i]\n                            f.size = Math.abs(f.y);\n                            if (f.y<0)  {\n                                f.y1 = negBase;\n                                negBase = negBase - f.size;\n                            } else\n                            {\n                                f.y1 = f.size + posBase;\n                                posBase = posBase + f.size;\n                            }\n                        }\n\n                    });\n                });\n            }\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d, idx) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {\n                var domain = d.y;\n                // increase the domain range if this series is stackable\n                if (stacked && !data[d.idx].nonStackable) {\n                    if (d.y > 0){\n                        domain = d.y1\n                    } else {\n                        domain = d.y1 + d.y\n                    }\n                }\n                return domain;\n            }).concat(forceY)))\n            .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n\n            var exitTransition = renderWatch\n                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))\n                .attr('y', function(d, i, j) {\n                    var yVal = y0(0) || 0;\n                    if (stacked) {\n                        if (data[d.series] && !data[d.series].nonStackable) {\n                            yVal = y0(d.y0);\n                        }\n                    }\n                    return yVal;\n                })\n                .attr('height', 0)\n                .remove();\n            if (exitTransition.delay)\n                exitTransition.delay(function(d,i) {\n                    var delay = i * (duration / (last_datalength + 1)) - i;\n                    return delay;\n                });\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('rect.nv-bar')\n                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('rect')\n                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                    .attr('x', function(d,i,j) {\n                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )\n                    })\n                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })\n                    .attr('height', 0)\n                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })\n                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n                ;\n            bars\n                .style('fill', function(d,i,j){ return color(d, j, i);  })\n                .style('stroke', function(d,i,j){ return color(d, j, i); })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            var barSelection =\n                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))\n                    .delay(function(d,i) {\n                        return i * duration / data[0].values.length;\n                    });\n            if (stacked){\n                barSelection\n                    .attr('y', function(d,i,j) {\n                        var yVal = 0;\n                        // if stackable, stack it on top of the previous series\n                        if (!data[j].nonStackable) {\n                            yVal = y(d.y1);\n                        } else {\n                            if (getY(d,i) < 0){\n                                yVal = y(0);\n                            } else {\n                                if (y(0) - y(getY(d,i)) < -1){\n                                    yVal = y(0) - 1;\n                                } else {\n                                    yVal = y(getY(d, i)) || 0;\n                                }\n                            }\n                        }\n                        return yVal;\n                    })\n                    .attr('height', function(d,i,j) {\n                        if (!data[j].nonStackable) {\n                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 0);\n                        } else {\n                            return Math.max(Math.abs(y(getY(d,i)) - y(0)), 0) || 0;\n                        }\n                    })\n                    .attr('x', function(d,i,j) {\n                        var width = 0;\n                        if (data[j].nonStackable) {\n                            width = d.series * x.rangeBand() / data.length;\n                            if (data.length !== nonStackableCount){\n                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);\n                            }\n                        }\n                        return width;\n                    })\n                    .attr('width', function(d,i,j){\n                        if (!data[j].nonStackable) {\n                            return x.rangeBand();\n                        } else {\n                            // if all series are nonStacable, take the full width\n                            var width = (x.rangeBand() / nonStackableCount);\n                            // otherwise, nonStackable graph will be only taking the half-width\n                            // of the x rangeBand\n                            if (data.length !== nonStackableCount) {\n                                width = x.rangeBand()/(nonStackableCount*2);\n                            }\n                            return width;\n                        }\n                    });\n            }\n            else {\n                barSelection\n                    .attr('x', function(d,i) {\n                        return d.series * x.rangeBand() / data.length;\n                    })\n                    .attr('width', x.rangeBand() / data.length)\n                    .attr('y', function(d,i) {\n                        return getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 :\n                            y(getY(d,i)) || 0;\n                    })\n                    .attr('height', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n                    });\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n            // keep track of the last data value length for transition calculations\n            if (data[0] && data[0].values) {\n                last_datalength = data[0].values.length;\n            }\n\n        });\n\n        renderWatch.renderEnd('multibar immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},\n        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity: {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , interactiveLayer = nv.interactiveGuideline()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , reduceXTicks = true // if false a tick will show for every data point\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        , useInteractiveGuideline = false\n        ;\n\n    state.stacked = false // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(false);\n    xAxis\n        .orient('bottom')\n        .tickPadding(7)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function (d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function (d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var stacked = false;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition()\n                        .duration(duration)\n                        .call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text')\n                    .style('opacity', 1)\n\n                if (staggerLabels) {\n                    var getTranslate = function(x,y) {\n                        return \"translate(\" + x + \",\" + y + \")\";\n                    };\n\n                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n                    // Issue #140\n                    xTicks\n                        .selectAll(\"text\")\n                        .attr('transform', function(d,i,j) {\n                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n                        });\n\n                    var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n                    g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n                        .attr(\"transform\", function(d,i) {\n                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n                        });\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n\n                if (reduceXTicks)\n                    xTicks\n                        .filter(function(d,i) {\n                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n                        })\n                        .selectAll('text, line')\n                        .style('opacity', 0);\n\n                if(rotateLabels)\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\n                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n                    .style('opacity', 1);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n                chart.update();\n            });\n\n            if (useInteractiveGuideline) {\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    if (e.pointXValue == undefined) return;\n\n                    var singlePoint, pointIndex, pointXLocation, xValue, allData = [];\n                    data\n                        .filter(function(series, i) {\n                            series.seriesIndex = i;\n                            return !series.disabled;\n                        })\n                        .forEach(function(series,i) {\n                            pointIndex = x.domain().indexOf(e.pointXValue)\n\n                            var point = series.values[pointIndex];\n                            if (point === undefined) return;\n\n                            xValue = point.x;\n                            if (singlePoint === undefined) singlePoint = point;\n                            if (pointXLocation === undefined) pointXLocation = e.mouseX\n                            allData.push({\n                                key: series.key,\n                                value: chart.y()(point, pointIndex),\n                                color: color(series,series.seriesIndex),\n                                data: series.values[pointIndex]\n                            });\n                        });\n\n                    interactiveLayer.tooltip\n                        .data({\n                            value: xValue,\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    interactiveLayer.tooltip.hidden(true);\n                });\n            }\n            else {\n                multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n                    evt.value = chart.x()(evt.data);\n                    evt['series'] = {\n                        key: evt.data.key,\n                        value: chart.y()(evt.data),\n                        color: evt.color\n                    };\n                    tooltip.data(evt).hidden(false);\n                });\n\n                multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n\n                multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        renderWatch.renderEnd('multibarchart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},\n        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        wrapLabels:   {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontal = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getYerr = function(d) { return d.yErr }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , stacked = false\n        , showValues = false\n        , showBarLabels = false\n        , valuePadding = 60\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , valueFormat = d3.format(',.2f')\n        , delay = 1200\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , duration = 250\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0; //used to store previous scales\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            if (stacked)\n                data = d3.layout.stack()\n                    .offset('zero')\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (data);\n\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked)\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d) {\n                        var f = d.values[i]\n                        f.size = Math.abs(f.y);\n                        if (f.y<0)  {\n                            f.y1 = negBase - f.size;\n                            negBase = negBase - f.size;\n                        } else\n                        {\n                            f.y1 = posBase;\n                            posBase = posBase + f.size;\n                        }\n                    });\n                });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableHeight], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\n            if (showValues && !stacked)\n                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n            else\n                y.range(yRange || [0, availableWidth]);\n\n            x0 = x0 || x;\n            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n                });\n\n            barsEnter.append('rect')\n                .attr('width', 0)\n                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\n            bars\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            if (getYerr(data[0],0)) {\n                barsEnter.append('polyline');\n\n                bars.select('polyline')\n                    .attr('fill', 'none')\n                    .attr('points', function(d,i) {\n                        var xerr = getYerr(d,i)\n                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];\n                        xerr = xerr.map(function(e) { return y(e) - y(0); });\n                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];\n                        return a.map(function (path) { return path.join(',') }).join(' ');\n                    })\n                    .attr('transform', function(d,i) {\n                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        return 'translate(' + (getY(d,i) < 0 ? 0 : y(getY(d,i)) - y(0)) + ', ' + mid + ')'\n                    });\n            }\n\n            barsEnter.append('text');\n\n            if (showValues && !stacked) {\n                bars.select('text')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) {\n                        var t = valueFormat(getY(d,i))\n                            , yerr = getYerr(d,i);\n                        if (yerr === undefined)\n                            return t;\n                        if (!yerr.length)\n                            return t + '±' + valueFormat(Math.abs(yerr));\n                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));\n                    });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n            } else {\n                bars.selectAll('text').text('');\n            }\n\n            if (showBarLabels && !stacked) {\n                barsEnter.append('text').classed('nv-bar-label',true);\n                bars.select('text.nv-bar-label')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) { return getX(d,i) });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text.nv-bar-label')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n            }\n            else {\n                bars.selectAll('text.nv-bar-label').text('');\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            if (stacked)\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n                    })\n                    .select('rect')\n                    .attr('width', function(d,i) {\n                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0)) || 0\n                    })\n                    .attr('height', x.rangeBand() );\n            else\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        //TODO: stacked must be all positive or all negative, not both?\n                        return 'translate(' +\n                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n                            + ',' +\n                            (d.series * x.rangeBand() / data.length\n                                +\n                                x(getX(d,i)) )\n                            + ')'\n                    })\n                    .select('rect')\n                    .attr('height', x.rangeBand() / data.length )\n                    .attr('width', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0\n                    });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('multibarHorizontal immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        // this shows the group name, seems pointless?\n        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},\n        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},\n        groupSpacing: {get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity:  {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontalChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBarHorizontal()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend().height(30)\n        , controls = nv.models.legend().height(30)\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , stacked = false\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        ;\n\n    state.stacked = false; // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(stacked);\n\n    xAxis\n        .orient('left')\n        .tickPadding(5)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient('bottom')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(duration).call(chart) };\n            chart.container = this;\n\n            stacked = multibar.stacked();\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )\n                    .tickSize(-availableWidth, 0);\n\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text');\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(0,' + availableHeight + ')');\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\", y(0))\n                .attr(\"x2\", y(0))\n                .attr(\"y1\", 0)\n                .attr(\"y2\", -availableHeight)\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                stacked = multibar.stacked();\n\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n\n                chart.update();\n            });\n        });\n        renderWatch.renderEnd('multibar horizontal chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            key: evt.data.key,\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60},\n        marginTop = null,\n        color = nv.utils.defaultColor(),\n        width = null,\n        height = null,\n        showLegend = true,\n        noData = null,\n        yDomain1,\n        yDomain2,\n        getX = function(d) { return d.x },\n        getY = function(d) { return d.y},\n        interpolate = 'linear',\n        useVoronoi = true,\n        interactiveLayer = nv.interactiveGuideline(),\n        useInteractiveGuideline = false,\n        legendRightAxisHint = ' (right axis)',\n        duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear(),\n        yScale1 = d3.scale.linear(),\n        yScale2 = d3.scale.linear(),\n\n        lines1 = nv.models.line().yScale(yScale1).duration(duration),\n        lines2 = nv.models.line().yScale(yScale2).duration(duration),\n\n        scatters1 = nv.models.scatter().yScale(yScale1).duration(duration),\n        scatters2 = nv.models.scatter().yScale(yScale2).duration(duration),\n\n        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1).duration(duration),\n        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2).duration(duration),\n\n        stack1 = nv.models.stackedArea().yScale(yScale1).duration(duration),\n        stack2 = nv.models.stackedArea().yScale(yScale2).duration(duration),\n\n        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5).duration(duration),\n        yAxis1 = nv.models.axis().scale(yScale1).orient('left').duration(duration),\n        yAxis2 = nv.models.axis().scale(yScale2).orient('right').duration(duration),\n\n        legend = nv.models.legend().height(30),\n        tooltip = nv.models.tooltip(),\n        dispatch = d3.dispatch();\n\n    var charts = [lines1, lines2, scatters1, scatters2, bars1, bars2, stack1, stack2];\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});\n            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});\n            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});\n            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});\n            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});\n            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});\n            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});\n            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x }))\n                .range([0, availableWidth]);\n\n            var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            gEnter.append('g').attr('class', 'stack1Wrap');\n            gEnter.append('g').attr('class', 'stack2Wrap');\n            gEnter.append('g').attr('class', 'bars1Wrap');\n            gEnter.append('g').attr('class', 'bars2Wrap');\n            gEnter.append('g').attr('class', 'scatters1Wrap');\n            gEnter.append('g').attr('class', 'scatters2Wrap');\n            gEnter.append('g').attr('class', 'lines1Wrap');\n            gEnter.append('g').attr('class', 'lines2Wrap');\n            gEnter.append('g').attr('class', 'legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            var g = wrap.select('g');\n\n            var color_array = data.map(function(d,i) {\n                return data[i].color || color(d, i);\n            });\n\n            // Legend\n            if (!showLegend) {\n                g.select('.legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n                legend.color(color_array);\n\n                g.select('.legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            lines1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n            scatters1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));\n            scatters2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));\n            bars1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n            bars2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n            stack1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n            stack2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var lines1Wrap = g.select('.lines1Wrap')\n                .datum(dataLines1.filter(function(d){return !d.disabled}));\n            var scatters1Wrap = g.select('.scatters1Wrap')\n                .datum(dataScatters1.filter(function(d){return !d.disabled}));\n            var bars1Wrap = g.select('.bars1Wrap')\n                .datum(dataBars1.filter(function(d){return !d.disabled}));\n            var stack1Wrap = g.select('.stack1Wrap')\n                .datum(dataStack1.filter(function(d){return !d.disabled}));\n            var lines2Wrap = g.select('.lines2Wrap')\n                .datum(dataLines2.filter(function(d){return !d.disabled}));\n            var scatters2Wrap = g.select('.scatters2Wrap')\n                .datum(dataScatters2.filter(function(d){return !d.disabled}));\n            var bars2Wrap = g.select('.bars2Wrap')\n                .datum(dataBars2.filter(function(d){return !d.disabled}));\n            var stack2Wrap = g.select('.stack2Wrap')\n                .datum(dataStack2.filter(function(d){return !d.disabled}));\n\n            var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){\n                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n            }).concat([{x:0, y:0}]) : [];\n            var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){\n                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n            }).concat([{x:0, y:0}]) : [];\n\n            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            lines1.yDomain(yScale1.domain());\n            scatters1.yDomain(yScale1.domain());\n            bars1.yDomain(yScale1.domain());\n            stack1.yDomain(yScale1.domain());\n\n            lines2.yDomain(yScale2.domain());\n            scatters2.yDomain(yScale2.domain());\n            bars2.yDomain(yScale2.domain());\n            stack2.yDomain(yScale2.domain());\n\n            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\n            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\n            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n\n            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}\n            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}\n\n            xAxis\n                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                .tickSize(-availableHeight, 0);\n\n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n            d3.transition(g.select('.nv-x.nv-axis'))\n                .call(xAxis);\n\n            yAxis1\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n\n            d3.transition(g.select('.nv-y1.nv-axis'))\n                .call(yAxis1);\n\n            yAxis2\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n            d3.transition(g.select('.nv-y2.nv-axis'))\n                .call(yAxis2);\n\n            g.select('.nv-y1.nv-axis')\n                .classed('nv-disabled', series1.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[0] + ',0)');\n\n            g.select('.nv-y2.nv-axis')\n                .classed('nv-disabled', series2.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n            legend.dispatch.on('stateChange', function(newState) {\n                chart.update();\n            });\n\n            if(useInteractiveGuideline){\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching\n            //------------------------------------------------------------\n\n            function mouseover_line(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_scatter(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(100)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_stack(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.point['x'] = stack1.x()(evt.point);\n                evt.point['y'] = stack1.y()(evt.point);\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_bar(evt) {\n                var yaxis = data[evt.data.series].yAxis === 2 ? yAxis2 : yAxis1;\n\n                evt.value = bars1.x()(evt.data);\n                evt['series'] = {\n                    value: bars1.y()(evt.data),\n                    color: evt.color,\n                    key: evt.data.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n\n\n            function clearHighlights() {\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.clearHighlights();\n                } catch(e){}\n              }\n            }\n\n            function highlightPoint(serieIndex, pointIndex, b){\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.highlightPoint(serieIndex, pointIndex, b);\n                } catch(e){}\n              }\n            }\n\n            if(useInteractiveGuideline){\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    clearHighlights();\n                    var singlePoint, pointIndex, pointXLocation, allData = [];\n                    data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            return chart.x()(d,i) >= extent[0] && chart.x()(d,i) <= extent[1];\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = x(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point,\n                            yAxis: series.yAxis == 2 ? yAxis2 : yAxis1\n                        });\n                    });\n\n                    var defaultValueFormatter = function(d,i) {\n                        var yAxis = allData[i].yAxis;\n                        return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                    };\n\n                    interactiveLayer.tooltip\n                        .headerFormatter(function(d, i) {\n                            return xAxis.tickFormat()(d, i);\n                        })\n                        .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                        .data({\n                            value: chart.x()( singlePoint,pointIndex ),\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    clearHighlights();\n                });\n            } else {\n                lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                lines2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                stack2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n                bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n\n                bars1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars1.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n                bars2.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines1 = lines1;\n    chart.lines2 = lines2;\n    chart.scatters1 = scatters1;\n    chart.scatters2 = scatters2;\n    chart.bars1 = bars1;\n    chart.bars2 = bars2;\n    chart.stack1 = stack1;\n    chart.stack2 = stack2;\n    chart.xAxis = xAxis;\n    chart.yAxis1 = yAxis1;\n    chart.yAxis2 = yAxis2;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},\n        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines1.x(_);\n            lines2.x(_);\n            scatters1.x(_);\n            scatters2.x(_);\n            bars1.x(_);\n            bars2.x(_);\n            stack1.x(_);\n            stack2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines1.y(_);\n            lines2.y(_);\n            scatters1.y(_);\n            scatters2.y(_);\n            stack1.y(_);\n            stack2.y(_);\n            bars1.y(_);\n            bars2.y(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi=_;\n            lines1.useVoronoi(_);\n            lines2.useVoronoi(_);\n            stack1.useVoronoi(_);\n            stack2.useVoronoi(_);\n        }},\n\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines1.interactive(false);\n                lines1.useVoronoi(false);\n                lines2.interactive(false);\n                lines2.useVoronoi(false);\n                stack1.interactive(false);\n                stack1.useVoronoi(false);\n                stack2.interactive(false);\n                stack2.useVoronoi(false);\n                scatters1.interactive(false);\n                scatters2.interactive(false);\n            }\n        }},\n\n        duration: {get: function(){return duration;}, set: function(_) {\n            duration = _;\n            [lines1, lines2, stack1, stack2, scatters1, scatters2, xAxis, yAxis1, yAxis2].forEach(function(model){\n              model.duration(duration);\n            });\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.ohlcBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // ohlc bar width.\n            var w = (availableWidth / data[0].values.length) * .9;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            ticks.enter().append('path')\n                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n                .attr('d', function(d,i) {\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i)) - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                })\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('fill', function(d,i) { return color[0]; })\n                .attr('stroke', function(d,i) { return color[0]; })\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n\n            // the bar colors are controlled by CSS currently\n            ticks.attr('class', function(d,i,j) {\n                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;\n            });\n\n            d3.transition(ticks)\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('d', function(d,i) {\n                    var w = (availableWidth / data[0].values.length) * .9;\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i))\n                            - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-ohlcBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-ohlcBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n// Code adapted from Jason Davies' \"Parallel Coordinates\"\n// http://bl.ocks.org/jasondavies/1341281\nnv.models.parallelCoordinates = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 0, bottom: 10, left: 0}\n        , width = null\n        , height = null\n        , availableWidth = null\n        , availableHeight = null\n        , x = d3.scale.ordinal()\n        , y = {}\n        , undefinedValuesLabel = \"undefined values\"\n        , dimensionData = []\n        , enabledDimensions = []\n        , dimensionNames = []\n        , displayBrush = true\n        , color = nv.utils.defaultColor()\n        , filters = []\n        , active = []\n        , dragging = []\n        , axisWithUndefinedValues = []\n        , lineTension = 1\n        , foreground\n        , background\n        , dimensions\n        , line = d3.svg.line()\n        , axis = d3.svg.axis()\n        , dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', \"stateChange\", 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n           //Convert old data to new format (name, values)\n            if (data[0].values === undefined) {\n                var newData = [];\n                data.forEach(function (d) {\n                        var val = {};\n                        var key = Object.keys(d);\n                        key.forEach(function (k) { if (k !== \"name\") val[k] = d[k] });\n                        newData.push({ key: d.name, values: val });\n                });\n                data = newData;\n            }\n\n            var dataValues = data.map(function (d) {return d.values});\n            if (active.length === 0) {\n                active = data;\n            }; //set all active before first brush call\n            \n            dimensionNames = dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; }).map(function (d) { return d.key });\n            enabledDimensions = dimensionData.filter(function (d) { return !d.disabled; });\n            \n            // Setup Scales\n            x.rangePoints([0, availableWidth], 1).domain(enabledDimensions.map(function (d) { return d.key; }));\n\n            //Set as true if all values on an axis are missing.\n            // Extract the list of dimensions and create a scale for each.\n            var oldDomainMaxValue = {};\n            var displayMissingValuesline = false;\n            var currentTicks = [];\n            \n            dimensionNames.forEach(function(d) {\n                var extent = d3.extent(dataValues, function (p) { return +p[d]; });\n                var min = extent[0];\n                var max = extent[1];\n                var onlyUndefinedValues = false;\n                //If there is no values to display on an axis, set the extent to 0\n                if (isNaN(min) || isNaN(max)) {\n                    onlyUndefinedValues = true;\n                    min = 0;\n                    max = 0;\n                }\n                //Scale axis if there is only one value\n                if (min === max) {\n                    min = min - 1;\n                    max = max + 1;\n                }\n                var f = filters.filter(function (k) { return k.dimension == d; });\n                if (f.length !== 0) {\n                    //If there is only NaN values, keep the existing domain.\n                    if (onlyUndefinedValues) {\n                        min = y[d].domain()[0];\n                        max = y[d].domain()[1];\n                    }\n                        //If the brush extent is > max (< min), keep the extent value.\n                    else if (!f[0].hasOnlyNaN && displayBrush) {\n                        min = min > f[0].extent[0] ? f[0].extent[0] : min;\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                    }\n                        //If there is NaN values brushed be sure the brush extent is on the domain.\n                    else if (f[0].hasNaN) {\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                        oldDomainMaxValue[d] = y[d].domain()[1];\n                        displayMissingValuesline = true;\n                    }\n                }\n                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display \"undefined values\" text.\n                //The remaining 10% are used to display the missingValue line.\n                y[d] = d3.scale.linear()\n                    .domain([min, max])\n                    .range([(availableHeight - 12) * 0.9, 0]);\n\n                axisWithUndefinedValues = [];\n                y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);\n            });\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            line.interpolate('cardinal').tension(lineTension);\n            axis.orient('left');\n            var axisDrag = d3.behavior.drag()\n                        .on('dragstart', dragStart)\n                        .on('drag', dragMove)\n                        .on('dragend', dragEnd);\n\n            //Add missing value line at the bottom of the chart\n            var missingValuesline, missingValueslineText;\n            var step = x.range()[1] - x.range()[0];\n            step = isNaN(step) ? x.range()[0] : step;\n            if (!isNaN(step)) {\n                var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];\n                missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);\n                missingValuesline.enter().append('line');\n                missingValuesline.exit().remove();\n                missingValuesline.attr(\"x1\", function(d) { return d[0]; })\n                        .attr(\"y1\", function(d) { return d[1]; })\n                        .attr(\"x2\", function(d) { return d[2]; })\n                        .attr(\"y2\", function(d) { return d[3]; });\n    \n                //Add the text \"undefined values\" under the missing value line\n                missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data([undefinedValuesLabel]);\n                missingValueslineText.append('text').data([undefinedValuesLabel]);\n                missingValueslineText.enter().append('text');\n                missingValueslineText.exit().remove();\n                missingValueslineText.attr(\"y\", availableHeight)\n                        //To have the text right align with the missingValues line, substract 92 representing the text size.\n                        .attr(\"x\", availableWidth - 92 - step / 2)\n                        .text(function(d) { return d; });\n            }\n            // Add grey background lines for context.\n            background = wrap.select('.background').selectAll('path').data(data);\n            background.enter().append('path');\n            background.exit().remove();\n            background.attr('d', path);\n\n            // Add blue foreground lines for focus.\n            foreground = wrap.select('.foreground').selectAll('path').data(data);\n            foreground.enter().append('path')\n            foreground.exit().remove();\n            foreground.attr('d', path)\n                .style(\"stroke-width\", function (d, i) {\n                if (isNaN(d.strokeWidth)) { d.strokeWidth = 1;} return d.strokeWidth;})\n                .attr('stroke', function (d, i) { return d.color || color(d, i); });\n            foreground.on(\"mouseover\", function (d, i) {\n                d3.select(this).classed('hover', true).style(\"stroke-width\", d.strokeWidth + 2 + \"px\").style(\"stroke-opacity\", 1);\n                dispatch.elementMouseover({\n                    label: d.name,\n                    color: d.color || color(d, i),\n                    values: d.values,\n                    dimensions: enabledDimensions\n                });\n\n            });\n            foreground.on(\"mouseout\", function (d, i) {\n                d3.select(this).classed('hover', false).style(\"stroke-width\", d.strokeWidth + \"px\").style(\"stroke-opacity\", 0.7);\n                dispatch.elementMouseout({\n                    label: d.name,\n                    index: i\n                });\n            });\n            foreground.on('mousemove', function (d, i) {\n                dispatch.elementMousemove();\n            });\n            foreground.on('click', function (d) {\n                dispatch.elementClick({\n                    id: d.id\n                });\n            });\n            // Add a group element for each dimension.\n            dimensions = g.selectAll('.dimension').data(enabledDimensions);\n            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');\n\n            dimensions.attr('transform', function(d) { return 'translate(' + x(d.key) + ',0)'; });\n            dimensionsEnter.append('g').attr('class', 'nv-axis');\n\n            // Add an axis and title.\n            dimensionsEnter.append('text')\n                .attr('class', 'nv-label')\n                .style(\"cursor\", \"move\")\n                .attr('dy', '-1em')\n                .attr('text-anchor', 'middle')\n                .on(\"mouseover\", function(d, i) {\n                    dispatch.elementMouseover({\n                        label: d.tooltip || d.key,\n                        color: d.color \n                    });\n                })\n                .on(\"mouseout\", function(d, i) {\n                    dispatch.elementMouseout({\n                        label: d.tooltip\n                    });\n                })\n                .on('mousemove', function (d, i) {\n                    dispatch.elementMousemove();\n                })\n                .call(axisDrag);\n\n            dimensionsEnter.append('g').attr('class', 'nv-brushBackground');\n            dimensions.exit().remove();\n            dimensions.select('.nv-label').text(function (d) { return d.key });\n\n            // Add and store a brush for each axis.\n            restoreBrush(displayBrush);\n\n            var actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),\n                    extents = actives.map(function (p) { return y[p].brush.extent(); });\n            var formerActive = active.slice(0);\n\n            //Restore active values\n            active = [];\n            foreground.style(\"display\", function (d) {\n                var isActive = actives.every(function (p, i) {\n                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {\n                        return true;\n                    }\n                    return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                });\n                if (isActive)\n                    active.push(d);\n                return !isActive ? \"none\" : null;\n\n            });\n\n            if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {\n               dispatch.activeChanged(active);\n            }\n\n            // Returns the path for a given data point.\n            function path(d) {\n                return line(enabledDimensions.map(function (p) {\n                    //If value if missing, put the value on the missing value line\n                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {\n                        var domain = y[p.key].domain();\n                        var range = y[p.key].range();\n                        var min = domain[0] - (domain[1] - domain[0]) / 9;\n\n                        //If it's not already the case, allow brush to select undefined values\n                        if (axisWithUndefinedValues.indexOf(p.key) < 0) {\n\n                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);\n                            y[p.key].brush.y(newscale);\n                            axisWithUndefinedValues.push(p.key);\n                        }\n                        if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {\n                            return [x(p.key), y[p.key](min)];\n                        }\n                    }\n\n                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.\n                    if (missingValuesline !== undefined) {\n                        if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {\n                            missingValuesline.style(\"display\", \"inline\");\n                            missingValueslineText.style(\"display\", \"inline\");\n                        } else {\n                            missingValuesline.style(\"display\", \"none\");\n                            missingValueslineText.style(\"display\", \"none\");\n                        }\n                    }\n                    return [x(p.key), y[p.key](d.values[p.key])];\n                }));\n            }\n\n            function restoreBrush(visible) {\n                filters.forEach(function (f) {\n                    //If filter brushed NaN values, keep the brush on the bottom of the axis.\n                    var brushDomain = y[f.dimension].brush.y().domain();\n                    if (f.hasOnlyNaN) {\n                        f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];\n                    }\n                    if (f.hasNaN) {\n                        f.extent[0] = brushDomain[0];\n                    }\n                    if (visible)\n                        y[f.dimension].brush.extent(f.extent);\n                });\n                \n                dimensions.select('.nv-brushBackground')\n                    .each(function (d) {\n                        d3.select(this).call(y[d.key].brush);\n\n                    })\n                    .selectAll('rect')\n                    .attr('x', -8)\n                    .attr('width', 16);\n                \n                updateTicks();\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brushstart() {\n                //If brush aren't visible, show it before brushing again.\n                if (displayBrush === false) {\n                    displayBrush = true;\n                    restoreBrush(true);\n                }\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brush() {\n                actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); });\n                extents = actives.map(function(p) { return y[p].brush.extent(); });\n\n                filters = []; //erase current filters\n                actives.forEach(function(d,i) {\n                    filters[i] = {\n                        dimension: d,\n                        extent: extents[i],\n                        hasNaN: false,\n                        hasOnlyNaN: false\n                    }\n                });\n\n                active = []; //erase current active list\n                foreground.style('display', function(d) {\n                    var isActive = actives.every(function(p, i) {\n                        if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) return true;\n                        return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                    });\n                    if (isActive) active.push(d);\n                    return isActive ? null : 'none';\n                });\n                \n                updateTicks();\n                \n                dispatch.brush({\n                    filters: filters,\n                    active: active\n                });\n            }\n            function brushend() {\n                var hasActiveBrush = actives.length > 0 ? true : false;\n                filters.forEach(function (f) {\n                    if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)\n                        f.hasNaN = true;\n                    if (f.extent[1] < y[f.dimension].domain()[0])\n                        f.hasOnlyNaN = true;\n                });\n                dispatch.brushEnd(active, hasActiveBrush);\n            }           \n            function updateTicks() {\n                dimensions.select('.nv-axis')\n                    .each(function (d, i) {\n                        var f = filters.filter(function (k) { return k.dimension == d.key; });\n                        currentTicks[d.key] = y[d.key].domain();\n                        \n                        //If brush are available, display brush extent\n                        if (f.length != 0 && displayBrush)\n                        {\n                            currentTicks[d.key] = [];\n                            if (f[0].extent[1] > y[d.key].domain()[0]) \n                                currentTicks[d.key] = [f[0].extent[1]];\n                            if (f[0].extent[0] >= y[d.key].domain()[0])\n                                currentTicks[d.key].push(f[0].extent[0]);    \n                        }\n                            \n                        d3.select(this).call(axis.scale(y[d.key]).tickFormat(d.format).tickValues(currentTicks[d.key]));\n                });\n            }\n            function dragStart(d) {\n                dragging[d.key] = this.parentNode.__origin__ = x(d.key);\n                background.attr(\"visibility\", \"hidden\");\n            }\n            function dragMove(d) {\n                dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));\n                foreground.attr(\"d\", path);\n                enabledDimensions.sort(function (a, b) { return dimensionPosition(a.key) - dimensionPosition(b.key); });\n                enabledDimensions.forEach(function (d, i) { return d.currentPosition = i; });\n                x.domain(enabledDimensions.map(function (d) { return d.key; }));\n                dimensions.attr(\"transform\", function(d) { return \"translate(\" + dimensionPosition(d.key) + \")\"; });\n            }\n            function dragEnd(d, i) {\n                delete this.parentNode.__origin__;\n                delete dragging[d.key];\n                d3.select(this.parentNode).attr(\"transform\", \"translate(\" + x(d.key) + \")\");\n                foreground\n                  .attr(\"d\", path);\n                background\n                  .attr(\"d\", path)\n                  .attr(\"visibility\", null);\n\n                dispatch.dimensionsOrder(enabledDimensions);\n            }\n            function dimensionPosition(d) {\n                var v = dragging[d];\n                return v == null ? x(d) : v;\n            }\n        });\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:         {get: function(){return width;},           set: function(_){width= _;}},\n        height:        {get: function(){return height;},          set: function(_){height= _;}},\n        dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n        displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n        filters: { get: function () { return filters; }, set: function (_) { filters = _; } },\n        active: { get: function () { return active; }, set: function (_) { active = _; } },\n        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},\n        undefinedValuesLabel : {get: function(){return undefinedValuesLabel;}, set: function(_){undefinedValuesLabel=_;}},\n        \n        // deprecated options\n        dimensions: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensions', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key= k })\n            }\n        }},\n        dimensionNames: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionNames', 'use dimensionData instead');\n            dimensionNames = [];\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key = k })\n            }\n \n        }},\n        dimensionFormats: {get: function () { return dimensionData.map(function (d) { return d.format }); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionFormats', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (f) { dimensionData.push({ format: f }) })\n            } else {\n                _.forEach(function (f, i) { dimensionData[i].format = f })\n            }\n\n        }},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    =  _.top    !== undefined ? _.top    : margin.top;\n            margin.right  =  _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   =  _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.parallelCoordinatesChart = function () {\n        \"use strict\";\n        //============================================================\n        // Public Variables with Default Settings\n        //------------------------------------------------------------\n\n        var parallelCoordinates = nv.models.parallelCoordinates()\n        var legend = nv.models.legend()\n        var tooltip = nv.models.tooltip();\n        var dimensionTooltip = nv.models.tooltip();\n\n        var margin = { top: 0, right: 0, bottom: 0, left: 0 }\n        , marginTop = null\n        , width = null\n        , height = null\n        , showLegend = true\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , dimensionData = []\n        , displayBrush = true\n        , defaultState = null\n        , noData = null\n        , nanValue = \"undefined\"\n        , dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function () { return showControls ? 180 : 0 }\n        ;\n\n\t    //============================================================\n\n\t\t//============================================================\n        // Private Variables\n        //------------------------------------------------------------\n\n        var renderWatch = nv.utils.renderWatch(dispatch);\n\n        var stateGetter = function(data) {\n            return function() {\n                return {\n                    active: data.map(function(d) { return !d.disabled })\n                };\n            }\n        };\n\n        var stateSetter = function(data) {\n            return function(state) {\n                if(state.active !== undefined) {\n                    data.forEach(function(series, i) {\n                        series.disabled = !state.active[i];\n                    });\n                }\n            }\n        };\n\n        tooltip.contentGenerator(function(data) {\n            var str = '<table><thead><tr><td class=\"legend-color-guide\"><div style=\"background-color:' + data.color + '\"></div></td><td><strong>' + data.key + '</strong></td></tr></thead>';\n            if(data.series.length !== 0)\n            {\n                str = str + '<tbody><tr><td height =\"10px\"></td></tr>';\n                data.series.forEach(function(d){\n                    str = str + '<tr><td class=\"legend-color-guide\"><div style=\"background-color:' + d.color + '\"></div></td><td class=\"key\">' + d.key + '</td><td class=\"value\">' + d.value + '</td></tr>';\n                });\n                str = str + '</tbody>';\n            }\n            str = str + '</table>';\n            return str;\n        });\n\n        //============================================================\n        // Chart function\n        //------------------------------------------------------------\n\n        function chart(selection) {\n            renderWatch.reset();\n            renderWatch.models(parallelCoordinates);\n\n            selection.each(function(data) {\n                var container = d3.select(this);\n                nv.utils.initSVG(container);\n\n                var that = this;\n\n                var availableWidth = nv.utils.availableWidth(width, container, margin),\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\n                chart.update = function() { container.call(chart); };\n                chart.container = this;\n\n                state.setter(stateSetter(dimensionData), chart.update)\n                    .getter(stateGetter(dimensionData))\n                    .update();\n\n                //set state.disabled\n                state.disabled = dimensionData.map(function (d) { return !!d.disabled });\n\n                //Keep dimensions position in memory\n                dimensionData = dimensionData.map(function (d) {d.disabled = !!d.disabled; return d});\n                dimensionData.forEach(function (d, i) {\n                    d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;\n                    d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;\n                });\n\n               if (!defaultState) {\n                    var key;\n                    defaultState = {};\n                    for(key in state) {\n                        if(state[key] instanceof Array)\n                            defaultState[key] = state[key].slice(0);\n                        else\n                            defaultState[key] = state[key];\n                    }\n                }\n\n                // Display No Data message if there's nothing to show.\n                if(!data || !data.length) {\n                    nv.utils.noData(chart, container);\n                    return chart;\n                } else {\n                    container.selectAll('.nv-noData').remove();\n                }\n\n                //------------------------------------------------------------\n                // Setup containers and skeleton of chart\n\n                var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);\n                var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');\n\n                var g = wrap.select('g');\n\n                gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');\n                gEnter.append('g').attr('class', 'nv-legendWrap');\n\n                g.select(\"rect\")\n                    .attr(\"width\", availableWidth)\n                    .attr(\"height\", (availableHeight > 0) ? availableHeight : 0);\n\n                // Legend\n                if (!showLegend) {\n                    g.select('.nv-legendWrap').selectAll('*').remove();\n                } else {\n                    legend.width(availableWidth)\n                        .color(function (d) { return \"rgb(188,190,192)\"; });\n\n                    g.select('.nv-legendWrap')\n                        .datum(dimensionData.sort(function (a, b) { return a.originalPosition - b.originalPosition; }))\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n                    wrap.select('.nv-legendWrap')\n                       .attr('transform', 'translate( 0 ,' + (-margin.top) + ')');\n                }\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n                // Main Chart Component(s)\n                parallelCoordinates\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .dimensionData(dimensionData)\n                    .displayBrush(displayBrush);\n\n\t\t        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ')\n                  .datum(data);\n\n\t\t        parallelCoordinatesWrap.transition().call(parallelCoordinates);\n\n\t\t\t\t//============================================================\n                // Event Handling/Dispatching (in chart's scope)\n                //------------------------------------------------------------\n                //Display reset brush button\n\t\t        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {\n\t\t            if (hasActiveBrush) {\n\t\t                displayBrush = true;\n\t\t                dispatch.brushEnd(active);\n\t\t            } else {\n\n\t\t                displayBrush = false;\n\t\t            }\n\t\t        });\n\n\t\t        legend.dispatch.on('stateChange', function(newState) {\n\t\t            for(var key in newState) {\n\t\t                state[key] = newState[key];\n\t\t            }\n\t\t            dispatch.stateChange(state);\n\t\t            chart.update();\n\t\t        });\n\n                //Update dimensions order and display reset sorting button\n\t\t        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {\n\t\t            dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; });\n\t\t            var isSorted = false;\n\t\t            dimensionData.forEach(function (d, i) {\n\t\t                d.currentPosition = i;\n\t\t                if (d.currentPosition !== d.originalPosition)\n\t\t                    isSorted = true;\n\t\t            });\n\t\t            dispatch.dimensionsOrder(dimensionData, isSorted);\n\t\t        });\n\n\t\t\t\t// Update chart from a state object passed to event handler\n                dispatch.on('changeState', function (e) {\n\n                    if (typeof e.disabled !== 'undefined') {\n                        dimensionData.forEach(function (series, i) {\n                            series.disabled = e.disabled[i];\n                        });\n                        state.disabled = e.disabled;\n                    }\n                    chart.update();\n                });\n            });\n\n            renderWatch.renderEnd('parraleleCoordinateChart immediate');\n            return chart;\n        }\n\n\t\t//============================================================\n        // Event Handling/Dispatching (out of chart's scope)\n        //------------------------------------------------------------\n\n        parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {\n            var tp = {\n                key: evt.label,\n                color: evt.color,\n                series: []\n             }\n            if(evt.values){\n                Object.keys(evt.values).forEach(function (d) {\n                    var dim = evt.dimensions.filter(function (dd) {return dd.key === d;})[0];\n                    if(dim){\n                        var v;\n                        if (isNaN(evt.values[d]) || isNaN(parseFloat(evt.values[d]))) {\n                            v = nanValue;\n                        } else {\n                            v = dim.format(evt.values[d]);\n                        }\n                        tp.series.push({ idx: dim.currentPosition, key: d, value: v, color: dim.color });\n                    }\n                });\n                tp.series.sort(function(a,b) {return a.idx - b.idx});\n             }\n            tooltip.data(tp).hidden(false);\n        });\n\n        parallelCoordinates.dispatch.on('elementMouseout.tooltip', function(evt) {\n            tooltip.hidden(true)\n        });\n\n        parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {\n            tooltip();\n        });\n\t\t //============================================================\n        // Expose Public Variables\n        //------------------------------------------------------------\n\n\t\t// expose chart's sub-components\n        chart.dispatch = dispatch;\n        chart.parallelCoordinates = parallelCoordinates;\n        chart.legend = legend;\n        chart.tooltip = tooltip;\n        chart.options = nv.utils.optionsFunc.bind(chart);\n\n        chart._options = Object.create({}, {\n            // simple options, just get/set the necessary values\n            width: { get: function () { return width; }, set: function (_) { width = _; } },\n            height: { get: function () { return height; }, set: function (_) { height = _; } },\n            showLegend: { get: function () { return showLegend; }, set: function (_) { showLegend = _; } },\n            defaultState: { get: function () { return defaultState; }, set: function (_) { defaultState = _; } },\n            dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n            displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n            noData: { get: function () { return noData; }, set: function (_) { noData = _; } },\n            nanValue: { get: function () { return nanValue; }, set: function (_) { nanValue = _; } },\n\n            // options that require extra logic in the setter\n            margin: {\n                get: function () { return margin; },\n                set: function (_) {\n                    if (_.top !== undefined) {\n                        margin.top = _.top;\n                        marginTop = _.top;\n                    }\n                    margin.right = _.right !== undefined ? _.right : margin.right;\n                    margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n                    margin.left = _.left !== undefined ? _.left : margin.left;\n                }\n            },\n            color: {get: function(){return color;}, set: function(_){\n                    color = nv.utils.getColor(_);\n                    legend.color(color);\n                    parallelCoordinates.color(color);\n                }}\n        });\n\n        nv.utils.inheritOptions(chart, parallelCoordinates);\n        nv.utils.initOptions(chart);\n\n        return chart;\n    };\nnv.models.pie = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 500\n        , height = 500\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , valueFormat = d3.format(',.2f')\n        , showLabels = true\n        , labelsOutside = false\n        , labelType = \"key\"\n        , labelThreshold = .02 //if slice percentage is under this, don't show label\n        , donut = false\n        , title = false\n        , growOnHover = true\n        , titleOffset = 0\n        , labelSunbeamLayout = false\n        , startAngle = false\n        , padAngle = false\n        , endAngle = false\n        , cornerRadius = 0\n        , donutRatio = 0.5\n        , duration = 250\n        , arcsRadius = []\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    var arcs = [];\n    var arcsOver = [];\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right\n                , availableHeight = height - margin.top - margin.bottom\n                , radius = Math.min(availableWidth, availableHeight) / 2\n                , arcsRadiusOuter = []\n                , arcsRadiusInner = []\n                ;\n\n            container = d3.select(this)\n            if (arcsRadius.length === 0) {\n                var outer = radius - radius / 5;\n                var inner = donutRatio * radius;\n                for (var i = 0; i < data[0].length; i++) {\n                    arcsRadiusOuter.push(outer);\n                    arcsRadiusInner.push(inner);\n                }\n            } else {\n                if(growOnHover){\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 5) * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 5) * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 5); }));\n                } else {\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return d.outer * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return d.inner * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return d.inner; }));\n                }\n            }\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n            var g_pie = gEnter.append('g').attr('class', 'nv-pie');\n            gEnter.append('g').attr('class', 'nv-pieLabels');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\n            //\n            container.on('click', function(d,i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            arcs = [];\n            arcsOver = [];\n            for (var i = 0; i < data[0].length; i++) {\n\n                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);\n                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);\n\n                if (startAngle !== false) {\n                    arc.startAngle(startAngle);\n                    arcOver.startAngle(startAngle);\n                }\n                if (endAngle !== false) {\n                    arc.endAngle(endAngle);\n                    arcOver.endAngle(endAngle);\n                }\n                if (donut) {\n                    arc.innerRadius(arcsRadiusInner[i]);\n                    arcOver.innerRadius(arcsRadiusInner[i]);\n                }\n\n                if (arc.cornerRadius && cornerRadius) {\n                    arc.cornerRadius(cornerRadius);\n                    arcOver.cornerRadius(cornerRadius);\n                }\n\n                arcs.push(arc);\n                arcsOver.push(arcOver);\n            }\n\n            // Setup the Pie chart and choose the data element\n            var pie = d3.layout.pie()\n                .sort(null)\n                .value(function(d) { return d.disabled ? 0 : getY(d) });\n\n            // padAngle added in d3 3.5\n            if (pie.padAngle && padAngle) {\n                pie.padAngle(padAngle);\n            }\n\n            // if title is specified and donut, put it in the middle\n            if (donut && title) {\n                g_pie.append(\"text\").attr('class', 'nv-pie-title');\n\n                wrap.select('.nv-pie-title')\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function (d) {\n                        return title;\n                    })\n                    .style(\"font-size\", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + \"px\")\n                    .attr(\"dy\", \"0.35em\") // trick to vertically center text\n                    .attr('transform', function(d, i) {\n                        return 'translate(0, '+ titleOffset + ')';\n                    });\n            }\n\n            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);\n            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);\n\n            slices.exit().remove();\n            pieLabels.exit().remove();\n\n            var ae = slices.enter().append('g');\n            ae.attr('class', 'nv-slice');\n            ae.on('mouseover', function(d, i) {\n                d3.select(this).classed('hover', true);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(70)\n                        .attr(\"d\", arcsOver[i]);\n                }\n                dispatch.elementMouseover({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    percent: (d.endAngle - d.startAngle) / (2 * Math.PI)\n                });\n            });\n            ae.on('mouseout', function(d, i) {\n                d3.select(this).classed('hover', false);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(50)\n                        .attr(\"d\", arcs[i]);\n                }\n                dispatch.elementMouseout({data: d.data, index: i});\n            });\n            ae.on('mousemove', function(d, i) {\n                dispatch.elementMousemove({data: d.data, index: i});\n            });\n            ae.on('click', function(d, i) {\n                var element = this;\n                dispatch.elementClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    event: d3.event,\n                    element: element\n                });\n            });\n            ae.on('dblclick', function(d, i) {\n                dispatch.elementDblClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\")\n                });\n            });\n\n            slices.attr('fill', function(d,i) { return color(d.data, i); });\n            slices.attr('stroke', function(d,i) { return color(d.data, i); });\n\n            var paths = ae.append('path').each(function(d) {\n                this._current = d;\n            });\n\n            slices.select('path')\n                .transition()\n                .duration(duration)\n                .attr('d', function (d, i) { return arcs[i](d); })\n                .attrTween('d', arcTween);\n\n            if (showLabels) {\n                // This does the normal label\n                var labelsArc = [];\n                for (var i = 0; i < data[0].length; i++) {\n                    labelsArc.push(arcs[i]);\n\n                    if (labelsOutside) {\n                        if (donut) {\n                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());\n                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);\n                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);\n                        }\n                    } else if (!donut) {\n                            labelsArc[i].innerRadius(0);\n                    }\n                }\n\n                pieLabels.enter().append(\"g\").classed(\"nv-label\",true).each(function(d,i) {\n                    var group = d3.select(this);\n\n                    group.attr('transform', function (d, i) {\n                        if (labelSunbeamLayout) {\n                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                                rotateAngle -= 90;\n                            } else {\n                                rotateAngle += 90;\n                            }\n                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                        } else {\n                            d.outerRadius = radius + 10; // Set Outer Coordinate\n                            d.innerRadius = radius + 15; // Set Inner Coordinate\n                            return 'translate(' + labelsArc[i].centroid(d) + ')'\n                        }\n                    });\n\n                    group.append('rect')\n                        .style('stroke', '#fff')\n                        .style('fill', '#fff')\n                        .attr(\"rx\", 3)\n                        .attr(\"ry\", 3);\n\n                    group.append('text')\n                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                        .style('fill', '#000')\n                });\n\n                var labelLocationHash = {};\n                var avgHeight = 14;\n                var avgWidth = 140;\n                var createHashKey = function(coordinates) {\n                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n                };\n                var getSlicePercentage = function(d) {\n                    return (d.endAngle - d.startAngle) / (2 * Math.PI);\n                };\n\n                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {\n                    if (labelSunbeamLayout) {\n                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                            rotateAngle -= 90;\n                        } else {\n                            rotateAngle += 90;\n                        }\n                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                    } else {\n                        d.outerRadius = radius + 10; // Set Outer Coordinate\n                        d.innerRadius = radius + 15; // Set Inner Coordinate\n\n                        /*\n                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n                        Adjust the label's y-position to remove the overlap.\n                        */\n                        var center = labelsArc[i].centroid(d);\n                        var percent = getSlicePercentage(d);\n                        if (d.value && percent >= labelThreshold) {\n                            var hashKey = createHashKey(center);\n                            if (labelLocationHash[hashKey]) {\n                                center[1] -= avgHeight;\n                            }\n                            labelLocationHash[createHashKey(center)] = true;\n                        }\n                        return 'translate(' + center + ')'\n                    }\n                });\n\n                pieLabels.select(\".nv-label text\")\n                    .style('text-anchor', function(d,i) {\n                        //center the text on it's origin or begin/end if orthogonal aligned\n                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';\n                    })\n                    .text(function(d, i) {\n                        var percent = getSlicePercentage(d);\n                        var label = '';\n                        if (!d.value || percent < labelThreshold) return '';\n\n                        if(typeof labelType === 'function') {\n                            label = labelType(d, i, {\n                                'key': getX(d.data),\n                                'value': getY(d.data),\n                                'percent': valueFormat(percent)\n                            });\n                        } else {\n                            switch (labelType) {\n                                case 'key':\n                                    label = getX(d.data);\n                                    break;\n                                case 'value':\n                                    label = valueFormat(getY(d.data));\n                                    break;\n                                case 'percent':\n                                    label = d3.format('%')(percent);\n                                    break;\n                            }\n                        }\n                        return label;\n                    })\n                ;\n            }\n\n\n            // Computes the angle of an arc, converting from radians to degrees.\n            function angle(d) {\n                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n                return a > 90 ? a - 180 : a;\n            }\n\n            function arcTween(a, idx) {\n                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n                if (!donut) a.innerRadius = 0;\n                var i = d3.interpolate(this._current, a);\n                this._current = i(0);\n                return function (t) {\n                    return arcs[idx](i(t));\n                };\n            }\n        });\n\n        renderWatch.renderEnd('pie immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n        title:      {get: function(){return title;}, set: function(_){title=_;}},\n        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        x:          {get: function(){return getX;}, set: function(_){getX=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},\n        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},\n        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},\n        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},\n        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},\n        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},\n        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},\n        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},\n        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},\n\n        // depreciated after 1.7.1\n        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');\n        }},\n        // depreciated after 1.7.1\n        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');\n        }},\n        // deprecated after 1.7.1\n        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {\n            valueFormat=_;\n            nv.deprecated('labelFormat','use valueFormat instead');\n        }},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY=d3.functor(_);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }},\n        labelType:          {get: function(){return labelType;}, set: function(_){\n            labelType= _ || 'key';\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.pieChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var pie = nv.models.pie();\n    var legend = nv.models.legend();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , marginTop = null\n        , width = null\n        , height = null\n        , showTooltipPercent = false\n        , showLegend = true\n        , legendPosition = \"top\"\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return pie.valueFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined) {\n                data.forEach(function (series, i) {\n                    series.disabled = !state.active[i];\n                });\n            }\n        }\n    };\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(pie);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var that = this;\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            state.setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-pieWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                if (legendPosition === \"top\") {\n                    legend.width( availableWidth ).key(pie.x());\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                } else if (legendPosition === \"right\") {\n                    var legendWidth = nv.models.legend().width();\n                    if (availableWidth / 2 < legendWidth) {\n                        legendWidth = (availableWidth / 2)\n                    }\n                    legend.height(availableHeight).key(pie.x());\n                    legend.width(legendWidth);\n                    availableWidth -= legend.width();\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend)\n                        .attr('transform', 'translate(' + (availableWidth) +',0)');\n                }\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            pie.width(availableWidth).height(availableHeight);\n            var pieWrap = g.select('.nv-pieWrap').datum([data]);\n            d3.transition(pieWrap).call(pie);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState) {\n                    state[key] = newState[key];\n                }\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('pieChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    pie.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    pie.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    pie.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.legend = legend;\n    chart.dispatch = dispatch;\n    chart.pie = pie;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:              {get: function(){return width;},                set: function(_){width=_;}},\n        height:             {get: function(){return height;},               set: function(_){height=_;}},\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n        showLegend:         {get: function(){return showLegend;},           set: function(_){showLegend=_;}},\n        legendPosition:     {get: function(){return legendPosition;},       set: function(_){legendPosition=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            legend.color(color);\n            pie.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            pie.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n    nv.utils.inheritOptions(chart, pie);\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sankey = function() {\n    'use strict';\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sankey = {},\n        nodeWidth = 24,\n        nodePadding = 8,\n        size = [1, 1],\n        nodes = [],\n        links = [],\n        sinksRight = true;\n\n    var layout = function(iterations) {\n        computeNodeLinks();\n        computeNodeValues();\n        computeNodeBreadths();\n        computeNodeDepths(iterations);\n    };\n\n    var relayout = function() {\n        computeLinkDepths();\n    };\n\n    // SVG path data generator, to be used as 'd' attribute on 'path' element selection.\n    var link = function() {\n        var curvature = .5;\n\n        function link(d) {\n\n            var x0 = d.source.x + d.source.dx,\n                x1 = d.target.x,\n                xi = d3.interpolateNumber(x0, x1),\n                x2 = xi(curvature),\n                x3 = xi(1 - curvature),\n                y0 = d.source.y + d.sy + d.dy / 2,\n                y1 = d.target.y + d.ty + d.dy / 2;\n            var linkPath = 'M' + x0 + ',' + y0\n                + 'C' + x2 + ',' + y0\n                + ' ' + x3 + ',' + y1\n                + ' ' + x1 + ',' + y1;\n            return linkPath;\n        }\n\n        link.curvature = function(_) {\n            if (!arguments.length) return curvature;\n            curvature = +_;\n            return link;\n        };\n\n        return link;\n    };\n\n    // Y-position of the middle of a node.\n    var center = function(node) {\n        return node.y + node.dy / 2;\n    };\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    // Populate the sourceLinks and targetLinks for each node.\n    // Also, if the source and target are not objects, assume they are indices.\n    function computeNodeLinks() {\n        nodes.forEach(function(node) {\n            // Links that have this node as source.\n            node.sourceLinks = [];\n            // Links that have this node as target.\n            node.targetLinks = [];\n        });\n        links.forEach(function(link) {\n            var source = link.source,\n                target = link.target;\n            if (typeof source === 'number') source = link.source = nodes[link.source];\n            if (typeof target === 'number') target = link.target = nodes[link.target];\n            source.sourceLinks.push(link);\n            target.targetLinks.push(link);\n        });\n    }\n\n    // Compute the value (size) of each node by summing the associated links.\n    function computeNodeValues() {\n        nodes.forEach(function(node) {\n            node.value = Math.max(\n                d3.sum(node.sourceLinks, value),\n                d3.sum(node.targetLinks, value)\n            );\n        });\n    }\n\n    // Iteratively assign the breadth (x-position) for each node.\n    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n    // nodes with no incoming links are assigned breadth zero, while\n    // nodes with no outgoing links are assigned the maximum breadth.\n    function computeNodeBreadths() {\n        //\n        var remainingNodes = nodes,\n            nextNodes,\n            x = 0;\n\n        // Work from left to right.\n        // Keep updating the breath (x-position) of nodes that are target of recently updated nodes.\n        //\n        while (remainingNodes.length && x < nodes.length) {\n            nextNodes = [];\n            remainingNodes.forEach(function(node) {\n                node.x = x;\n                node.dx = nodeWidth;\n                node.sourceLinks.forEach(function(link) {\n                    if (nextNodes.indexOf(link.target) < 0) {\n                        nextNodes.push(link.target);\n                    }\n                });\n            });\n            remainingNodes = nextNodes;\n            ++x;\n            //\n        }\n\n        // Optionally move pure sinks always to the right.\n        if (sinksRight) {\n            moveSinksRight(x);\n        }\n\n        scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n    }\n\n    function moveSourcesRight() {\n        nodes.forEach(function(node) {\n            if (!node.targetLinks.length) {\n                node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n            }\n        });\n    }\n\n    function moveSinksRight(x) {\n        nodes.forEach(function(node) {\n            if (!node.sourceLinks.length) {\n                node.x = x - 1;\n            }\n        });\n    }\n\n    function scaleNodeBreadths(kx) {\n        nodes.forEach(function(node) {\n            node.x *= kx;\n        });\n    }\n\n    // Compute the depth (y-position) for each node.\n    function computeNodeDepths(iterations) {\n        // Group nodes by breath.\n        var nodesByBreadth = d3.nest()\n            .key(function(d) { return d.x; })\n            .sortKeys(d3.ascending)\n            .entries(nodes)\n            .map(function(d) { return d.values; });\n\n        //\n        initializeNodeDepth();\n        resolveCollisions();\n        computeLinkDepths();\n        for (var alpha = 1; iterations > 0; --iterations) {\n            relaxRightToLeft(alpha *= .99);\n            resolveCollisions();\n            computeLinkDepths();\n            relaxLeftToRight(alpha);\n            resolveCollisions();\n            computeLinkDepths();\n        }\n\n        function initializeNodeDepth() {\n            // Calculate vertical scaling factor.\n            var ky = d3.min(nodesByBreadth, function(nodes) {\n                return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n            });\n\n            nodesByBreadth.forEach(function(nodes) {\n                nodes.forEach(function(node, i) {\n                    node.y = i;\n                    node.dy = node.value * ky;\n                });\n            });\n\n            links.forEach(function(link) {\n                link.dy = link.value * ky;\n            });\n        }\n\n        function relaxLeftToRight(alpha) {\n            nodesByBreadth.forEach(function(nodes, breadth) {\n                nodes.forEach(function(node) {\n                    if (node.targetLinks.length) {\n                        // Value-weighted average of the y-position of source node centers linked to this node.\n                        var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedSource(link) {\n                return (link.source.y + link.sy + link.dy / 2) * link.value;\n            }\n        }\n\n        function relaxRightToLeft(alpha) {\n            nodesByBreadth.slice().reverse().forEach(function(nodes) {\n                nodes.forEach(function(node) {\n                    if (node.sourceLinks.length) {\n                        // Value-weighted average of the y-positions of target nodes linked to this node.\n                        var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedTarget(link) {\n                return (link.target.y + link.ty + link.dy / 2) * link.value;\n            }\n        }\n\n        function resolveCollisions() {\n            nodesByBreadth.forEach(function(nodes) {\n                var node,\n                    dy,\n                    y0 = 0,\n                    n = nodes.length,\n                    i;\n\n                // Push any overlapping nodes down.\n                nodes.sort(ascendingDepth);\n                for (i = 0; i < n; ++i) {\n                    node = nodes[i];\n                    dy = y0 - node.y;\n                    if (dy > 0) node.y += dy;\n                    y0 = node.y + node.dy + nodePadding;\n                }\n\n                // If the bottommost node goes outside the bounds, push it back up.\n                dy = y0 - nodePadding - size[1];\n                if (dy > 0) {\n                    y0 = node.y -= dy;\n\n                    // Push any overlapping nodes back up.\n                    for (i = n - 2; i >= 0; --i) {\n                        node = nodes[i];\n                        dy = node.y + node.dy + nodePadding - y0;\n                        if (dy > 0) node.y -= dy;\n                        y0 = node.y;\n                    }\n                }\n            });\n        }\n\n        function ascendingDepth(a, b) {\n            return a.y - b.y;\n        }\n    }\n\n    // Compute y-offset of the source endpoint (sy) and target endpoints (ty) of links,\n    // relative to the source/target node's y-position.\n    function computeLinkDepths() {\n        nodes.forEach(function(node) {\n            node.sourceLinks.sort(ascendingTargetDepth);\n            node.targetLinks.sort(ascendingSourceDepth);\n        });\n        nodes.forEach(function(node) {\n            var sy = 0, ty = 0;\n            node.sourceLinks.forEach(function(link) {\n                link.sy = sy;\n                sy += link.dy;\n            });\n            node.targetLinks.forEach(function(link) {\n                link.ty = ty;\n                ty += link.dy;\n            });\n        });\n\n        function ascendingSourceDepth(a, b) {\n            return a.source.y - b.source.y;\n        }\n\n        function ascendingTargetDepth(a, b) {\n            return a.target.y - b.target.y;\n        }\n    }\n\n    // Value property accessor.\n    function value(x) {\n        return x.value;\n    }\n\n    sankey.options = nv.utils.optionsFunc.bind(sankey);\n    sankey._options = Object.create({}, {\n        nodeWidth:    {get: function(){return nodeWidth;},   set: function(_){nodeWidth=+_;}},\n        nodePadding:  {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        nodes:        {get: function(){return nodes;},       set: function(_){nodes=_;}},\n        links:        {get: function(){return links ;},      set: function(_){links=_;}},\n        size:         {get: function(){return size;},        set: function(_){size=_;}},\n        sinksRight:   {get: function(){return sinksRight;},  set: function(_){sinksRight=_;}},\n\n        layout:       {get: function(){layout(32);},         set: function(_){layout(_);}},\n        relayout:     {get: function(){relayout();},         set: function(_){}},\n        center:       {get: function(){return center();},    set: function(_){\n            if(typeof _ === 'function'){\n                center=_;\n            }\n        }},\n        link:         {get: function(){return link();},      set: function(_){\n            if(typeof _ === 'function'){\n                link=_;\n            }\n            return link();\n        }}\n    });\n\n    nv.utils.initOptions(sankey);\n\n    return sankey;\n};\nnv.models.sankeyChart = function() {\n    \"use strict\";\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , sankey = nv.models.sankey()\n        , width = 600\n        , height = 400\n        , nodeWidth = 36\n        , nodePadding =  40\n        , units = 'units'\n        , center = undefined\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var formatNumber = d3.format(',.0f');    // zero decimal places\n    var format = function(d) {\n        return formatNumber(d) + ' ' + units;\n    };\n    var color = d3.scale.category20();\n    var linkTitle = function(d){\n        return d.source.name + ' → ' + d.target.name + '\\n' + format(d.value);\n    };\n    var nodeFillColor = function(d){\n        return d.color = color(d.name.replace(/ .*/, ''));\n    };\n    var nodeStrokeColor = function(d){\n        return d3.rgb(d.color).darker(2);\n    };\n    var nodeTitle = function(d){\n        return d.name + '\\n' + format(d.value);\n    };\n\n    var showError = function(element, message) {\n        element.append('text')\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('class', 'nvd3-sankey-chart-error')\n            .attr('text-anchor', 'middle')\n            .text(message);\n    };\n\n    function chart(selection) {\n        selection.each(function(data) {\n\n            var testData = {\n                nodes:\n                    [\n                        {'node': 1, 'name': 'Test 1'},\n                        {'node': 2, 'name': 'Test 2'},\n                        {'node': 3, 'name': 'Test 3'},\n                        {'node': 4, 'name': 'Test 4'},\n                        {'node': 5, 'name': 'Test 5'},\n                        {'node': 6, 'name': 'Test 6'}\n                    ],\n                links:\n                    [\n                        {'source': 0, 'target': 1, 'value': 2295},\n                        {'source': 0, 'target': 5, 'value': 1199},\n                        {'source': 1, 'target': 2, 'value': 1119},\n                        {'source': 1, 'target': 5, 'value': 1176},\n                        {'source': 2, 'target': 3, 'value': 487},\n                        {'source': 2, 'target': 5, 'value': 632},\n                        {'source': 3, 'target': 4, 'value': 301},\n                        {'source': 3, 'target': 5, 'value': 186}\n                    ]\n            };\n\n            // Error handling\n            var isDataValid = false;\n            var dataAvailable = false;\n\n            // check if data is valid\n            if(\n                (typeof data['nodes'] === 'object' && data['nodes'].length) >= 0 &&\n                (typeof data['links'] === 'object' && data['links'].length) >= 0\n            ){\n                isDataValid = true;\n            }\n\n            // check if data is available\n            if(\n                data['nodes'] && data['nodes'].length > 0 &&\n                data['links'] && data['links'].length > 0\n            ) {\n                dataAvailable = true;\n            }\n\n            // show error\n            if(!isDataValid) {\n                console.error('NVD3 Sankey chart error:', 'invalid data format for', data);\n                console.info('Valid data format is: ', testData, JSON.stringify(testData));\n                showError(selection, 'Error loading chart, data is invalid');\n                return false;\n            }\n\n            // TODO use nv.utils.noData\n            if(!dataAvailable) {\n                showError(selection, 'No data available');\n                return false;\n            }\n\n            // No errors, continue\n\n            // append the svg canvas to the page\n            var svg = selection.append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .append('g')\n                .attr('class', 'nvd3 nv-wrap nv-sankeyChart');\n\n            // Set the sankey diagram properties\n            sankey\n                .nodeWidth(nodeWidth)\n                .nodePadding(nodePadding)\n                .size([width, height]);\n\n            var path = sankey.link();\n\n            sankey\n                .nodes(data.nodes)\n                .links(data.links)\n                .layout(32)\n                .center(center);\n\n            // add in the links\n            var link = svg.append('g').selectAll('.link')\n                .data(data.links)\n                .enter().append('path')\n                .attr('class', 'link')\n                .attr('d', path)\n                .style('stroke-width', function(d) { return Math.max(1, d.dy); })\n            .sort(function(a,b) { return b.dy - a.dy; });\n\n            // add the link titles\n            link.append('title')\n                .text(linkTitle);\n\n            // add in the nodes\n            var node = svg.append('g').selectAll('.node')\n                .data(data.nodes)\n                .enter().append('g')\n                .attr('class', 'node')\n                .attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; })\n                .call(\n                    d3.behavior\n                        .drag()\n                        .origin(function(d) { return d; })\n                        .on('dragstart', function() {\n                            this.parentNode.appendChild(this);\n                        })\n                        .on('drag', dragmove)\n                );\n\n            // add the rectangles for the nodes\n            node.append('rect')\n                .attr('height', function(d) { return d.dy; })\n                .attr('width', sankey.nodeWidth())\n                .style('fill', nodeFillColor)\n                .style('stroke', nodeStrokeColor)\n                .append('title')\n                .text(nodeTitle);\n\n            // add in the title for the nodes\n            node.append('text')\n                .attr('x', -6)\n                .attr('y', function(d) { return d.dy / 2; })\n                .attr('dy', '.35em')\n                .attr('text-anchor', 'end')\n                .attr('transform', null)\n                .text(function(d) { return d.name; })\n                .filter(function(d) { return d.x < width / 2; })\n                .attr('x', 6 + sankey.nodeWidth())\n                .attr('text-anchor', 'start');\n\n            // the function for moving the nodes\n            function dragmove(d) {\n                d3.select(this).attr('transform',\n                'translate(' + d.x + ',' + (\n                    d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))\n                ) + ')');\n                sankey.relayout();\n                link.attr('d', path);\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        units:           {get: function(){return units;},       set: function(_){units=_;}},\n        width:           {get: function(){return width;},       set: function(_){width=_;}},\n        height:          {get: function(){return height;},      set: function(_){height=_;}},\n        format:          {get: function(){return format;},      set: function(_){format=_;}},\n        linkTitle:       {get: function(){return linkTitle;},   set: function(_){linkTitle=_;}},\n        nodeWidth:       {get: function(){return nodeWidth;},   set: function(_){nodeWidth=_;}},\n        nodePadding:     {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        center:          {get: function(){return center},       set: function(_){center=_}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        nodeStyle: {get: function(){return {};}, set: function(_){\n            nodeFillColor   = _.fillColor   !== undefined ? _.fillColor   : nodeFillColor;\n            nodeStrokeColor = _.strokeColor !== undefined ? _.strokeColor : nodeStrokeColor;\n            nodeTitle       = _.title       !== undefined ? _.title       : nodeTitle;\n        }}\n\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.scatter = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n        , width        = null\n        , height       = null\n        , color        = nv.utils.defaultColor() // chooses color\n        , pointBorderColor = null\n        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n        , container    = null\n        , x            = d3.scale.linear()\n        , y            = d3.scale.linear()\n        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n        , getX         = function(d) { return d.x } // accessor to get the x value\n        , getY         = function(d) { return d.y } // accessor to get the y value\n        , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , forceY       = [] // List of numbers to Force into the Y scale\n        , forceSize    = [] // List of numbers to Force into the Size scale\n        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n        , clipEdge     = false // if true, masks points within x and y scale\n        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n        , showVoronoi  = false // display the voronoi areas\n        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n        , xDomain      = null // Override x domain (skips the calculation from data)\n        , yDomain      = null // Override y domain\n        , xRange       = null // Override x range\n        , yRange       = null // Override y range\n        , sizeDomain   = null // Override point size domain\n        , sizeRange    = null\n        , singlePoint  = false\n        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        , useVoronoi   = true\n        , duration     = 250\n        , interactiveUpdateDelay = 300\n        , showLabels    = false\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0, z0 // used to store previous scales\n        , width0\n        , height0\n        , timeoutID\n        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        , _sizeRange_def = [16, 256]\n        , _cache = {}\n        ;\n\n    function getCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        val = _cache[key] = _cache[key] || {};\n        return val;\n    }\n\n    function delCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        delete _cache[key];\n    }\n\n    function getDiffs(d) {\n        var i, key, val,\n            cache = getCache(d),\n            diffs = false;\n        for (i = 1; i < arguments.length; i += 2) {\n            key = arguments[i];\n            val = arguments[i + 1](d[0], d[1]);\n            if (cache[key] !== val || !cache.hasOwnProperty(key)) {\n                cache[key] = val;\n                diffs = true;\n            }\n        }\n        return diffs;\n    }\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            var logScale = chart.yScale().name === d3.scale.log().name ? true : false;\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n                d3.merge(\n                    data.map(function(d) {\n                        return d.values.map(function(d,i) {\n                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n                        })\n                    })\n                );\n\n            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\n            if (padData && data[0])\n                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n             if (logScale) {\n                    var min = d3.min(seriesData.map(function(d) { if (d.y !== 0) return d.y; }));\n                    y.clamp(true)\n                        .domain(yDomain || d3.extent(seriesData.map(function(d) {\n                            if (d.y !== 0) return d.y;\n                            else return min * 0.1;\n                        }).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                } else {\n                        y.domain(yDomain || d3.extent(seriesData.map(function (d) { return d.y;}).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                }\n\n            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n                .range(sizeRange || _sizeRange_def);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];\n\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            if ( isNaN(x.domain()[0])) {\n                x.domain([-1,1]);\n            }\n\n            if ( isNaN(y.domain()[0])) {\n                y.domain([-1,1]);\n            }\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n            z0 = z0 || z;\n\n            var scaleDiff = x(1) !== x0(1) || y(1) !== y0(1) || z(1) !== z0(1);\n\n            width0 = width0 || width;\n            height0 = height0 || height;\n\n            var sizeDiff = width0 !== width || height0 !== height;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.classed('nv-single-point', singlePoint);\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-point-paths');\n            wrapEnter.append('g').attr('class', 'nv-point-clips');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect')\n                .attr('transform', 'translate( -10, -10)');\n                \n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth + 20)\n                .attr('height', (availableHeight > 0) ? availableHeight + 20 : 0);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            function updateInteractiveLayer() {\n                // Always clear needs-update flag regardless of whether or not\n                // we will actually do anything (avoids needless invocations).\n                needsUpdate = false;\n\n                if (!interactive) return false;\n\n                // inject series and point index for reference into voronoi\n                if (useVoronoi === true) {\n                    var vertices = d3.merge(data.map(function(group, groupIndex) {\n                            return group.values\n                                .map(function(point, pointIndex) {\n                                    // *Adding noise to make duplicates very unlikely\n                                    // *Injecting series and point index for reference\n                                    /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n                                     */\n                                    var pX = getX(point,pointIndex);\n                                    var pY = getY(point,pointIndex);\n\n                                    return [nv.utils.NaNtoZero(x(pX))+ Math.random() * 1e-4,\n                                            nv.utils.NaNtoZero(y(pY))+ Math.random() * 1e-4,\n                                        groupIndex,\n                                        pointIndex, point]; //temp hack to add noise until I think of a better way so there are no duplicates\n                                })\n                                .filter(function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n                                })\n                        })\n                    );\n\n                    if (vertices.length == 0) return false;  // No active points, we're done\n                    if (vertices.length < 3) {\n                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n                    }\n\n                    // keep voronoi sections from going more than 10 outside of graph\n                    // to avoid overlap with other things like legend etc\n                    var bounds = d3.geom.polygon([\n                        [-10,-10],\n                        [-10,height + 10],\n                        [width + 10,height + 10],\n                        [width + 10,-10]\n                    ]);\n\n                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n                        return {\n                            'data': bounds.clip(d),\n                            'series': vertices[i][2],\n                            'point': vertices[i][3]\n                        }\n                    });\n\n                    // nuke all voronoi paths on reload and recreate them\n                    wrap.select('.nv-point-paths').selectAll('path').remove();\n                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);\n                    var vPointPaths = pointPaths\n                        .enter().append(\"svg:path\")\n                        .attr(\"d\", function(d) {\n                            if (!d || !d.data || d.data.length === 0)\n                                return 'M 0 0';\n                            else\n                                return \"M\" + d.data.join(\",\") + \"Z\";\n                        })\n                        .attr(\"id\", function(d,i) {\n                            return \"nv-path-\"+i; })\n                        .attr(\"clip-path\", function(d,i) { return \"url(#nv-clip-\"+id+\"-\"+i+\")\"; })\n                        ;\n\n                    // good for debugging point hover issues\n                    if (showVoronoi) {\n                        vPointPaths.style(\"fill\", d3.rgb(230, 230, 230))\n                            .style('fill-opacity', 0.4)\n                            .style('stroke-opacity', 1)\n                            .style(\"stroke\", d3.rgb(200,200,200));\n                    }\n\n                    if (clipVoronoi) {\n                        // voronoi sections are already set to clip,\n                        // just create the circles with the IDs they expect\n                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom\n                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);\n                        var vPointClips = pointClips\n                            .enter().append(\"svg:clipPath\")\n                            .attr(\"id\", function(d, i) { return \"nv-clip-\"+id+\"-\"+i;})\n                            .append(\"svg:circle\")\n                            .attr('cx', function(d) { return d[0]; })\n                            .attr('cy', function(d) { return d[1]; })\n                            .attr('r', clipRadius);\n                    }\n\n                    var mouseEventCallback = function(el, d, mDispatch) {\n                        if (needsUpdate) return 0;\n                        var series = data[d.series];\n                        if (series === undefined) return;\n                        var point  = series.values[d.point];\n                        point['color'] = color(series, d.series);\n\n                        // standardize attributes for tooltip.\n                        point['x'] = getX(point);\n                        point['y'] = getY(point);\n\n                        // can't just get box of event node since it's actually a voronoi polygon\n                        var box = container.node().getBoundingClientRect();\n                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;\n                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n\n                        var pos = {\n                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,\n                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10\n                        };\n\n                        mDispatch({\n                            point: point,\n                            series: series,\n                            pos: pos,\n                            relativePos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n                            seriesIndex: d.series,\n                            pointIndex: d.point,\n                            event: d3.event,\n                            element: el\n                        });\n                    };\n\n                    pointPaths\n                        .on('click', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementClick);\n                        })\n                        .on('dblclick', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementDblClick);\n                        })\n                        .on('mouseover', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementMouseover);\n                        })\n                        .on('mouseout', function(d, i) {\n                            mouseEventCallback(this, d, dispatch.elementMouseout);\n                        });\n\n                } else {\n                    // add event handlers to points instead voronoi paths\n                    wrap.select('.nv-groups').selectAll('.nv-group')\n                        .selectAll('.nv-point')\n                        //.data(dataWithPoints)\n                        //.style('pointer-events', 'auto') // recativate events, disabled by css\n                        .on('click', function(d,i) {\n                            //nv.log('test', d, i);\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n                            var element = this;\n                            dispatch.elementClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top], //TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                event: d3.event,\n                                element: element\n                            });\n                        })\n                        .on('dblclick', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementDblClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i\n                            });\n                        })\n                        .on('mouseover', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseover({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        })\n                        .on('mouseout', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseout({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        });\n                }\n            }\n\n            needsUpdate = true;\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .remove();\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('nv-noninteractive', !interactive)\n                .classed('hover', function(d) { return d.hover });\n            groups.watchTransition(renderWatch, 'scatter: groups')\n                .style('fill', function(d,i) { return color(d, i) })\n                .style('stroke', function(d,i) { return d.pointBorderColor || pointBorderColor || color(d, i) })\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .5);\n\n            // create the points, maintaining their IDs from the original data set\n            var points = groups.selectAll('path.nv-point')\n                .data(function(d) {\n                    return d.values.map(\n                        function (point, pointIndex) {\n                            return [point, pointIndex]\n                        }).filter(\n                            function(pointArray, pointIndex) {\n                                return pointActive(pointArray[0], pointIndex)\n                            })\n                    });\n            points.enter().append('path')\n                .attr('class', function (d) {\n                    return 'nv-point nv-point-' + d[1];\n                })\n                .style('fill', function (d) { return d.color })\n                .style('stroke', function (d) { return d.color })\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')'\n                })\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n            points.exit().each(delCache).remove();\n            groups.exit().selectAll('path.nv-point')\n                .watchTransition(renderWatch, 'scatter exit')\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                })\n                .remove();\n            // Update points position only if \"x\" or \"y\" have changed\n            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'x', getX, 'y', getY); })\n                .watchTransition(renderWatch, 'scatter points')\n                .attr('transform', function(d) {\n                    //nv.log(d, getX(d[0],d[1]), x(getX(d[0],d[1])));\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                });\n            // Update points appearance only if \"shape\" or \"size\" have changed\n            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'shape', getShape, 'size', getSize); })\n                .watchTransition(renderWatch, 'scatter points')\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n\n            // add label a label to scatter chart\n            if(showLabels)\n            {\n                var titles =  groups.selectAll('.nv-label')\n                    .data(function(d) {\n                        return d.values.map(\n                            function (point, pointIndex) {\n                                return [point, pointIndex]\n                            }).filter(\n                                function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[0], pointIndex)\n                                })\n                        });\n\n                titles.enter().append('text')\n                    .style('fill', function (d,i) {\n                        return d.color })\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 1)\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + Math.sqrt(z(getSize(d[0],d[1]))/Math.PI) + 2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')';\n                    })\n                    .text(function(d,i){\n                        return d[0].label;});\n\n                titles.exit().remove();\n                groups.exit().selectAll('path.nv-label')\n                    .watchTransition(renderWatch, 'scatter exit')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')';\n                    })\n                    .remove();\n               titles.each(function(d) {\n                  d3.select(this)\n                    .classed('nv-label', true)\n                    .classed('nv-label-' + d[1], false)\n                    .classed('hover',false);\n                });\n                titles.watchTransition(renderWatch, 'scatter labels')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                    });\n            }\n\n            // Delay updating the invisible interactive layer for smoother animation\n            if( interactiveUpdateDelay )\n            {\n                clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n                timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay );\n            }\n            else\n            {\n                updateInteractiveLayer();\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n            z0 = z.copy();\n\n            width0 = width;\n            height0 = height;\n\n        });\n        renderWatch.renderEnd('scatter immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // utility function calls provided by this chart\n    chart._calls = new function() {\n        this.clearHighlights = function () {\n            nv.dom.write(function() {\n                container.selectAll(\".nv-point.hover\").classed(\"hover\", false);\n            });\n            return null;\n        };\n        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {\n            nv.dom.write(function() {\n                container.select('.nv-groups')\n                  .selectAll(\".nv-series-\" + seriesIndex)\n                  .selectAll(\".nv-point-\" + pointIndex)\n                  .classed(\"hover\", isHoverOver);\n            });\n        };\n    };\n\n    // trigger calls from events too\n    dispatch.on('elementMouseover.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);\n    });\n\n    dispatch.on('elementMouseout.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);\n    });\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:        {get: function(){return width;}, set: function(_){width=_;}},\n        height:       {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:       {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:       {get: function(){return y;}, set: function(_){y=_;}},\n        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},\n        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},\n        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},\n        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},\n        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},\n        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},\n        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},\n        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},\n        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},\n        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        interactiveUpdateDelay: {get:function(){return interactiveUpdateDelay;}, set: function(_){interactiveUpdateDelay=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){ showLabels = _;}},\n        pointBorderColor: {get: function(){return pointBorderColor;}, set: function(_){pointBorderColor=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},\n        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi = _;\n            if (useVoronoi === false) {\n                clipVoronoi = false;\n            }\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.scatterChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var scatter      = nv.models.scatter()\n        , xAxis        = nv.models.axis()\n        , yAxis        = nv.models.axis()\n        , legend       = nv.models.legend()\n        , distX        = nv.models.distribution()\n        , distY        = nv.models.distribution()\n        , tooltip      = nv.models.tooltip()\n        ;\n\n    var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n        , marginTop = null\n        , width        = null\n        , height       = null\n        , container    = null\n        , color        = nv.utils.defaultColor()\n        , x            = scatter.xScale()\n        , y            = scatter.yScale()\n        , showDistX    = false\n        , showDistY    = false\n        , showLegend   = true\n        , showXAxis    = true\n        , showYAxis    = true\n        , rightAlignYAxis = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , noData       = null\n        , duration = 250\n        , showLabels    = false\n        ;\n\n    scatter.xScale(x).yScale(y);\n    xAxis.orient('bottom').tickPadding(10);\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickPadding(10)\n    ;\n    distX.axis('x');\n    distY.axis('y');\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0\n        , renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        if (showDistX) renderWatch.models(distX);\n        if (showDistY) renderWatch.models(distY);\n\n        selection.each(function(data) {\n            var that = this;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                renderWatch.renderEnd('scatter immediate');\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            // background for pointer events\n            gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n            gEnter.append('g').attr('class', 'nv-distWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = availableWidth;\n                legend.width(legendWidth);\n\n                wrap.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, i);\n                    return d.color;\n                }).filter(function(d,i) { return !data[i].disabled }))\n                .showLabels(showLabels);\n\n            wrap.select('.nv-scatterWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n                .call(scatter);\n\n\n            wrap.select('.nv-regressionLinesWrap')\n                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\n            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n                .data(function (d) {\n                    return d;\n                });\n\n            regWrap.enter().append('g').attr('class', 'nv-regLines');\n\n            var regLine = regWrap.selectAll('.nv-regLine')\n                .data(function (d) {\n                    return [d]\n                });\n\n            regLine.enter()\n                .append('line').attr('class', 'nv-regLine')\n                .style('stroke-opacity', 0);\n\n            // don't add lines unless we have slope and intercept to use\n            regLine.filter(function(d) {\n                return d.intercept && d.slope;\n            })\n                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')\n                .attr('x1', x.range()[0])\n                .attr('x2', x.range()[1])\n                .attr('y1', function (d, i) {\n                    return y(x.domain()[0] * d.slope + d.intercept)\n                })\n                .attr('y2', function (d, i) {\n                    return y(x.domain()[1] * d.slope + d.intercept)\n                })\n                .style('stroke', function (d, i, j) {\n                    return color(d, j)\n                })\n                .style('stroke-opacity', function (d, i) {\n                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1\n                });\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight , 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            // Setup Distribution\n            if (showDistX) {\n                distX\n                    .getData(scatter.x())\n                    .scale(x)\n                    .width(availableWidth)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionX');\n                g.select('.nv-distributionX')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distX);\n            }\n\n            if (showDistY) {\n                distY\n                    .getData(scatter.y())\n                    .scale(y)\n                    .width(availableHeight)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionY');\n                g.select('.nv-distributionY')\n                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distY);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block\n            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {\n                tooltip.hidden(true);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', 0);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', distY.size());\n            });\n\n            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', evt.relativePos[1] - availableHeight);\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', evt.relativePos[0] + distX.size());\n                tooltip.data(evt).hidden(false);\n            });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('scatter with line immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.distX = distX;\n    chart.distY = distY;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        container:  {get: function(){return container;}, set: function(_){container=_;}},\n        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},\n        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            distX.color(color);\n            distY.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparkline = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , animate = true\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.getColor(['#000'])\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , showMinMaxPoints = true\n        , showCurrentPoint = true\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    \n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x   .domain(xDomain || d3.extent(data, getX ))\n                .range(xRange || [0, availableWidth]);\n\n            y   .domain(yDomain || d3.extent(data, getY ))\n                .range(yRange || [availableHeight, 0]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            var paths = wrap.selectAll('path')\n                .data(function(d) { return [d] });\n            paths.enter().append('path');\n            paths.exit().remove();\n            paths\n                .style('stroke', function(d,i) { return d.color || color(d, i) })\n                .attr('d', d3.svg.line()\n                    .x(function(d,i) { return x(getX(d,i)) })\n                    .y(function(d,i) { return y(getY(d,i)) })\n            );\n\n            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n            var points = wrap.selectAll('circle.nv-point')\n                .data(function(data) {\n                    var yValues = data.map(function(d, i) { return getY(d,i); });\n                    function pointIndex(index) {\n                        if (index != -1) {\n                            var result = data[index];\n                            result.pointIndex = index;\n                            return result;\n                        } else {\n                            return null;\n                        }\n                    }\n                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n                        currentPoint = pointIndex(yValues.length - 1);\n                    return [(showMinMaxPoints ? minPoint : null), (showMinMaxPoints ? maxPoint : null), (showCurrentPoint ? currentPoint : null)].filter(function (d) {return d != null;});\n                });\n            points.enter().append('circle');\n            points.exit().remove();\n            points\n                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n                .attr('r', 2)\n                .attr('class', function(d,i) {\n                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n                });\n        });\n        \n        renderWatch.renderEnd('sparkline immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:            {get: function(){return width;}, set: function(_){width=_;}},\n        height:           {get: function(){return height;}, set: function(_){height=_;}},\n        xDomain:          {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:          {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:           {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:           {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        xScale:           {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:           {get: function(){return y;}, set: function(_){y=_;}},\n        animate:          {get: function(){return animate;}, set: function(_){animate=_;}},\n        showMinMaxPoints: {get: function(){return showMinMaxPoints;}, set: function(_){showMinMaxPoints=_;}},\n        showCurrentPoint: {get: function(){return showCurrentPoint;}, set: function(_){showCurrentPoint=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparklinePlus = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sparkline = nv.models.sparkline();\n\n    var margin = {top: 15, right: 100, bottom: 10, left: 50}\n        , width = null\n        , height = null\n        , x\n        , y\n        , index = []\n        , paused = false\n        , xTickFormat = d3.format(',r')\n        , yTickFormat = d3.format(',.2f')\n        , showLastValue = true\n        , alignValue = true\n        , rightAlignValue = false\n        , noData = null\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n        \n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sparkline);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.call(chart); };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\n            // Setup Scales\n            x = sparkline.xScale();\n            y = sparkline.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-sparklineWrap');\n            gEnter.append('g').attr('class', 'nv-valueWrap');\n            gEnter.append('g').attr('class', 'nv-hoverArea');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            var sparklineWrap = g.select('.nv-sparklineWrap');\n\n            sparkline.width(availableWidth).height(availableHeight);\n            sparklineWrap.call(sparkline);\n\n            if (showLastValue) {\n                var valueWrap = g.select('.nv-valueWrap');\n                var value = valueWrap.selectAll('.nv-currentValue')\n                    .data([currentValue]);\n\n                value.enter().append('text').attr('class', 'nv-currentValue')\n                    .attr('dx', rightAlignValue ? -8 : 8)\n                    .attr('dy', '.9em')\n                    .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\n                value\n                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n                    .attr('y', alignValue ? function (d) {\n                        return y(d)\n                    } : 0)\n                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))\n                    .text(yTickFormat(currentValue));\n            }\n\n            gEnter.select('.nv-hoverArea').append('rect')\n                .on('mousemove', sparklineHover)\n                .on('click', function() { paused = !paused })\n                .on('mouseout', function() { index = []; updateValueLine(); });\n\n            g.select('.nv-hoverArea rect')\n                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n                .attr('width', availableWidth + margin.left + margin.right)\n                .attr('height', availableHeight + margin.top);\n\n            //index is currently global (within the chart), may or may not keep it that way\n            function updateValueLine() {\n                if (paused) return;\n\n                var hoverValue = g.selectAll('.nv-hoverValue').data(index);\n\n                var hoverEnter = hoverValue.enter()\n                    .append('g').attr('class', 'nv-hoverValue')\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0);\n\n                hoverValue.exit()\n                    .transition().duration(250)\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0)\n                    .remove();\n\n                hoverValue\n                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n                    .transition().duration(250)\n                    .style('stroke-opacity', 1)\n                    .style('fill-opacity', 1);\n\n                if (!index.length) return;\n\n                hoverEnter.append('line')\n                    .attr('x1', 0)\n                    .attr('y1', -margin.top)\n                    .attr('x2', 0)\n                    .attr('y2', availableHeight);\n\n                hoverEnter.append('text').attr('class', 'nv-xValue')\n                    .attr('x', -6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'end')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-xValue')\n                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\n                hoverEnter.append('text').attr('class', 'nv-yValue')\n                    .attr('x', 6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'start')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-yValue')\n                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n            }\n\n            function sparklineHover() {\n                if (paused) return;\n\n                var pos = d3.mouse(this)[0] - margin.left;\n\n                function getClosestIndex(data, x) {\n                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n                    var closestIndex = 0;\n                    for (var i = 0; i < data.length; i++){\n                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n                            distance = Math.abs(sparkline.x()(data[i], i) - x);\n                            closestIndex = i;\n                        }\n                    }\n                    return closestIndex;\n                }\n\n                index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n                updateValueLine();\n            }\n\n        });\n        renderWatch.renderEnd('sparklinePlus immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sparkline = sparkline;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:           {get: function(){return width;}, set: function(_){width=_;}},\n        height:          {get: function(){return height;}, set: function(_){height=_;}},\n        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},\n        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},\n        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},\n        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},\n        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},\n        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, sparkline);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedArea = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , color = nv.utils.defaultColor() // a function that computes the color\n        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n        , container = null\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , style = 'stack'\n        , offset = 'zero'\n        , order = 'default'\n        , interpolate = 'linear'  // controls the line interpolation\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , scatter = nv.models.scatter()\n        , duration = 250\n        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')\n        ;\n\n    scatter\n        .pointSize(2.2) // default size\n        .pointDomain([2.2, 2.2]) // all the same size by default\n    ;\n\n    /************************************\n     * offset:\n     *   'wiggle' (stream)\n     *   'zero' (stacked)\n     *   'expand' (normalize to 100%)\n     *   'silhouette' (simple centered)\n     *\n     * order:\n     *   'inside-out' (stream)\n     *   'default' (input order)\n     ************************************/\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            var dataRaw = data;\n            // Injecting point index into each point because d3.layout.stack().out does not give index\n            data.forEach(function(aseries, i) {\n                aseries.seriesIndex = i;\n                aseries.values = aseries.values.map(function(d, j) {\n                    d.index = j;\n                    d.seriesIndex = i;\n                    return d;\n                });\n            });\n\n            var dataFiltered = data.filter(function(series) {\n                return !series.disabled;\n            });\n\n            data = d3.layout.stack()\n                .order(order)\n                .offset(offset)\n                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n                .x(getX)\n                .y(getY)\n                .out(function(d, y0, y) {\n                    d.display = {\n                        y: y,\n                        y0: y0\n                    };\n                })\n            (dataFiltered);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-areaWrap');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            \n            // If the user has not specified forceY, make sure 0 is included in the domain\n            // Otherwise, use user-specified values for forceY\n            if (scatter.forceY().length == 0) {\n                scatter.forceY().push(0);\n            }\n            \n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .x(getX)\n                .y(function(d) {\n                    if (d.display !== undefined) { return d.display.y + d.display.y0; }\n                })\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, d.seriesIndex);\n                    return d.color;\n                }));\n\n            var scatterWrap = g.select('.nv-scatterWrap')\n                .datum(data);\n\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var area = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) {\n                    return y(d.display.y0)\n                })\n                .y1(function(d) {\n                    return y(d.display.y + d.display.y0)\n                })\n                .interpolate(interpolate);\n\n            var zeroArea = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) { return y(d.display.y0) })\n                .y1(function(d) { return y(d.display.y0) });\n\n            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n                .data(function(d) { return d });\n\n            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n                .attr('d', function(d,i){\n                    return zeroArea(d.values, d.seriesIndex);\n                })\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.areaMouseover({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaMouseout({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('click', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaClick({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                });\n\n            path.exit().remove();\n            path.style('fill', function(d,i){\n                    return d.color || color(d, d.seriesIndex)\n                })\n                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n            path.watchTransition(renderWatch,'stackedArea path')\n                .attr('d', function(d,i) {\n                    return area(d.values,i)\n                });\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            scatter.dispatch.on('elementMouseover.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n            });\n            scatter.dispatch.on('elementMouseout.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n            });\n\n            //Special offset functions\n            chart.d3_stackedOffset_stackPercent = function(stackData) {\n                var n = stackData.length,    //How many series\n                    m = stackData[0].length,     //how many points per series\n                    i,\n                    j,\n                    o,\n                    y0 = [];\n\n                for (j = 0; j < m; ++j) { //Looping through all points\n                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series\n                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.\n                    }\n\n                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0\n                        stackData[i][j][1] /= o;\n                    } else { //(total y value of all series at point in time i) == 0\n                        for (i = 0; i < n; i++) {\n                            stackData[i][j][1] = 0;\n                        }\n                    }\n                }\n                for (j = 0; j < m; ++j) y0[j] = 0;\n                return y0;\n            };\n\n        });\n\n        renderWatch.renderEnd('stackedArea immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.interpolate = function(_) {\n        if (!arguments.length) return interpolate;\n        interpolate = _;\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        scatter.duration(duration);\n        return chart;\n    };\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},\n        order:    {get: function(){return order;}, set: function(_){order=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        style: {get: function(){return style;}, set: function(_){\n            style = _;\n            switch (style) {\n                case 'stack':\n                    chart.offset('zero');\n                    chart.order('default');\n                    break;\n                case 'stream':\n                    chart.offset('wiggle');\n                    chart.order('inside-out');\n                    break;\n                case 'stream-center':\n                    chart.offset('silhouette');\n                    chart.order('inside-out');\n                    break;\n                case 'expand':\n                    chart.offset('expand');\n                    chart.order('default');\n                    break;\n                case 'stack_percent':\n                    chart.offset(chart.d3_stackedOffset_stackPercent);\n                    chart.order('default');\n                    break;\n            }\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var stacked = nv.models.stackedArea()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.stackedArea())\n        ;\n\n    var margin = {top: 10, right: 25, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , focusEnable = false\n        , useInteractiveGuideline = false\n        , showTotalInTooltip = true\n        , totalLabel = 'TOTAL'\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = 250\n        , controlOptions = ['Stacked','Stream','Expanded']\n        , controlLabels = {}\n        , duration = 250\n        ;\n\n    state.style = stacked.style();\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        });\n\n    var oldYTickFormat = null,\n        oldValueFormatter = null;\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var style = stacked.style();\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                style: stacked.style()\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.style !== undefined)\n                style = state.style;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var percentFormatter = d3.format('%');\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(stacked);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\n            chart.update = function() { container.transition().duration(duration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n            // Setup Scales\n            x = stacked.xScale();\n            y = stacked.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-stackedWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            // g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = (showControls && legendPosition === 'top') ? availableWidth - controlWidth : availableWidth;\n\n                legend.width(legendWidth);\n                g.select('.nv-legendWrap').datum(data).call(legend);\n\n                if (legendPosition === 'bottom') {\n                \t// constant from axis.js, plus some margin for better layout\n                \tvar xAxisHeight = (showXAxis ? 12 : 0) + 10;\n                   \tmargin.bottom = Math.max(legend.height() + xAxisHeight, margin.bottom);\n                   \tavailableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                \tvar legendTop = availableHeight + xAxisHeight;\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + legendTop +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && margin.top != legend.height()) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    g.select('.nv-legendWrap')\n                    \t.attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n                }\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    {\n                        key: controlLabels.stacked || 'Stacked',\n                        metaKey: 'Stacked',\n                        disabled: stacked.style() != 'stack',\n                        style: 'stack'\n                    },\n                    {\n                        key: controlLabels.stream || 'Stream',\n                        metaKey: 'Stream',\n                        disabled: stacked.style() != 'stream',\n                        style: 'stream'\n                    },\n                    {\n                        key: controlLabels.expanded || 'Expanded',\n                        metaKey: 'Expanded',\n                        disabled: stacked.style() != 'expand',\n                        style: 'expand'\n                    },\n                    {\n                        key: controlLabels.stack_percent || 'Stack %',\n                        metaKey: 'Stack_Percent',\n                        disabled: stacked.style() != 'stack_percent',\n                        style: 'stack_percent'\n                    }\n                ];\n\n                controlWidth = (controlOptions.length/3) * 260;\n                controlsData = controlsData.filter(function(d) {\n                    return controlOptions.indexOf(d.metaKey) !== -1;\n                });\n\n                controls\n                    .width( controlWidth )\n                    .color(['#444', '#444', '#444']);\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .call(controls);\n\n                var requiredTop = Math.max(controls.height(), showLegend && (legendPosition === 'top') ? legend.height() : 0);\n\n                if ( margin.top != requiredTop ) {\n                    margin.top = requiredTop;\n                    availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                }\n\n                g.select('.nv-controlsWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left: margin.left, top: margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            stacked\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                var ticks;\n                if (stacked.offset() === 'wiggle') {\n                    ticks = 0;\n                }\n                else {\n                    ticks = nv.utils.calcTicksY(availableHeight/36, data);\n                }\n                yAxis.scale(y)\n                    ._ticks(ticks)\n                    .tickSize(-availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n                if(showXAxis) {\n                    g.select('.nv-focus .nv-x.nv-axis')\n                        .attr('transform', 'translate(0,' + availableHeight + ')')\n                        .transition()\n                        .duration(duration)\n                        .call(xAxis)\n                        ;\n                }\n            }\n\n            function updateYAxis() {\n                if(showYAxis) {\n                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                        var currentFormat = yAxis.tickFormat();\n\n                        if ( !oldYTickFormat || currentFormat !== percentFormatter )\n                            oldYTickFormat = currentFormat;\n\n                        //Forces the yAxis to use percentage in 'expand' mode.\n                        yAxis.tickFormat(percentFormatter);\n                    }\n                    else {\n                        if (oldYTickFormat) {\n                            yAxis.tickFormat(oldYTickFormat);\n                            oldYTickFormat = null;\n                        }\n                    }\n\n                    g.select('.nv-focus .nv-y.nv-axis')\n                    .transition().duration(0)\n                    .call(yAxis);\n                }\n            }\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                stackedWrap.transition().call(stacked);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            stacked.dispatch.on('areaClick.toggle', function(e) {\n                if (data.filter(function(d) { return !d.disabled }).length === 1)\n                    data.forEach(function(d) {\n                        d.disabled = false;\n                    });\n                else\n                    data.forEach(function(d,i) {\n                        d.disabled = (i != e.seriesIndex);\n                    });\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                stacked.style(d.style);\n\n\n                state.style = stacked.style();\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                stacked.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0, allNullValues = true;\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        var point = series.values[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue != null) {\n                            stacked.highlightPoint(i, pointIndex, true);\n                        }\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\n                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n                        allData.push({\n                            key: series.key,\n                            value: tooltipValue,\n                            color: color(series,series.seriesIndex),\n                            point: point\n                        });\n\n                        if (showTotalInTooltip && stacked.style() != 'expand' && tooltipValue != null) {\n                          valueSum += tooltipValue;\n                          allNullValues = false;\n                        };\n                    });\n\n                allData.reverse();\n\n                //Highlight the tooltip entry based on which stack the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var yDistMax = Infinity, indexToHighlight = null;\n                    allData.forEach(function(series,i) {\n\n                        //To handle situation where the stacked area chart is negative, we need to use absolute values\n                        //when checking if the mouse Y value is within the stack area.\n                        yValue = Math.abs(yValue);\n                        var stackedY0 = Math.abs(series.point.display.y0);\n                        var stackedY = Math.abs(series.point.display.y);\n                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n                        {\n                            indexToHighlight = i;\n                            return;\n                        }\n                    });\n                    if (indexToHighlight != null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.\n                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2 && !allNullValues) {\n                    allData.push({\n                        key: totalLabel,\n                        value: valueSum,\n                        total: true\n                    });\n                }\n\n                var xValue = chart.x()(singlePoint,pointIndex);\n\n                var valueFormatter = interactiveLayer.tooltip.valueFormatter();\n                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view\n                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                    if ( !oldValueFormatter ) {\n                        oldValueFormatter = valueFormatter;\n                    }\n                    //Forces the tooltip to use percentage in 'expand' mode.\n                    valueFormatter = d3.format(\".1%\");\n                }\n                else {\n                    if (oldValueFormatter) {\n                        valueFormatter = oldValueFormatter;\n                        oldValueFormatter = null;\n                    }\n                }\n\n                interactiveLayer.tooltip\n                    .valueFormatter(valueFormatter)\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                stacked.clearHighlights();\n            });\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.style !== 'undefined') {\n                    stacked.style(e.style);\n                    style = e.style;\n                }\n\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return stacked.x()(d,i) >= extent[0] && stacked.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                stackedWrap.transition().duration(duration).call(stacked);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n\n        });\n\n        renderWatch.renderEnd('stacked Area chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.point['x'] = stacked.x()(evt.point);\n        evt.point['y'] = stacked.y()(evt.point);\n        tooltip.data(evt).hidden(false);\n    });\n\n    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.stacked = stacked;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis;\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.focus = focus;\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},\n        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},\n        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            focus.margin.top    = _.top    !== undefined ? _.top    : focus.margin.top;\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            stacked.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            stacked.color(color);\n            focus.color(color);\n        }},\n        x: {get: function(){return stacked.x();}, set: function(_){\n            stacked.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return stacked.y();}, set: function(_){\n            stacked.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = !!_;\n            chart.interactive(!_);\n            chart.useVoronoi(!_);\n            stacked.scatter.interactive(!_);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, stacked);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaWithFocusChart = function() {\n  return nv.models.stackedAreaChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\n// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad\nnv.models.sunburst = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 600\n        , height = 600\n        , mode = \"count\"\n        , modes = {count: function(d) { return 1; }, value: function(d) { return d.value || d.size }, size: function(d) { return d.value || d.size }}\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , showLabels = false\n        , labelFormat = function(d){if(mode === 'count'){return d.name + ' #' + d.value}else{return d.name + ' ' + (d.value || d.size)}}\n        , labelThreshold = 0.02\n        , sort = function(d1, d2){return d1.name > d2.name;}\n        , key = function(d,i){return d.name;}\n        , groupColorByParent = true\n        , duration = 500\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd');\n\n    //============================================================\n    // aux functions and setup\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear().range([0, 2 * Math.PI]);\n    var y = d3.scale.sqrt();\n\n    var partition = d3.layout.partition().sort(sort);\n\n    var node, availableWidth, availableHeight, radius;\n    var prevPositions = {};\n\n    var arc = d3.svg.arc()\n        .startAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x))) })\n        .endAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))) })\n        .innerRadius(function(d) {return Math.max(0, y(d.y)) })\n        .outerRadius(function(d) {return Math.max(0, y(d.y + d.dy)) });\n\n    function rotationToAvoidUpsideDown(d) {\n        var centerAngle = computeCenterAngle(d);\n        if(centerAngle > 90){\n            return 180;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    function computeCenterAngle(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        var centerAngle = (((startAngle + endAngle) / 2) * (180 / Math.PI)) - 90;\n        return centerAngle;\n    }\n\n    function computeNodePercentage(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        return (endAngle - startAngle) / (2 * Math.PI);\n    }\n\n    function labelThresholdMatched(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n\n        var size = endAngle - startAngle;\n        return size > labelThreshold;\n    }\n\n    // When zooming: interpolate the scales.\n    function arcTweenZoom(e,i) {\n        var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]),\n        yd = d3.interpolate(y.domain(), [node.y, 1]),\n        yr = d3.interpolate(y.range(), [node.y ? 20 : 0, radius]);\n\n        if (i === 0) {\n            return function() {return arc(e);}\n        }\n        else {\n            return function (t) {\n                x.domain(xd(t));\n                y.domain(yd(t)).range(yr(t));\n                return arc(e);\n            }\n        };\n    }\n\n    function arcTweenUpdate(d) {\n        var ipo = d3.interpolate({x: d.x0, dx: d.dx0, y: d.y0, dy: d.dy0}, d);\n\n        return function (t) {\n            var b = ipo(t);\n\n            d.x0 = b.x;\n            d.dx0 = b.dx;\n            d.y0 = b.y;\n            d.dy0 = b.dy;\n\n            return arc(b);\n        };\n    }\n\n    function updatePrevPosition(node) {\n        var k = key(node);\n        if(! prevPositions[k]) prevPositions[k] = {};\n        var pP = prevPositions[k];\n        pP.dx = node.dx;\n        pP.x = node.x;\n        pP.dy = node.dy;\n        pP.y = node.y;\n    }\n\n    function storeRetrievePrevPositions(nodes) {\n        nodes.forEach(function(n){\n            var k = key(n);\n            var pP = prevPositions[k];\n            //console.log(k,n,pP);\n            if( pP ){\n                n.dx0 = pP.dx;\n                n.x0 = pP.x;\n                n.dy0 = pP.dy;\n                n.y0 = pP.y;\n            }\n            else {\n                n.dx0 = n.dx;\n                n.x0 = n.x;\n                n.dy0 = n.dy;\n                n.y0 = n.y;\n            }\n            updatePrevPosition(n);\n        });\n    }\n\n    function zoomClick(d) {\n        var labels = container.selectAll('text')\n        var path = container.selectAll('path')\n\n        // fade out all text elements\n        labels.transition().attr(\"opacity\",0);\n\n        // to allow reference to the new center node\n        node = d;\n\n        path.transition()\n            .duration(duration)\n            .attrTween(\"d\", arcTweenZoom)\n            .each('end', function(e) {\n                // partially taken from here: http://bl.ocks.org/metmajer/5480307\n                // check if the animated element's data e lies within the visible angle span given in d\n                if(e.x >= d.x && e.x < (d.x + d.dx) ){\n                    if(e.depth >= d.depth){\n                        // get a selection of the associated text element\n                        var parentNode = d3.select(this.parentNode);\n                        var arcText = parentNode.select('text');\n\n                        // fade in the text element and recalculate positions\n                        arcText.transition().duration(duration)\n                        .text( function(e){return labelFormat(e) })\n                        .attr(\"opacity\", function(d){\n                            if(labelThresholdMatched(d)) {\n                                return 1;\n                            }\n                            else {\n                                return 0;\n                            }\n                        })\n                        .attr(\"transform\", function() {\n                            var width = this.getBBox().width;\n                            if(e.depth === 0)\n                            return \"translate(\" + (width / 2 * - 1) + \",0)\";\n                            else if(e.depth === d.depth){\n                                return \"translate(\" + (y(e.y) + 5) + \",0)\";\n                            }\n                            else {\n                                var centerAngle = computeCenterAngle(e);\n                                var rotation = rotationToAvoidUpsideDown(e);\n                                if (rotation === 0) {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + 5) + ',0)';\n                                }\n                                else {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                                }\n                            }\n                        });\n                    }\n                }\n            })\n    }\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n            container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n            radius = Math.min(availableWidth, availableHeight) / 2;\n\n            y.range([0, radius]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.select('g.nvd3.nv-wrap.nv-sunburst');\n            if( !wrap[0][0] ) {\n                wrap = container.append('g')\n                    .attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id)\n                    .attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            } else {\n                wrap.attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            }\n\n            container.on('click', function (d, i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            partition.value(modes[mode] || modes[\"count\"]);\n\n            //reverse the drawing order so that the labels of inner\n            //arcs are drawn on top of the outer arcs.\n            var nodes = partition.nodes(data[0]).reverse()\n\n            storeRetrievePrevPositions(nodes);\n            var cG = wrap.selectAll('.arc-container').data(nodes, key)\n\n            //handle new datapoints\n            var cGE = cG.enter()\n                .append(\"g\")\n                .attr(\"class\",'arc-container')\n\n            cGE.append(\"path\")\n                .attr(\"d\", arc)\n                .style(\"fill\", function (d) {\n                    if (d.color) {\n                        return d.color;\n                    }\n                    else if (groupColorByParent) {\n                        return color((d.children ? d : d.parent).name);\n                    }\n                    else {\n                        return color(d.name);\n                    }\n                })\n                .style(\"stroke\", \"#FFF\")\n                .on(\"click\", function(d,i){\n                    zoomClick(d);\n                    dispatch.elementClick({\n                        data: d,\n                        index: i\n                    })\n                })\n                .on('mouseover', function(d,i){\n                    d3.select(this).classed('hover', true).style('opacity', 0.8);\n                    dispatch.elementMouseover({\n                        data: d,\n                        color: d3.select(this).style(\"fill\"),\n                        percent: computeNodePercentage(d)\n                    });\n                })\n                .on('mouseout', function(d,i){\n                    d3.select(this).classed('hover', false).style('opacity', 1);\n                    dispatch.elementMouseout({\n                        data: d\n                    });\n                })\n                .on('mousemove', function(d,i){\n                    dispatch.elementMousemove({\n                        data: d\n                    });\n                });\n\n            ///Iterating via each and selecting based on the this\n            ///makes it work ... a cG.selectAll('path') doesn't.\n            ///Without iteration the data (in the element) didn't update.\n            cG.each(function(d){\n                d3.select(this).select('path')\n                    .transition()\n                    .duration(duration)\n                    .attrTween('d', arcTweenUpdate);\n            });\n\n            if(showLabels){\n                //remove labels first and add them back\n                cG.selectAll('text').remove();\n\n                //this way labels are on top of newly added arcs\n                cG.append('text')\n                    .text( function(e){ return labelFormat(e)})\n                    .transition()\n                    .duration(duration)\n                    .attr(\"opacity\", function(d){\n                        if(labelThresholdMatched(d)) {\n                            return 1;\n                        }\n                        else {\n                            return 0;\n                        }\n                    })\n                    .attr(\"transform\", function(d) {\n                        var width = this.getBBox().width;\n                        if(d.depth === 0){\n                            return \"rotate(0)translate(\" + (width / 2 * -1) + \",0)\";\n                        }\n                        else {\n                            var centerAngle = computeCenterAngle(d);\n                            var rotation = rotationToAvoidUpsideDown(d);\n                            if (rotation === 0) {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + 5) + ',0)';\n                            }\n                            else {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                            }\n                        }\n                    });\n            }\n\n            //zoom out to the center when the data is updated.\n            zoomClick(nodes[nodes.length - 1])\n\n\n            //remove unmatched elements ...\n            cG.exit()\n                .transition()\n                .duration(duration)\n                .attr('opacity',0)\n                .each('end',function(d){\n                    var k = key(d);\n                    prevPositions[k] = undefined;\n                })\n                .remove();\n        });\n\n\n        renderWatch.renderEnd('sunburst immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        groupColorByParent: {get: function(){return groupColorByParent;}, set: function(_){groupColorByParent=!!_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=!!_}},\n        labelFormat: {get: function(){return labelFormat;}, set: function(_){labelFormat=_}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_}},\n        sort: {get: function(){return sort;}, set: function(_){sort=_}},\n        key: {get: function(){return key;}, set: function(_){key=_}},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sunburstChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sunburst = nv.models.sunburst();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showTooltipPercent = false\n        , id = Math.round(Math.random() * 100000)\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd');\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d){return d;});\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sunburst);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin);\n            var availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0) {\n                    container.call(chart);\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = container;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            sunburst.width(availableWidth).height(availableHeight).margin(margin);\n            container.call(sunburst);\n        });\n\n        renderWatch.renderEnd('sunburstChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.series = {\n            key: evt.data.name,\n            value: (evt.data.value || evt.data.size),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sunburst = sunburst;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            sunburst.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            sunburst.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n            sunburst.margin(margin);\n        }}\n    });\n    nv.utils.inheritOptions(chart, sunburst);\n    nv.utils.initOptions(chart);\n    return chart;\n\n};\n\nnv.version = \"1.8.5\";\n})();\n//# sourceMappingURL=nv.d3.js.map\n\n/***/ }),\n\n/***/ 691:\n/***/ (function(module, exports, __webpack_require__) {\n\n!function(t,e){ true?module.exports=e(__webpack_require__(0),__webpack_require__(95),__webpack_require__(690)):\"function\"==typeof define&&define.amd?define([\"react\",\"d3\",\"nvd3\"],e):\"object\"==typeof exports?exports.NVD3Chart=e(require(\"react\"),require(\"d3\"),require(\"nvd3\")):t.NVD3Chart=e(t.React,t.d3,t.nv)}(this,function(t,e,n){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p=\"\",e(0)}([function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),i=r(o),u=n(2),c=r(u),s=n(17),a=r(s),f=n(21),p=r(f),l=n(22),d=r(l),h=n(25),y=r(h),v=n(48),b=r(v),g=n(55),m=r(g),_=n(56),x=r(_),O=n(57),j=r(O),w=n(58),S=[\"x\",\"y\",\"type\",\"datum\",\"configure\"],P=[\"width\",\"height\"],E=\"margin\",M=\"containerStyle\",k=\"renderStart\",C=\"renderEnd\",D=\"ready\",F=function(t){function e(){return(0,p[\"default\"])(this,e),(0,y[\"default\"])(this,(0,a[\"default\"])(e).apply(this,arguments))}return(0,b[\"default\"])(e,t),(0,d[\"default\"])(e,[{key:\"componentDidMount\",value:function(){var t=this;j[\"default\"].addGraph(this.renderChart.bind(this),function(e){(0,w.isCallable)(t.props.ready)&&t.props.ready(e,D)})}},{key:\"componentDidUpdate\",value:function(){this.renderChart()}},{key:\"componentWillUnmount\",value:function(){this.resizeHandler&&this.resizeHandler.clear()}},{key:\"renderChart\",value:function(){var t=void 0;switch(this.chart=this.chart&&!this.rendering?this.chart:j[\"default\"].models[this.props.type](),(0,w.isCallable)(this.props.renderStart)&&this.props.renderStart(this.chart,k),this.parsedProps=(0,w.bindFunctions)(this.props,this.props.context),this.chart.x&&this.chart.x((0,w.getValueFunction)(this.parsedProps.x,\"x\")),this.chart.y&&this.chart.y((0,w.getValueFunction)(this.parsedProps.y,\"y\")),this.props.margin&&this.chart.margin(this.options(E,w.pick).margin||(0,w.propsByPrefix)(\"margin\",this.props)||{}),this.configureComponents(this.chart,this.options(S.concat(M),w.without)),!this.props.configure||this.props.configure(this.chart),this.selection=x[\"default\"].select(this.refs.svg).datum(this.props.datum).call(this.chart),this.resizeHandler||(this.resizeHandler=j[\"default\"].utils.windowResize(this.chart.update)),this.props.type){case\"pieChart\":t=this.chart.pie.dispatch;break;case\"lineChart\":t=this.chart.lines.dispatch;break;default:t=this.chart.dispatch}return t.renderEnd&&t.on(\"renderEnd\",this.renderEnd.bind(this)),this.rendering=!0,this.chart}},{key:\"renderEnd\",value:function(t){(0,w.isCallable)(this.props.renderEnd)&&this.props.renderEnd(this.chart,C),this.rendering=!1}},{key:\"configureComponents\",value:function(t,e){for(var n in e){var r=e[n];t&&((0,w.isPlainObject)(r)?this.configureComponents(t[n],r):\"function\"==typeof t[n]&&t[n](r))}}},{key:\"options\",value:function(t,e){var n=this.parsedProps.options||this.parsedProps||this.props.chartOptions;return(e=e||w.pick)(n,t)}},{key:\"render\",value:function(){var t=(0,w.pick)(this.props,P),e=(0,c[\"default\"])({},t,this.props.containerStyle);return m[\"default\"].createElement(\"div\",{ref:\"root\",className:\"nv-chart\",style:e},m[\"default\"].createElement(\"svg\",(0,i[\"default\"])({ref:\"svg\"},t)))}}]),e}(m[\"default\"].Component);e[\"default\"]=F,t.exports=F},function(t,e,n){\"use strict\";var r=n(2)[\"default\"];e[\"default\"]=r||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(3),__esModule:!0}},function(t,e,n){n(4),t.exports=n(7).Object.assign},function(t,e,n){var r=n(5);r(r.S+r.F,\"Object\",{assign:n(10)})},function(t,e,n){var r=n(6),o=n(7),i=n(8),u=\"prototype\",c=function(t,e,n){var s,a,f,p=t&c.F,l=t&c.G,d=t&c.S,h=t&c.P,y=t&c.B,v=t&c.W,b=l?o:o[e]||(o[e]={}),g=l?r:d?r[e]:(r[e]||{})[u];l&&(n=e);for(s in n)a=!p&&g&&s in g,a&&s in b||(f=a?g[s]:n[s],b[s]=l&&\"function\"!=typeof g[s]?n[s]:y&&a?i(f,r):v&&g[s]==f?function(t){var e=function(e){return this instanceof t?new t(e):t(e)};return e[u]=t[u],e}(f):h&&\"function\"==typeof f?i(Function.call,f):f,h&&((b[u]||(b[u]={}))[s]=f))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,t.exports=c},function(t,e){var n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:\"1.2.6\"};\"number\"==typeof __e&&(__e=n)},function(t,e,n){var r=n(9);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,e,n){var r=n(11),o=n(12),i=n(14);t.exports=n(16)(function(){var t=Object.assign,e={},n={},r=Symbol(),o=\"abcdefghijklmnopqrst\";return e[r]=7,o.split(\"\").forEach(function(t){n[t]=t}),7!=t({},e)[r]||Object.keys(t({},n)).join(\"\")!=o})?function(t,e){for(var n=o(t),u=arguments,c=u.length,s=1,a=r.getKeys,f=r.getSymbols,p=r.isEnum;c>s;)for(var l,d=i(u[s++]),h=f?a(d).concat(f(d)):a(d),y=h.length,v=0;y>v;)p.call(d,l=h[v++])&&(n[l]=d[l]);return n}:Object.assign},function(t,e){var n=Object;t.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},function(t,e,n){var r=n(13);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,e,n){var r=n(15);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==r(t)?t.split(\"\"):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},function(t,e,n){t.exports={\"default\":n(18),__esModule:!0}},function(t,e,n){n(19),t.exports=n(7).Object.getPrototypeOf},function(t,e,n){var r=n(12);n(20)(\"getPrototypeOf\",function(t){return function(e){return t(r(e))}})},function(t,e,n){var r=n(5),o=n(7),i=n(16);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),\"Object\",u)}},function(t,e){\"use strict\";e[\"default\"]=function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")},e.__esModule=!0},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(23),i=r(o);e[\"default\"]=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,i[\"default\"])(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(24),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e,n){return r.setDesc(t,e,n)}},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(26),i=r(o);e[\"default\"]=function(t,e){if(!t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!e||\"object\"!==(\"undefined\"==typeof e?\"undefined\":(0,i[\"default\"])(e))&&\"function\"!=typeof e?t:e},e.__esModule=!0},function(t,e,n){\"use strict\";var r=n(27)[\"default\"];e[\"default\"]=function(t){return t&&t.constructor===r?\"symbol\":typeof t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(28),__esModule:!0}},function(t,e,n){n(29),n(47),t.exports=n(7).Symbol},function(t,e,n){\"use strict\";var r=n(11),o=n(6),i=n(30),u=n(31),c=n(5),s=n(32),a=n(16),f=n(35),p=n(36),l=n(38),d=n(37),h=n(39),y=n(41),v=n(42),b=n(43),g=n(44),m=n(40),_=n(34),x=r.getDesc,O=r.setDesc,j=r.create,w=y.get,S=o.Symbol,P=o.JSON,E=P&&P.stringify,M=!1,k=d(\"_hidden\"),C=r.isEnum,D=f(\"symbol-registry\"),F=f(\"symbols\"),N=\"function\"==typeof S,T=Object.prototype,q=u&&a(function(){return 7!=j(O({},\"a\",{get:function(){return O(this,\"a\",{value:7}).a}})).a})?function(t,e,n){var r=x(T,e);r&&delete T[e],O(t,e,n),r&&t!==T&&O(T,e,r)}:O,z=function(t){var e=F[t]=j(S.prototype);return e._k=t,u&&M&&q(T,t,{configurable:!0,set:function(e){i(this,k)&&i(this[k],t)&&(this[k][t]=!1),q(this,t,_(1,e))}}),e},A=function(t){return\"symbol\"==typeof t},V=function(t,e,n){return n&&i(F,e)?(n.enumerable?(i(t,k)&&t[k][e]&&(t[k][e]=!1),n=j(n,{enumerable:_(0,!1)})):(i(t,k)||O(t,k,_(1,{})),t[k][e]=!0),q(t,e,n)):O(t,e,n)},W=function(t,e){g(t);for(var n,r=v(e=m(e)),o=0,i=r.length;i>o;)V(t,n=r[o++],e[n]);return t},B=function(t,e){return void 0===e?j(t):W(j(t),e)},G=function(t){var e=C.call(this,t);return e||!i(this,t)||!i(F,t)||i(this,k)&&this[k][t]?e:!0},H=function(t,e){var n=x(t=m(t),e);return!n||!i(F,e)||i(t,k)&&t[k][e]||(n.enumerable=!0),n},I=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])||e==k||r.push(e);return r},J=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])&&r.push(F[e]);return r},K=function(t){if(void 0!==t&&!A(t)){for(var e,n,r=[t],o=1,i=arguments;i.length>o;)r.push(i[o++]);return e=r[1],\"function\"==typeof e&&(n=e),(n||!b(e))&&(e=function(t,e){return n&&(e=n.call(this,t,e)),A(e)?void 0:e}),r[1]=e,E.apply(P,r)}},R=a(function(){var t=S();return\"[null]\"!=E([t])||\"{}\"!=E({a:t})||\"{}\"!=E(Object(t))});N||(S=function(){if(A(this))throw TypeError(\"Symbol is not a constructor\");return z(l(arguments.length>0?arguments[0]:void 0))},s(S.prototype,\"toString\",function(){return this._k}),A=function(t){return t instanceof S},r.create=B,r.isEnum=G,r.getDesc=H,r.setDesc=V,r.setDescs=W,r.getNames=y.get=I,r.getSymbols=J,u&&!n(46)&&s(T,\"propertyIsEnumerable\",G,!0));var U={\"for\":function(t){return i(D,t+=\"\")?D[t]:D[t]=S(t)},keyFor:function(t){return h(D,t)},useSetter:function(){M=!0},useSimple:function(){M=!1}};r.each.call(\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),function(t){var e=d(t);U[t]=N?e:z(e)}),M=!0,c(c.G+c.W,{Symbol:S}),c(c.S,\"Symbol\",U),c(c.S+c.F*!N,\"Object\",{create:B,defineProperty:V,defineProperties:W,getOwnPropertyDescriptor:H,getOwnPropertyNames:I,getOwnPropertySymbols:J}),P&&c(c.S+c.F*(!N||R),\"JSON\",{stringify:K}),p(S,\"Symbol\"),p(Math,\"Math\",!0),p(o.JSON,\"JSON\",!0)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){t.exports=!n(16)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,e,n){t.exports=n(33)},function(t,e,n){var r=n(11),o=n(34);t.exports=n(31)?function(t,e,n){return r.setDesc(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(6),o=\"__core-js_shared__\",i=r[o]||(r[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,e,n){var r=n(11).setDesc,o=n(30),i=n(37)(\"toStringTag\");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(35)(\"wks\"),o=n(38),i=n(6).Symbol;t.exports=function(t){return r[t]||(r[t]=i&&i[t]||(i||o)(\"Symbol.\"+t))}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++n+r).toString(36))}},function(t,e,n){var r=n(11),o=n(40);t.exports=function(t,e){for(var n,i=o(t),u=r.getKeys(i),c=u.length,s=0;c>s;)if(i[n=u[s++]]===e)return n}},function(t,e,n){var r=n(14),o=n(13);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(40),o=n(11).getNames,i={}.toString,u=\"object\"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return o(t)}catch(e){return u.slice()}};t.exports.get=function(t){return u&&\"[object Window]\"==i.call(t)?c(t):o(r(t))}},function(t,e,n){var r=n(11);t.exports=function(t){var e=r.getKeys(t),n=r.getSymbols;if(n)for(var o,i=n(t),u=r.isEnum,c=0;i.length>c;)u.call(t,o=i[c++])&&e.push(o);return e}},function(t,e,n){var r=n(15);t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},function(t,e,n){var r=n(45);t.exports=function(t){if(!r(t))throw TypeError(t+\" is not an object!\");return t}},function(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,e){t.exports=!0},function(t,e){},function(t,e,n){\"use strict\";var r=n(49)[\"default\"],o=n(51)[\"default\"];e[\"default\"]=function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof e);t.prototype=r(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(o?o(t,e):t.__proto__=e)},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(50),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){t.exports={\"default\":n(52),__esModule:!0}},function(t,e,n){n(53),t.exports=n(7).Object.setPrototypeOf},function(t,e,n){var r=n(5);r(r.S,\"Object\",{setPrototypeOf:n(54).set})},function(t,e,n){var r=n(11).getDesc,o=n(45),i=n(44),u=function(t,e){if(i(t),!o(e)&&null!==e)throw TypeError(e+\": can't set as prototype!\")};t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(t,e,o){try{o=n(8)(Function.call,r(Object.prototype,\"__proto__\").set,2),o(t,[]),e=!(t instanceof Array)}catch(i){e=!0}return function(t,n){return u(t,n),e?t.__proto__=n:o(t,n),t}}({},!1):void 0),check:u}},function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}function o(t,e){return t.indexOf(e)>=0}function i(t){return function(){return!t.apply(this,arguments)}}function u(t,e,n){for(var r={},o=(0,m[\"default\"])(t),i=0,u=o.length;u>i;i++){var c=o[i],s=t[c];n(e,c)&&(r[c]=s)}return r}function c(t,e){return u(t,e,o)}function s(t,e){return u(t,e,i(o))}function a(t){if(\"object\"==(\"undefined\"==typeof t?\"undefined\":(0,b[\"default\"])(t))&&null!==t){if(\"function\"==typeof y[\"default\"]){var e=(0,y[\"default\"])(t);return e===Object.prototype||null===e}return\"[object Object]\"==Object.prototype.toString.call(t)}return!1}function f(t,e){var n,r,o;n=Array.isArray(t)?[]:{};for(o in t)r=t[o],null!=r&&(\"object\"===(\"undefined\"==typeof r?\"undefined\":(0,b[\"default\"])(r))&&null!==r&&\"function\"!==r.type?n[o]=f(r,e):\"function\"===r.type?n[o]=e[r.name]:n[o]=r);return n}function p(t,e){return\"function\"==typeof t?t:function(n){return\"undefined\"!=typeof n[t]?n[t]:n[e]}}function l(t,e){return console.warn(\"Set margin with prefixes is deprecated use an object instead\"),t+=\"-\",(0,m[\"default\"])(e).reduce(function(n,r){return r.substr(0,t.length)===t&&(n[r.replace(t,\"\")]=e[r]),n},{})}function d(t){return t&&\"function\"==typeof t}Object.defineProperty(e,\"__esModule\",{value:!0}),e.includes=o,e.negate=i,e.filterObject=u,e.pick=c,e.without=s,e.isPlainObject=a,e.bindFunctions=f,e.getValueFunction=p,e.propsByPrefix=l,e.isCallable=d;var h=n(17),y=r(h),v=n(26),b=r(v),g=n(59),m=r(g)},function(t,e,n){t.exports={\"default\":n(60),__esModule:!0}},function(t,e,n){n(61),t.exports=n(7).Object.keys},function(t,e,n){var r=n(12);n(20)(\"keys\",function(t){return function(e){return t(r(e))}})}])});\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.ddc7fc5.chunk.js","import update from 'immutability-helper';\nimport getRangeDomain from '../../utils/dataFormats/getRangeDomain';\n\n/**\n * Need to setup yDomain for NVD3 chart that requires YAXis\n * @param {Object} typeConfig Chart type config\n * @return {Boolean}\n */\nexport function shouldSetupYDomain(typeConfig) {\n  return 0 === typeConfig.dataFormat.indexOf('nvd3') &&\n    -1 !== typeConfig.modules.settings.indexOf('YAxis');\n}\n\n/**\n * add nicely rounded yDomain to chart options, if chart has a yAxis\n * @param {Object} chartOptions\n * @param {Object} typeConfig\n * @param {Object[]}  chartData\n * @return {Object} Cloned chart options object with new yDomain\n */\nexport default function applyYDomain(chartOptions, typeConfig, chartData) {\n  if (!shouldSetupYDomain(typeConfig)) {\n    return chartOptions;\n  }\n\n  let yDomain;\n  if (typeConfig.hasOwnProperty('getNiceDomain')) {\n    yDomain = typeConfig.getNiceDomain(typeConfig.dataFormat, chartData);\n  } else {\n    yDomain = getRangeDomain(typeConfig.dataFormat, chartData);\n  }\n\n  /**\n   * @todo Recalculate yDomain when series visibility is toggled by clicking on dots in the legend\n   */\n  return update(chartOptions, { yDomain: { $set: yDomain } });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/reducers/utils/applyYDomain.js","import { min, max, scale } from 'd3';\n\n/**\n * Get [min, max] array for data series in nvd3SingleSeries or nvd3MultiSeries format\n *\n * @param array series Data series\n * @param string format Data format\n * @return array Range of [min, max] for series\n */\nfunction _getSeriesDomain(series, format) {\n  const key = 'nvd3SingleSeries' === format ? 'value' : 'y';\n  const values = series.map((point) => point[key]);\n  return [min(values), max(values)];\n}\n\nfunction _getMultiSeriesDomain(series, format) {\n  const mins = [];\n  const maxs = [];\n  series.forEach((singleSeries) => {\n    const domain = _getSeriesDomain(singleSeries.values, format);\n    mins.push(domain[0]);\n    maxs.push(domain[1]);\n  });\n  return [min(mins), max(maxs)];\n}\n\nfunction _makeNice(range) {\n  return scale.linear().domain(range).nice().domain();\n}\n\n/**\n * Get \"nice\" rounded domain from dataset\n *\n * @param {String} format Data format from chart config object\n * @param {Object[]} data Chart data transformed for data format\n * @return {Array} Domain array of [min, max] values\n */\nexport default function getRangeDomain(format, data) {\n  const domain = 'nvd3SingleSeries' === format ?\n    _getSeriesDomain(data, format) : _getMultiSeriesDomain(data, format);\n  return _makeNice(domain);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/utils/dataFormats/getRangeDomain.js","var map = {\n\t\"./NVD3Adapter/index\": 689\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 279;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/components/Chart/ChartTypes ^\\.\\/.*\\/index$\n// module id = 279\n// module chunks = 0","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport NVD3Chart from 'react-nvd3';\nimport update from 'immutability-helper';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { getChartTypeObject, getChartTypeDefaultOpts } from '../../../../utils/chartTypeUtils';\nimport applyYDomain from '../../../../reducers/utils/applyYDomain.js';\nimport applyTickFormatters from '../../../../reducers/utils/applyTickFormatters';\n\nexport default class NVD3Adapter extends Component {\n  constructor(props) {\n    super(props);\n    this._mapToChartProps = this._mapToChartProps.bind(this);\n  }\n\n  /**\n   * In editor, merge data into options and add a ref\n   * In widget, also recreate function-based options that can't be sent as JSON\n   */\n  _mapToChartProps() {\n    const { options, data, widget } = this.props;\n    let chartProps = update(options, {\n      datum: { $set: this._dataTransform(options.type, data) },\n      ref: { $set: 'chartNode' },\n    });\n\n    if (!widget) {\n      return chartProps;\n    }\n\n    // TODO: This isn't an ideal place for this logic, and it's also duplicated within middleware/reducers.\n    // Widgets need to recreate function-based options\n    const typeConfig = getChartTypeObject(options.type).config;\n    const defaultOpts = getChartTypeDefaultOpts(options.type);\n    chartProps = Object.assign({}, defaultOpts, chartProps, typeConfig);\n    chartProps = applyYDomain(chartProps, typeConfig, data);\n\n    return applyTickFormatters(chartProps, typeConfig);\n  }\n\n  /**\n   * Apply any special formatting specfic to a chart type\n   */\n  _dataTransform(chartType, data) {\n    switch (chartType) {\n      case 'discreteBarChart':\n        return [{\n          key: '',\n          values: data,\n        }];\n\n      default:\n        return data;\n    }\n  }\n\n  render() {\n    // We clone the props, because nvd3 will mutate the datum that you pass to it.\n    const chartProps = cloneDeep(this._mapToChartProps());\n\n    // Key prop is for forcing re-render of the chart to avoid chart refresh issue when the chart type changes.\n    // https://github.com/NuCivic/react-nvd3/issues/59\n    return <NVD3Chart key={Math.random()} {...chartProps} />;\n  }\n}\n\nNVD3Adapter.propTypes = {\n  data: PropTypes.array,\n  options: PropTypes.object,\n  widget: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n  ]),\n};\n\n\n\n// WEBPACK FOOTER //\n// ./app/components/Chart/ChartTypes/NVD3Adapter/index.js","/* nvd3 version 1.8.5 (https://github.com/novus/nvd3) 2016-12-01 */\n(function(){\n\n// set up main nv object\nvar nv = {};\n\n// the major global objects under the nv namespace\nnv.dev = false; //set false when in production\nnv.tooltip = nv.tooltip || {}; // For the tooltip system\nnv.utils = nv.utils || {}; // Utility subsystem\nnv.models = nv.models || {}; //stores all the possible models/components\nnv.charts = {}; //stores all the ready to use charts\nnv.logs = {}; //stores some statistics and potential error messages\nnv.dom = {}; //DOM manipulation functions\n\n// Node/CommonJS - require D3\nif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined' && typeof(d3) == 'undefined') {\n    d3 = require('d3');\n}\n\nnv.dispatch = d3.dispatch('render_start', 'render_end');\n\n// Function bind polyfill\n// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment\n// https://github.com/ariya/phantomjs/issues/10522\n// http://kangax.github.io/compat-table/es5/#Function.prototype.bind\n// phantomJS is used for running the test suite\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== \"function\") {\n            // closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP = function () {},\n            fBound = function () {\n                return fToBind.apply(this instanceof fNOP && oThis\n                        ? this\n                        : oThis,\n                    aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n        return fBound;\n    };\n}\n\n//  Development render timers - disabled if dev = false\nif (nv.dev) {\n    nv.dispatch.on('render_start', function(e) {\n        nv.logs.startTime = +new Date();\n    });\n\n    nv.dispatch.on('render_end', function(e) {\n        nv.logs.endTime = +new Date();\n        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n    });\n}\n\n// Logs all arguments, and returns the last so you can test things in place\n// Note: in IE8 console.log is an object not a function, and if modernizr is used\n// then calling Function.prototype.bind with with anything other than a function\n// causes a TypeError to be thrown.\nnv.log = function() {\n    if (nv.dev && window.console && console.log && console.log.apply)\n        console.log.apply(console, arguments);\n    else if (nv.dev && window.console && typeof console.log == \"function\" && Function.prototype.bind) {\n        var log = Function.prototype.bind.call(console.log, console);\n        log.apply(console, arguments);\n    }\n    return arguments[arguments.length - 1];\n};\n\n// print console warning, should be used by deprecated functions\nnv.deprecated = function(name, info) {\n    if (console && console.warn) {\n        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');\n    }\n};\n\n// The nv.render function is used to queue up chart rendering\n// in non-blocking async functions.\n// When all queued charts are done rendering, nv.dispatch.render_end is invoked.\nnv.render = function render(step) {\n    // number of graphs to generate in each timeout loop\n    step = step || 1;\n\n    nv.render.active = true;\n    nv.dispatch.render_start();\n\n    var renderLoop = function() {\n        var chart, graph;\n\n        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n            chart = graph.generate();\n            if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n        }\n\n        nv.render.queue.splice(0, i);\n\n        if (nv.render.queue.length) {\n            setTimeout(renderLoop);\n        }\n        else {\n            nv.dispatch.render_end();\n            nv.render.active = false;\n        }\n    };\n\n    setTimeout(renderLoop);\n};\n\nnv.render.active = false;\nnv.render.queue = [];\n\n/*\nAdds a chart to the async rendering queue. This method can take arguments in two forms:\nnv.addGraph({\n    generate: <Function>\n    callback: <Function>\n})\n\nor\n\nnv.addGraph(<generate Function>, <callback Function>)\n\nThe generate function should contain code that creates the NVD3 model, sets options\non it, adds data to an SVG element, and invokes the chart model. The generate function\nshould return the chart model.  See examples/lineChart.html for a usage example.\n\nThe callback function is optional, and it is called when the generate function completes.\n*/\nnv.addGraph = function(obj) {\n    if (typeof arguments[0] === typeof(Function)) {\n        obj = {generate: arguments[0], callback: arguments[1]};\n    }\n\n    nv.render.queue.push(obj);\n\n    if (!nv.render.active) {\n        nv.render();\n    }\n};\n\n// Node/CommonJS exports\nif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined') {\n  module.exports = nv;\n}\n\nif (typeof(window) !== 'undefined') {\n  window.nv = nv;\n}\n/* Facade for queueing DOM write operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.write = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.mutate(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n\r\n/* Facade for queueing DOM read operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.read = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.measure(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n/* Utility class to handle creation of an interactive layer.\n This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\n containing the X-coordinate. It can also render a vertical line where the mouse is located.\n\n dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\n the rectangle. The dispatch is given one object which contains the mouseX/Y location.\n It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n */\nnv.interactiveGuideline = function() {\n    \"use strict\";\n\n    var margin = { left: 0, top: 0 } //Pass the chart's top and left magins. Used to calculate the mouseX/Y.\n        ,   width = null\n        ,   height = null\n        ,   xScale = d3.scale.linear()\n        ,   dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp')\n        ,   showGuideLine = true\n        ,   svgContainer = null // Must pass the chart's svg, we'll use its mousemove event.\n        ,   tooltip = nv.models.tooltip()\n        ,   isMSIE =  window.ActiveXObject// Checkt if IE by looking for activeX. (excludes IE11)\n    ;\n\n    tooltip\n        .duration(0)\n        .hideDelay(0)\n        .hidden(false);\n\n    function layer(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this);\n            var availableWidth = (width || 960), availableHeight = (height || 400);\n            var wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\")\n                .data([data]);\n            var wrapEnter = wrap.enter()\n                .append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n            wrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\n            if (!svgContainer) {\n                return;\n            }\n\n            function mouseHandler() {\n                var d3mouse = d3.mouse(this);\n                var mouseX = d3mouse[0];\n                var mouseY = d3mouse[1];\n                var subtractMargin = true;\n                var mouseOutAnyReason = false;\n                if (isMSIE) {\n                    /*\n                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n                     over a rect in IE 10.\n                     However, d3.event.offsetX/Y also returns the mouse coordinates\n                     relative to the triggering <rect>. So we use offsetX/Y on IE.\n                     */\n                    mouseX = d3.event.offsetX;\n                    mouseY = d3.event.offsetY;\n\n                    /*\n                     On IE, if you attach a mouse event listener to the <svg> container,\n                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n                     When this happens on IE, the offsetX/Y is set to where ever the child element\n                     is located.\n                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n                     position under this scenario. Removing the line below *will* cause\n                     the interactive layer to not work right on IE.\n                     */\n                    if(d3.event.target.tagName !== \"svg\") {\n                        subtractMargin = false;\n                    }\n\n                    if (d3.event.target.className.baseVal.match(\"nv-legend\")) {\n                        mouseOutAnyReason = true;\n                    }\n\n                }\n\n                if(subtractMargin) {\n                    mouseX -= margin.left;\n                    mouseY -= margin.top;\n                }\n\n                /* If mouseX/Y is outside of the chart's bounds,\n                 trigger a mouseOut event.\n                 */\n                if (d3.event.type === 'mouseout'\n                    || mouseX < 0 || mouseY < 0\n                    || mouseX > availableWidth || mouseY > availableHeight\n                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n                    || mouseOutAnyReason\n                    ) {\n\n                    if (isMSIE) {\n                        if (d3.event.relatedTarget\n                            && d3.event.relatedTarget.ownerSVGElement === undefined\n                            && (d3.event.relatedTarget.className === undefined\n                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {\n\n                            return;\n                        }\n                    }\n                    dispatch.elementMouseout({\n                        mouseX: mouseX,\n                        mouseY: mouseY\n                    });\n                    layer.renderGuideLine(null); //hide the guideline\n                    tooltip.hidden(true);\n                    return;\n                } else {\n                    tooltip.hidden(false);\n                }\n\n\n                var scaleIsOrdinal = typeof xScale.rangeBands === 'function';\n                var pointXValue = undefined;\n\n                // Ordinal scale has no invert method\n                if (scaleIsOrdinal) {\n                    var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;\n                    // Check if mouseX is in the range band\n                    if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {\n                        pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];\n                    }\n                    else {\n                        dispatch.elementMouseout({\n                            mouseX: mouseX,\n                            mouseY: mouseY\n                        });\n                        layer.renderGuideLine(null); //hide the guideline\n                        tooltip.hidden(true);\n                        return;\n                    }\n                }\n                else {\n                    pointXValue = xScale.invert(mouseX);\n                }\n\n                dispatch.elementMousemove({\n                    mouseX: mouseX,\n                    mouseY: mouseY,\n                    pointXValue: pointXValue\n                });\n\n                //If user double clicks the layer, fire a elementDblclick\n                if (d3.event.type === \"dblclick\") {\n                    dispatch.elementDblclick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user single clicks the layer, fire elementClick\n                if (d3.event.type === 'click') {\n                    dispatch.elementClick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user presses mouse down the layer, fire elementMouseDown\n                if (d3.event.type === 'mousedown') {\n                \tdispatch.elementMouseDown({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n\n                // if user presses mouse down the layer, fire elementMouseUp\n                if (d3.event.type === 'mouseup') {\n                \tdispatch.elementMouseUp({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n            }\n\n            svgContainer\n                .on(\"touchmove\",mouseHandler)\n                .on(\"mousemove\",mouseHandler, true)\n                .on(\"mouseout\" ,mouseHandler,true)\n                .on(\"mousedown\" ,mouseHandler,true)\n                .on(\"mouseup\" ,mouseHandler,true)\n                .on(\"dblclick\" ,mouseHandler)\n                .on(\"click\", mouseHandler)\n            ;\n\n            layer.guideLine = null;\n            //Draws a vertical guideline at the given X postion.\n            layer.renderGuideLine = function(x) {\n                if (!showGuideLine) return;\n                if (layer.guideLine && layer.guideLine.attr(\"x1\") === x) return;\n                nv.dom.write(function() {\n                    var line = wrap.select(\".nv-interactiveGuideLine\")\n                        .selectAll(\"line\")\n                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n                    line.enter()\n                        .append(\"line\")\n                        .attr(\"class\", \"nv-guideline\")\n                        .attr(\"x1\", function(d) { return d;})\n                        .attr(\"x2\", function(d) { return d;})\n                        .attr(\"y1\", availableHeight)\n                        .attr(\"y2\",0);\n                    line.exit().remove();\n                });\n            }\n        });\n    }\n\n    layer.dispatch = dispatch;\n    layer.tooltip = tooltip;\n\n    layer.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return layer;\n    };\n\n    layer.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return layer;\n    };\n\n    layer.height = function(_) {\n        if (!arguments.length) return height;\n        height = _;\n        return layer;\n    };\n\n    layer.xScale = function(_) {\n        if (!arguments.length) return xScale;\n        xScale = _;\n        return layer;\n    };\n\n    layer.showGuideLine = function(_) {\n        if (!arguments.length) return showGuideLine;\n        showGuideLine = _;\n        return layer;\n    };\n\n    layer.svgContainer = function(_) {\n        if (!arguments.length) return svgContainer;\n        svgContainer = _;\n        return layer;\n    };\n\n    return layer;\n};\n\n/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\n This is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\n For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.\n Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\n because 28 is closer to 30 than 10.\n\n Unit tests can be found in: interactiveBisectTest.html\n\n Has the following known issues:\n * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n * Won't work if there are duplicate x coordinate values.\n */\nnv.interactiveBisect = function (values, searchVal, xAccessor) {\n    \"use strict\";\n    if (! (values instanceof Array)) {\n        return null;\n    }\n    var _xAccessor;\n    if (typeof xAccessor !== 'function') {\n        _xAccessor = function(d) {\n            return d.x;\n        }\n    } else {\n        _xAccessor = xAccessor;\n    }\n    var _cmp = function(d, v) {\n        // Accessors are no longer passed the index of the element along with\n        // the element itself when invoked by d3.bisector.\n        //\n        // Starting at D3 v3.4.4, d3.bisector() started inspecting the\n        // function passed to determine if it should consider it an accessor\n        // or a comparator. This meant that accessors that take two arguments\n        // (expecting an index as the second parameter) are treated as\n        // comparators where the second argument is the search value against\n        // which the first argument is compared.\n        return _xAccessor(d) - v;\n    };\n\n    var bisect = d3.bisector(_cmp).left;\n    var index = d3.max([0, bisect(values,searchVal) - 1]);\n    var currentValue = _xAccessor(values[index]);\n\n    if (typeof currentValue === 'undefined') {\n        currentValue = index;\n    }\n\n    if (currentValue === searchVal) {\n        return index; //found exact match\n    }\n\n    var nextIndex = d3.min([index+1, values.length - 1]);\n    var nextValue = _xAccessor(values[nextIndex]);\n\n    if (typeof nextValue === 'undefined') {\n        nextValue = nextIndex;\n    }\n\n    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {\n        return index;\n    } else {\n        return nextIndex\n    }\n};\n\n/*\n Returns the index in the array \"values\" that is closest to searchVal.\n Only returns an index if searchVal is within some \"threshold\".\n Otherwise, returns null.\n */\nnv.nearestValueIndex = function (values, searchVal, threshold) {\n    \"use strict\";\n    var yDistMax = Infinity, indexToHighlight = null;\n    values.forEach(function(d,i) {\n        var delta = Math.abs(searchVal - d);\n        if ( d != null && delta <= yDistMax && delta < threshold) {\n            yDistMax = delta;\n            indexToHighlight = i;\n        }\n    });\n    return indexToHighlight;\n};\n\n/* Model which can be instantiated to handle tooltip rendering.\n Example usage:\n var tip = nv.models.tooltip().gravity('w').distance(23)\n .data(myDataObject);\n\n tip();    //just invoke the returned function to render tooltip.\n */\nnv.models.tooltip = function() {\n    \"use strict\";\n\n    /*\n    Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n    Example Format of data:\n    {\n        key: \"Date\",\n        value: \"August 2009\",\n        series: [\n            {key: \"Series 1\", value: \"Value 1\", color: \"#000\"},\n            {key: \"Series 2\", value: \"Value 2\", color: \"#00f\"}\n        ]\n    }\n    */\n    var id = \"nvtooltip-\" + Math.floor(Math.random() * 100000) // Generates a unique id when you create a new tooltip() object.\n        ,   data = null\n        ,   gravity = 'w'   // Can be 'n','s','e','w'. Determines how tooltip is positioned.\n        ,   distance = 25 // Distance to offset tooltip from the mouse location.\n        ,   snapDistance = 0   // Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n        ,   classes = null  // Attaches additional CSS classes to the tooltip DIV that is created.\n        ,   hidden = true  // Start off hidden, toggle with hide/show functions below.\n        ,   hideDelay = 200  // Delay (in ms) before the tooltip hides after calling hide().\n        ,   tooltip = null // d3 select of the tooltip div.\n        ,   lastPosition = { left: null, top: null } // Last position the tooltip was in.\n        ,   enabled = true  // True -> tooltips are rendered. False -> don't render tooltips.\n        ,   duration = 100 // Tooltip movement duration, in ms.\n        ,   headerEnabled = true // If is to show the tooltip header.\n        ,   nvPointerEventsClass = \"nv-pointer-events-none\" // CSS class to specify whether element should not have mouse events.\n    ;\n\n    // Format function for the tooltip values column.\n    var valueFormatter = function(d, i) {\n        return d;\n    };\n\n    // Format function for the tooltip header value.\n    var headerFormatter = function(d) {\n        return d;\n    };\n\n    var keyFormatter = function(d, i) {\n        return d;\n    };\n\n    // By default, the tooltip model renders a beautiful table inside a DIV.\n    // You can override this function if a custom tooltip is desired.\n    var contentGenerator = function(d) {\n        if (d === null) {\n            return '';\n        }\n\n        var table = d3.select(document.createElement(\"table\"));\n        if (headerEnabled) {\n            var theadEnter = table.selectAll(\"thead\")\n                .data([d])\n                .enter().append(\"thead\");\n\n            theadEnter.append(\"tr\")\n                .append(\"td\")\n                .attr(\"colspan\", 3)\n                .append(\"strong\")\n                .classed(\"x-value\", true)\n                .html(headerFormatter(d.value));\n        }\n\n        var tbodyEnter = table.selectAll(\"tbody\")\n            .data([d])\n            .enter().append(\"tbody\");\n\n        var trowEnter = tbodyEnter.selectAll(\"tr\")\n                .data(function(p) { return p.series})\n                .enter()\n                .append(\"tr\")\n                .classed(\"highlight\", function(p) { return p.highlight});\n\n        trowEnter.append(\"td\")\n            .classed(\"legend-color-guide\",true)\n            .append(\"div\")\n            .style(\"background-color\", function(p) { return p.color});\n\n        trowEnter.append(\"td\")\n            .classed(\"key\",true)\n            .classed(\"total\",function(p) { return !!p.total})\n            .html(function(p, i) { return keyFormatter(p.key, i)});\n\n        trowEnter.append(\"td\")\n            .classed(\"value\",true)\n            .html(function(p, i) { return valueFormatter(p.value, i) });\n\n        trowEnter.filter(function (p,i) { return p.percent !== undefined }).append(\"td\")\n            .classed(\"percent\", true)\n            .html(function(p, i) { return \"(\" + d3.format('%')(p.percent) + \")\" });\n\n        trowEnter.selectAll(\"td\").each(function(p) {\n            if (p.highlight) {\n                var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n                var opacity = 0.6;\n                d3.select(this)\n                    .style(\"border-bottom-color\", opacityScale(opacity))\n                    .style(\"border-top-color\", opacityScale(opacity))\n                ;\n            }\n        });\n\n        var html = table.node().outerHTML;\n        if (d.footer !== undefined)\n            html += \"<div class='footer'>\" + d.footer + \"</div>\";\n        return html;\n\n    };\n\n    /*\n     Function that returns the position (relative to the viewport/document.body)\n     the tooltip should be placed in.\n     Should return: {\n        left: <leftPos>,\n        top: <topPos>\n     }\n     */\n    var position = function() {\n        var pos = {\n            left: d3.event !== null ? d3.event.clientX : 0,\n            top: d3.event !== null ? d3.event.clientY : 0\n        };\n\n        if(getComputedStyle(document.body).transform != 'none') {\n            // Take the offset into account, as now the tooltip is relative\n            // to document.body.\n            var client = document.body.getBoundingClientRect();\n            pos.left -= client.left;\n            pos.top -= client.top;\n        }\n\n        return pos;\n    };\n\n    var dataSeriesExists = function(d) {\n        if (d && d.series) {\n            if (nv.utils.isArray(d.series)) {\n                return true;\n            }\n            // if object, it's okay just convert to array of the object\n            if (nv.utils.isObject(d.series)) {\n                d.series = [d.series];\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Calculates the gravity offset of the tooltip. Parameter is position of tooltip\n    // relative to the viewport.\n    var calcGravityOffset = function(pos) {\n        var height = tooltip.node().offsetHeight,\n            width = tooltip.node().offsetWidth,\n            clientWidth = document.documentElement.clientWidth, // Don't want scrollbars.\n            clientHeight = document.documentElement.clientHeight, // Don't want scrollbars.\n            left, top, tmp;\n\n        // calculate position based on gravity\n        switch (gravity) {\n            case 'e':\n                left = - width - distance;\n                top = - (height / 2);\n                if(pos.left + left < 0) left = distance;\n                if((tmp = pos.top + top) < 0) top -= tmp;\n                if((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'w':\n                left = distance;\n                top = - (height / 2);\n                if (pos.left + left + width > clientWidth) left = - width - distance;\n                if ((tmp = pos.top + top) < 0) top -= tmp;\n                if ((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'n':\n                left = - (width / 2) - 5; // - 5 is an approximation of the mouse's height.\n                top = distance;\n                if (pos.top + top + height > clientHeight) top = - height - distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 's':\n                left = - (width / 2);\n                top = - height - distance;\n                if (pos.top + top < 0) top = distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 'center':\n                left = - (width / 2);\n                top = - (height / 2);\n                break;\n            default:\n                left = 0;\n                top = 0;\n                break;\n        }\n\n        return { 'left': left, 'top': top };\n    };\n\n    /*\n     Positions the tooltip in the correct place, as given by the position() function.\n     */\n    var positionTooltip = function() {\n        nv.dom.read(function() {\n            var pos = position(),\n                gravityOffset = calcGravityOffset(pos),\n                left = pos.left + gravityOffset.left,\n                top = pos.top + gravityOffset.top;\n\n            // delay hiding a bit to avoid flickering\n            if (hidden) {\n                tooltip\n                    .interrupt()\n                    .transition()\n                    .delay(hideDelay)\n                    .duration(0)\n                    .style('opacity', 0);\n            } else {\n                // using tooltip.style('transform') returns values un-usable for tween\n                var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';\n                var new_translate = 'translate(' + Math.round(left) + 'px, ' + Math.round(top) + 'px)';\n                var translateInterpolator = d3.interpolateString(old_translate, new_translate);\n                var is_hidden = tooltip.style('opacity') < 0.1;\n\n                tooltip\n                    .interrupt() // cancel running transitions\n                    .transition()\n                    .duration(is_hidden ? 0 : duration)\n                    // using tween since some versions of d3 can't auto-tween a translate on a div\n                    .styleTween('transform', function (d) {\n                        return translateInterpolator;\n                    }, 'important')\n                    // Safari has its own `-webkit-transform` and does not support `transform`\n                    .styleTween('-webkit-transform', function (d) {\n                        return translateInterpolator;\n                    })\n                    .style('-ms-transform', new_translate)\n                    .style('opacity', 1);\n            }\n\n            lastPosition.left = left;\n            lastPosition.top = top;\n        });\n    };\n\n    // Creates new tooltip container, or uses existing one on DOM.\n    function initTooltip() {\n        if (!tooltip || !tooltip.node()) {\n            // Create new tooltip div if it doesn't exist on DOM.\n\n            var data = [1];\n            tooltip = d3.select(document.body).select('#'+id).data(data);\n\n            tooltip.enter().append('div')\n                   .attr(\"class\", \"nvtooltip \" + (classes ? classes : \"xy-tooltip\"))\n                   .attr(\"id\", id)\n                   .style(\"top\", 0).style(\"left\", 0)\n                   .style('opacity', 0)\n                   .style('position', 'fixed')\n                   .selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass, true)\n                   .classed(nvPointerEventsClass, true);\n\n            tooltip.exit().remove()\n        }\n    }\n\n    // Draw the tooltip onto the DOM.\n    function nvtooltip() {\n        if (!enabled) return;\n        if (!dataSeriesExists(data)) return;\n\n        nv.dom.write(function () {\n            initTooltip();\n            // Generate data and set it into tooltip.\n            // Bonus - If you override contentGenerator and return falsey you can use something like\n            //         React or Knockout to bind the data for your tooltip.\n            var newContent = contentGenerator(data);\n            if (newContent) {\n                tooltip.node().innerHTML = newContent;\n            }\n\n            positionTooltip();\n        });\n\n        return nvtooltip;\n    }\n\n    nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n    nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);\n\n    nvtooltip._options = Object.create({}, {\n        // simple read/write options\n        duration: {get: function(){return duration;}, set: function(_){duration=_;}},\n        gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        distance: {get: function(){return distance;}, set: function(_){distance=_;}},\n        snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},\n        classes: {get: function(){return classes;}, set: function(_){classes=_;}},\n        enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},\n        hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},\n        contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},\n        valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},\n        headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},\n        keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        headerEnabled: {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},\n        position: {get: function(){return position;}, set: function(_){position=_;}},\n\n        // Deprecated options\n        chartContainer: {get: function(){return document.body;}, set: function(_){\n            // deprecated after 1.8.3\n            nv.deprecated('chartContainer', 'feature removed after 1.8.3');\n        }},\n        fixedTop: {get: function(){return null;}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('fixedTop', 'feature removed after 1.8.1');\n        }},\n        offset: {get: function(){return {left: 0, top: 0};}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('offset', 'use chart.tooltip.distance() instead');\n        }},\n\n        // options with extra logic\n        hidden: {get: function(){return hidden;}, set: function(_){\n            if (hidden != _) {\n                hidden = !!_;\n                nvtooltip();\n            }\n        }},\n        data: {get: function(){return data;}, set: function(_){\n            // if showing a single data point, adjust data format with that\n            if (_.point) {\n                _.value = _.point.x;\n                _.series = _.series || {};\n                _.series.value = _.point.y;\n                _.series.color = _.point.color || _.series.color;\n            }\n            data = _;\n        }},\n\n        // read only properties\n        node: {get: function(){return tooltip.node();}, set: function(_){}},\n        id: {get: function(){return id;}, set: function(_){}}\n    });\n\n    nv.utils.initOptions(nvtooltip);\n    return nvtooltip;\n};\n\n\n/*\nGets the browser window size\n\nReturns object with height and width properties\n */\nnv.utils.windowSize = function() {\n    // Sane defaults\n    var size = {width: 640, height: 480};\n\n    // Most recent browsers use\n    if (window.innerWidth && window.innerHeight) {\n        size.width = window.innerWidth;\n        size.height = window.innerHeight;\n        return (size);\n    }\n\n    // IE can use depending on mode it is in\n    if (document.compatMode=='CSS1Compat' &&\n        document.documentElement &&\n        document.documentElement.offsetWidth ) {\n\n        size.width = document.documentElement.offsetWidth;\n        size.height = document.documentElement.offsetHeight;\n        return (size);\n    }\n\n    // Earlier IE uses Doc.body\n    if (document.body && document.body.offsetWidth) {\n        size.width = document.body.offsetWidth;\n        size.height = document.body.offsetHeight;\n        return (size);\n    }\n\n    return (size);\n};\n\n\n/* handle dumb browser quirks...  isinstance breaks if you use frames\ntypeof returns 'object' for null, NaN is a number, etc.\n */\nnv.utils.isArray = Array.isArray;\nnv.utils.isObject = function(a) {\n    return a !== null && typeof a === 'object';\n};\nnv.utils.isFunction = function(a) {\n    return typeof a === 'function';\n};\nnv.utils.isDate = function(a) {\n    return toString.call(a) === '[object Date]';\n};\nnv.utils.isNumber = function(a) {\n    return !isNaN(a) && typeof a === 'number';\n};\n\n\n/*\nBinds callback function to run when window is resized\n */\nnv.utils.windowResize = function(handler) {\n    if (window.addEventListener) {\n        window.addEventListener('resize', handler);\n    } else {\n        nv.log(\"ERROR: Failed to bind to window.resize with: \", handler);\n    }\n    // return object with clear function to remove the single added callback.\n    return {\n        callback: handler,\n        clear: function() {\n            window.removeEventListener('resize', handler);\n        }\n    }\n};\n\n\n/*\nBackwards compatible way to implement more d3-like coloring of graphs.\nCan take in nothing, an array, or a function/scale\nTo use a normal scale, get the range and pass that because we must be able\nto take two arguments and use the index to keep backward compatibility\n*/\nnv.utils.getColor = function(color) {\n    //if you pass in nothing, get default colors back\n    if (color === undefined) {\n        return nv.utils.defaultColor();\n\n    //if passed an array, turn it into a color scale\n    } else if(nv.utils.isArray(color)) {\n        var color_scale = d3.scale.ordinal().range(color);\n        return function(d, i) {\n            var key = i === undefined ? d : i;\n            return d.color || color_scale(key);\n        };\n\n    //if passed a function or scale, return it, or whatever it may be\n    //external libs, such as angularjs-nvd3-directives use this\n    } else {\n        //can't really help it if someone passes rubbish as color\n        return color;\n    }\n};\n\n\n/*\nDefault color chooser uses a color scale of 20 colors from D3\n https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors\n */\nnv.utils.defaultColor = function() {\n    // get range of the scale so we'll turn it into our own function.\n    return nv.utils.getColor(d3.scale.category20().range());\n};\n\n\n/*\nReturns a color function that takes the result of 'getKey' for each series and\nlooks for a corresponding color from the dictionary\n*/\nnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n    // use default series.key if getKey is undefined\n    getKey = getKey || function(series) { return series.key };\n    defaultColors = defaultColors || d3.scale.category20().range();\n\n    // start at end of default color list and walk back to index 0\n    var defIndex = defaultColors.length;\n\n    return function(series, index) {\n        var key = getKey(series);\n        if (nv.utils.isFunction(dictionary[key])) {\n            return dictionary[key]();\n        } else if (dictionary[key] !== undefined) {\n            return dictionary[key];\n        } else {\n            // no match in dictionary, use a default color\n            if (!defIndex) {\n                // used all the default colors, start over\n                defIndex = defaultColors.length;\n            }\n            defIndex = defIndex - 1;\n            return defaultColors[defIndex];\n        }\n    };\n};\n\n\n/*\nFrom the PJAX example on d3js.org, while this is not really directly needed\nit's a very cool method for doing pjax, I may expand upon it a little bit,\nopen to suggestions on anything that may be useful\n*/\nnv.utils.pjax = function(links, content) {\n\n    var load = function(href) {\n        d3.html(href, function(fragment) {\n            var target = d3.select(content).node();\n            target.parentNode.replaceChild(\n                d3.select(fragment).select(content).node(),\n                target);\n            nv.utils.pjax(links, content);\n        });\n    };\n\n    d3.selectAll(links).on(\"click\", function() {\n        history.pushState(this.href, this.textContent, this.href);\n        load(this.href);\n        d3.event.preventDefault();\n    });\n\n    d3.select(window).on(\"popstate\", function() {\n        if (d3.event.state) {\n            load(d3.event.state);\n        }\n    });\n};\n\n\n/*\nFor when we want to approximate the width in pixels for an SVG:text element.\nMost common instance is when the element is in a display:none; container.\nForumla is : text.length * font-size * constant_factor\n*/\nnv.utils.calcApproxTextWidth = function (svgTextElem) {\n    if (nv.utils.isFunction(svgTextElem.style) && nv.utils.isFunction(svgTextElem.text)) {\n        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"), 10);\n        var textLength = svgTextElem.text().length;\n        return nv.utils.NaNtoZero(textLength * fontSize * 0.5);\n    }\n    return 0;\n};\n\n\n/*\nNumbers that are undefined, null or NaN, convert them to zeros.\n*/\nnv.utils.NaNtoZero = function(n) {\n    if (!nv.utils.isNumber(n)\n        || isNaN(n)\n        || n === null\n        || n === Infinity\n        || n === -Infinity) {\n\n        return 0;\n    }\n    return n;\n};\n\n/*\nAdd a way to watch for d3 transition ends to d3\n*/\nd3.selection.prototype.watchTransition = function(renderWatch){\n    var args = [this].concat([].slice.call(arguments, 1));\n    return renderWatch.transition.apply(renderWatch, args);\n};\n\n\n/*\nHelper object to watch when d3 has rendered something\n*/\nnv.utils.renderWatch = function(dispatch, duration) {\n    if (!(this instanceof nv.utils.renderWatch)) {\n        return new nv.utils.renderWatch(dispatch, duration);\n    }\n\n    var _duration = duration !== undefined ? duration : 250;\n    var renderStack = [];\n    var self = this;\n\n    this.models = function(models) {\n        models = [].slice.call(arguments, 0);\n        models.forEach(function(model){\n            model.__rendered = false;\n            (function(m){\n                m.dispatch.on('renderEnd', function(arg){\n                    m.__rendered = true;\n                    self.renderEnd('model');\n                });\n            })(model);\n\n            if (renderStack.indexOf(model) < 0) {\n                renderStack.push(model);\n            }\n        });\n    return this;\n    };\n\n    this.reset = function(duration) {\n        if (duration !== undefined) {\n            _duration = duration;\n        }\n        renderStack = [];\n    };\n\n    this.transition = function(selection, args, duration) {\n        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n\n        if (args.length > 1) {\n            duration = args.pop();\n        } else {\n            duration = _duration !== undefined ? _duration : 250;\n        }\n        selection.__rendered = false;\n\n        if (renderStack.indexOf(selection) < 0) {\n            renderStack.push(selection);\n        }\n\n        if (duration === 0) {\n            selection.__rendered = true;\n            selection.delay = function() { return this; };\n            selection.duration = function() { return this; };\n            return selection;\n        } else {\n            if (selection.length === 0) {\n                selection.__rendered = true;\n            } else if (selection.every( function(d){ return !d.length; } )) {\n                selection.__rendered = true;\n            } else {\n                selection.__rendered = false;\n            }\n\n            var n = 0;\n            return selection\n                .transition()\n                .duration(duration)\n                .each(function(){ ++n; })\n                .each('end', function(d, i) {\n                    if (--n === 0) {\n                        selection.__rendered = true;\n                        self.renderEnd.apply(this, args);\n                    }\n                });\n        }\n    };\n\n    this.renderEnd = function() {\n        if (renderStack.every( function(d){ return d.__rendered; } )) {\n            renderStack.forEach( function(d){ d.__rendered = false; });\n            dispatch.renderEnd.apply(this, arguments);\n        }\n    }\n\n};\n\n\n/*\nTakes multiple objects and combines them into the first one (dst)\nexample:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});\ngives:  {a: 2, b: 3, c: 4}\n*/\nnv.utils.deepExtend = function(dst){\n    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n    sources.forEach(function(source) {\n        for (var key in source) {\n            var isArray = nv.utils.isArray(dst[key]);\n            var isObject = nv.utils.isObject(dst[key]);\n            var srcObj = nv.utils.isObject(source[key]);\n\n            if (isObject && !isArray && srcObj) {\n                nv.utils.deepExtend(dst[key], source[key]);\n            } else {\n                dst[key] = source[key];\n            }\n        }\n    });\n};\n\n\n/*\nstate utility object, used to track d3 states in the models\n*/\nnv.utils.state = function(){\n    if (!(this instanceof nv.utils.state)) {\n        return new nv.utils.state();\n    }\n    var state = {};\n    var _self = this;\n    var _setState = function(){};\n    var _getState = function(){ return {}; };\n    var init = null;\n    var changed = null;\n\n    this.dispatch = d3.dispatch('change', 'set');\n\n    this.dispatch.on('set', function(state){\n        _setState(state, true);\n    });\n\n    this.getter = function(fn){\n        _getState = fn;\n        return this;\n    };\n\n    this.setter = function(fn, callback) {\n        if (!callback) {\n            callback = function(){};\n        }\n        _setState = function(state, update){\n            fn(state);\n            if (update) {\n                callback();\n            }\n        };\n        return this;\n    };\n\n    this.init = function(state){\n        init = init || {};\n        nv.utils.deepExtend(init, state);\n    };\n\n    var _set = function(){\n        var settings = _getState();\n\n        if (JSON.stringify(settings) === JSON.stringify(state)) {\n            return false;\n        }\n\n        for (var key in settings) {\n            if (state[key] === undefined) {\n                state[key] = {};\n            }\n            state[key] = settings[key];\n            changed = true;\n        }\n        return true;\n    };\n\n    this.update = function(){\n        if (init) {\n            _setState(init, false);\n            init = null;\n        }\n        if (_set.call(this)) {\n            this.dispatch.change(state);\n        }\n    };\n\n};\n\n\n/*\nSnippet of code you can insert into each nv.models.* to give you the ability to\ndo things like:\nchart.options({\n  showXAxis: true,\n  tooltips: true\n});\n\nTo enable in the chart:\nchart.options = nv.utils.optionsFunc.bind(chart);\n*/\nnv.utils.optionsFunc = function(args) {\n    if (args) {\n        d3.map(args).forEach((function(key,value) {\n            if (nv.utils.isFunction(this[key])) {\n                this[key](value);\n            }\n        }).bind(this));\n    }\n    return this;\n};\n\n\n/*\nnumTicks:  requested number of ticks\ndata:  the chart data\n\nreturns the number of ticks to actually use on X axis, based on chart data\nto avoid duplicate ticks with the same value\n*/\nnv.utils.calcTicksX = function(numTicks, data) {\n    // find max number of values from all data streams\n    var numValues = 1;\n    var i = 0;\n    for (i; i < data.length; i += 1) {\n        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;\n        numValues = stream_len > numValues ? stream_len : numValues;\n    }\n    nv.log(\"Requested number of ticks: \", numTicks);\n    nv.log(\"Calculated max values to be: \", numValues);\n    // make sure we don't have more ticks than values to avoid duplicates\n    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;\n    // make sure we have at least one tick\n    numTicks = numTicks < 1 ? 1 : numTicks;\n    // make sure it's an integer\n    numTicks = Math.floor(numTicks);\n    nv.log(\"Calculating tick count as: \", numTicks);\n    return numTicks;\n};\n\n\n/*\nreturns number of ticks to actually use on Y axis, based on chart data\n*/\nnv.utils.calcTicksY = function(numTicks, data) {\n    // currently uses the same logic but we can adjust here if needed later\n    return nv.utils.calcTicksX(numTicks, data);\n};\n\n\n/*\nAdd a particular option from an options object onto chart\nOptions exposed on a chart are a getter/setter function that returns chart\non set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');\n\noption objects should be generated via Object.create() to provide\nthe option of manipulating data via get/set functions.\n*/\nnv.utils.initOption = function(chart, name) {\n    // if it's a call option, just call it directly, otherwise do get/set\n    if (chart._calls && chart._calls[name]) {\n        chart[name] = chart._calls[name];\n    } else {\n        chart[name] = function (_) {\n            if (!arguments.length) return chart._options[name];\n            chart._overrides[name] = true;\n            chart._options[name] = _;\n            return chart;\n        };\n        // calling the option as _option will ignore if set by option already\n        // so nvd3 can set options internally but the stop if set manually\n        chart['_' + name] = function(_) {\n            if (!arguments.length) return chart._options[name];\n            if (!chart._overrides[name]) {\n                chart._options[name] = _;\n            }\n            return chart;\n        }\n    }\n};\n\n\n/*\nAdd all options in an options object to the chart\n*/\nnv.utils.initOptions = function(chart) {\n    chart._overrides = chart._overrides || {};\n    var ops = Object.getOwnPropertyNames(chart._options || {});\n    var calls = Object.getOwnPropertyNames(chart._calls || {});\n    ops = ops.concat(calls);\n    for (var i in ops) {\n        nv.utils.initOption(chart, ops[i]);\n    }\n};\n\n\n/*\nInherit options from a D3 object\nd3.rebind makes calling the function on target actually call it on source\nAlso use _d3options so we can track what we inherit for documentation and chained inheritance\n*/\nnv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {\n    target._d3options = oplist.concat(target._d3options || []);\n    oplist.unshift(d3_source);\n    oplist.unshift(target);\n    d3.rebind.apply(this, oplist);\n};\n\n\n/*\nRemove duplicates from an array\n*/\nnv.utils.arrayUnique = function(a) {\n    return a.sort().filter(function(item, pos) {\n        return !pos || item != a[pos - 1];\n    });\n};\n\n\n/*\nKeeps a list of custom symbols to draw from in addition to d3.svg.symbol\nNecessary since d3 doesn't let you extend its list -_-\nAdd new symbols by doing nv.utils.symbols.set('name', function(size){...});\n*/\nnv.utils.symbolMap = d3.map();\n\n\n/*\nReplaces d3.svg.symbol so that we can look both there and our own map\n */\nnv.utils.symbol = function() {\n    var type,\n        size = 64;\n    function symbol(d,i) {\n        var t = type.call(this,d,i);\n        var s = size.call(this,d,i);\n        if (d3.svg.symbolTypes.indexOf(t) !== -1) {\n            return d3.svg.symbol().type(t).size(s)();\n        } else {\n            return nv.utils.symbolMap.get(t)(s);\n        }\n    }\n    symbol.type = function(_) {\n        if (!arguments.length) return type;\n        type = d3.functor(_);\n        return symbol;\n    };\n    symbol.size = function(_) {\n        if (!arguments.length) return size;\n        size = d3.functor(_);\n        return symbol;\n    };\n    return symbol;\n};\n\n\n/*\nInherit option getter/setter functions from source to target\nd3.rebind makes calling the function on target actually call it on source\nAlso track via _inherited and _d3options so we can track what we inherit\nfor documentation generation purposes and chained inheritance\n*/\nnv.utils.inheritOptions = function(target, source) {\n    // inherit all the things\n    var ops = Object.getOwnPropertyNames(source._options || {});\n    var calls = Object.getOwnPropertyNames(source._calls || {});\n    var inherited = source._inherited || [];\n    var d3ops = source._d3options || [];\n    var args = ops.concat(calls).concat(inherited).concat(d3ops);\n    args.unshift(source);\n    args.unshift(target);\n    d3.rebind.apply(this, args);\n    // pass along the lists to keep track of them, don't allow duplicates\n    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));\n    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));\n};\n\n\n/*\nRuns common initialize code on the svg before the chart builds\n*/\nnv.utils.initSVG = function(svg) {\n    svg.classed({'nvd3-svg':true});\n};\n\n\n/*\nSanitize and provide default for the container height.\n*/\nnv.utils.sanitizeHeight = function(height, container) {\n    return (height || parseInt(container.style('height'), 10) || 400);\n};\n\n\n/*\nSanitize and provide default for the container width.\n*/\nnv.utils.sanitizeWidth = function(width, container) {\n    return (width || parseInt(container.style('width'), 10) || 960);\n};\n\n\n/*\nCalculate the available height for a chart.\n*/\nnv.utils.availableHeight = function(height, container, margin) {\n    return Math.max(0,nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n};\n\n/*\nCalculate the available width for a chart.\n*/\nnv.utils.availableWidth = function(width, container, margin) {\n    return Math.max(0,nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);\n};\n\n/*\nClear any rendered chart components and display a chart's 'noData' message\n*/\nnv.utils.noData = function(chart, container) {\n    var opt = chart.options(),\n        margin = opt.margin(),\n        noData = opt.noData(),\n        data = (noData == null) ? [\"No Data Available.\"] : [noData],\n        height = nv.utils.availableHeight(null, container, margin),\n        width = nv.utils.availableWidth(null, container, margin),\n        x = margin.left + width/2,\n        y = margin.top + height/2;\n\n    //Remove any previously created chart components\n    container.selectAll('g').remove();\n\n    var noDataText = container.selectAll('.nv-noData').data(data);\n\n    noDataText.enter().append('text')\n        .attr('class', 'nvd3 nv-noData')\n        .attr('dy', '-.7em')\n        .style('text-anchor', 'middle');\n\n    noDataText\n        .attr('x', x)\n        .attr('y', y)\n        .text(function(t){ return t; });\n};\n\n/*\n Wrap long labels.\n */\nnv.utils.wrapTicks = function (text, width) {\n    text.each(function() {\n        var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1,\n            y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(\" \"));\n                line = [word];\n                tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n            }\n        }\n    });\n};\n\n/*\nCheck equality of 2 array\n*/\nnv.utils.arrayEquals = function (array1, array2) {\n    if (array1 === array2)\n        return true;\n\n    if (!array1 || !array2)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (array1.length != array2.length)\n        return false;\n\n    for (var i = 0,\n        l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!nv.arrayEquals(array1[i], array2[i]))\n                return false;\n        } else if (array1[i] != array2[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\nnv.models.axis = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var axis = d3.svg.axis();\n    var scale = d3.scale.linear();\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 75 //only used for tickLabel currently\n        , height = 60 //only used for tickLabel currently\n        , axisLabelText = null\n        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n        , rotateLabels = 0\n        , rotateYLabel = true\n        , staggerLabels = false\n        , isOrdinal = false\n        , ticks = null\n        , axisLabelDistance = 0\n        , fontSize = undefined\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n    axis\n        .scale(scale)\n        .orient('bottom')\n        .tickFormat(function(d) { return d })\n    ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            if (ticks !== null)\n                axis.ticks(ticks);\n            else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\n            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n            g.watchTransition(renderWatch, 'axis').call(axis);\n\n            scale0 = scale0 || axis.scale();\n\n            var fmt = axis.tickFormat();\n            if (fmt == null) {\n                fmt = scale0.tickFormat();\n            }\n\n            var axisLabel = g.selectAll('text.nv-axislabel')\n                .data([axisLabelText || null]);\n            axisLabel.exit().remove();\n\n            //only skip when fontSize is undefined so it can be cleared with a null or blank string\n            if (fontSize !== undefined) {\n                g.selectAll('g').select(\"text\").style('font-size', fontSize);\n            }\n\n            var xLabelMargin;\n            var axisMaxMin;\n            var w;\n            switch (axis.orient()) {\n                case 'top':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                  w = 0;\n                  if (scale.range().length === 1) {\n                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                  } else if (scale.range().length === 2) {\n                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                  } else if ( scale.range().length > 2){\n                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                  };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', 0)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '-0.5em')\n                            .attr('y', -axis.tickPadding())\n                            .attr('text-anchor', 'middle')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max top')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'\n                            });\n                    }\n                    break;\n                case 'bottom':\n                    xLabelMargin = axisLabelDistance + 36;\n                    var maxTextWidth = 30;\n                    var textHeight = 0;\n                    var xTicks = g.selectAll('g').select(\"text\");\n                    var rotateLabelsRule = '';\n                    if (rotateLabels%360) {\n                        //Reset transform on ticks so textHeight can be calculated correctly\n                        xTicks.attr('transform', ''); \n                        //Calculate the longest xTick width\n                        xTicks.each(function(d,i){\n                            var box = this.getBoundingClientRect();\n                            var width = box.width;\n                            textHeight = box.height;\n                            if(width > maxTextWidth) maxTextWidth = width;\n                        });\n                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';\n                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n                        //Rotate all xTicks\n                        xTicks\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n                    } else {\n                        if (staggerLabels) {\n                            xTicks\n                                .attr('transform', function(d,i) {\n                                    return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'\n                                });\n                        } else {\n                            xTicks.attr('transform', \"translate(0,0)\");\n                        }\n                    }\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    w = 0;\n                    if (scale.range().length === 1) {\n                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                    } else if (scale.range().length === 2) {\n                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                    } else if ( scale.range().length > 2){\n                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                    };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', xLabelMargin)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        //if (showMaxMin && !isOrdinal) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            //.data(scale.domain())\n                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '.71em')\n                            .attr('y', axis.tickPadding())\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            });\n                    }\n\n                    break;\n                case 'right':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12 - (axisLabelDistance || 0)) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                       \taxisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', axis.tickPadding())\n                            .style('text-anchor', 'start')\n                            .text(function(d, i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n                case 'left':\n                    /*\n                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n                     var yTicks = g.selectAll('g').select(\"text\");\n                     yTicks.each(function(d,i){\n                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;\n                     if(labelPadding > width) width = labelPadding;\n                     });\n                     */\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)\n                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', -axis.tickPadding())\n                            .attr('text-anchor', 'end')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n            }\n            axisLabel.text(function(d) { return d });\n\n            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n                //check if max and min overlap other values, if so, hide the values that overlap\n                g.selectAll('g') // the g's wrapping each tick\n                    .each(function(d,i) {\n                        d3.select(this).select('text').attr('opacity', 1);\n                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                                d3.select(this).attr('opacity', 0);\n\n                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n                        }\n                    });\n\n                //if Max and Min = 0 only show min, Issue #281\n                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {\n                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {\n                        return !i ? 1 : 0\n                    });\n                }\n            }\n\n            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n                var maxMinRange = [];\n                wrap.selectAll('g.nv-axisMaxMin')\n                    .each(function(d,i) {\n                        try {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)\n                        }catch (err) {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + 4);\n                        }\n                    });\n                // the g's wrapping each tick\n                g.selectAll('g').each(function(d, i) {\n                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                            d3.select(this).remove();\n                        else\n                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n                    }\n                });\n            }\n\n            //Highlight zero tick line\n            g.selectAll('.tick')\n                .filter(function (d) {\n                    /*\n                    The filter needs to return only ticks at or near zero.\n                    Numbers like 0.00001 need to count as zero as well,\n                    and the arithmetic trick below solves that.\n                    */\n                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)\n                }) \n                .classed('zero', true);\n            \n            //store old scales for use in transitions on update\n            scale0 = scale.copy();\n\n        });\n\n        renderWatch.renderEnd('axis immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.axis = axis;\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},\n        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},\n        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},\n        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},\n        height:            {get: function(){return height;}, set: function(_){height=_;}},\n        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        width:             {get: function(){return width;}, set: function(_){width=_;}},\n        fontSize:          {get: function(){return fontSize;}, set: function(_){fontSize=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top !== undefined    ? _.top    : margin.top;\n            margin.right  = _.right !== undefined  ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left !== undefined   ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration=_;\n            renderWatch.reset(duration);\n        }},\n        scale: {get: function(){return scale;}, set: function(_){\n            scale = _;\n            axis.scale(scale);\n            isOrdinal = typeof scale.rangeBands === 'function';\n            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);\n    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n\n    return chart;\n};\nnv.models.boxPlot = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0},\n        width = 960,\n        height = 500,\n        id = Math.floor(Math.random() * 10000), // Create semi-unique ID in case user doesn't select one\n        xScale = d3.scale.ordinal(),\n        yScale = d3.scale.linear(),\n        getX  = function(d) { return d.label }, // Default data model selectors.\n        getQ1 = function(d) { return d.values.Q1 },\n        getQ2 = function(d) { return d.values.Q2 },\n        getQ3 = function(d) { return d.values.Q3 },\n        getWl = function(d) { return d.values.whisker_low },\n        getWh = function(d) { return d.values.whisker_high },\n        getColor = function(d) { return d.color },\n        getOlItems  = function(d) { return d.values.outliers },\n        getOlValue = function(d, i, j) { return d },\n        getOlLabel = function(d, i, j) { return d },\n        getOlColor = function(d, i, j) { return undefined },\n        color = nv.utils.defaultColor(),\n        container = null,\n        xDomain, xRange,\n        yDomain, yRange,\n        dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'),\n        duration = 250,\n        maxBoxWidth = null;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var xScale0, yScale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            xScale.domain(xDomain || data.map(function(d,i) { return getX(d,i); }))\n                .rangeBands(xRange || [0, availableWidth], 0.1);\n\n            // if we know yDomain, no need to calculate\n            var yData = []\n            if (!yDomain) {\n                // (y-range is based on quartiles, whiskers and outliers)\n                var values = [], yMin, yMax;\n                data.forEach(function (d, i) {\n                    var q1 = getQ1(d), q3 = getQ3(d), wl = getWl(d), wh = getWh(d);\n                    var olItems = getOlItems(d);\n                    if (olItems) {\n                        olItems.forEach(function (e, i) {\n                            values.push(getOlValue(e, i, undefined));\n                        });\n                    }\n                    if (wl) { values.push(wl) }\n                    if (q1) { values.push(q1) }\n                    if (q3) { values.push(q3) }\n                    if (wh) { values.push(wh) }\n                });\n                yMin = d3.min(values);\n                yMax = d3.max(values);\n                yData = [ yMin, yMax ] ;\n            }\n\n            yScale.domain(yDomain || yData);\n            yScale.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            xScale0 = xScale0 || xScale;\n            yScale0 = yScale0 || yScale.copy().range([yScale(0),yScale(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });\n            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);\n            boxplots\n                .attr('class', 'nv-boxplot')\n                .attr('transform', function(d,i,j) { return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)'; })\n                .classed('hover', function(d) { return d.hover });\n            boxplots\n                .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', 0.75)\n                .delay(function(d,i) { return i * duration / data.length })\n                .attr('transform', function(d,i) {\n                    return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)';\n                });\n            boxplots.exit().remove();\n\n            // ----- add the SVG elements for each boxPlot -----\n\n            // conditionally append whisker lines\n            boxEnter.each(function(d,i) {\n                var box = d3.select(this);\n                [getWl, getWh].forEach(function (f) {\n                    if (f(d) !== undefined && f(d) !== null) {\n                        var key = (f === getWl) ? 'low' : 'high';\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);\n                    }\n                });\n            });\n\n            var box_width = function() { return (maxBoxWidth === null ? xScale.rangeBand() * 0.9 : Math.min(75, xScale.rangeBand() * 0.9)); };\n            var box_left  = function() { return xScale.rangeBand() * 0.45 - box_width()/2; };\n            var box_right = function() { return xScale.rangeBand() * 0.45 + box_width()/2; };\n\n            // update whisker lines and ticks\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                var endpoint = (f === getWl) ? getQ1 : getQ3;\n                boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', xScale.rangeBand() * 0.45 )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', xScale.rangeBand() * 0.45 )\n                    .attr('y2', function(d,i) { return yScale(endpoint(d)); });\n                boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', box_left )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', box_right )\n                    .attr('y2', function(d,i) { return yScale(f(d)); });\n            });\n\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                boxEnter.selectAll('.nv-boxplot-' + key)\n                  .on('mouseover', function(d,i,j) {\n                      d3.select(this).classed('hover', true);\n                      dispatch.elementMouseover({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mouseout', function(d,i,j) {\n                      d3.select(this).classed('hover', false);\n                      dispatch.elementMouseout({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mousemove', function(d,i) {\n                      dispatch.elementMousemove({e: d3.event});\n                  });\n            });\n\n            // boxes\n            boxEnter.append('rect')\n                .attr('class', 'nv-boxplot-box')\n                // tooltip events\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n\n            // box transitions\n            boxplots.select('rect.nv-boxplot-box')\n              .watchTransition(renderWatch, 'nv-boxplot: boxes')\n                .attr('y', function(d,i) { return yScale(getQ3(d)); })\n                .attr('width', box_width)\n                .attr('x', box_left )\n                .attr('height', function(d,i) { return Math.abs(yScale(getQ3(d)) - yScale(getQ1(d))) || 1 })\n                .style('fill', function(d,i) { return getColor(d) || color(d,i) })\n                .style('stroke', function(d,i) { return getColor(d) || color(d,i) });\n\n            // median line\n            boxEnter.append('line').attr('class', 'nv-boxplot-median');\n\n            boxplots.select('line.nv-boxplot-median')\n              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')\n                .attr('x1', box_left)\n                .attr('y1', function(d,i) { return yScale(getQ2(d)); })\n                .attr('x2', box_right)\n                .attr('y2', function(d,i) { return yScale(getQ2(d)); });\n\n            // outliers\n            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {\n                return getOlItems(d) || [];\n            });\n            outliers.enter().append('circle')\n                .style('fill', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('stroke', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('z-index', 9000)\n                .on('mouseover', function(d,i,j) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i,j) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n            outliers.attr('class', 'nv-boxplot-outlier');\n            outliers\n              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')\n                .attr('cx', xScale.rangeBand() * 0.45)\n                .attr('cy', function(d,i,j) { return yScale(getOlValue(d,i,j)); })\n                .attr('r', '3');\n            outliers.exit().remove();\n\n            //store old scales for use in transitions on update\n            xScale0 = xScale.copy();\n            yScale0 = yScale.copy();\n        });\n\n        renderWatch.renderEnd('nv-boxplot immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:       {get: function(){return width;}, set: function(_){width=_;}},\n        height:      {get: function(){return height;}, set: function(_){height=_;}},\n        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},\n        x:           {get: function(){return getX;}, set: function(_){getX=_;}},\n        q1: {get: function(){return getQ1;}, set: function(_){getQ1=_;}},\n        q2: {get: function(){return getQ2;}, set: function(_){getQ2=_;}},\n        q3: {get: function(){return getQ3;}, set: function(_){getQ3=_;}},\n        wl: {get: function(){return getWl;}, set: function(_){getWl=_;}},\n        wh: {get: function(){return getWh;}, set: function(_){getWh=_;}},\n        itemColor:    {get: function(){return getColor;}, set: function(_){getColor=_;}},\n        outliers:     {get: function(){return getOlItems;}, set: function(_){getOlItems=_;}},\n        outlierValue: {get: function(){return getOlValue;}, set: function(_){getOlValue=_;}},\n        outlierLabel: {get: function(){return getOlLabel;}, set: function(_){getOlLabel=_;}},\n        outlierColor: {get: function(){return getOlColor;}, set: function(_){getOlColor=_;}},\n        xScale:  {get: function(){return xScale;}, set: function(_){xScale=_;}},\n        yScale:  {get: function(){return yScale;}, set: function(_){yScale=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n        y: {\n            get: function() {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n                return {};\n            },\n            set: function(_) {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n            }\n        },\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.boxPlotChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var boxplot = nv.models.boxPlot(),\n        xAxis = nv.models.axis(),\n        yAxis = nv.models.axis();\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60},\n        width = null,\n        height = null,\n        color = nv.utils.getColor(),\n        showXAxis = true,\n        showYAxis = true,\n        rightAlignYAxis = false,\n        staggerLabels = false,\n        tooltip = nv.models.tooltip(),\n        x, y,\n        noData = 'No Data Available.',\n        dispatch = d3.dispatch('beforeUpdate', 'renderEnd'),\n        duration = 250;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip.duration(0);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(boxplot);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this), that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = (width  || parseInt(container.style('width')) || 960) - margin.left - margin.right;\n            var availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // TODO still need to find a way to validate quartile data presence using boxPlot callbacks.\n            // Display No Data message if there's nothing to show. (quartiles required at minimum).\n            if (!data || !data.length) {\n                var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n                noDataText.enter().append('text')\n                    .attr('class', 'nvd3 nv-noData')\n                    .attr('dy', '-.7em')\n                    .style('text-anchor', 'middle');\n\n                noDataText\n                    .attr('x', margin.left + availableWidth / 2)\n                    .attr('y', margin.top + availableHeight / 2)\n                    .text(function(d) { return d });\n\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = boxplot.xScale();\n            y = boxplot.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(' + availableWidth + ',0)');\n            }\n\n            // Main Chart Component(s)\n            boxplot.width(availableWidth).height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n\n            barsWrap.transition().call(boxplot);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + boxplot.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 === 0 ? '5' : '17') + ')' })\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select('.nv-zeroLine line')\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', y(0))\n                .attr('y2', y(0))\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n        });\n\n        renderWatch.renderEnd('nv-boxplot chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip.data(evt).hidden(false);\n    });\n\n    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.data(evt).hidden(true);\n    });\n\n    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.boxplot = boxplot;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            boxplot.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            boxplot.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, boxplot);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\n\nnv.models.bullet = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , orient = 'left' // TODO top & bottom\n        , reverse = false\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , markerLines = function(d) { return d.markerLines ? d.markerLines : [0] }\n        , measures = function(d) { return d.measures }\n        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n        , markerLineLabels = function(d) { return d.markerLineLabels ? d.markerLineLabels : []  }\n        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , width = 380\n        , height = 30\n        , container = null\n        , tickFormat = null\n        , color = nv.utils.getColor(['#1f77b4'])\n        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')\n        , defaultRangeLabels = [\"Maximum\", \"Mean\", \"Minimum\"]\n        , legacyRangeClassNames = [\"Max\", \"Avg\", \"Min\"]\n        , duration = 1000\n        ;\n\n    function sortLabels(labels, values){\n        var lz = labels.slice();\n        labels.sort(function(a, b){\n            var iA = lz.indexOf(a);\n            var iB = lz.indexOf(b);\n            return d3.descending(values[iA], values[iB]);\n        });\n    };\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var rangez = ranges.call(this, d, i).slice(),\n                markerz = markers.call(this, d, i).slice(),\n                markerLinez = markerLines.call(this, d, i).slice(),\n                measurez = measures.call(this, d, i).slice(),\n                rangeLabelz = rangeLabels.call(this, d, i).slice(),\n                markerLabelz = markerLabels.call(this, d, i).slice(),\n                markerLineLabelz = markerLineLabels.call(this, d, i).slice(),\n                measureLabelz = measureLabels.call(this, d, i).slice();\n\n            // Sort labels according to their sorted values\n            sortLabels(rangeLabelz, rangez);\n            sortLabels(markerLabelz, markerz);\n            sortLabels(markerLineLabelz, markerLinez);\n            sortLabels(measureLabelz, measurez);\n\n            // sort values descending\n            rangez.sort(d3.descending);\n            markerz.sort(d3.descending);\n            markerLinez.sort(d3.descending);\n            measurez.sort(d3.descending);\n\n            // Setup Scales\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain( d3.extent(d3.merge([forceX, rangez])) )\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var rangeMin = d3.min(rangez), //rangez[2]\n                rangeMax = d3.max(rangez), //rangez[0]\n                rangeAvg = rangez[1];\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var rangeClassNames = 'nv-range nv-range'+i;\n                if(i <= 2){\n                    rangeClassNames = rangeClassNames + ' nv-range'+legacyRangeClassNames[i];\n                }\n                gEnter.append('rect').attr('class', rangeClassNames);\n            }\n\n            gEnter.append('rect').attr('class', 'nv-measure');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var range = rangez[i];\n                g.select('rect.nv-range'+i)\n                    .datum(range)\n                    .attr('height', availableHeight)\n                    .transition()\n                    .duration(duration)\n                    .attr('width', w1(range))\n                    .attr('x', xp1(range))\n            }\n\n            g.select('rect.nv-measure')\n                .style('fill', color)\n                .attr('height', availableHeight / 3)\n                .attr('y', availableHeight / 3)\n                .on('mouseover', function() {\n                    dispatch.elementMouseover({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function() {\n                    dispatch.elementMouseout({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .transition()\n                .duration(duration)\n                .attr('width', measurez < 0 ?\n                    x1(0) - x1(measurez[0])\n                    : x1(measurez[0]) - x1(0))\n                .attr('x', xp1(measurez));\n\n            var h3 =  availableHeight / 6;\n\n            var markerData = markerz.map( function(marker, index) {\n                return {value: marker, label: markerLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .enter()\n              .append('path')\n              .attr('class', 'nv-markerTriangle')\n              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .transition()\n              .duration(duration)\n              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });\n\n            var markerLinesData = markerLinez.map( function(marker, index) {\n                return {value: marker, label: markerLineLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .enter()\n              .append('line')\n              .attr('cursor', '')\n              .attr('class', 'nv-markerLine')\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('y1', '2')\n              .attr('x2', function(d) { return x1(d.value) })\n              .attr('y2', availableHeight - 2)\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .transition()\n              .duration(duration)\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('x2', function(d) { return x1(d.value) });\n\n            wrap.selectAll('.nv-range')\n                .on('mouseover', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseover({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Previous',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseout({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        duration:    {get: function(){return duration;}, set: function(_){duration=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\n\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\nnv.models.bulletChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bullet = nv.models.bullet();\n    var tooltip = nv.models.tooltip();\n\n    var orient = 'left' // TODO top & bottom\n        , reverse = false\n        , margin = {top: 5, right: 40, bottom: 20, left: 120}\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , measures = function(d) { return d.measures }\n        , width = null\n        , height = 55\n        , tickFormat = null\n        , ticks = null\n        , noData = null\n        , dispatch = d3.dispatch()\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false);\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom,\n                that = this;\n\n            chart.update = function() { chart(selection) };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!d || !ranges.call(this, d, i)) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n                markerz = markers.call(this, d, i).slice().sort(d3.descending),\n                measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bulletWrap');\n            gEnter.append('g').attr('class', 'nv-titles');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain([0, Math.max(rangez[0], (markerz[0] || 0), measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\n            var title = gEnter.select('.nv-titles').append('g')\n                .attr('text-anchor', 'end')\n                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n            title.append('text')\n                .attr('class', 'nv-title')\n                .text(function(d) { return d.title; });\n\n            title.append('text')\n                .attr('class', 'nv-subtitle')\n                .attr('dy', '1em')\n                .text(function(d) { return d.subtitle; });\n\n            bullet\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var bulletWrap = g.select('.nv-bulletWrap');\n            d3.transition(bulletWrap).call(bullet);\n\n            // Compute the tick format.\n            var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\n            // Update the tick groups.\n            var tick = g.selectAll('g.nv-tick')\n                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {\n                    return this.textContent || format(d);\n                });\n\n            // Initialize the ticks with the old scale, x0.\n            var tickEnter = tick.enter().append('g')\n                .attr('class', 'nv-tick')\n                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n                .style('opacity', 1e-6);\n\n            tickEnter.append('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickEnter.append('text')\n                .attr('text-anchor', 'middle')\n                .attr('dy', '1em')\n                .attr('y', availableHeight * 7 / 6)\n                .text(format);\n\n            // Transition the updating ticks to the new scale, x1.\n            var tickUpdate = d3.transition(tick)\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1);\n\n            tickUpdate.select('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickUpdate.select('text')\n                .attr('y', availableHeight * 7 / 6);\n\n            // Transition the exiting ticks to the new scale, x1.\n            d3.transition(tick.exit())\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1e-6)\n                .remove();\n        });\n\n        d3.timer.flush();\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: evt.label,\n            value: evt.value,\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.bullet = bullet;\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bullet);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n\nnv.models.candlestickBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Width of the candlestick bars.\n            var barWidth = (availableWidth / data[0].values.length) * .45;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            var tickGroups = ticks.enter().append('g');\n\n            // The colors are currently controlled by CSS.\n            ticks\n                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});\n\n            var lines = tickGroups.append('line')\n                .attr('class', 'nv-candlestick-lines')\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            var rects = tickGroups.append('rect')\n                .attr('class', 'nv-candlestick-rects nv-bars')\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n\n            ticks.select('.nv-candlestick-lines').transition()\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            ticks.select('.nv-candlestick-rects').transition()\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-candlestickBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-candlestickBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.cumulativeLineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , showControls = true\n        , useInteractiveGuideline = false\n        , rescaleY = true\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , id = lines.id()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , average = function(d) { return d.average }\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        , duration = 250\n        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n        ;\n\n    state.index = 0;\n    state.rescaleY = rescaleY;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var dx = d3.scale.linear()\n        , index = {i: 0, x: 0}\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                index: index.i,\n                rescaleY: rescaleY\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.index !== undefined)\n                index.i = state.index;\n            if (state.rescaleY !== undefined)\n                rescaleY = state.rescaleY;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            container.classed('nv-chart-' + id, true);\n            var that = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart)\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            var indexDrag = d3.behavior.drag()\n                .on('dragstart', dragStart)\n                .on('drag', dragMove)\n                .on('dragend', dragEnd);\n\n\n            function dragStart(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'ew-resize');\n            }\n\n            function dragMove(d,i) {\n                index.x = d3.event.x;\n                index.i = Math.round(dx.invert(index.x));\n                updateZero();\n            }\n\n            function dragEnd(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'auto');\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            if (!rescaleY) {\n                var seriesDomains = data\n                    .filter(function(series) { return !series.disabled })\n                    .map(function(series,i) {\n                        var initialDomain = d3.extent(series.values, lines.y());\n\n                        //account for series being disabled when losing 95% or more\n                        if (initialDomain[0] < -.95) initialDomain[0] = -.95;\n\n                        return [\n                                (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),\n                                (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])\n                        ];\n                    });\n\n                var completeDomain = [\n                    d3.min(seriesDomains, function(d) { return d[0] }),\n                    d3.max(seriesDomains, function(d) { return d[1] })\n                ];\n\n                lines.yDomain(completeDomain);\n            } else {\n                lines.yDomain(null);\n            }\n\n            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length\n                .range([0, availableWidth])\n                .clamp(true);\n\n            var data = indexify(index.i, data);\n\n            // Setup containers and skeleton of chart\n            var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-interactive');\n            gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-background');\n            gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: 'Re-scale y-axis', disabled: !rescaleY }\n                ];\n\n                controls\n                    .width(140)\n                    .color(['#444', '#444', '#444'])\n                    .rightAlign(false)\n                    .margin({top: 5, right: 0, bottom: 5, left: 20})\n                ;\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Show error if series goes below 100%\n            var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\n            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n            if (tempDisabled.length) {\n                wrap.append('text').attr('class', 'tempDisabled')\n                    .attr('x', availableWidth / 2)\n                    .attr('y', '-.71em')\n                    .style('text-anchor', 'end')\n                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left,top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            gEnter.select('.nv-background')\n                .append('rect');\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                //.x(function(d) { return d.x })\n                .y(function(d) { return d.display.y })\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\n            linesWrap.call(lines);\n\n            //Store a series index number in the data array.\n            data.forEach(function(d,i) {\n                d.seriesIndex = i;\n            });\n\n            var avgLineData = data.filter(function(d) {\n                return !d.disabled && !!average(d);\n            });\n\n            var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n                .data(avgLineData, function(d) { return d.key; });\n\n            var getAvgLineY = function(d) {\n                //If average lines go off the svg element, clamp them to the svg bounds.\n                var yVal = y(average(d));\n                if (yVal < 0) return 0;\n                if (yVal > availableHeight) return availableHeight;\n                return yVal;\n            };\n\n            avgLines.enter()\n                .append('line')\n                .style('stroke-width',2)\n                .style('stroke-dasharray','10,10')\n                .style('stroke',function (d,i) {\n                    return lines.color()(d,d.seriesIndex);\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines\n                .style('stroke-opacity',function(d){\n                    //If average lines go offscreen, make them transparent\n                    var yVal = y(average(d));\n                    if (yVal < 0 || yVal > availableHeight) return 0;\n                    return 1;\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines.exit().remove();\n\n            //Create index line\n            var indexLine = linesWrap.selectAll('.nv-indexLine')\n                .data([index]);\n            indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n                .attr('width', 3)\n                .attr('x', -2)\n                .attr('fill', 'red')\n                .attr('fill-opacity', .5)\n                .style(\"pointer-events\",\"all\")\n                .call(indexDrag);\n\n            indexLine\n                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n                .attr('height', availableHeight);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            function updateZero() {\n                indexLine\n                    .data([index]);\n\n                //When dragging the index line, turn off line transitions.\n                // Then turn them back on when done dragging.\n                var oldDuration = chart.duration();\n                chart.duration(0);\n                chart.update();\n                chart.duration(oldDuration);\n            }\n\n            g.select('.nv-background rect')\n                .on('click', function() {\n                    index.x = d3.mouse(this)[0];\n                    index.i = Math.round(dx.invert(index.x));\n\n                    // update state and send stateChange with new index\n                    state.index = index.i;\n                    dispatch.stateChange(state);\n\n                    updateZero();\n                });\n\n            lines.dispatch.on('elementClick', function(e) {\n                index.i = e.pointIndex;\n                index.x = dx(index.i);\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n\n                updateZero();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n                rescaleY = !d.disabled;\n\n                state.rescaleY = rescaleY;\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        lines.highlightPoint(i, pointIndex, true);\n                        var point = series.values[pointIndex];\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex)\n                        });\n                    });\n\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.index !== 'undefined') {\n                    index.i = e.index;\n                    index.x = dx(index.i);\n\n                    state.index = e.index;\n\n                    indexLine\n                        .data([index]);\n                }\n\n                if (typeof e.rescaleY !== 'undefined') {\n                    rescaleY = e.rescaleY;\n                }\n\n                chart.update();\n            });\n\n        });\n\n        renderWatch.renderEnd('cumulativeLineChart immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        var point = {\n            x: chart.x()(evt.point),\n            y: chart.y()(evt.point),\n            color: evt.point.color\n        };\n        evt.point = point;\n        tooltip.data(evt).hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    //============================================================\n    // Functions\n    //------------------------------------------------------------\n\n    var indexifyYGetter = null;\n    /* Normalize the data according to an index point. */\n    function indexify(idx, data) {\n        if (!indexifyYGetter) indexifyYGetter = lines.y();\n        return data.map(function(line, i) {\n            if (!line.values) {\n                return line;\n            }\n            var indexValue = line.values[idx];\n            if (indexValue == null) {\n                return line;\n            }\n            var v = indexifyYGetter(indexValue, idx);\n\n            //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue\n            if (v < -.95 && !noErrorCheck) {\n                //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)\n\n                line.tempDisabled = true;\n                return line;\n            }\n\n            line.tempDisabled = false;\n\n            line.values = line.values.map(function(point, pointIndex) {\n                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / (1 + v) };\n                return point;\n            });\n\n            return line;\n        })\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        rescaleY:     {get: function(){return rescaleY;}, set: function(_){rescaleY=_;}},\n        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        average: {get: function(){return average;}, set: function(_){average=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n                chart.useVoronoi(false);\n            }\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        duration:    {get: function(){return duration;}, set: function(_){\n            duration = _;\n            lines.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating by adding necessary features to multiBar model\nnv.models.discreteBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , showValues = false\n        , valueFormat = d3.format(',.2f')\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , rectClass = 'discreteBar'\n        , duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n                    })\n                });\n\n            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], .1);\n            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\n            // If showValues, pad the Y axis range to account for label height\n            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n            else y.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            x0 = x0 || x;\n            y0 = y0 || y.copy().range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .watchTransition(renderWatch, 'discreteBar: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover });\n            groups\n                .watchTransition(renderWatch, 'discreteBar: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .75);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n                })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            barsEnter.append('rect')\n                .attr('height', 0)\n                .attr('width', x.rangeBand() * .9 / data.length )\n\n            if (showValues) {\n                barsEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                ;\n\n                bars.select('text')\n                    .text(function(d,i) { return valueFormat(getY(d,i)) })\n                    .watchTransition(renderWatch, 'discreteBar: bars text')\n                    .attr('x', x.rangeBand() * .9 / 2)\n                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\n                ;\n            } else {\n                bars.selectAll('text').remove();\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n                .style('fill', function(d,i) { return d.color || color(d,i) })\n                .style('stroke', function(d,i) { return d.color || color(d,i) })\n                .select('rect')\n                .attr('class', rectClass)\n                .watchTransition(renderWatch, 'discreteBar: bars rect')\n                .attr('width', x.rangeBand() * .9 / data.length);\n            bars.watchTransition(renderWatch, 'discreteBar: bars')\n                //.delay(function(d,i) { return i * 1200 / data[0].values.length })\n                .attr('transform', function(d,i) {\n                    var left = x(getX(d,i)) + x.rangeBand() * .05,\n                        top = getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 : //make 1 px positive bars show up above y=0\n                            y(getY(d,i));\n\n                    return 'translate(' + left + ', ' + top + ')'\n                })\n                .select('rect')\n                .attr('height', function(d,i) {\n                    return  Math.max(Math.abs(y(getY(d,i)) - y(0)), 1)\n                });\n\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('discreteBar immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.discreteBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var discretebar = nv.models.discreteBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n\t, legend = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.getColor()\n\t, showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x\n        , y\n        , noData = null\n        , dispatch = d3.dispatch('beforeUpdate','renderEnd')\n        , duration = 250\n        ;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .keyFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(discretebar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = discretebar.xScale();\n            y = discretebar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t    gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            discretebar\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(discretebar);\n\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + discretebar.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n                }\n\n                if (rotateLabels) {\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\",0)\n                .attr(\"x2\",(rightAlignYAxis) ? -availableWidth : availableWidth)\n                .attr(\"y1\", y(0))\n                .attr(\"y2\", y(0))\n            ;\n        });\n\n        renderWatch.renderEnd('discreteBar chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.discretebar = discretebar;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\tshowLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:  {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        wrapLabels:  {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            discretebar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            discretebar.color(color);\n\t    legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, discretebar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\nnv.models.distribution = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 400 //technically width or height depending on x or y....\n        , size = 8\n        , axis = 'x' // 'x' or 'y'... horizontal or vertical\n        , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n        , color = nv.utils.defaultColor()\n        , scale = d3.scale.linear()\n        , domain\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n                naxis = axis == 'x' ? 'y' : 'x',\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //------------------------------------------------------------\n            // Setup Scales\n\n            scale0 = scale0 || scale;\n\n            //------------------------------------------------------------\n\n\n            //------------------------------------------------------------\n            // Setup containers and skeleton of chart\n\n            var wrap = container.selectAll('g.nv-distribution').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            //------------------------------------------------------------\n\n\n            var distWrap = g.selectAll('g.nv-dist')\n                .data(function(d) { return d }, function(d) { return d.key });\n\n            distWrap.enter().append('g');\n            distWrap\n                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n                .style('stroke', function(d,i) { return color(d, i) });\n\n            var dist = distWrap.selectAll('line.nv-dist' + axis)\n                .data(function(d) { return d.values })\n            dist.enter().append('line')\n                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n                .style('stroke-opacity', 0)\n                .remove();\n            dist\n                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n                .attr(naxis + '1', 0)\n                .attr(naxis + '2', size);\n            renderWatch.transition(dist, 'dist')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\n\n            scale0 = scale.copy();\n\n        });\n        renderWatch.renderEnd('distribution immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart.dispatch = dispatch;\n\n    chart.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return chart;\n    };\n\n    chart.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return chart;\n    };\n\n    chart.axis = function(_) {\n        if (!arguments.length) return axis;\n        axis = _;\n        return chart;\n    };\n\n    chart.size = function(_) {\n        if (!arguments.length) return size;\n        size = _;\n        return chart;\n    };\n\n    chart.getData = function(_) {\n        if (!arguments.length) return getData;\n        getData = d3.functor(_);\n        return chart;\n    };\n\n    chart.scale = function(_) {\n        if (!arguments.length) return scale;\n        scale = _;\n        return chart;\n    };\n\n    chart.color = function(_) {\n        if (!arguments.length) return color;\n        color = nv.utils.getColor(_);\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        return chart;\n    };\n    //============================================================\n\n\n    return chart;\n}\nnv.models.focus = function(content) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var content = content || nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , brush = d3.svg.brush()\n        ;\n\n    var margin = {top: 10, right: 0, bottom: 30, left: 0}\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = 70\n        , showXAxis = true\n        , showYAxis = false\n        , rightAlignYAxis = false\n        , ticks = null\n        , x\n        , y\n        , brushExtent = null\n        , duration = 250\n        , dispatch = d3.dispatch('brush', 'onBrush', 'renderEnd')\n        , syncBrushing = true\n        ;\n\n    content.interactive(false);\n    content.pointActive(function(d) { return false; });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(content);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom;\n\n            chart.update = function() { \n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            // Setup Scales\n            x = content.xScale();\n            y = content.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-focus').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-focus').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            gEnter.append('g').attr('class', 'nv-background').append('rect');\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-contentWrap');\n            gEnter.append('g').attr('class', 'nv-brushBackground');\n            gEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n                \n            content\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var contentWrap = g.select('.nv-contentWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            d3.transition(contentWrap).call(content);\n            \n            // Setup Brush\n            brush\n                .x(x)\n                .on('brush', function() {\n                    onBrush(syncBrushing);\n                });\n\n            brush.on('brushend', function () {\n                if (!syncBrushing) {\n                    dispatch.onBrush(brush.empty() ? x.domain() : brush.extent());\n                }\n            });\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n    \n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                .attr('height', availableHeight);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            onBrush(true);\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n  \n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                d3.transition(g.select('.nv-x.nv-axis'))\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                d3.transition(g.select('.nv-y.nv-axis'))\n                    .call(yAxis);\n            }\n            \n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n    \n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n    \n    \n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x(d[0]) - x.range()[0],\n                            rightWidth = availableWidth - x(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n    \n                        d3.select(this).select('.right')\n                            .attr('x', x(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n\n            function onBrush(shouldDispatch) {\n                brushExtent = brush.empty() ? null : brush.extent();\n                var extent = brush.empty() ? x.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n                if (shouldDispatch) {\n                    dispatch.onBrush(extent);\n                }\n            }\n        });\n\n        renderWatch.renderEnd('focus immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.content = content;\n    chart.brush = brush;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        syncBrushing: {get: function(){return syncBrushing;}, set: function(_){syncBrushing=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            content.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            content.color(color);\n        }},\n        interpolate: {get: function(){return content.interpolate();}, set: function(_){\n            content.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n        }},\n        x: {get: function(){return content.x();}, set: function(_){\n            content.x(_);\n        }},\n        y: {get: function(){return content.y();}, set: function(_){\n            content.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, content);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.forceDirectedGraph = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , dispatch = d3.dispatch('renderEnd')\n        , color = nv.utils.getColor(['#000'])\n        , tooltip      = nv.models.tooltip()\n        , noData = null\n        // Force directed graph specific parameters [default values]\n        , linkStrength = 0.1\n        , friction = 0.9\n        , linkDist = 30\n        , charge = -120\n        , gravity = 0.1\n        , theta = 0.8\n        , alpha = 0.1\n        , radius = 5\n        // These functions allow to add extra attributes to ndes and links\n        ,nodeExtras = function(nodes) { /* Do nothing */ }\n        ,linkExtras = function(links) { /* Do nothing */ }\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n          container = d3.select(this);\n          nv.utils.initSVG(container);\n\n          var availableWidth = nv.utils.availableWidth(width, container, margin),\n              availableHeight = nv.utils.availableHeight(height, container, margin);\n\n          container\n                  .attr(\"width\", availableWidth)\n                  .attr(\"height\", availableHeight);\n\n          // Display No Data message if there's nothing to show.\n          if (!data || !data.links || !data.nodes) {\n              nv.utils.noData(chart, container)\n              return chart;\n          } else {\n              container.selectAll('.nv-noData').remove();\n          }\n          container.selectAll('*').remove();\n\n          // Collect names of all fields in the nodes\n          var nodeFieldSet = new Set();\n          data.nodes.forEach(function(node) {\n            var keys = Object.keys(node);\n            keys.forEach(function(key) {\n              nodeFieldSet.add(key);\n            });\n          });\n\n          var force = d3.layout.force()\n                .nodes(data.nodes)\n                .links(data.links)\n                .size([availableWidth, availableHeight])\n                .linkStrength(linkStrength)\n                .friction(friction)\n                .linkDistance(linkDist)\n                .charge(charge)\n                .gravity(gravity)\n                .theta(theta)\n                .alpha(alpha)\n                .start();\n\n          var link = container.selectAll(\".link\")\n                .data(data.links)\n                .enter().append(\"line\")\n                .attr(\"class\", \"nv-force-link\")\n                .style(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\n          var node = container.selectAll(\".node\")\n                .data(data.nodes)\n                .enter()\n                .append(\"g\")\n                .attr(\"class\", \"nv-force-node\")\n                .call(force.drag);\n\n          node\n            .append(\"circle\")\n            .attr(\"r\", radius)\n            .style(\"fill\", function(d) { return color(d) } )\n            .on(\"mouseover\", function(evt) {\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                  .attr('y1', evt.py);\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                  .attr('x2', evt.px);\n\n              // Add 'series' object to\n              var nodeColor = color(evt);\n              evt.series = [];\n              nodeFieldSet.forEach(function(field) {\n                evt.series.push({\n                  color: nodeColor,\n                  key:   field,\n                  value: evt[field]\n                });\n              });\n              tooltip.data(evt).hidden(false);\n            })\n            .on(\"mouseout\",  function(d) {\n              tooltip.hidden(true);\n            });\n\n          tooltip.headerFormatter(function(d) {return \"Node\";});\n\n          // Apply extra attributes to nodes and links (if any)\n          linkExtras(link);\n          nodeExtras(node);\n\n          force.on(\"tick\", function() {\n              link.attr(\"x1\", function(d) { return d.source.x; })\n                  .attr(\"y1\", function(d) { return d.source.y; })\n                  .attr(\"x2\", function(d) { return d.target.x; })\n                  .attr(\"y2\", function(d) { return d.target.y; });\n\n              node.attr(\"transform\", function(d) {\n                return \"translate(\" + d.x + \", \" + d.y + \")\";\n              });\n            });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:     {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n\n        // Force directed graph specific parameters\n        linkStrength:{get: function(){return linkStrength;}, set: function(_){linkStrength=_;}},\n        friction:    {get: function(){return friction;}, set: function(_){friction=_;}},\n        linkDist:    {get: function(){return linkDist;}, set: function(_){linkDist=_;}},\n        charge:      {get: function(){return charge;}, set: function(_){charge=_;}},\n        gravity:     {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        theta:       {get: function(){return theta;}, set: function(_){theta=_;}},\n        alpha:       {get: function(){return alpha;}, set: function(_){alpha=_;}},\n        radius:      {get: function(){return radius;}, set: function(_){radius=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        nodeExtras: {get: function(){return nodeExtras;}, set: function(_){\n            nodeExtras = _;\n        }},\n        linkExtras: {get: function(){return linkExtras;}, set: function(_){\n            linkExtras = _;\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.furiousLegend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 28 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n\n            var seriesShape;\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('circle');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n\n                seriesShape = series.select('rect');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var legendWidth = 0;\n                var columnWidths = [];\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15)\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('stroke', function(d,i) { return d.color || color(d, i) });\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? color(d,i) : '#fff';\n            } else if (!expanded) {\n                return !!d.disabled ? color(d,i) : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#fff' : color(d,i);\n            } else {\n                return !!d.disabled ? '#fff' : color(d,i);\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating and using multibar with single series for this\nnv.models.historicalBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceX = []\n        , forceY = [0]\n        , padData = false\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , interactive = true\n        ;\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n                .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bars');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n                .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n            bars.exit().remove();\n\n            bars.enter().append('rect')\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                .on('mouseover', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n\n                })\n                .on('mouseout', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    if (!interactive) return;\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            bars\n                .attr('fill', function(d,i) { return color(d, i); })\n                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n                .watchTransition(renderWatch, 'bars')\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                //TODO: better width calculations that don't assume always uniform data spacing;w\n                .attr('width', (availableWidth / data[0].values.length) * .9 );\n\n            bars.watchTransition(renderWatch, 'bars')\n                .attr('y', function(d,i) {\n                    var rval = getY(d,i) < 0 ?\n                        y(0) :\n                            y(0) - y(getY(d,i)) < 1 ?\n                        y(0) - 1 :\n                        y(getY(d,i));\n                    return nv.utils.NaNtoZero(rval);\n                })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\n        });\n\n        renderWatch.renderEnd('historicalBar immediate');\n        return chart;\n    }\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        container\n            .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container\n            .select(\".nv-bars .nv-bar.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData: {get: function(){return padData;}, set: function(_){padData=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.historicalBarChart = function(bar_model) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bars = bar_model || nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n\n    var margin = {top: 30, right: 90, bottom: 50, left: 90}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , state = {}\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        ;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n            renderWatch.models(bars);\n            if (showXAxis) renderWatch.models(xAxis);\n            if (showYAxis) renderWatch.models(yAxis);\n\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };\n            chart.container = this;\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = bars.xScale();\n            y = bars.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n            bars\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n            barsWrap.transition().call(bars);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .transition()\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .transition()\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                bars.clearHighlights();\n\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        bars.highlightPoint(pointIndex,true);\n                        var point = series.values[pointIndex];\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex),\n                            data: series.values[pointIndex]\n                        });\n                    });\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data({\n                        value: xValue,\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                dispatch.tooltipHide();\n                bars.clearHighlights();\n            });\n\n            legend.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n\n                if (!data.filter(function(d) { return !d.disabled }).length) {\n                    data.map(function(d) {\n                        d.disabled = false;\n                        wrap.selectAll('.nv-series').classed('disabled', false);\n                        return d;\n                    });\n                }\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                selection.transition().call(chart);\n            });\n\n            legend.dispatch.on('legendDblclick', function(d) {\n                //Double clicking should always enable current series, and disabled all others.\n                data.forEach(function(d) {\n                    d.disabled = true;\n                });\n                d.disabled = false;\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('historicalBarChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.bars = bars;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            bars.color(color);\n        }},\n        duration:    {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration=_;\n            renderWatch.reset(transitionDuration);\n            yAxis.duration(transitionDuration);\n            xAxis.duration(transitionDuration);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bars);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n// ohlcChart is just a historical chart with ohlc bars and some tweaks\nnv.models.ohlcBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\n\n// candlestickChart is just a historical chart with candlestick bars and some tweaks\nnv.models.candlestickBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\nnv.models.legend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 32 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            if (rightAlign)\n                wrap.attr('transform', 'translate(' + (- margin.right) + ',' + margin.top + ')');\n            else\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');\n            var seriesShape;\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('.nv-legend-symbol');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n                seriesShape = series.select('.nv-legend-symbol');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n            var legendWidth = 0;\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var columnWidths = [];\n                legendWidth = 0;\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        if(legendWidth < xpos + maxwidth) {\n                            legendWidth = xpos + maxwidth;\n                        }\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15);\n\n                // The background for the expanded legend (UI)\n                gEnter.insert('rect',':first-child')\n                    .attr('class', 'nv-legend-bg')\n                    .attr('fill', '#eee')\n                    // .attr('stroke', '#444')\n                    .attr('opacity',0);\n\n                var seriesBG = g.select('.nv-legend-bg');\n\n                seriesBG\n                .transition().duration(300)\n                    .attr('x', -versPadding )\n                    .attr('width', legendWidth + versPadding - 12)\n                    .attr('height', height + 10)\n                    .attr('y', -margin.top - 10)\n                    .attr('opacity', expanded ? 1 : 0);\n\n\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('fill-opacity', setBGOpacity)\n                .style('stroke', setBGColor);\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? '#000' : '#fff';\n            } else if (!expanded) {\n                if(!d.color) d.color = color(d,i);\n                return !!d.disabled ? d.color : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#eee' : d.color || color(d,i);\n            } else {\n                return d.color || color(d,i);\n            }\n        }\n\n\n        function setBGOpacity(d,i) {\n            if(expanded && vers == 'furious') {\n                return 1;\n            } else {\n                return !!d.disabled ? 0 : 1;\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.line = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var  scatter = nv.models.scatter()\n        ;\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , container = null\n        , strokeWidth = 1.5\n        , color = nv.utils.defaultColor() // a function that returns a color\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , interpolate = \"linear\" // controls the line interpolation\n        , duration = 250\n        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        ;\n\n    scatter\n        .pointSize(16) // default size\n        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n    ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            scatter\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var scatterWrap = wrap.select('.nv-scatterWrap');\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + scatter.id())\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n            scatterWrap\n                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })\n                .style('fill-opacity', 1e-6);\n\n            groups.exit().remove();\n\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i)});\n            groups.watchTransition(renderWatch, 'line: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', function(d) { return d.fillOpacity || .5});\n\n            var areaPaths = groups.selectAll('path.nv-area')\n                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n            areaPaths.enter().append('path')\n                .attr('class', 'nv-area')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n            groups.exit().selectAll('path.nv-area')\n                .remove();\n\n            areaPaths.watchTransition(renderWatch, 'line: areaPaths')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n\n            var linePaths = groups.selectAll('path.nv-line')\n                .data(function(d) { return [d.values] });\n\n            linePaths.enter().append('path')\n                .attr('class', 'nv-line')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n            );\n\n            linePaths.watchTransition(renderWatch, 'line: linePaths')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            );\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n        });\n        renderWatch.renderEnd('line immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    // Pass through events\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }},\n        isArea: {get: function(){return isArea;}, set: function(_){\n            isArea = d3.functor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            scatter.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            scatter.y(_);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            scatter.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.lineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.line())\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , focusEnable = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , duration = 250\n        ;\n\n    // set options on sub-objects for this chart\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient(rightAlignYAxis ? 'right' : 'left');\n\n    lines.clipEdge(true).duration(0);\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    interactiveLayer.tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled; })\n            };\n        };\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        };\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n            chart.update = function() {\n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled; });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length; }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (legendPosition === 'bottom') {\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + availableHeight +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                }\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n\n            // Setup Main (Focus) Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n              if(showXAxis) {\n                g.select('.nv-focus .nv-x.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(xAxis)\n                ;\n              }\n            }\n\n            function updateYAxis() {\n              if(showYAxis) {\n                g.select('.nv-focus .nv-y.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(yAxis)\n                ;\n              }\n            }\n\n            g.select('.nv-focus .nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                linesWrap.call(lines);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled && !series.disableTooltip;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = focusEnable ? (focus.brush.empty() ? focus.xScale().domain() : focus.brush.extent()) : x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            // Checks if the x point is between the extents, handling case where extent[0] is greater than extent[1]\n                            // (e.g. x domain is manually set to reverse the x-axis)\n                            if(extent[0] <= extent[1]) {\n                                return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                            } else {\n                                return lines.x()(d,i) >= extent[1] && lines.x()(d,i) <= extent[0];\n                            }\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            lines.highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point\n                        });\n                    });\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value;}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var defaultValueFormatter = function(d,i) {\n                    return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                };\n\n                interactiveLayer.tooltip\n                    .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                    .data({\n                        value: chart.x()( singlePoint,pointIndex ),\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on('elementClick', function(e) {\n                var pointXLocation, allData = [];\n\n                data.filter(function(series, i) {\n                    series.seriesIndex = i;\n                    return !series.disabled;\n                }).forEach(function(series) {\n                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                    var point = series.values[pointIndex];\n                    if (typeof point === 'undefined') return;\n                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                    var yPos = chart.yScale()(chart.y()(point,pointIndex));\n                    allData.push({\n                        point: point,\n                        pointIndex: pointIndex,\n                        pos: [pointXLocation, yPos],\n                        seriesIndex: series.seriesIndex,\n                        series: series\n                    });\n                });\n\n                lines.dispatch.elementClick(allData);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                focusLinesWrap.transition().duration(duration).call(lines);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n        });\n\n        renderWatch.renderEnd('lineChart immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        if(!evt.series.disableTooltip){\n            tooltip.data(evt).hidden(false);\n        }\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.focus = focus;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.state = state;\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        // Focus options, mostly passed onto focus model.\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        focusShowAxisX:    {get: function(){return focus.showXAxis();}, set: function(_){focus.showXAxis(_);}},\n        focusShowAxisY:    {get: function(){return focus.showYAxis();}, set: function(_){focus.showYAxis(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            lines.duration(duration);\n            focus.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            lines.color(color);\n            focus.color(color);\n        }},\n        interpolate: {get: function(){return lines.interpolate();}, set: function(_){\n            lines.interpolate(_);\n            focus.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n            focus.xTickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n            focus.yTickFormat(_);\n        }},\n        x: {get: function(){return lines.x();}, set: function(_){\n            lines.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return lines.y();}, set: function(_){\n            lines.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines.interactive(false);\n                lines.useVoronoi(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.lineWithFocusChart = function() {\n  return nv.models.lineChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\nnv.models.linePlusBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , lines2 = nv.models.line()\n        , bars = nv.models.historicalBar()\n        , bars2 = nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , x2Axis = nv.models.axis()\n        , y1Axis = nv.models.axis()\n        , y2Axis = nv.models.axis()\n        , y3Axis = nv.models.axis()\n        , y4Axis = nv.models.axis()\n        , legend = nv.models.legend()\n        , brush = d3.svg.brush()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 30, left: 60}\n        , marginTop = null\n        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n        , width = null\n        , height = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.defaultColor()\n        , showLegend = true\n        , focusEnable = true\n        , focusShowAxisY = false\n        , focusShowAxisX = true\n        , focusHeight = 50\n        , extent\n        , brushExtent = null\n        , x\n        , x2\n        , y1\n        , y2\n        , y3\n        , y4\n        , noData = null\n        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')\n        , transitionDuration = 0\n        , state = nv.utils.state()\n        , defaultState = null\n        , legendLeftAxisHint = ' (left axis)'\n        , legendRightAxisHint = ' (right axis)'\n        , switchYAxisOrder = false\n        ;\n\n    lines.clipEdge(true);\n    lines2.interactive(false);\n    // We don't want any points emitted for the focus chart's scatter graph.\n    lines2.pointActive(function(d) { return false });\n    xAxis.orient('bottom').tickPadding(5);\n    y1Axis.orient('left');\n    y2Axis.orient('right');\n    x2Axis.orient('bottom').tickPadding(5);\n    y3Axis.orient('left');\n    y4Axis.orient('right');\n\n    tooltip.headerEnabled(true).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var getBarsAxis = function() {\n        return switchYAxisOrder\n            ? { main: y2Axis, focus: y4Axis }\n            : { main: y1Axis, focus: y3Axis }\n    }\n\n    var getLinesAxis = function() {\n        return switchYAxisOrder\n            ? { main: y1Axis, focus: y3Axis }\n            : { main: y2Axis, focus: y4Axis }\n    }\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var allDisabled = function(data) {\n      return data.every(function(series) {\n        return series.disabled;\n      });\n    }\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight1 = nv.utils.availableHeight(height, container, margin)\n                    - (focusEnable ? focusHeight : 0),\n                availableHeight2 = focusHeight - margin2.top - margin2.bottom;\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n            if (dataBars.length && !switchYAxisOrder) {\n                x = bars.xScale();\n            } else {\n                x = lines.xScale();\n            }\n\n            x2 = x2Axis.scale();\n\n            // select the scales and series based on the position of the yAxis\n            y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();\n            y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();\n            y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();\n            y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();\n\n            var series1 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            var series2 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            x.range([0, availableWidth]);\n\n            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n                .range([0, availableWidth]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // this is the main chart\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-barsWrap');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n            // context chart is where you can focus in\n            var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n            contextEnter.append('g').attr('class', 'nv-x nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-barsWrap');\n            contextEnter.append('g').attr('class', 'nv-linesWrap');\n            contextEnter.append('g').attr('class', 'nv-brushBackground');\n            contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            //============================================================\n            // Legend\n            //------------------------------------------------------------\n\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        if(switchYAxisOrder) {\n                            series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);\n                        } else {\n                            series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);\n                        }\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    // FIXME: shouldn't this be \"- (focusEnabled ? focusHeight : 0)\"?\n                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //============================================================\n            // Context chart (focus chart) components\n            //------------------------------------------------------------\n\n            // hide or show the focus context chart\n            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');\n\n            bars2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && data[i].bar\n                }));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && !data[i].bar\n                }));\n\n            var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n                .datum(dataBars.length ? dataBars : [\n                    {values: []}\n                ]);\n            var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n                .datum(allDisabled(dataLines) ?\n                       [{values: []}] :\n                       dataLines.filter(function(dataLine) {\n                         return !dataLine.disabled;\n                       }));\n\n            g.select('.nv-context')\n                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');\n\n            bars2Wrap.transition().call(bars2);\n            lines2Wrap.transition().call(lines2);\n\n            // context (focus chart) axis controls\n            if (focusShowAxisX) {\n                x2Axis\n                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))\n                    .tickSize(-availableHeight2, 0);\n                g.select('.nv-context .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n                g.select('.nv-context .nv-x.nv-axis').transition()\n                    .call(x2Axis);\n            }\n\n            if (focusShowAxisY) {\n                y3Axis\n                    .scale(y3)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize( -availableWidth, 0);\n                y4Axis\n                    .scale(y4)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n                g.select('.nv-context .nv-y3.nv-axis')\n                    .style('opacity', dataBars.length ? 1 : 0)\n                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n                g.select('.nv-context .nv-y2.nv-axis')\n                    .style('opacity', dataLines.length ? 1 : 0)\n                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\n                g.select('.nv-context .nv-y1.nv-axis').transition()\n                    .call(y3Axis);\n                g.select('.nv-context .nv-y2.nv-axis').transition()\n                    .call(y4Axis);\n            }\n\n            // Setup Brush\n            brush.x(x2).on('brush', onBrush);\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n\n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                //.attr('y', -5)\n                .attr('height', availableHeight2);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight2 / 3;\n                return 'M' + (.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n\n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x2.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x2(d[0]) - x2.range()[0],\n                            rightWidth = x2.range()[1] - x2(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n                        d3.select(this).select('.right')\n                            .attr('x', x2(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n            function onBrush() {\n                brushExtent = brush.empty() ? null : brush.extent();\n                extent = brush.empty() ? x2.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n\n                // Prepare Main (Focus) Bars and Lines\n                bars\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n                lines\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\n                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n                    .datum(!dataBars.length ? [{values:[]}] :\n                        dataBars\n                            .map(function(d,i) {\n                                return {\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(allDisabled(dataLines) ? [{values:[]}] :\n                           dataLines\n                           .filter(function(dataLine) { return !dataLine.disabled; })\n                           .map(function(d,i) {\n                                return {\n                                    area: d.area,\n                                    fillOpacity: d.fillOpacity,\n                                    strokeWidth: d.strokeWidth,\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                // Update Main (Focus) X Axis\n                if (dataBars.length && !switchYAxisOrder) {\n                    x = bars.xScale();\n                } else {\n                    x = lines.xScale();\n                }\n\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight1, 0);\n\n                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n\n                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)\n                    .call(xAxis);\n\n                // Update Main (Focus) Bars and Lines\n                focusBarsWrap.transition().duration(transitionDuration).call(bars);\n                focusLinesWrap.transition().duration(transitionDuration).call(lines);\n\n                // Setup and Update Main (Focus) Y Axes\n                g.select('.nv-focus .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\n                y1Axis\n                    .scale(y1)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )\n                    .tickSize(-availableWidth, 0);\n                y2Axis\n                    .scale(y2)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) );\n\n                // Show the y2 rules only if y1 has none\n                if(!switchYAxisOrder) {\n                    y2Axis.tickSize(dataBars.length ? 0 : -availableWidth, 0);\n                } else {\n                    y2Axis.tickSize(dataLines.length ? 0 : -availableWidth, 0);\n                }\n\n                // Calculate opacity of the axis\n                var barsOpacity = dataBars.length ? 1 : 0;\n                var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;\n\n                var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;\n                var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;\n\n                g.select('.nv-focus .nv-y1.nv-axis')\n                    .style('opacity', y1Opacity);\n                g.select('.nv-focus .nv-y2.nv-axis')\n                    .style('opacity', y2Opacity)\n                    .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)\n                    .call(y1Axis);\n                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)\n                    .call(y2Axis);\n            }\n\n            onBrush();\n\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip\n            .duration(100)\n            .valueFormatter(function(d, i) {\n                return getLinesAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip\n            .duration(0)\n            .valueFormatter(function(d, i) {\n                return getBarsAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines = lines;\n    chart.lines2 = lines2;\n    chart.bars = bars;\n    chart.bars2 = bars2;\n    chart.xAxis = xAxis;\n    chart.x2Axis = x2Axis;\n    chart.y1Axis = y1Axis;\n    chart.y2Axis = y2Axis;\n    chart.y3Axis = y3Axis;\n    chart.y4Axis = y4Axis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},\n        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},\n        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},\n        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return margin2;}, set: function(_){\n            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;\n            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;\n            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;\n            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;\n        }},\n        duration: {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration = _;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines.x(_);\n            lines2.x(_);\n            bars.x(_);\n            bars2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines.y(_);\n            lines2.y(_);\n            bars.y(_);\n            bars2.y(_);\n        }},\n        switchYAxisOrder:    {get: function(){return switchYAxisOrder;}, set: function(_){\n            // Switch the tick format for the yAxis\n            if(switchYAxisOrder !== _) {\n                var y1 = y1Axis;\n                y1Axis = y2Axis;\n                y2Axis = y1;\n\n                var y3 = y3Axis;\n                y3Axis = y4Axis;\n                y4Axis = y3;\n            }\n            switchYAxisOrder=_;\n\n            y1Axis.orient('left');\n            y2Axis.orient('right');\n            y3Axis.orient('left');\n            y4Axis.orient('right');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , clipEdge = true\n        , stacked = false\n        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n        , color = nv.utils.defaultColor()\n        , hideable = false\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , duration = 500\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var last_datalength = 0;\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n            var nonStackableCount = 0;\n            // This function defines the requirements for render complete\n            var endFn = function(d, i) {\n                if (d.series === data.length - 1 && i === data[0].values.length - 1)\n                    return true;\n                return false;\n            };\n\n            if(hideable && data.length) hideable = [{\n                values: data[0].values.map(function(d) {\n                        return {\n                            x: d.x,\n                            y: 0,\n                            series: d.series,\n                            size: 0.01\n                        };}\n                )}];\n\n            if (stacked) {\n                var parsed = d3.layout.stack()\n                    .offset(stackOffset)\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (!data.length && hideable ? hideable : data);\n\n                parsed.forEach(function(series, i){\n                    // if series is non-stackable, use un-parsed data\n                    if (series.nonStackable) {\n                        data[i].nonStackableSeries = nonStackableCount++;\n                        parsed[i] = data[i];\n                    } else {\n                        // don't stack this seires on top of the nonStackable seriees\n                        if (i > 0 && parsed[i - 1].nonStackable){\n                            parsed[i].values.map(function(d,j){\n                                d.y0 -= parsed[i - 1].values[j].y;\n                                d.y1 = d.y0 + d.y;\n                            });\n                        }\n                    }\n                });\n                data = parsed;\n            }\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked && data.length > 0) {\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d, idx) {\n                        if (!data[idx].nonStackable) {\n                            var f = d.values[i]\n                            f.size = Math.abs(f.y);\n                            if (f.y<0)  {\n                                f.y1 = negBase;\n                                negBase = negBase - f.size;\n                            } else\n                            {\n                                f.y1 = f.size + posBase;\n                                posBase = posBase + f.size;\n                            }\n                        }\n\n                    });\n                });\n            }\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d, idx) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {\n                var domain = d.y;\n                // increase the domain range if this series is stackable\n                if (stacked && !data[d.idx].nonStackable) {\n                    if (d.y > 0){\n                        domain = d.y1\n                    } else {\n                        domain = d.y1 + d.y\n                    }\n                }\n                return domain;\n            }).concat(forceY)))\n            .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n\n            var exitTransition = renderWatch\n                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))\n                .attr('y', function(d, i, j) {\n                    var yVal = y0(0) || 0;\n                    if (stacked) {\n                        if (data[d.series] && !data[d.series].nonStackable) {\n                            yVal = y0(d.y0);\n                        }\n                    }\n                    return yVal;\n                })\n                .attr('height', 0)\n                .remove();\n            if (exitTransition.delay)\n                exitTransition.delay(function(d,i) {\n                    var delay = i * (duration / (last_datalength + 1)) - i;\n                    return delay;\n                });\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('rect.nv-bar')\n                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('rect')\n                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                    .attr('x', function(d,i,j) {\n                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )\n                    })\n                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })\n                    .attr('height', 0)\n                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })\n                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n                ;\n            bars\n                .style('fill', function(d,i,j){ return color(d, j, i);  })\n                .style('stroke', function(d,i,j){ return color(d, j, i); })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            var barSelection =\n                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))\n                    .delay(function(d,i) {\n                        return i * duration / data[0].values.length;\n                    });\n            if (stacked){\n                barSelection\n                    .attr('y', function(d,i,j) {\n                        var yVal = 0;\n                        // if stackable, stack it on top of the previous series\n                        if (!data[j].nonStackable) {\n                            yVal = y(d.y1);\n                        } else {\n                            if (getY(d,i) < 0){\n                                yVal = y(0);\n                            } else {\n                                if (y(0) - y(getY(d,i)) < -1){\n                                    yVal = y(0) - 1;\n                                } else {\n                                    yVal = y(getY(d, i)) || 0;\n                                }\n                            }\n                        }\n                        return yVal;\n                    })\n                    .attr('height', function(d,i,j) {\n                        if (!data[j].nonStackable) {\n                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 0);\n                        } else {\n                            return Math.max(Math.abs(y(getY(d,i)) - y(0)), 0) || 0;\n                        }\n                    })\n                    .attr('x', function(d,i,j) {\n                        var width = 0;\n                        if (data[j].nonStackable) {\n                            width = d.series * x.rangeBand() / data.length;\n                            if (data.length !== nonStackableCount){\n                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);\n                            }\n                        }\n                        return width;\n                    })\n                    .attr('width', function(d,i,j){\n                        if (!data[j].nonStackable) {\n                            return x.rangeBand();\n                        } else {\n                            // if all series are nonStacable, take the full width\n                            var width = (x.rangeBand() / nonStackableCount);\n                            // otherwise, nonStackable graph will be only taking the half-width\n                            // of the x rangeBand\n                            if (data.length !== nonStackableCount) {\n                                width = x.rangeBand()/(nonStackableCount*2);\n                            }\n                            return width;\n                        }\n                    });\n            }\n            else {\n                barSelection\n                    .attr('x', function(d,i) {\n                        return d.series * x.rangeBand() / data.length;\n                    })\n                    .attr('width', x.rangeBand() / data.length)\n                    .attr('y', function(d,i) {\n                        return getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 :\n                            y(getY(d,i)) || 0;\n                    })\n                    .attr('height', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n                    });\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n            // keep track of the last data value length for transition calculations\n            if (data[0] && data[0].values) {\n                last_datalength = data[0].values.length;\n            }\n\n        });\n\n        renderWatch.renderEnd('multibar immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},\n        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity: {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , interactiveLayer = nv.interactiveGuideline()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , reduceXTicks = true // if false a tick will show for every data point\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        , useInteractiveGuideline = false\n        ;\n\n    state.stacked = false // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(false);\n    xAxis\n        .orient('bottom')\n        .tickPadding(7)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function (d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function (d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var stacked = false;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition()\n                        .duration(duration)\n                        .call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text')\n                    .style('opacity', 1)\n\n                if (staggerLabels) {\n                    var getTranslate = function(x,y) {\n                        return \"translate(\" + x + \",\" + y + \")\";\n                    };\n\n                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n                    // Issue #140\n                    xTicks\n                        .selectAll(\"text\")\n                        .attr('transform', function(d,i,j) {\n                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n                        });\n\n                    var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n                    g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n                        .attr(\"transform\", function(d,i) {\n                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n                        });\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n\n                if (reduceXTicks)\n                    xTicks\n                        .filter(function(d,i) {\n                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n                        })\n                        .selectAll('text, line')\n                        .style('opacity', 0);\n\n                if(rotateLabels)\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\n                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n                    .style('opacity', 1);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n                chart.update();\n            });\n\n            if (useInteractiveGuideline) {\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    if (e.pointXValue == undefined) return;\n\n                    var singlePoint, pointIndex, pointXLocation, xValue, allData = [];\n                    data\n                        .filter(function(series, i) {\n                            series.seriesIndex = i;\n                            return !series.disabled;\n                        })\n                        .forEach(function(series,i) {\n                            pointIndex = x.domain().indexOf(e.pointXValue)\n\n                            var point = series.values[pointIndex];\n                            if (point === undefined) return;\n\n                            xValue = point.x;\n                            if (singlePoint === undefined) singlePoint = point;\n                            if (pointXLocation === undefined) pointXLocation = e.mouseX\n                            allData.push({\n                                key: series.key,\n                                value: chart.y()(point, pointIndex),\n                                color: color(series,series.seriesIndex),\n                                data: series.values[pointIndex]\n                            });\n                        });\n\n                    interactiveLayer.tooltip\n                        .data({\n                            value: xValue,\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    interactiveLayer.tooltip.hidden(true);\n                });\n            }\n            else {\n                multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n                    evt.value = chart.x()(evt.data);\n                    evt['series'] = {\n                        key: evt.data.key,\n                        value: chart.y()(evt.data),\n                        color: evt.color\n                    };\n                    tooltip.data(evt).hidden(false);\n                });\n\n                multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n\n                multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        renderWatch.renderEnd('multibarchart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},\n        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        wrapLabels:   {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontal = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getYerr = function(d) { return d.yErr }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , stacked = false\n        , showValues = false\n        , showBarLabels = false\n        , valuePadding = 60\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , valueFormat = d3.format(',.2f')\n        , delay = 1200\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , duration = 250\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0; //used to store previous scales\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            if (stacked)\n                data = d3.layout.stack()\n                    .offset('zero')\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (data);\n\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked)\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d) {\n                        var f = d.values[i]\n                        f.size = Math.abs(f.y);\n                        if (f.y<0)  {\n                            f.y1 = negBase - f.size;\n                            negBase = negBase - f.size;\n                        } else\n                        {\n                            f.y1 = posBase;\n                            posBase = posBase + f.size;\n                        }\n                    });\n                });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableHeight], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\n            if (showValues && !stacked)\n                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n            else\n                y.range(yRange || [0, availableWidth]);\n\n            x0 = x0 || x;\n            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n                });\n\n            barsEnter.append('rect')\n                .attr('width', 0)\n                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\n            bars\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            if (getYerr(data[0],0)) {\n                barsEnter.append('polyline');\n\n                bars.select('polyline')\n                    .attr('fill', 'none')\n                    .attr('points', function(d,i) {\n                        var xerr = getYerr(d,i)\n                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];\n                        xerr = xerr.map(function(e) { return y(e) - y(0); });\n                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];\n                        return a.map(function (path) { return path.join(',') }).join(' ');\n                    })\n                    .attr('transform', function(d,i) {\n                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        return 'translate(' + (getY(d,i) < 0 ? 0 : y(getY(d,i)) - y(0)) + ', ' + mid + ')'\n                    });\n            }\n\n            barsEnter.append('text');\n\n            if (showValues && !stacked) {\n                bars.select('text')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) {\n                        var t = valueFormat(getY(d,i))\n                            , yerr = getYerr(d,i);\n                        if (yerr === undefined)\n                            return t;\n                        if (!yerr.length)\n                            return t + '±' + valueFormat(Math.abs(yerr));\n                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));\n                    });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n            } else {\n                bars.selectAll('text').text('');\n            }\n\n            if (showBarLabels && !stacked) {\n                barsEnter.append('text').classed('nv-bar-label',true);\n                bars.select('text.nv-bar-label')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) { return getX(d,i) });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text.nv-bar-label')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n            }\n            else {\n                bars.selectAll('text.nv-bar-label').text('');\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            if (stacked)\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n                    })\n                    .select('rect')\n                    .attr('width', function(d,i) {\n                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0)) || 0\n                    })\n                    .attr('height', x.rangeBand() );\n            else\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        //TODO: stacked must be all positive or all negative, not both?\n                        return 'translate(' +\n                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n                            + ',' +\n                            (d.series * x.rangeBand() / data.length\n                                +\n                                x(getX(d,i)) )\n                            + ')'\n                    })\n                    .select('rect')\n                    .attr('height', x.rangeBand() / data.length )\n                    .attr('width', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0\n                    });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('multibarHorizontal immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        // this shows the group name, seems pointless?\n        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},\n        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},\n        groupSpacing: {get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity:  {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontalChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBarHorizontal()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend().height(30)\n        , controls = nv.models.legend().height(30)\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , stacked = false\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        ;\n\n    state.stacked = false; // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(stacked);\n\n    xAxis\n        .orient('left')\n        .tickPadding(5)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient('bottom')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(duration).call(chart) };\n            chart.container = this;\n\n            stacked = multibar.stacked();\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )\n                    .tickSize(-availableWidth, 0);\n\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text');\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(0,' + availableHeight + ')');\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\", y(0))\n                .attr(\"x2\", y(0))\n                .attr(\"y1\", 0)\n                .attr(\"y2\", -availableHeight)\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                stacked = multibar.stacked();\n\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n\n                chart.update();\n            });\n        });\n        renderWatch.renderEnd('multibar horizontal chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            key: evt.data.key,\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60},\n        marginTop = null,\n        color = nv.utils.defaultColor(),\n        width = null,\n        height = null,\n        showLegend = true,\n        noData = null,\n        yDomain1,\n        yDomain2,\n        getX = function(d) { return d.x },\n        getY = function(d) { return d.y},\n        interpolate = 'linear',\n        useVoronoi = true,\n        interactiveLayer = nv.interactiveGuideline(),\n        useInteractiveGuideline = false,\n        legendRightAxisHint = ' (right axis)',\n        duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear(),\n        yScale1 = d3.scale.linear(),\n        yScale2 = d3.scale.linear(),\n\n        lines1 = nv.models.line().yScale(yScale1).duration(duration),\n        lines2 = nv.models.line().yScale(yScale2).duration(duration),\n\n        scatters1 = nv.models.scatter().yScale(yScale1).duration(duration),\n        scatters2 = nv.models.scatter().yScale(yScale2).duration(duration),\n\n        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1).duration(duration),\n        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2).duration(duration),\n\n        stack1 = nv.models.stackedArea().yScale(yScale1).duration(duration),\n        stack2 = nv.models.stackedArea().yScale(yScale2).duration(duration),\n\n        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5).duration(duration),\n        yAxis1 = nv.models.axis().scale(yScale1).orient('left').duration(duration),\n        yAxis2 = nv.models.axis().scale(yScale2).orient('right').duration(duration),\n\n        legend = nv.models.legend().height(30),\n        tooltip = nv.models.tooltip(),\n        dispatch = d3.dispatch();\n\n    var charts = [lines1, lines2, scatters1, scatters2, bars1, bars2, stack1, stack2];\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});\n            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});\n            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});\n            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});\n            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});\n            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});\n            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});\n            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x }))\n                .range([0, availableWidth]);\n\n            var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            gEnter.append('g').attr('class', 'stack1Wrap');\n            gEnter.append('g').attr('class', 'stack2Wrap');\n            gEnter.append('g').attr('class', 'bars1Wrap');\n            gEnter.append('g').attr('class', 'bars2Wrap');\n            gEnter.append('g').attr('class', 'scatters1Wrap');\n            gEnter.append('g').attr('class', 'scatters2Wrap');\n            gEnter.append('g').attr('class', 'lines1Wrap');\n            gEnter.append('g').attr('class', 'lines2Wrap');\n            gEnter.append('g').attr('class', 'legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            var g = wrap.select('g');\n\n            var color_array = data.map(function(d,i) {\n                return data[i].color || color(d, i);\n            });\n\n            // Legend\n            if (!showLegend) {\n                g.select('.legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n                legend.color(color_array);\n\n                g.select('.legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            lines1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n            scatters1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));\n            scatters2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));\n            bars1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n            bars2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n            stack1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n            stack2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var lines1Wrap = g.select('.lines1Wrap')\n                .datum(dataLines1.filter(function(d){return !d.disabled}));\n            var scatters1Wrap = g.select('.scatters1Wrap')\n                .datum(dataScatters1.filter(function(d){return !d.disabled}));\n            var bars1Wrap = g.select('.bars1Wrap')\n                .datum(dataBars1.filter(function(d){return !d.disabled}));\n            var stack1Wrap = g.select('.stack1Wrap')\n                .datum(dataStack1.filter(function(d){return !d.disabled}));\n            var lines2Wrap = g.select('.lines2Wrap')\n                .datum(dataLines2.filter(function(d){return !d.disabled}));\n            var scatters2Wrap = g.select('.scatters2Wrap')\n                .datum(dataScatters2.filter(function(d){return !d.disabled}));\n            var bars2Wrap = g.select('.bars2Wrap')\n                .datum(dataBars2.filter(function(d){return !d.disabled}));\n            var stack2Wrap = g.select('.stack2Wrap')\n                .datum(dataStack2.filter(function(d){return !d.disabled}));\n\n            var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){\n                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n            }).concat([{x:0, y:0}]) : [];\n            var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){\n                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n            }).concat([{x:0, y:0}]) : [];\n\n            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            lines1.yDomain(yScale1.domain());\n            scatters1.yDomain(yScale1.domain());\n            bars1.yDomain(yScale1.domain());\n            stack1.yDomain(yScale1.domain());\n\n            lines2.yDomain(yScale2.domain());\n            scatters2.yDomain(yScale2.domain());\n            bars2.yDomain(yScale2.domain());\n            stack2.yDomain(yScale2.domain());\n\n            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\n            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\n            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n\n            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}\n            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}\n\n            xAxis\n                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                .tickSize(-availableHeight, 0);\n\n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n            d3.transition(g.select('.nv-x.nv-axis'))\n                .call(xAxis);\n\n            yAxis1\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n\n            d3.transition(g.select('.nv-y1.nv-axis'))\n                .call(yAxis1);\n\n            yAxis2\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n            d3.transition(g.select('.nv-y2.nv-axis'))\n                .call(yAxis2);\n\n            g.select('.nv-y1.nv-axis')\n                .classed('nv-disabled', series1.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[0] + ',0)');\n\n            g.select('.nv-y2.nv-axis')\n                .classed('nv-disabled', series2.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n            legend.dispatch.on('stateChange', function(newState) {\n                chart.update();\n            });\n\n            if(useInteractiveGuideline){\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching\n            //------------------------------------------------------------\n\n            function mouseover_line(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_scatter(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(100)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_stack(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.point['x'] = stack1.x()(evt.point);\n                evt.point['y'] = stack1.y()(evt.point);\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_bar(evt) {\n                var yaxis = data[evt.data.series].yAxis === 2 ? yAxis2 : yAxis1;\n\n                evt.value = bars1.x()(evt.data);\n                evt['series'] = {\n                    value: bars1.y()(evt.data),\n                    color: evt.color,\n                    key: evt.data.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n\n\n            function clearHighlights() {\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.clearHighlights();\n                } catch(e){}\n              }\n            }\n\n            function highlightPoint(serieIndex, pointIndex, b){\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.highlightPoint(serieIndex, pointIndex, b);\n                } catch(e){}\n              }\n            }\n\n            if(useInteractiveGuideline){\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    clearHighlights();\n                    var singlePoint, pointIndex, pointXLocation, allData = [];\n                    data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            return chart.x()(d,i) >= extent[0] && chart.x()(d,i) <= extent[1];\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = x(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point,\n                            yAxis: series.yAxis == 2 ? yAxis2 : yAxis1\n                        });\n                    });\n\n                    var defaultValueFormatter = function(d,i) {\n                        var yAxis = allData[i].yAxis;\n                        return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                    };\n\n                    interactiveLayer.tooltip\n                        .headerFormatter(function(d, i) {\n                            return xAxis.tickFormat()(d, i);\n                        })\n                        .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                        .data({\n                            value: chart.x()( singlePoint,pointIndex ),\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    clearHighlights();\n                });\n            } else {\n                lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                lines2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                stack2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n                bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n\n                bars1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars1.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n                bars2.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines1 = lines1;\n    chart.lines2 = lines2;\n    chart.scatters1 = scatters1;\n    chart.scatters2 = scatters2;\n    chart.bars1 = bars1;\n    chart.bars2 = bars2;\n    chart.stack1 = stack1;\n    chart.stack2 = stack2;\n    chart.xAxis = xAxis;\n    chart.yAxis1 = yAxis1;\n    chart.yAxis2 = yAxis2;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},\n        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines1.x(_);\n            lines2.x(_);\n            scatters1.x(_);\n            scatters2.x(_);\n            bars1.x(_);\n            bars2.x(_);\n            stack1.x(_);\n            stack2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines1.y(_);\n            lines2.y(_);\n            scatters1.y(_);\n            scatters2.y(_);\n            stack1.y(_);\n            stack2.y(_);\n            bars1.y(_);\n            bars2.y(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi=_;\n            lines1.useVoronoi(_);\n            lines2.useVoronoi(_);\n            stack1.useVoronoi(_);\n            stack2.useVoronoi(_);\n        }},\n\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines1.interactive(false);\n                lines1.useVoronoi(false);\n                lines2.interactive(false);\n                lines2.useVoronoi(false);\n                stack1.interactive(false);\n                stack1.useVoronoi(false);\n                stack2.interactive(false);\n                stack2.useVoronoi(false);\n                scatters1.interactive(false);\n                scatters2.interactive(false);\n            }\n        }},\n\n        duration: {get: function(){return duration;}, set: function(_) {\n            duration = _;\n            [lines1, lines2, stack1, stack2, scatters1, scatters2, xAxis, yAxis1, yAxis2].forEach(function(model){\n              model.duration(duration);\n            });\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.ohlcBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // ohlc bar width.\n            var w = (availableWidth / data[0].values.length) * .9;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            ticks.enter().append('path')\n                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n                .attr('d', function(d,i) {\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i)) - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                })\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('fill', function(d,i) { return color[0]; })\n                .attr('stroke', function(d,i) { return color[0]; })\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n\n            // the bar colors are controlled by CSS currently\n            ticks.attr('class', function(d,i,j) {\n                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;\n            });\n\n            d3.transition(ticks)\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('d', function(d,i) {\n                    var w = (availableWidth / data[0].values.length) * .9;\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i))\n                            - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-ohlcBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-ohlcBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n// Code adapted from Jason Davies' \"Parallel Coordinates\"\n// http://bl.ocks.org/jasondavies/1341281\nnv.models.parallelCoordinates = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 0, bottom: 10, left: 0}\n        , width = null\n        , height = null\n        , availableWidth = null\n        , availableHeight = null\n        , x = d3.scale.ordinal()\n        , y = {}\n        , undefinedValuesLabel = \"undefined values\"\n        , dimensionData = []\n        , enabledDimensions = []\n        , dimensionNames = []\n        , displayBrush = true\n        , color = nv.utils.defaultColor()\n        , filters = []\n        , active = []\n        , dragging = []\n        , axisWithUndefinedValues = []\n        , lineTension = 1\n        , foreground\n        , background\n        , dimensions\n        , line = d3.svg.line()\n        , axis = d3.svg.axis()\n        , dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', \"stateChange\", 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n           //Convert old data to new format (name, values)\n            if (data[0].values === undefined) {\n                var newData = [];\n                data.forEach(function (d) {\n                        var val = {};\n                        var key = Object.keys(d);\n                        key.forEach(function (k) { if (k !== \"name\") val[k] = d[k] });\n                        newData.push({ key: d.name, values: val });\n                });\n                data = newData;\n            }\n\n            var dataValues = data.map(function (d) {return d.values});\n            if (active.length === 0) {\n                active = data;\n            }; //set all active before first brush call\n            \n            dimensionNames = dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; }).map(function (d) { return d.key });\n            enabledDimensions = dimensionData.filter(function (d) { return !d.disabled; });\n            \n            // Setup Scales\n            x.rangePoints([0, availableWidth], 1).domain(enabledDimensions.map(function (d) { return d.key; }));\n\n            //Set as true if all values on an axis are missing.\n            // Extract the list of dimensions and create a scale for each.\n            var oldDomainMaxValue = {};\n            var displayMissingValuesline = false;\n            var currentTicks = [];\n            \n            dimensionNames.forEach(function(d) {\n                var extent = d3.extent(dataValues, function (p) { return +p[d]; });\n                var min = extent[0];\n                var max = extent[1];\n                var onlyUndefinedValues = false;\n                //If there is no values to display on an axis, set the extent to 0\n                if (isNaN(min) || isNaN(max)) {\n                    onlyUndefinedValues = true;\n                    min = 0;\n                    max = 0;\n                }\n                //Scale axis if there is only one value\n                if (min === max) {\n                    min = min - 1;\n                    max = max + 1;\n                }\n                var f = filters.filter(function (k) { return k.dimension == d; });\n                if (f.length !== 0) {\n                    //If there is only NaN values, keep the existing domain.\n                    if (onlyUndefinedValues) {\n                        min = y[d].domain()[0];\n                        max = y[d].domain()[1];\n                    }\n                        //If the brush extent is > max (< min), keep the extent value.\n                    else if (!f[0].hasOnlyNaN && displayBrush) {\n                        min = min > f[0].extent[0] ? f[0].extent[0] : min;\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                    }\n                        //If there is NaN values brushed be sure the brush extent is on the domain.\n                    else if (f[0].hasNaN) {\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                        oldDomainMaxValue[d] = y[d].domain()[1];\n                        displayMissingValuesline = true;\n                    }\n                }\n                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display \"undefined values\" text.\n                //The remaining 10% are used to display the missingValue line.\n                y[d] = d3.scale.linear()\n                    .domain([min, max])\n                    .range([(availableHeight - 12) * 0.9, 0]);\n\n                axisWithUndefinedValues = [];\n                y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);\n            });\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            line.interpolate('cardinal').tension(lineTension);\n            axis.orient('left');\n            var axisDrag = d3.behavior.drag()\n                        .on('dragstart', dragStart)\n                        .on('drag', dragMove)\n                        .on('dragend', dragEnd);\n\n            //Add missing value line at the bottom of the chart\n            var missingValuesline, missingValueslineText;\n            var step = x.range()[1] - x.range()[0];\n            step = isNaN(step) ? x.range()[0] : step;\n            if (!isNaN(step)) {\n                var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];\n                missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);\n                missingValuesline.enter().append('line');\n                missingValuesline.exit().remove();\n                missingValuesline.attr(\"x1\", function(d) { return d[0]; })\n                        .attr(\"y1\", function(d) { return d[1]; })\n                        .attr(\"x2\", function(d) { return d[2]; })\n                        .attr(\"y2\", function(d) { return d[3]; });\n    \n                //Add the text \"undefined values\" under the missing value line\n                missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data([undefinedValuesLabel]);\n                missingValueslineText.append('text').data([undefinedValuesLabel]);\n                missingValueslineText.enter().append('text');\n                missingValueslineText.exit().remove();\n                missingValueslineText.attr(\"y\", availableHeight)\n                        //To have the text right align with the missingValues line, substract 92 representing the text size.\n                        .attr(\"x\", availableWidth - 92 - step / 2)\n                        .text(function(d) { return d; });\n            }\n            // Add grey background lines for context.\n            background = wrap.select('.background').selectAll('path').data(data);\n            background.enter().append('path');\n            background.exit().remove();\n            background.attr('d', path);\n\n            // Add blue foreground lines for focus.\n            foreground = wrap.select('.foreground').selectAll('path').data(data);\n            foreground.enter().append('path')\n            foreground.exit().remove();\n            foreground.attr('d', path)\n                .style(\"stroke-width\", function (d, i) {\n                if (isNaN(d.strokeWidth)) { d.strokeWidth = 1;} return d.strokeWidth;})\n                .attr('stroke', function (d, i) { return d.color || color(d, i); });\n            foreground.on(\"mouseover\", function (d, i) {\n                d3.select(this).classed('hover', true).style(\"stroke-width\", d.strokeWidth + 2 + \"px\").style(\"stroke-opacity\", 1);\n                dispatch.elementMouseover({\n                    label: d.name,\n                    color: d.color || color(d, i),\n                    values: d.values,\n                    dimensions: enabledDimensions\n                });\n\n            });\n            foreground.on(\"mouseout\", function (d, i) {\n                d3.select(this).classed('hover', false).style(\"stroke-width\", d.strokeWidth + \"px\").style(\"stroke-opacity\", 0.7);\n                dispatch.elementMouseout({\n                    label: d.name,\n                    index: i\n                });\n            });\n            foreground.on('mousemove', function (d, i) {\n                dispatch.elementMousemove();\n            });\n            foreground.on('click', function (d) {\n                dispatch.elementClick({\n                    id: d.id\n                });\n            });\n            // Add a group element for each dimension.\n            dimensions = g.selectAll('.dimension').data(enabledDimensions);\n            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');\n\n            dimensions.attr('transform', function(d) { return 'translate(' + x(d.key) + ',0)'; });\n            dimensionsEnter.append('g').attr('class', 'nv-axis');\n\n            // Add an axis and title.\n            dimensionsEnter.append('text')\n                .attr('class', 'nv-label')\n                .style(\"cursor\", \"move\")\n                .attr('dy', '-1em')\n                .attr('text-anchor', 'middle')\n                .on(\"mouseover\", function(d, i) {\n                    dispatch.elementMouseover({\n                        label: d.tooltip || d.key,\n                        color: d.color \n                    });\n                })\n                .on(\"mouseout\", function(d, i) {\n                    dispatch.elementMouseout({\n                        label: d.tooltip\n                    });\n                })\n                .on('mousemove', function (d, i) {\n                    dispatch.elementMousemove();\n                })\n                .call(axisDrag);\n\n            dimensionsEnter.append('g').attr('class', 'nv-brushBackground');\n            dimensions.exit().remove();\n            dimensions.select('.nv-label').text(function (d) { return d.key });\n\n            // Add and store a brush for each axis.\n            restoreBrush(displayBrush);\n\n            var actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),\n                    extents = actives.map(function (p) { return y[p].brush.extent(); });\n            var formerActive = active.slice(0);\n\n            //Restore active values\n            active = [];\n            foreground.style(\"display\", function (d) {\n                var isActive = actives.every(function (p, i) {\n                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {\n                        return true;\n                    }\n                    return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                });\n                if (isActive)\n                    active.push(d);\n                return !isActive ? \"none\" : null;\n\n            });\n\n            if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {\n               dispatch.activeChanged(active);\n            }\n\n            // Returns the path for a given data point.\n            function path(d) {\n                return line(enabledDimensions.map(function (p) {\n                    //If value if missing, put the value on the missing value line\n                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {\n                        var domain = y[p.key].domain();\n                        var range = y[p.key].range();\n                        var min = domain[0] - (domain[1] - domain[0]) / 9;\n\n                        //If it's not already the case, allow brush to select undefined values\n                        if (axisWithUndefinedValues.indexOf(p.key) < 0) {\n\n                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);\n                            y[p.key].brush.y(newscale);\n                            axisWithUndefinedValues.push(p.key);\n                        }\n                        if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {\n                            return [x(p.key), y[p.key](min)];\n                        }\n                    }\n\n                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.\n                    if (missingValuesline !== undefined) {\n                        if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {\n                            missingValuesline.style(\"display\", \"inline\");\n                            missingValueslineText.style(\"display\", \"inline\");\n                        } else {\n                            missingValuesline.style(\"display\", \"none\");\n                            missingValueslineText.style(\"display\", \"none\");\n                        }\n                    }\n                    return [x(p.key), y[p.key](d.values[p.key])];\n                }));\n            }\n\n            function restoreBrush(visible) {\n                filters.forEach(function (f) {\n                    //If filter brushed NaN values, keep the brush on the bottom of the axis.\n                    var brushDomain = y[f.dimension].brush.y().domain();\n                    if (f.hasOnlyNaN) {\n                        f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];\n                    }\n                    if (f.hasNaN) {\n                        f.extent[0] = brushDomain[0];\n                    }\n                    if (visible)\n                        y[f.dimension].brush.extent(f.extent);\n                });\n                \n                dimensions.select('.nv-brushBackground')\n                    .each(function (d) {\n                        d3.select(this).call(y[d.key].brush);\n\n                    })\n                    .selectAll('rect')\n                    .attr('x', -8)\n                    .attr('width', 16);\n                \n                updateTicks();\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brushstart() {\n                //If brush aren't visible, show it before brushing again.\n                if (displayBrush === false) {\n                    displayBrush = true;\n                    restoreBrush(true);\n                }\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brush() {\n                actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); });\n                extents = actives.map(function(p) { return y[p].brush.extent(); });\n\n                filters = []; //erase current filters\n                actives.forEach(function(d,i) {\n                    filters[i] = {\n                        dimension: d,\n                        extent: extents[i],\n                        hasNaN: false,\n                        hasOnlyNaN: false\n                    }\n                });\n\n                active = []; //erase current active list\n                foreground.style('display', function(d) {\n                    var isActive = actives.every(function(p, i) {\n                        if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) return true;\n                        return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                    });\n                    if (isActive) active.push(d);\n                    return isActive ? null : 'none';\n                });\n                \n                updateTicks();\n                \n                dispatch.brush({\n                    filters: filters,\n                    active: active\n                });\n            }\n            function brushend() {\n                var hasActiveBrush = actives.length > 0 ? true : false;\n                filters.forEach(function (f) {\n                    if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)\n                        f.hasNaN = true;\n                    if (f.extent[1] < y[f.dimension].domain()[0])\n                        f.hasOnlyNaN = true;\n                });\n                dispatch.brushEnd(active, hasActiveBrush);\n            }           \n            function updateTicks() {\n                dimensions.select('.nv-axis')\n                    .each(function (d, i) {\n                        var f = filters.filter(function (k) { return k.dimension == d.key; });\n                        currentTicks[d.key] = y[d.key].domain();\n                        \n                        //If brush are available, display brush extent\n                        if (f.length != 0 && displayBrush)\n                        {\n                            currentTicks[d.key] = [];\n                            if (f[0].extent[1] > y[d.key].domain()[0]) \n                                currentTicks[d.key] = [f[0].extent[1]];\n                            if (f[0].extent[0] >= y[d.key].domain()[0])\n                                currentTicks[d.key].push(f[0].extent[0]);    \n                        }\n                            \n                        d3.select(this).call(axis.scale(y[d.key]).tickFormat(d.format).tickValues(currentTicks[d.key]));\n                });\n            }\n            function dragStart(d) {\n                dragging[d.key] = this.parentNode.__origin__ = x(d.key);\n                background.attr(\"visibility\", \"hidden\");\n            }\n            function dragMove(d) {\n                dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));\n                foreground.attr(\"d\", path);\n                enabledDimensions.sort(function (a, b) { return dimensionPosition(a.key) - dimensionPosition(b.key); });\n                enabledDimensions.forEach(function (d, i) { return d.currentPosition = i; });\n                x.domain(enabledDimensions.map(function (d) { return d.key; }));\n                dimensions.attr(\"transform\", function(d) { return \"translate(\" + dimensionPosition(d.key) + \")\"; });\n            }\n            function dragEnd(d, i) {\n                delete this.parentNode.__origin__;\n                delete dragging[d.key];\n                d3.select(this.parentNode).attr(\"transform\", \"translate(\" + x(d.key) + \")\");\n                foreground\n                  .attr(\"d\", path);\n                background\n                  .attr(\"d\", path)\n                  .attr(\"visibility\", null);\n\n                dispatch.dimensionsOrder(enabledDimensions);\n            }\n            function dimensionPosition(d) {\n                var v = dragging[d];\n                return v == null ? x(d) : v;\n            }\n        });\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:         {get: function(){return width;},           set: function(_){width= _;}},\n        height:        {get: function(){return height;},          set: function(_){height= _;}},\n        dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n        displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n        filters: { get: function () { return filters; }, set: function (_) { filters = _; } },\n        active: { get: function () { return active; }, set: function (_) { active = _; } },\n        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},\n        undefinedValuesLabel : {get: function(){return undefinedValuesLabel;}, set: function(_){undefinedValuesLabel=_;}},\n        \n        // deprecated options\n        dimensions: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensions', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key= k })\n            }\n        }},\n        dimensionNames: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionNames', 'use dimensionData instead');\n            dimensionNames = [];\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key = k })\n            }\n \n        }},\n        dimensionFormats: {get: function () { return dimensionData.map(function (d) { return d.format }); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionFormats', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (f) { dimensionData.push({ format: f }) })\n            } else {\n                _.forEach(function (f, i) { dimensionData[i].format = f })\n            }\n\n        }},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    =  _.top    !== undefined ? _.top    : margin.top;\n            margin.right  =  _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   =  _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.parallelCoordinatesChart = function () {\n        \"use strict\";\n        //============================================================\n        // Public Variables with Default Settings\n        //------------------------------------------------------------\n\n        var parallelCoordinates = nv.models.parallelCoordinates()\n        var legend = nv.models.legend()\n        var tooltip = nv.models.tooltip();\n        var dimensionTooltip = nv.models.tooltip();\n\n        var margin = { top: 0, right: 0, bottom: 0, left: 0 }\n        , marginTop = null\n        , width = null\n        , height = null\n        , showLegend = true\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , dimensionData = []\n        , displayBrush = true\n        , defaultState = null\n        , noData = null\n        , nanValue = \"undefined\"\n        , dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function () { return showControls ? 180 : 0 }\n        ;\n\n\t    //============================================================\n\n\t\t//============================================================\n        // Private Variables\n        //------------------------------------------------------------\n\n        var renderWatch = nv.utils.renderWatch(dispatch);\n\n        var stateGetter = function(data) {\n            return function() {\n                return {\n                    active: data.map(function(d) { return !d.disabled })\n                };\n            }\n        };\n\n        var stateSetter = function(data) {\n            return function(state) {\n                if(state.active !== undefined) {\n                    data.forEach(function(series, i) {\n                        series.disabled = !state.active[i];\n                    });\n                }\n            }\n        };\n\n        tooltip.contentGenerator(function(data) {\n            var str = '<table><thead><tr><td class=\"legend-color-guide\"><div style=\"background-color:' + data.color + '\"></div></td><td><strong>' + data.key + '</strong></td></tr></thead>';\n            if(data.series.length !== 0)\n            {\n                str = str + '<tbody><tr><td height =\"10px\"></td></tr>';\n                data.series.forEach(function(d){\n                    str = str + '<tr><td class=\"legend-color-guide\"><div style=\"background-color:' + d.color + '\"></div></td><td class=\"key\">' + d.key + '</td><td class=\"value\">' + d.value + '</td></tr>';\n                });\n                str = str + '</tbody>';\n            }\n            str = str + '</table>';\n            return str;\n        });\n\n        //============================================================\n        // Chart function\n        //------------------------------------------------------------\n\n        function chart(selection) {\n            renderWatch.reset();\n            renderWatch.models(parallelCoordinates);\n\n            selection.each(function(data) {\n                var container = d3.select(this);\n                nv.utils.initSVG(container);\n\n                var that = this;\n\n                var availableWidth = nv.utils.availableWidth(width, container, margin),\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\n                chart.update = function() { container.call(chart); };\n                chart.container = this;\n\n                state.setter(stateSetter(dimensionData), chart.update)\n                    .getter(stateGetter(dimensionData))\n                    .update();\n\n                //set state.disabled\n                state.disabled = dimensionData.map(function (d) { return !!d.disabled });\n\n                //Keep dimensions position in memory\n                dimensionData = dimensionData.map(function (d) {d.disabled = !!d.disabled; return d});\n                dimensionData.forEach(function (d, i) {\n                    d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;\n                    d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;\n                });\n\n               if (!defaultState) {\n                    var key;\n                    defaultState = {};\n                    for(key in state) {\n                        if(state[key] instanceof Array)\n                            defaultState[key] = state[key].slice(0);\n                        else\n                            defaultState[key] = state[key];\n                    }\n                }\n\n                // Display No Data message if there's nothing to show.\n                if(!data || !data.length) {\n                    nv.utils.noData(chart, container);\n                    return chart;\n                } else {\n                    container.selectAll('.nv-noData').remove();\n                }\n\n                //------------------------------------------------------------\n                // Setup containers and skeleton of chart\n\n                var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);\n                var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');\n\n                var g = wrap.select('g');\n\n                gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');\n                gEnter.append('g').attr('class', 'nv-legendWrap');\n\n                g.select(\"rect\")\n                    .attr(\"width\", availableWidth)\n                    .attr(\"height\", (availableHeight > 0) ? availableHeight : 0);\n\n                // Legend\n                if (!showLegend) {\n                    g.select('.nv-legendWrap').selectAll('*').remove();\n                } else {\n                    legend.width(availableWidth)\n                        .color(function (d) { return \"rgb(188,190,192)\"; });\n\n                    g.select('.nv-legendWrap')\n                        .datum(dimensionData.sort(function (a, b) { return a.originalPosition - b.originalPosition; }))\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n                    wrap.select('.nv-legendWrap')\n                       .attr('transform', 'translate( 0 ,' + (-margin.top) + ')');\n                }\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n                // Main Chart Component(s)\n                parallelCoordinates\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .dimensionData(dimensionData)\n                    .displayBrush(displayBrush);\n\n\t\t        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ')\n                  .datum(data);\n\n\t\t        parallelCoordinatesWrap.transition().call(parallelCoordinates);\n\n\t\t\t\t//============================================================\n                // Event Handling/Dispatching (in chart's scope)\n                //------------------------------------------------------------\n                //Display reset brush button\n\t\t        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {\n\t\t            if (hasActiveBrush) {\n\t\t                displayBrush = true;\n\t\t                dispatch.brushEnd(active);\n\t\t            } else {\n\n\t\t                displayBrush = false;\n\t\t            }\n\t\t        });\n\n\t\t        legend.dispatch.on('stateChange', function(newState) {\n\t\t            for(var key in newState) {\n\t\t                state[key] = newState[key];\n\t\t            }\n\t\t            dispatch.stateChange(state);\n\t\t            chart.update();\n\t\t        });\n\n                //Update dimensions order and display reset sorting button\n\t\t        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {\n\t\t            dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; });\n\t\t            var isSorted = false;\n\t\t            dimensionData.forEach(function (d, i) {\n\t\t                d.currentPosition = i;\n\t\t                if (d.currentPosition !== d.originalPosition)\n\t\t                    isSorted = true;\n\t\t            });\n\t\t            dispatch.dimensionsOrder(dimensionData, isSorted);\n\t\t        });\n\n\t\t\t\t// Update chart from a state object passed to event handler\n                dispatch.on('changeState', function (e) {\n\n                    if (typeof e.disabled !== 'undefined') {\n                        dimensionData.forEach(function (series, i) {\n                            series.disabled = e.disabled[i];\n                        });\n                        state.disabled = e.disabled;\n                    }\n                    chart.update();\n                });\n            });\n\n            renderWatch.renderEnd('parraleleCoordinateChart immediate');\n            return chart;\n        }\n\n\t\t//============================================================\n        // Event Handling/Dispatching (out of chart's scope)\n        //------------------------------------------------------------\n\n        parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {\n            var tp = {\n                key: evt.label,\n                color: evt.color,\n                series: []\n             }\n            if(evt.values){\n                Object.keys(evt.values).forEach(function (d) {\n                    var dim = evt.dimensions.filter(function (dd) {return dd.key === d;})[0];\n                    if(dim){\n                        var v;\n                        if (isNaN(evt.values[d]) || isNaN(parseFloat(evt.values[d]))) {\n                            v = nanValue;\n                        } else {\n                            v = dim.format(evt.values[d]);\n                        }\n                        tp.series.push({ idx: dim.currentPosition, key: d, value: v, color: dim.color });\n                    }\n                });\n                tp.series.sort(function(a,b) {return a.idx - b.idx});\n             }\n            tooltip.data(tp).hidden(false);\n        });\n\n        parallelCoordinates.dispatch.on('elementMouseout.tooltip', function(evt) {\n            tooltip.hidden(true)\n        });\n\n        parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {\n            tooltip();\n        });\n\t\t //============================================================\n        // Expose Public Variables\n        //------------------------------------------------------------\n\n\t\t// expose chart's sub-components\n        chart.dispatch = dispatch;\n        chart.parallelCoordinates = parallelCoordinates;\n        chart.legend = legend;\n        chart.tooltip = tooltip;\n        chart.options = nv.utils.optionsFunc.bind(chart);\n\n        chart._options = Object.create({}, {\n            // simple options, just get/set the necessary values\n            width: { get: function () { return width; }, set: function (_) { width = _; } },\n            height: { get: function () { return height; }, set: function (_) { height = _; } },\n            showLegend: { get: function () { return showLegend; }, set: function (_) { showLegend = _; } },\n            defaultState: { get: function () { return defaultState; }, set: function (_) { defaultState = _; } },\n            dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n            displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n            noData: { get: function () { return noData; }, set: function (_) { noData = _; } },\n            nanValue: { get: function () { return nanValue; }, set: function (_) { nanValue = _; } },\n\n            // options that require extra logic in the setter\n            margin: {\n                get: function () { return margin; },\n                set: function (_) {\n                    if (_.top !== undefined) {\n                        margin.top = _.top;\n                        marginTop = _.top;\n                    }\n                    margin.right = _.right !== undefined ? _.right : margin.right;\n                    margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n                    margin.left = _.left !== undefined ? _.left : margin.left;\n                }\n            },\n            color: {get: function(){return color;}, set: function(_){\n                    color = nv.utils.getColor(_);\n                    legend.color(color);\n                    parallelCoordinates.color(color);\n                }}\n        });\n\n        nv.utils.inheritOptions(chart, parallelCoordinates);\n        nv.utils.initOptions(chart);\n\n        return chart;\n    };\nnv.models.pie = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 500\n        , height = 500\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , valueFormat = d3.format(',.2f')\n        , showLabels = true\n        , labelsOutside = false\n        , labelType = \"key\"\n        , labelThreshold = .02 //if slice percentage is under this, don't show label\n        , donut = false\n        , title = false\n        , growOnHover = true\n        , titleOffset = 0\n        , labelSunbeamLayout = false\n        , startAngle = false\n        , padAngle = false\n        , endAngle = false\n        , cornerRadius = 0\n        , donutRatio = 0.5\n        , duration = 250\n        , arcsRadius = []\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    var arcs = [];\n    var arcsOver = [];\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right\n                , availableHeight = height - margin.top - margin.bottom\n                , radius = Math.min(availableWidth, availableHeight) / 2\n                , arcsRadiusOuter = []\n                , arcsRadiusInner = []\n                ;\n\n            container = d3.select(this)\n            if (arcsRadius.length === 0) {\n                var outer = radius - radius / 5;\n                var inner = donutRatio * radius;\n                for (var i = 0; i < data[0].length; i++) {\n                    arcsRadiusOuter.push(outer);\n                    arcsRadiusInner.push(inner);\n                }\n            } else {\n                if(growOnHover){\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 5) * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 5) * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 5); }));\n                } else {\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return d.outer * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return d.inner * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return d.inner; }));\n                }\n            }\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n            var g_pie = gEnter.append('g').attr('class', 'nv-pie');\n            gEnter.append('g').attr('class', 'nv-pieLabels');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\n            //\n            container.on('click', function(d,i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            arcs = [];\n            arcsOver = [];\n            for (var i = 0; i < data[0].length; i++) {\n\n                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);\n                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);\n\n                if (startAngle !== false) {\n                    arc.startAngle(startAngle);\n                    arcOver.startAngle(startAngle);\n                }\n                if (endAngle !== false) {\n                    arc.endAngle(endAngle);\n                    arcOver.endAngle(endAngle);\n                }\n                if (donut) {\n                    arc.innerRadius(arcsRadiusInner[i]);\n                    arcOver.innerRadius(arcsRadiusInner[i]);\n                }\n\n                if (arc.cornerRadius && cornerRadius) {\n                    arc.cornerRadius(cornerRadius);\n                    arcOver.cornerRadius(cornerRadius);\n                }\n\n                arcs.push(arc);\n                arcsOver.push(arcOver);\n            }\n\n            // Setup the Pie chart and choose the data element\n            var pie = d3.layout.pie()\n                .sort(null)\n                .value(function(d) { return d.disabled ? 0 : getY(d) });\n\n            // padAngle added in d3 3.5\n            if (pie.padAngle && padAngle) {\n                pie.padAngle(padAngle);\n            }\n\n            // if title is specified and donut, put it in the middle\n            if (donut && title) {\n                g_pie.append(\"text\").attr('class', 'nv-pie-title');\n\n                wrap.select('.nv-pie-title')\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function (d) {\n                        return title;\n                    })\n                    .style(\"font-size\", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + \"px\")\n                    .attr(\"dy\", \"0.35em\") // trick to vertically center text\n                    .attr('transform', function(d, i) {\n                        return 'translate(0, '+ titleOffset + ')';\n                    });\n            }\n\n            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);\n            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);\n\n            slices.exit().remove();\n            pieLabels.exit().remove();\n\n            var ae = slices.enter().append('g');\n            ae.attr('class', 'nv-slice');\n            ae.on('mouseover', function(d, i) {\n                d3.select(this).classed('hover', true);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(70)\n                        .attr(\"d\", arcsOver[i]);\n                }\n                dispatch.elementMouseover({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    percent: (d.endAngle - d.startAngle) / (2 * Math.PI)\n                });\n            });\n            ae.on('mouseout', function(d, i) {\n                d3.select(this).classed('hover', false);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(50)\n                        .attr(\"d\", arcs[i]);\n                }\n                dispatch.elementMouseout({data: d.data, index: i});\n            });\n            ae.on('mousemove', function(d, i) {\n                dispatch.elementMousemove({data: d.data, index: i});\n            });\n            ae.on('click', function(d, i) {\n                var element = this;\n                dispatch.elementClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    event: d3.event,\n                    element: element\n                });\n            });\n            ae.on('dblclick', function(d, i) {\n                dispatch.elementDblClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\")\n                });\n            });\n\n            slices.attr('fill', function(d,i) { return color(d.data, i); });\n            slices.attr('stroke', function(d,i) { return color(d.data, i); });\n\n            var paths = ae.append('path').each(function(d) {\n                this._current = d;\n            });\n\n            slices.select('path')\n                .transition()\n                .duration(duration)\n                .attr('d', function (d, i) { return arcs[i](d); })\n                .attrTween('d', arcTween);\n\n            if (showLabels) {\n                // This does the normal label\n                var labelsArc = [];\n                for (var i = 0; i < data[0].length; i++) {\n                    labelsArc.push(arcs[i]);\n\n                    if (labelsOutside) {\n                        if (donut) {\n                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());\n                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);\n                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);\n                        }\n                    } else if (!donut) {\n                            labelsArc[i].innerRadius(0);\n                    }\n                }\n\n                pieLabels.enter().append(\"g\").classed(\"nv-label\",true).each(function(d,i) {\n                    var group = d3.select(this);\n\n                    group.attr('transform', function (d, i) {\n                        if (labelSunbeamLayout) {\n                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                                rotateAngle -= 90;\n                            } else {\n                                rotateAngle += 90;\n                            }\n                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                        } else {\n                            d.outerRadius = radius + 10; // Set Outer Coordinate\n                            d.innerRadius = radius + 15; // Set Inner Coordinate\n                            return 'translate(' + labelsArc[i].centroid(d) + ')'\n                        }\n                    });\n\n                    group.append('rect')\n                        .style('stroke', '#fff')\n                        .style('fill', '#fff')\n                        .attr(\"rx\", 3)\n                        .attr(\"ry\", 3);\n\n                    group.append('text')\n                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                        .style('fill', '#000')\n                });\n\n                var labelLocationHash = {};\n                var avgHeight = 14;\n                var avgWidth = 140;\n                var createHashKey = function(coordinates) {\n                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n                };\n                var getSlicePercentage = function(d) {\n                    return (d.endAngle - d.startAngle) / (2 * Math.PI);\n                };\n\n                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {\n                    if (labelSunbeamLayout) {\n                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                            rotateAngle -= 90;\n                        } else {\n                            rotateAngle += 90;\n                        }\n                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                    } else {\n                        d.outerRadius = radius + 10; // Set Outer Coordinate\n                        d.innerRadius = radius + 15; // Set Inner Coordinate\n\n                        /*\n                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n                        Adjust the label's y-position to remove the overlap.\n                        */\n                        var center = labelsArc[i].centroid(d);\n                        var percent = getSlicePercentage(d);\n                        if (d.value && percent >= labelThreshold) {\n                            var hashKey = createHashKey(center);\n                            if (labelLocationHash[hashKey]) {\n                                center[1] -= avgHeight;\n                            }\n                            labelLocationHash[createHashKey(center)] = true;\n                        }\n                        return 'translate(' + center + ')'\n                    }\n                });\n\n                pieLabels.select(\".nv-label text\")\n                    .style('text-anchor', function(d,i) {\n                        //center the text on it's origin or begin/end if orthogonal aligned\n                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';\n                    })\n                    .text(function(d, i) {\n                        var percent = getSlicePercentage(d);\n                        var label = '';\n                        if (!d.value || percent < labelThreshold) return '';\n\n                        if(typeof labelType === 'function') {\n                            label = labelType(d, i, {\n                                'key': getX(d.data),\n                                'value': getY(d.data),\n                                'percent': valueFormat(percent)\n                            });\n                        } else {\n                            switch (labelType) {\n                                case 'key':\n                                    label = getX(d.data);\n                                    break;\n                                case 'value':\n                                    label = valueFormat(getY(d.data));\n                                    break;\n                                case 'percent':\n                                    label = d3.format('%')(percent);\n                                    break;\n                            }\n                        }\n                        return label;\n                    })\n                ;\n            }\n\n\n            // Computes the angle of an arc, converting from radians to degrees.\n            function angle(d) {\n                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n                return a > 90 ? a - 180 : a;\n            }\n\n            function arcTween(a, idx) {\n                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n                if (!donut) a.innerRadius = 0;\n                var i = d3.interpolate(this._current, a);\n                this._current = i(0);\n                return function (t) {\n                    return arcs[idx](i(t));\n                };\n            }\n        });\n\n        renderWatch.renderEnd('pie immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n        title:      {get: function(){return title;}, set: function(_){title=_;}},\n        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        x:          {get: function(){return getX;}, set: function(_){getX=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},\n        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},\n        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},\n        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},\n        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},\n        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},\n        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},\n        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},\n        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},\n\n        // depreciated after 1.7.1\n        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');\n        }},\n        // depreciated after 1.7.1\n        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');\n        }},\n        // deprecated after 1.7.1\n        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {\n            valueFormat=_;\n            nv.deprecated('labelFormat','use valueFormat instead');\n        }},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY=d3.functor(_);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }},\n        labelType:          {get: function(){return labelType;}, set: function(_){\n            labelType= _ || 'key';\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.pieChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var pie = nv.models.pie();\n    var legend = nv.models.legend();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , marginTop = null\n        , width = null\n        , height = null\n        , showTooltipPercent = false\n        , showLegend = true\n        , legendPosition = \"top\"\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return pie.valueFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined) {\n                data.forEach(function (series, i) {\n                    series.disabled = !state.active[i];\n                });\n            }\n        }\n    };\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(pie);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var that = this;\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            state.setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-pieWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                if (legendPosition === \"top\") {\n                    legend.width( availableWidth ).key(pie.x());\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                } else if (legendPosition === \"right\") {\n                    var legendWidth = nv.models.legend().width();\n                    if (availableWidth / 2 < legendWidth) {\n                        legendWidth = (availableWidth / 2)\n                    }\n                    legend.height(availableHeight).key(pie.x());\n                    legend.width(legendWidth);\n                    availableWidth -= legend.width();\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend)\n                        .attr('transform', 'translate(' + (availableWidth) +',0)');\n                }\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            pie.width(availableWidth).height(availableHeight);\n            var pieWrap = g.select('.nv-pieWrap').datum([data]);\n            d3.transition(pieWrap).call(pie);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState) {\n                    state[key] = newState[key];\n                }\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('pieChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    pie.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    pie.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    pie.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.legend = legend;\n    chart.dispatch = dispatch;\n    chart.pie = pie;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:              {get: function(){return width;},                set: function(_){width=_;}},\n        height:             {get: function(){return height;},               set: function(_){height=_;}},\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n        showLegend:         {get: function(){return showLegend;},           set: function(_){showLegend=_;}},\n        legendPosition:     {get: function(){return legendPosition;},       set: function(_){legendPosition=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            legend.color(color);\n            pie.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            pie.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n    nv.utils.inheritOptions(chart, pie);\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sankey = function() {\n    'use strict';\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sankey = {},\n        nodeWidth = 24,\n        nodePadding = 8,\n        size = [1, 1],\n        nodes = [],\n        links = [],\n        sinksRight = true;\n\n    var layout = function(iterations) {\n        computeNodeLinks();\n        computeNodeValues();\n        computeNodeBreadths();\n        computeNodeDepths(iterations);\n    };\n\n    var relayout = function() {\n        computeLinkDepths();\n    };\n\n    // SVG path data generator, to be used as 'd' attribute on 'path' element selection.\n    var link = function() {\n        var curvature = .5;\n\n        function link(d) {\n\n            var x0 = d.source.x + d.source.dx,\n                x1 = d.target.x,\n                xi = d3.interpolateNumber(x0, x1),\n                x2 = xi(curvature),\n                x3 = xi(1 - curvature),\n                y0 = d.source.y + d.sy + d.dy / 2,\n                y1 = d.target.y + d.ty + d.dy / 2;\n            var linkPath = 'M' + x0 + ',' + y0\n                + 'C' + x2 + ',' + y0\n                + ' ' + x3 + ',' + y1\n                + ' ' + x1 + ',' + y1;\n            return linkPath;\n        }\n\n        link.curvature = function(_) {\n            if (!arguments.length) return curvature;\n            curvature = +_;\n            return link;\n        };\n\n        return link;\n    };\n\n    // Y-position of the middle of a node.\n    var center = function(node) {\n        return node.y + node.dy / 2;\n    };\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    // Populate the sourceLinks and targetLinks for each node.\n    // Also, if the source and target are not objects, assume they are indices.\n    function computeNodeLinks() {\n        nodes.forEach(function(node) {\n            // Links that have this node as source.\n            node.sourceLinks = [];\n            // Links that have this node as target.\n            node.targetLinks = [];\n        });\n        links.forEach(function(link) {\n            var source = link.source,\n                target = link.target;\n            if (typeof source === 'number') source = link.source = nodes[link.source];\n            if (typeof target === 'number') target = link.target = nodes[link.target];\n            source.sourceLinks.push(link);\n            target.targetLinks.push(link);\n        });\n    }\n\n    // Compute the value (size) of each node by summing the associated links.\n    function computeNodeValues() {\n        nodes.forEach(function(node) {\n            node.value = Math.max(\n                d3.sum(node.sourceLinks, value),\n                d3.sum(node.targetLinks, value)\n            );\n        });\n    }\n\n    // Iteratively assign the breadth (x-position) for each node.\n    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n    // nodes with no incoming links are assigned breadth zero, while\n    // nodes with no outgoing links are assigned the maximum breadth.\n    function computeNodeBreadths() {\n        //\n        var remainingNodes = nodes,\n            nextNodes,\n            x = 0;\n\n        // Work from left to right.\n        // Keep updating the breath (x-position) of nodes that are target of recently updated nodes.\n        //\n        while (remainingNodes.length && x < nodes.length) {\n            nextNodes = [];\n            remainingNodes.forEach(function(node) {\n                node.x = x;\n                node.dx = nodeWidth;\n                node.sourceLinks.forEach(function(link) {\n                    if (nextNodes.indexOf(link.target) < 0) {\n                        nextNodes.push(link.target);\n                    }\n                });\n            });\n            remainingNodes = nextNodes;\n            ++x;\n            //\n        }\n\n        // Optionally move pure sinks always to the right.\n        if (sinksRight) {\n            moveSinksRight(x);\n        }\n\n        scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n    }\n\n    function moveSourcesRight() {\n        nodes.forEach(function(node) {\n            if (!node.targetLinks.length) {\n                node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n            }\n        });\n    }\n\n    function moveSinksRight(x) {\n        nodes.forEach(function(node) {\n            if (!node.sourceLinks.length) {\n                node.x = x - 1;\n            }\n        });\n    }\n\n    function scaleNodeBreadths(kx) {\n        nodes.forEach(function(node) {\n            node.x *= kx;\n        });\n    }\n\n    // Compute the depth (y-position) for each node.\n    function computeNodeDepths(iterations) {\n        // Group nodes by breath.\n        var nodesByBreadth = d3.nest()\n            .key(function(d) { return d.x; })\n            .sortKeys(d3.ascending)\n            .entries(nodes)\n            .map(function(d) { return d.values; });\n\n        //\n        initializeNodeDepth();\n        resolveCollisions();\n        computeLinkDepths();\n        for (var alpha = 1; iterations > 0; --iterations) {\n            relaxRightToLeft(alpha *= .99);\n            resolveCollisions();\n            computeLinkDepths();\n            relaxLeftToRight(alpha);\n            resolveCollisions();\n            computeLinkDepths();\n        }\n\n        function initializeNodeDepth() {\n            // Calculate vertical scaling factor.\n            var ky = d3.min(nodesByBreadth, function(nodes) {\n                return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n            });\n\n            nodesByBreadth.forEach(function(nodes) {\n                nodes.forEach(function(node, i) {\n                    node.y = i;\n                    node.dy = node.value * ky;\n                });\n            });\n\n            links.forEach(function(link) {\n                link.dy = link.value * ky;\n            });\n        }\n\n        function relaxLeftToRight(alpha) {\n            nodesByBreadth.forEach(function(nodes, breadth) {\n                nodes.forEach(function(node) {\n                    if (node.targetLinks.length) {\n                        // Value-weighted average of the y-position of source node centers linked to this node.\n                        var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedSource(link) {\n                return (link.source.y + link.sy + link.dy / 2) * link.value;\n            }\n        }\n\n        function relaxRightToLeft(alpha) {\n            nodesByBreadth.slice().reverse().forEach(function(nodes) {\n                nodes.forEach(function(node) {\n                    if (node.sourceLinks.length) {\n                        // Value-weighted average of the y-positions of target nodes linked to this node.\n                        var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedTarget(link) {\n                return (link.target.y + link.ty + link.dy / 2) * link.value;\n            }\n        }\n\n        function resolveCollisions() {\n            nodesByBreadth.forEach(function(nodes) {\n                var node,\n                    dy,\n                    y0 = 0,\n                    n = nodes.length,\n                    i;\n\n                // Push any overlapping nodes down.\n                nodes.sort(ascendingDepth);\n                for (i = 0; i < n; ++i) {\n                    node = nodes[i];\n                    dy = y0 - node.y;\n                    if (dy > 0) node.y += dy;\n                    y0 = node.y + node.dy + nodePadding;\n                }\n\n                // If the bottommost node goes outside the bounds, push it back up.\n                dy = y0 - nodePadding - size[1];\n                if (dy > 0) {\n                    y0 = node.y -= dy;\n\n                    // Push any overlapping nodes back up.\n                    for (i = n - 2; i >= 0; --i) {\n                        node = nodes[i];\n                        dy = node.y + node.dy + nodePadding - y0;\n                        if (dy > 0) node.y -= dy;\n                        y0 = node.y;\n                    }\n                }\n            });\n        }\n\n        function ascendingDepth(a, b) {\n            return a.y - b.y;\n        }\n    }\n\n    // Compute y-offset of the source endpoint (sy) and target endpoints (ty) of links,\n    // relative to the source/target node's y-position.\n    function computeLinkDepths() {\n        nodes.forEach(function(node) {\n            node.sourceLinks.sort(ascendingTargetDepth);\n            node.targetLinks.sort(ascendingSourceDepth);\n        });\n        nodes.forEach(function(node) {\n            var sy = 0, ty = 0;\n            node.sourceLinks.forEach(function(link) {\n                link.sy = sy;\n                sy += link.dy;\n            });\n            node.targetLinks.forEach(function(link) {\n                link.ty = ty;\n                ty += link.dy;\n            });\n        });\n\n        function ascendingSourceDepth(a, b) {\n            return a.source.y - b.source.y;\n        }\n\n        function ascendingTargetDepth(a, b) {\n            return a.target.y - b.target.y;\n        }\n    }\n\n    // Value property accessor.\n    function value(x) {\n        return x.value;\n    }\n\n    sankey.options = nv.utils.optionsFunc.bind(sankey);\n    sankey._options = Object.create({}, {\n        nodeWidth:    {get: function(){return nodeWidth;},   set: function(_){nodeWidth=+_;}},\n        nodePadding:  {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        nodes:        {get: function(){return nodes;},       set: function(_){nodes=_;}},\n        links:        {get: function(){return links ;},      set: function(_){links=_;}},\n        size:         {get: function(){return size;},        set: function(_){size=_;}},\n        sinksRight:   {get: function(){return sinksRight;},  set: function(_){sinksRight=_;}},\n\n        layout:       {get: function(){layout(32);},         set: function(_){layout(_);}},\n        relayout:     {get: function(){relayout();},         set: function(_){}},\n        center:       {get: function(){return center();},    set: function(_){\n            if(typeof _ === 'function'){\n                center=_;\n            }\n        }},\n        link:         {get: function(){return link();},      set: function(_){\n            if(typeof _ === 'function'){\n                link=_;\n            }\n            return link();\n        }}\n    });\n\n    nv.utils.initOptions(sankey);\n\n    return sankey;\n};\nnv.models.sankeyChart = function() {\n    \"use strict\";\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , sankey = nv.models.sankey()\n        , width = 600\n        , height = 400\n        , nodeWidth = 36\n        , nodePadding =  40\n        , units = 'units'\n        , center = undefined\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var formatNumber = d3.format(',.0f');    // zero decimal places\n    var format = function(d) {\n        return formatNumber(d) + ' ' + units;\n    };\n    var color = d3.scale.category20();\n    var linkTitle = function(d){\n        return d.source.name + ' → ' + d.target.name + '\\n' + format(d.value);\n    };\n    var nodeFillColor = function(d){\n        return d.color = color(d.name.replace(/ .*/, ''));\n    };\n    var nodeStrokeColor = function(d){\n        return d3.rgb(d.color).darker(2);\n    };\n    var nodeTitle = function(d){\n        return d.name + '\\n' + format(d.value);\n    };\n\n    var showError = function(element, message) {\n        element.append('text')\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('class', 'nvd3-sankey-chart-error')\n            .attr('text-anchor', 'middle')\n            .text(message);\n    };\n\n    function chart(selection) {\n        selection.each(function(data) {\n\n            var testData = {\n                nodes:\n                    [\n                        {'node': 1, 'name': 'Test 1'},\n                        {'node': 2, 'name': 'Test 2'},\n                        {'node': 3, 'name': 'Test 3'},\n                        {'node': 4, 'name': 'Test 4'},\n                        {'node': 5, 'name': 'Test 5'},\n                        {'node': 6, 'name': 'Test 6'}\n                    ],\n                links:\n                    [\n                        {'source': 0, 'target': 1, 'value': 2295},\n                        {'source': 0, 'target': 5, 'value': 1199},\n                        {'source': 1, 'target': 2, 'value': 1119},\n                        {'source': 1, 'target': 5, 'value': 1176},\n                        {'source': 2, 'target': 3, 'value': 487},\n                        {'source': 2, 'target': 5, 'value': 632},\n                        {'source': 3, 'target': 4, 'value': 301},\n                        {'source': 3, 'target': 5, 'value': 186}\n                    ]\n            };\n\n            // Error handling\n            var isDataValid = false;\n            var dataAvailable = false;\n\n            // check if data is valid\n            if(\n                (typeof data['nodes'] === 'object' && data['nodes'].length) >= 0 &&\n                (typeof data['links'] === 'object' && data['links'].length) >= 0\n            ){\n                isDataValid = true;\n            }\n\n            // check if data is available\n            if(\n                data['nodes'] && data['nodes'].length > 0 &&\n                data['links'] && data['links'].length > 0\n            ) {\n                dataAvailable = true;\n            }\n\n            // show error\n            if(!isDataValid) {\n                console.error('NVD3 Sankey chart error:', 'invalid data format for', data);\n                console.info('Valid data format is: ', testData, JSON.stringify(testData));\n                showError(selection, 'Error loading chart, data is invalid');\n                return false;\n            }\n\n            // TODO use nv.utils.noData\n            if(!dataAvailable) {\n                showError(selection, 'No data available');\n                return false;\n            }\n\n            // No errors, continue\n\n            // append the svg canvas to the page\n            var svg = selection.append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .append('g')\n                .attr('class', 'nvd3 nv-wrap nv-sankeyChart');\n\n            // Set the sankey diagram properties\n            sankey\n                .nodeWidth(nodeWidth)\n                .nodePadding(nodePadding)\n                .size([width, height]);\n\n            var path = sankey.link();\n\n            sankey\n                .nodes(data.nodes)\n                .links(data.links)\n                .layout(32)\n                .center(center);\n\n            // add in the links\n            var link = svg.append('g').selectAll('.link')\n                .data(data.links)\n                .enter().append('path')\n                .attr('class', 'link')\n                .attr('d', path)\n                .style('stroke-width', function(d) { return Math.max(1, d.dy); })\n            .sort(function(a,b) { return b.dy - a.dy; });\n\n            // add the link titles\n            link.append('title')\n                .text(linkTitle);\n\n            // add in the nodes\n            var node = svg.append('g').selectAll('.node')\n                .data(data.nodes)\n                .enter().append('g')\n                .attr('class', 'node')\n                .attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; })\n                .call(\n                    d3.behavior\n                        .drag()\n                        .origin(function(d) { return d; })\n                        .on('dragstart', function() {\n                            this.parentNode.appendChild(this);\n                        })\n                        .on('drag', dragmove)\n                );\n\n            // add the rectangles for the nodes\n            node.append('rect')\n                .attr('height', function(d) { return d.dy; })\n                .attr('width', sankey.nodeWidth())\n                .style('fill', nodeFillColor)\n                .style('stroke', nodeStrokeColor)\n                .append('title')\n                .text(nodeTitle);\n\n            // add in the title for the nodes\n            node.append('text')\n                .attr('x', -6)\n                .attr('y', function(d) { return d.dy / 2; })\n                .attr('dy', '.35em')\n                .attr('text-anchor', 'end')\n                .attr('transform', null)\n                .text(function(d) { return d.name; })\n                .filter(function(d) { return d.x < width / 2; })\n                .attr('x', 6 + sankey.nodeWidth())\n                .attr('text-anchor', 'start');\n\n            // the function for moving the nodes\n            function dragmove(d) {\n                d3.select(this).attr('transform',\n                'translate(' + d.x + ',' + (\n                    d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))\n                ) + ')');\n                sankey.relayout();\n                link.attr('d', path);\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        units:           {get: function(){return units;},       set: function(_){units=_;}},\n        width:           {get: function(){return width;},       set: function(_){width=_;}},\n        height:          {get: function(){return height;},      set: function(_){height=_;}},\n        format:          {get: function(){return format;},      set: function(_){format=_;}},\n        linkTitle:       {get: function(){return linkTitle;},   set: function(_){linkTitle=_;}},\n        nodeWidth:       {get: function(){return nodeWidth;},   set: function(_){nodeWidth=_;}},\n        nodePadding:     {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        center:          {get: function(){return center},       set: function(_){center=_}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        nodeStyle: {get: function(){return {};}, set: function(_){\n            nodeFillColor   = _.fillColor   !== undefined ? _.fillColor   : nodeFillColor;\n            nodeStrokeColor = _.strokeColor !== undefined ? _.strokeColor : nodeStrokeColor;\n            nodeTitle       = _.title       !== undefined ? _.title       : nodeTitle;\n        }}\n\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.scatter = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n        , width        = null\n        , height       = null\n        , color        = nv.utils.defaultColor() // chooses color\n        , pointBorderColor = null\n        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n        , container    = null\n        , x            = d3.scale.linear()\n        , y            = d3.scale.linear()\n        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n        , getX         = function(d) { return d.x } // accessor to get the x value\n        , getY         = function(d) { return d.y } // accessor to get the y value\n        , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , forceY       = [] // List of numbers to Force into the Y scale\n        , forceSize    = [] // List of numbers to Force into the Size scale\n        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n        , clipEdge     = false // if true, masks points within x and y scale\n        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n        , showVoronoi  = false // display the voronoi areas\n        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n        , xDomain      = null // Override x domain (skips the calculation from data)\n        , yDomain      = null // Override y domain\n        , xRange       = null // Override x range\n        , yRange       = null // Override y range\n        , sizeDomain   = null // Override point size domain\n        , sizeRange    = null\n        , singlePoint  = false\n        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        , useVoronoi   = true\n        , duration     = 250\n        , interactiveUpdateDelay = 300\n        , showLabels    = false\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0, z0 // used to store previous scales\n        , width0\n        , height0\n        , timeoutID\n        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        , _sizeRange_def = [16, 256]\n        , _cache = {}\n        ;\n\n    function getCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        val = _cache[key] = _cache[key] || {};\n        return val;\n    }\n\n    function delCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        delete _cache[key];\n    }\n\n    function getDiffs(d) {\n        var i, key, val,\n            cache = getCache(d),\n            diffs = false;\n        for (i = 1; i < arguments.length; i += 2) {\n            key = arguments[i];\n            val = arguments[i + 1](d[0], d[1]);\n            if (cache[key] !== val || !cache.hasOwnProperty(key)) {\n                cache[key] = val;\n                diffs = true;\n            }\n        }\n        return diffs;\n    }\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            var logScale = chart.yScale().name === d3.scale.log().name ? true : false;\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n                d3.merge(\n                    data.map(function(d) {\n                        return d.values.map(function(d,i) {\n                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n                        })\n                    })\n                );\n\n            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\n            if (padData && data[0])\n                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n             if (logScale) {\n                    var min = d3.min(seriesData.map(function(d) { if (d.y !== 0) return d.y; }));\n                    y.clamp(true)\n                        .domain(yDomain || d3.extent(seriesData.map(function(d) {\n                            if (d.y !== 0) return d.y;\n                            else return min * 0.1;\n                        }).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                } else {\n                        y.domain(yDomain || d3.extent(seriesData.map(function (d) { return d.y;}).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                }\n\n            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n                .range(sizeRange || _sizeRange_def);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];\n\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            if ( isNaN(x.domain()[0])) {\n                x.domain([-1,1]);\n            }\n\n            if ( isNaN(y.domain()[0])) {\n                y.domain([-1,1]);\n            }\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n            z0 = z0 || z;\n\n            var scaleDiff = x(1) !== x0(1) || y(1) !== y0(1) || z(1) !== z0(1);\n\n            width0 = width0 || width;\n            height0 = height0 || height;\n\n            var sizeDiff = width0 !== width || height0 !== height;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.classed('nv-single-point', singlePoint);\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-point-paths');\n            wrapEnter.append('g').attr('class', 'nv-point-clips');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect')\n                .attr('transform', 'translate( -10, -10)');\n                \n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth + 20)\n                .attr('height', (availableHeight > 0) ? availableHeight + 20 : 0);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            function updateInteractiveLayer() {\n                // Always clear needs-update flag regardless of whether or not\n                // we will actually do anything (avoids needless invocations).\n                needsUpdate = false;\n\n                if (!interactive) return false;\n\n                // inject series and point index for reference into voronoi\n                if (useVoronoi === true) {\n                    var vertices = d3.merge(data.map(function(group, groupIndex) {\n                            return group.values\n                                .map(function(point, pointIndex) {\n                                    // *Adding noise to make duplicates very unlikely\n                                    // *Injecting series and point index for reference\n                                    /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n                                     */\n                                    var pX = getX(point,pointIndex);\n                                    var pY = getY(point,pointIndex);\n\n                                    return [nv.utils.NaNtoZero(x(pX))+ Math.random() * 1e-4,\n                                            nv.utils.NaNtoZero(y(pY))+ Math.random() * 1e-4,\n                                        groupIndex,\n                                        pointIndex, point]; //temp hack to add noise until I think of a better way so there are no duplicates\n                                })\n                                .filter(function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n                                })\n                        })\n                    );\n\n                    if (vertices.length == 0) return false;  // No active points, we're done\n                    if (vertices.length < 3) {\n                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n                    }\n\n                    // keep voronoi sections from going more than 10 outside of graph\n                    // to avoid overlap with other things like legend etc\n                    var bounds = d3.geom.polygon([\n                        [-10,-10],\n                        [-10,height + 10],\n                        [width + 10,height + 10],\n                        [width + 10,-10]\n                    ]);\n\n                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n                        return {\n                            'data': bounds.clip(d),\n                            'series': vertices[i][2],\n                            'point': vertices[i][3]\n                        }\n                    });\n\n                    // nuke all voronoi paths on reload and recreate them\n                    wrap.select('.nv-point-paths').selectAll('path').remove();\n                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);\n                    var vPointPaths = pointPaths\n                        .enter().append(\"svg:path\")\n                        .attr(\"d\", function(d) {\n                            if (!d || !d.data || d.data.length === 0)\n                                return 'M 0 0';\n                            else\n                                return \"M\" + d.data.join(\",\") + \"Z\";\n                        })\n                        .attr(\"id\", function(d,i) {\n                            return \"nv-path-\"+i; })\n                        .attr(\"clip-path\", function(d,i) { return \"url(#nv-clip-\"+id+\"-\"+i+\")\"; })\n                        ;\n\n                    // good for debugging point hover issues\n                    if (showVoronoi) {\n                        vPointPaths.style(\"fill\", d3.rgb(230, 230, 230))\n                            .style('fill-opacity', 0.4)\n                            .style('stroke-opacity', 1)\n                            .style(\"stroke\", d3.rgb(200,200,200));\n                    }\n\n                    if (clipVoronoi) {\n                        // voronoi sections are already set to clip,\n                        // just create the circles with the IDs they expect\n                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom\n                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);\n                        var vPointClips = pointClips\n                            .enter().append(\"svg:clipPath\")\n                            .attr(\"id\", function(d, i) { return \"nv-clip-\"+id+\"-\"+i;})\n                            .append(\"svg:circle\")\n                            .attr('cx', function(d) { return d[0]; })\n                            .attr('cy', function(d) { return d[1]; })\n                            .attr('r', clipRadius);\n                    }\n\n                    var mouseEventCallback = function(el, d, mDispatch) {\n                        if (needsUpdate) return 0;\n                        var series = data[d.series];\n                        if (series === undefined) return;\n                        var point  = series.values[d.point];\n                        point['color'] = color(series, d.series);\n\n                        // standardize attributes for tooltip.\n                        point['x'] = getX(point);\n                        point['y'] = getY(point);\n\n                        // can't just get box of event node since it's actually a voronoi polygon\n                        var box = container.node().getBoundingClientRect();\n                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;\n                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n\n                        var pos = {\n                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,\n                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10\n                        };\n\n                        mDispatch({\n                            point: point,\n                            series: series,\n                            pos: pos,\n                            relativePos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n                            seriesIndex: d.series,\n                            pointIndex: d.point,\n                            event: d3.event,\n                            element: el\n                        });\n                    };\n\n                    pointPaths\n                        .on('click', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementClick);\n                        })\n                        .on('dblclick', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementDblClick);\n                        })\n                        .on('mouseover', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementMouseover);\n                        })\n                        .on('mouseout', function(d, i) {\n                            mouseEventCallback(this, d, dispatch.elementMouseout);\n                        });\n\n                } else {\n                    // add event handlers to points instead voronoi paths\n                    wrap.select('.nv-groups').selectAll('.nv-group')\n                        .selectAll('.nv-point')\n                        //.data(dataWithPoints)\n                        //.style('pointer-events', 'auto') // recativate events, disabled by css\n                        .on('click', function(d,i) {\n                            //nv.log('test', d, i);\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n                            var element = this;\n                            dispatch.elementClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top], //TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                event: d3.event,\n                                element: element\n                            });\n                        })\n                        .on('dblclick', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementDblClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i\n                            });\n                        })\n                        .on('mouseover', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseover({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        })\n                        .on('mouseout', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseout({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        });\n                }\n            }\n\n            needsUpdate = true;\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .remove();\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('nv-noninteractive', !interactive)\n                .classed('hover', function(d) { return d.hover });\n            groups.watchTransition(renderWatch, 'scatter: groups')\n                .style('fill', function(d,i) { return color(d, i) })\n                .style('stroke', function(d,i) { return d.pointBorderColor || pointBorderColor || color(d, i) })\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .5);\n\n            // create the points, maintaining their IDs from the original data set\n            var points = groups.selectAll('path.nv-point')\n                .data(function(d) {\n                    return d.values.map(\n                        function (point, pointIndex) {\n                            return [point, pointIndex]\n                        }).filter(\n                            function(pointArray, pointIndex) {\n                                return pointActive(pointArray[0], pointIndex)\n                            })\n                    });\n            points.enter().append('path')\n                .attr('class', function (d) {\n                    return 'nv-point nv-point-' + d[1];\n                })\n                .style('fill', function (d) { return d.color })\n                .style('stroke', function (d) { return d.color })\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')'\n                })\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n            points.exit().each(delCache).remove();\n            groups.exit().selectAll('path.nv-point')\n                .watchTransition(renderWatch, 'scatter exit')\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                })\n                .remove();\n            // Update points position only if \"x\" or \"y\" have changed\n            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'x', getX, 'y', getY); })\n                .watchTransition(renderWatch, 'scatter points')\n                .attr('transform', function(d) {\n                    //nv.log(d, getX(d[0],d[1]), x(getX(d[0],d[1])));\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                });\n            // Update points appearance only if \"shape\" or \"size\" have changed\n            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'shape', getShape, 'size', getSize); })\n                .watchTransition(renderWatch, 'scatter points')\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n\n            // add label a label to scatter chart\n            if(showLabels)\n            {\n                var titles =  groups.selectAll('.nv-label')\n                    .data(function(d) {\n                        return d.values.map(\n                            function (point, pointIndex) {\n                                return [point, pointIndex]\n                            }).filter(\n                                function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[0], pointIndex)\n                                })\n                        });\n\n                titles.enter().append('text')\n                    .style('fill', function (d,i) {\n                        return d.color })\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 1)\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + Math.sqrt(z(getSize(d[0],d[1]))/Math.PI) + 2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')';\n                    })\n                    .text(function(d,i){\n                        return d[0].label;});\n\n                titles.exit().remove();\n                groups.exit().selectAll('path.nv-label')\n                    .watchTransition(renderWatch, 'scatter exit')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')';\n                    })\n                    .remove();\n               titles.each(function(d) {\n                  d3.select(this)\n                    .classed('nv-label', true)\n                    .classed('nv-label-' + d[1], false)\n                    .classed('hover',false);\n                });\n                titles.watchTransition(renderWatch, 'scatter labels')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                    });\n            }\n\n            // Delay updating the invisible interactive layer for smoother animation\n            if( interactiveUpdateDelay )\n            {\n                clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n                timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay );\n            }\n            else\n            {\n                updateInteractiveLayer();\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n            z0 = z.copy();\n\n            width0 = width;\n            height0 = height;\n\n        });\n        renderWatch.renderEnd('scatter immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // utility function calls provided by this chart\n    chart._calls = new function() {\n        this.clearHighlights = function () {\n            nv.dom.write(function() {\n                container.selectAll(\".nv-point.hover\").classed(\"hover\", false);\n            });\n            return null;\n        };\n        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {\n            nv.dom.write(function() {\n                container.select('.nv-groups')\n                  .selectAll(\".nv-series-\" + seriesIndex)\n                  .selectAll(\".nv-point-\" + pointIndex)\n                  .classed(\"hover\", isHoverOver);\n            });\n        };\n    };\n\n    // trigger calls from events too\n    dispatch.on('elementMouseover.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);\n    });\n\n    dispatch.on('elementMouseout.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);\n    });\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:        {get: function(){return width;}, set: function(_){width=_;}},\n        height:       {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:       {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:       {get: function(){return y;}, set: function(_){y=_;}},\n        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},\n        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},\n        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},\n        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},\n        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},\n        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},\n        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},\n        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},\n        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},\n        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        interactiveUpdateDelay: {get:function(){return interactiveUpdateDelay;}, set: function(_){interactiveUpdateDelay=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){ showLabels = _;}},\n        pointBorderColor: {get: function(){return pointBorderColor;}, set: function(_){pointBorderColor=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},\n        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi = _;\n            if (useVoronoi === false) {\n                clipVoronoi = false;\n            }\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.scatterChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var scatter      = nv.models.scatter()\n        , xAxis        = nv.models.axis()\n        , yAxis        = nv.models.axis()\n        , legend       = nv.models.legend()\n        , distX        = nv.models.distribution()\n        , distY        = nv.models.distribution()\n        , tooltip      = nv.models.tooltip()\n        ;\n\n    var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n        , marginTop = null\n        , width        = null\n        , height       = null\n        , container    = null\n        , color        = nv.utils.defaultColor()\n        , x            = scatter.xScale()\n        , y            = scatter.yScale()\n        , showDistX    = false\n        , showDistY    = false\n        , showLegend   = true\n        , showXAxis    = true\n        , showYAxis    = true\n        , rightAlignYAxis = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , noData       = null\n        , duration = 250\n        , showLabels    = false\n        ;\n\n    scatter.xScale(x).yScale(y);\n    xAxis.orient('bottom').tickPadding(10);\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickPadding(10)\n    ;\n    distX.axis('x');\n    distY.axis('y');\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0\n        , renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        if (showDistX) renderWatch.models(distX);\n        if (showDistY) renderWatch.models(distY);\n\n        selection.each(function(data) {\n            var that = this;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                renderWatch.renderEnd('scatter immediate');\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            // background for pointer events\n            gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n            gEnter.append('g').attr('class', 'nv-distWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = availableWidth;\n                legend.width(legendWidth);\n\n                wrap.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, i);\n                    return d.color;\n                }).filter(function(d,i) { return !data[i].disabled }))\n                .showLabels(showLabels);\n\n            wrap.select('.nv-scatterWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n                .call(scatter);\n\n\n            wrap.select('.nv-regressionLinesWrap')\n                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\n            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n                .data(function (d) {\n                    return d;\n                });\n\n            regWrap.enter().append('g').attr('class', 'nv-regLines');\n\n            var regLine = regWrap.selectAll('.nv-regLine')\n                .data(function (d) {\n                    return [d]\n                });\n\n            regLine.enter()\n                .append('line').attr('class', 'nv-regLine')\n                .style('stroke-opacity', 0);\n\n            // don't add lines unless we have slope and intercept to use\n            regLine.filter(function(d) {\n                return d.intercept && d.slope;\n            })\n                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')\n                .attr('x1', x.range()[0])\n                .attr('x2', x.range()[1])\n                .attr('y1', function (d, i) {\n                    return y(x.domain()[0] * d.slope + d.intercept)\n                })\n                .attr('y2', function (d, i) {\n                    return y(x.domain()[1] * d.slope + d.intercept)\n                })\n                .style('stroke', function (d, i, j) {\n                    return color(d, j)\n                })\n                .style('stroke-opacity', function (d, i) {\n                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1\n                });\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight , 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            // Setup Distribution\n            if (showDistX) {\n                distX\n                    .getData(scatter.x())\n                    .scale(x)\n                    .width(availableWidth)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionX');\n                g.select('.nv-distributionX')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distX);\n            }\n\n            if (showDistY) {\n                distY\n                    .getData(scatter.y())\n                    .scale(y)\n                    .width(availableHeight)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionY');\n                g.select('.nv-distributionY')\n                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distY);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block\n            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {\n                tooltip.hidden(true);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', 0);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', distY.size());\n            });\n\n            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', evt.relativePos[1] - availableHeight);\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', evt.relativePos[0] + distX.size());\n                tooltip.data(evt).hidden(false);\n            });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('scatter with line immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.distX = distX;\n    chart.distY = distY;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        container:  {get: function(){return container;}, set: function(_){container=_;}},\n        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},\n        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            distX.color(color);\n            distY.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparkline = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , animate = true\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.getColor(['#000'])\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , showMinMaxPoints = true\n        , showCurrentPoint = true\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    \n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x   .domain(xDomain || d3.extent(data, getX ))\n                .range(xRange || [0, availableWidth]);\n\n            y   .domain(yDomain || d3.extent(data, getY ))\n                .range(yRange || [availableHeight, 0]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            var paths = wrap.selectAll('path')\n                .data(function(d) { return [d] });\n            paths.enter().append('path');\n            paths.exit().remove();\n            paths\n                .style('stroke', function(d,i) { return d.color || color(d, i) })\n                .attr('d', d3.svg.line()\n                    .x(function(d,i) { return x(getX(d,i)) })\n                    .y(function(d,i) { return y(getY(d,i)) })\n            );\n\n            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n            var points = wrap.selectAll('circle.nv-point')\n                .data(function(data) {\n                    var yValues = data.map(function(d, i) { return getY(d,i); });\n                    function pointIndex(index) {\n                        if (index != -1) {\n                            var result = data[index];\n                            result.pointIndex = index;\n                            return result;\n                        } else {\n                            return null;\n                        }\n                    }\n                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n                        currentPoint = pointIndex(yValues.length - 1);\n                    return [(showMinMaxPoints ? minPoint : null), (showMinMaxPoints ? maxPoint : null), (showCurrentPoint ? currentPoint : null)].filter(function (d) {return d != null;});\n                });\n            points.enter().append('circle');\n            points.exit().remove();\n            points\n                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n                .attr('r', 2)\n                .attr('class', function(d,i) {\n                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n                });\n        });\n        \n        renderWatch.renderEnd('sparkline immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:            {get: function(){return width;}, set: function(_){width=_;}},\n        height:           {get: function(){return height;}, set: function(_){height=_;}},\n        xDomain:          {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:          {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:           {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:           {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        xScale:           {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:           {get: function(){return y;}, set: function(_){y=_;}},\n        animate:          {get: function(){return animate;}, set: function(_){animate=_;}},\n        showMinMaxPoints: {get: function(){return showMinMaxPoints;}, set: function(_){showMinMaxPoints=_;}},\n        showCurrentPoint: {get: function(){return showCurrentPoint;}, set: function(_){showCurrentPoint=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparklinePlus = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sparkline = nv.models.sparkline();\n\n    var margin = {top: 15, right: 100, bottom: 10, left: 50}\n        , width = null\n        , height = null\n        , x\n        , y\n        , index = []\n        , paused = false\n        , xTickFormat = d3.format(',r')\n        , yTickFormat = d3.format(',.2f')\n        , showLastValue = true\n        , alignValue = true\n        , rightAlignValue = false\n        , noData = null\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n        \n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sparkline);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.call(chart); };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\n            // Setup Scales\n            x = sparkline.xScale();\n            y = sparkline.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-sparklineWrap');\n            gEnter.append('g').attr('class', 'nv-valueWrap');\n            gEnter.append('g').attr('class', 'nv-hoverArea');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            var sparklineWrap = g.select('.nv-sparklineWrap');\n\n            sparkline.width(availableWidth).height(availableHeight);\n            sparklineWrap.call(sparkline);\n\n            if (showLastValue) {\n                var valueWrap = g.select('.nv-valueWrap');\n                var value = valueWrap.selectAll('.nv-currentValue')\n                    .data([currentValue]);\n\n                value.enter().append('text').attr('class', 'nv-currentValue')\n                    .attr('dx', rightAlignValue ? -8 : 8)\n                    .attr('dy', '.9em')\n                    .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\n                value\n                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n                    .attr('y', alignValue ? function (d) {\n                        return y(d)\n                    } : 0)\n                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))\n                    .text(yTickFormat(currentValue));\n            }\n\n            gEnter.select('.nv-hoverArea').append('rect')\n                .on('mousemove', sparklineHover)\n                .on('click', function() { paused = !paused })\n                .on('mouseout', function() { index = []; updateValueLine(); });\n\n            g.select('.nv-hoverArea rect')\n                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n                .attr('width', availableWidth + margin.left + margin.right)\n                .attr('height', availableHeight + margin.top);\n\n            //index is currently global (within the chart), may or may not keep it that way\n            function updateValueLine() {\n                if (paused) return;\n\n                var hoverValue = g.selectAll('.nv-hoverValue').data(index);\n\n                var hoverEnter = hoverValue.enter()\n                    .append('g').attr('class', 'nv-hoverValue')\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0);\n\n                hoverValue.exit()\n                    .transition().duration(250)\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0)\n                    .remove();\n\n                hoverValue\n                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n                    .transition().duration(250)\n                    .style('stroke-opacity', 1)\n                    .style('fill-opacity', 1);\n\n                if (!index.length) return;\n\n                hoverEnter.append('line')\n                    .attr('x1', 0)\n                    .attr('y1', -margin.top)\n                    .attr('x2', 0)\n                    .attr('y2', availableHeight);\n\n                hoverEnter.append('text').attr('class', 'nv-xValue')\n                    .attr('x', -6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'end')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-xValue')\n                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\n                hoverEnter.append('text').attr('class', 'nv-yValue')\n                    .attr('x', 6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'start')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-yValue')\n                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n            }\n\n            function sparklineHover() {\n                if (paused) return;\n\n                var pos = d3.mouse(this)[0] - margin.left;\n\n                function getClosestIndex(data, x) {\n                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n                    var closestIndex = 0;\n                    for (var i = 0; i < data.length; i++){\n                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n                            distance = Math.abs(sparkline.x()(data[i], i) - x);\n                            closestIndex = i;\n                        }\n                    }\n                    return closestIndex;\n                }\n\n                index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n                updateValueLine();\n            }\n\n        });\n        renderWatch.renderEnd('sparklinePlus immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sparkline = sparkline;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:           {get: function(){return width;}, set: function(_){width=_;}},\n        height:          {get: function(){return height;}, set: function(_){height=_;}},\n        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},\n        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},\n        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},\n        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},\n        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},\n        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, sparkline);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedArea = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , color = nv.utils.defaultColor() // a function that computes the color\n        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n        , container = null\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , style = 'stack'\n        , offset = 'zero'\n        , order = 'default'\n        , interpolate = 'linear'  // controls the line interpolation\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , scatter = nv.models.scatter()\n        , duration = 250\n        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')\n        ;\n\n    scatter\n        .pointSize(2.2) // default size\n        .pointDomain([2.2, 2.2]) // all the same size by default\n    ;\n\n    /************************************\n     * offset:\n     *   'wiggle' (stream)\n     *   'zero' (stacked)\n     *   'expand' (normalize to 100%)\n     *   'silhouette' (simple centered)\n     *\n     * order:\n     *   'inside-out' (stream)\n     *   'default' (input order)\n     ************************************/\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            var dataRaw = data;\n            // Injecting point index into each point because d3.layout.stack().out does not give index\n            data.forEach(function(aseries, i) {\n                aseries.seriesIndex = i;\n                aseries.values = aseries.values.map(function(d, j) {\n                    d.index = j;\n                    d.seriesIndex = i;\n                    return d;\n                });\n            });\n\n            var dataFiltered = data.filter(function(series) {\n                return !series.disabled;\n            });\n\n            data = d3.layout.stack()\n                .order(order)\n                .offset(offset)\n                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n                .x(getX)\n                .y(getY)\n                .out(function(d, y0, y) {\n                    d.display = {\n                        y: y,\n                        y0: y0\n                    };\n                })\n            (dataFiltered);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-areaWrap');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            \n            // If the user has not specified forceY, make sure 0 is included in the domain\n            // Otherwise, use user-specified values for forceY\n            if (scatter.forceY().length == 0) {\n                scatter.forceY().push(0);\n            }\n            \n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .x(getX)\n                .y(function(d) {\n                    if (d.display !== undefined) { return d.display.y + d.display.y0; }\n                })\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, d.seriesIndex);\n                    return d.color;\n                }));\n\n            var scatterWrap = g.select('.nv-scatterWrap')\n                .datum(data);\n\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var area = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) {\n                    return y(d.display.y0)\n                })\n                .y1(function(d) {\n                    return y(d.display.y + d.display.y0)\n                })\n                .interpolate(interpolate);\n\n            var zeroArea = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) { return y(d.display.y0) })\n                .y1(function(d) { return y(d.display.y0) });\n\n            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n                .data(function(d) { return d });\n\n            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n                .attr('d', function(d,i){\n                    return zeroArea(d.values, d.seriesIndex);\n                })\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.areaMouseover({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaMouseout({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('click', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaClick({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                });\n\n            path.exit().remove();\n            path.style('fill', function(d,i){\n                    return d.color || color(d, d.seriesIndex)\n                })\n                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n            path.watchTransition(renderWatch,'stackedArea path')\n                .attr('d', function(d,i) {\n                    return area(d.values,i)\n                });\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            scatter.dispatch.on('elementMouseover.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n            });\n            scatter.dispatch.on('elementMouseout.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n            });\n\n            //Special offset functions\n            chart.d3_stackedOffset_stackPercent = function(stackData) {\n                var n = stackData.length,    //How many series\n                    m = stackData[0].length,     //how many points per series\n                    i,\n                    j,\n                    o,\n                    y0 = [];\n\n                for (j = 0; j < m; ++j) { //Looping through all points\n                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series\n                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.\n                    }\n\n                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0\n                        stackData[i][j][1] /= o;\n                    } else { //(total y value of all series at point in time i) == 0\n                        for (i = 0; i < n; i++) {\n                            stackData[i][j][1] = 0;\n                        }\n                    }\n                }\n                for (j = 0; j < m; ++j) y0[j] = 0;\n                return y0;\n            };\n\n        });\n\n        renderWatch.renderEnd('stackedArea immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.interpolate = function(_) {\n        if (!arguments.length) return interpolate;\n        interpolate = _;\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        scatter.duration(duration);\n        return chart;\n    };\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},\n        order:    {get: function(){return order;}, set: function(_){order=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        style: {get: function(){return style;}, set: function(_){\n            style = _;\n            switch (style) {\n                case 'stack':\n                    chart.offset('zero');\n                    chart.order('default');\n                    break;\n                case 'stream':\n                    chart.offset('wiggle');\n                    chart.order('inside-out');\n                    break;\n                case 'stream-center':\n                    chart.offset('silhouette');\n                    chart.order('inside-out');\n                    break;\n                case 'expand':\n                    chart.offset('expand');\n                    chart.order('default');\n                    break;\n                case 'stack_percent':\n                    chart.offset(chart.d3_stackedOffset_stackPercent);\n                    chart.order('default');\n                    break;\n            }\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var stacked = nv.models.stackedArea()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.stackedArea())\n        ;\n\n    var margin = {top: 10, right: 25, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , focusEnable = false\n        , useInteractiveGuideline = false\n        , showTotalInTooltip = true\n        , totalLabel = 'TOTAL'\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = 250\n        , controlOptions = ['Stacked','Stream','Expanded']\n        , controlLabels = {}\n        , duration = 250\n        ;\n\n    state.style = stacked.style();\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        });\n\n    var oldYTickFormat = null,\n        oldValueFormatter = null;\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var style = stacked.style();\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                style: stacked.style()\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.style !== undefined)\n                style = state.style;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var percentFormatter = d3.format('%');\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(stacked);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\n            chart.update = function() { container.transition().duration(duration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n            // Setup Scales\n            x = stacked.xScale();\n            y = stacked.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-stackedWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            // g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = (showControls && legendPosition === 'top') ? availableWidth - controlWidth : availableWidth;\n\n                legend.width(legendWidth);\n                g.select('.nv-legendWrap').datum(data).call(legend);\n\n                if (legendPosition === 'bottom') {\n                \t// constant from axis.js, plus some margin for better layout\n                \tvar xAxisHeight = (showXAxis ? 12 : 0) + 10;\n                   \tmargin.bottom = Math.max(legend.height() + xAxisHeight, margin.bottom);\n                   \tavailableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                \tvar legendTop = availableHeight + xAxisHeight;\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + legendTop +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && margin.top != legend.height()) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    g.select('.nv-legendWrap')\n                    \t.attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n                }\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    {\n                        key: controlLabels.stacked || 'Stacked',\n                        metaKey: 'Stacked',\n                        disabled: stacked.style() != 'stack',\n                        style: 'stack'\n                    },\n                    {\n                        key: controlLabels.stream || 'Stream',\n                        metaKey: 'Stream',\n                        disabled: stacked.style() != 'stream',\n                        style: 'stream'\n                    },\n                    {\n                        key: controlLabels.expanded || 'Expanded',\n                        metaKey: 'Expanded',\n                        disabled: stacked.style() != 'expand',\n                        style: 'expand'\n                    },\n                    {\n                        key: controlLabels.stack_percent || 'Stack %',\n                        metaKey: 'Stack_Percent',\n                        disabled: stacked.style() != 'stack_percent',\n                        style: 'stack_percent'\n                    }\n                ];\n\n                controlWidth = (controlOptions.length/3) * 260;\n                controlsData = controlsData.filter(function(d) {\n                    return controlOptions.indexOf(d.metaKey) !== -1;\n                });\n\n                controls\n                    .width( controlWidth )\n                    .color(['#444', '#444', '#444']);\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .call(controls);\n\n                var requiredTop = Math.max(controls.height(), showLegend && (legendPosition === 'top') ? legend.height() : 0);\n\n                if ( margin.top != requiredTop ) {\n                    margin.top = requiredTop;\n                    availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                }\n\n                g.select('.nv-controlsWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left: margin.left, top: margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            stacked\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                var ticks;\n                if (stacked.offset() === 'wiggle') {\n                    ticks = 0;\n                }\n                else {\n                    ticks = nv.utils.calcTicksY(availableHeight/36, data);\n                }\n                yAxis.scale(y)\n                    ._ticks(ticks)\n                    .tickSize(-availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n                if(showXAxis) {\n                    g.select('.nv-focus .nv-x.nv-axis')\n                        .attr('transform', 'translate(0,' + availableHeight + ')')\n                        .transition()\n                        .duration(duration)\n                        .call(xAxis)\n                        ;\n                }\n            }\n\n            function updateYAxis() {\n                if(showYAxis) {\n                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                        var currentFormat = yAxis.tickFormat();\n\n                        if ( !oldYTickFormat || currentFormat !== percentFormatter )\n                            oldYTickFormat = currentFormat;\n\n                        //Forces the yAxis to use percentage in 'expand' mode.\n                        yAxis.tickFormat(percentFormatter);\n                    }\n                    else {\n                        if (oldYTickFormat) {\n                            yAxis.tickFormat(oldYTickFormat);\n                            oldYTickFormat = null;\n                        }\n                    }\n\n                    g.select('.nv-focus .nv-y.nv-axis')\n                    .transition().duration(0)\n                    .call(yAxis);\n                }\n            }\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                stackedWrap.transition().call(stacked);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            stacked.dispatch.on('areaClick.toggle', function(e) {\n                if (data.filter(function(d) { return !d.disabled }).length === 1)\n                    data.forEach(function(d) {\n                        d.disabled = false;\n                    });\n                else\n                    data.forEach(function(d,i) {\n                        d.disabled = (i != e.seriesIndex);\n                    });\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                stacked.style(d.style);\n\n\n                state.style = stacked.style();\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                stacked.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0, allNullValues = true;\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        var point = series.values[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue != null) {\n                            stacked.highlightPoint(i, pointIndex, true);\n                        }\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\n                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n                        allData.push({\n                            key: series.key,\n                            value: tooltipValue,\n                            color: color(series,series.seriesIndex),\n                            point: point\n                        });\n\n                        if (showTotalInTooltip && stacked.style() != 'expand' && tooltipValue != null) {\n                          valueSum += tooltipValue;\n                          allNullValues = false;\n                        };\n                    });\n\n                allData.reverse();\n\n                //Highlight the tooltip entry based on which stack the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var yDistMax = Infinity, indexToHighlight = null;\n                    allData.forEach(function(series,i) {\n\n                        //To handle situation where the stacked area chart is negative, we need to use absolute values\n                        //when checking if the mouse Y value is within the stack area.\n                        yValue = Math.abs(yValue);\n                        var stackedY0 = Math.abs(series.point.display.y0);\n                        var stackedY = Math.abs(series.point.display.y);\n                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n                        {\n                            indexToHighlight = i;\n                            return;\n                        }\n                    });\n                    if (indexToHighlight != null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.\n                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2 && !allNullValues) {\n                    allData.push({\n                        key: totalLabel,\n                        value: valueSum,\n                        total: true\n                    });\n                }\n\n                var xValue = chart.x()(singlePoint,pointIndex);\n\n                var valueFormatter = interactiveLayer.tooltip.valueFormatter();\n                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view\n                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                    if ( !oldValueFormatter ) {\n                        oldValueFormatter = valueFormatter;\n                    }\n                    //Forces the tooltip to use percentage in 'expand' mode.\n                    valueFormatter = d3.format(\".1%\");\n                }\n                else {\n                    if (oldValueFormatter) {\n                        valueFormatter = oldValueFormatter;\n                        oldValueFormatter = null;\n                    }\n                }\n\n                interactiveLayer.tooltip\n                    .valueFormatter(valueFormatter)\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                stacked.clearHighlights();\n            });\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.style !== 'undefined') {\n                    stacked.style(e.style);\n                    style = e.style;\n                }\n\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return stacked.x()(d,i) >= extent[0] && stacked.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                stackedWrap.transition().duration(duration).call(stacked);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n\n        });\n\n        renderWatch.renderEnd('stacked Area chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.point['x'] = stacked.x()(evt.point);\n        evt.point['y'] = stacked.y()(evt.point);\n        tooltip.data(evt).hidden(false);\n    });\n\n    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.stacked = stacked;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis;\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.focus = focus;\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},\n        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},\n        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            focus.margin.top    = _.top    !== undefined ? _.top    : focus.margin.top;\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            stacked.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            stacked.color(color);\n            focus.color(color);\n        }},\n        x: {get: function(){return stacked.x();}, set: function(_){\n            stacked.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return stacked.y();}, set: function(_){\n            stacked.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = !!_;\n            chart.interactive(!_);\n            chart.useVoronoi(!_);\n            stacked.scatter.interactive(!_);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, stacked);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaWithFocusChart = function() {\n  return nv.models.stackedAreaChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\n// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad\nnv.models.sunburst = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 600\n        , height = 600\n        , mode = \"count\"\n        , modes = {count: function(d) { return 1; }, value: function(d) { return d.value || d.size }, size: function(d) { return d.value || d.size }}\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , showLabels = false\n        , labelFormat = function(d){if(mode === 'count'){return d.name + ' #' + d.value}else{return d.name + ' ' + (d.value || d.size)}}\n        , labelThreshold = 0.02\n        , sort = function(d1, d2){return d1.name > d2.name;}\n        , key = function(d,i){return d.name;}\n        , groupColorByParent = true\n        , duration = 500\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd');\n\n    //============================================================\n    // aux functions and setup\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear().range([0, 2 * Math.PI]);\n    var y = d3.scale.sqrt();\n\n    var partition = d3.layout.partition().sort(sort);\n\n    var node, availableWidth, availableHeight, radius;\n    var prevPositions = {};\n\n    var arc = d3.svg.arc()\n        .startAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x))) })\n        .endAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))) })\n        .innerRadius(function(d) {return Math.max(0, y(d.y)) })\n        .outerRadius(function(d) {return Math.max(0, y(d.y + d.dy)) });\n\n    function rotationToAvoidUpsideDown(d) {\n        var centerAngle = computeCenterAngle(d);\n        if(centerAngle > 90){\n            return 180;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    function computeCenterAngle(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        var centerAngle = (((startAngle + endAngle) / 2) * (180 / Math.PI)) - 90;\n        return centerAngle;\n    }\n\n    function computeNodePercentage(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        return (endAngle - startAngle) / (2 * Math.PI);\n    }\n\n    function labelThresholdMatched(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n\n        var size = endAngle - startAngle;\n        return size > labelThreshold;\n    }\n\n    // When zooming: interpolate the scales.\n    function arcTweenZoom(e,i) {\n        var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]),\n        yd = d3.interpolate(y.domain(), [node.y, 1]),\n        yr = d3.interpolate(y.range(), [node.y ? 20 : 0, radius]);\n\n        if (i === 0) {\n            return function() {return arc(e);}\n        }\n        else {\n            return function (t) {\n                x.domain(xd(t));\n                y.domain(yd(t)).range(yr(t));\n                return arc(e);\n            }\n        };\n    }\n\n    function arcTweenUpdate(d) {\n        var ipo = d3.interpolate({x: d.x0, dx: d.dx0, y: d.y0, dy: d.dy0}, d);\n\n        return function (t) {\n            var b = ipo(t);\n\n            d.x0 = b.x;\n            d.dx0 = b.dx;\n            d.y0 = b.y;\n            d.dy0 = b.dy;\n\n            return arc(b);\n        };\n    }\n\n    function updatePrevPosition(node) {\n        var k = key(node);\n        if(! prevPositions[k]) prevPositions[k] = {};\n        var pP = prevPositions[k];\n        pP.dx = node.dx;\n        pP.x = node.x;\n        pP.dy = node.dy;\n        pP.y = node.y;\n    }\n\n    function storeRetrievePrevPositions(nodes) {\n        nodes.forEach(function(n){\n            var k = key(n);\n            var pP = prevPositions[k];\n            //console.log(k,n,pP);\n            if( pP ){\n                n.dx0 = pP.dx;\n                n.x0 = pP.x;\n                n.dy0 = pP.dy;\n                n.y0 = pP.y;\n            }\n            else {\n                n.dx0 = n.dx;\n                n.x0 = n.x;\n                n.dy0 = n.dy;\n                n.y0 = n.y;\n            }\n            updatePrevPosition(n);\n        });\n    }\n\n    function zoomClick(d) {\n        var labels = container.selectAll('text')\n        var path = container.selectAll('path')\n\n        // fade out all text elements\n        labels.transition().attr(\"opacity\",0);\n\n        // to allow reference to the new center node\n        node = d;\n\n        path.transition()\n            .duration(duration)\n            .attrTween(\"d\", arcTweenZoom)\n            .each('end', function(e) {\n                // partially taken from here: http://bl.ocks.org/metmajer/5480307\n                // check if the animated element's data e lies within the visible angle span given in d\n                if(e.x >= d.x && e.x < (d.x + d.dx) ){\n                    if(e.depth >= d.depth){\n                        // get a selection of the associated text element\n                        var parentNode = d3.select(this.parentNode);\n                        var arcText = parentNode.select('text');\n\n                        // fade in the text element and recalculate positions\n                        arcText.transition().duration(duration)\n                        .text( function(e){return labelFormat(e) })\n                        .attr(\"opacity\", function(d){\n                            if(labelThresholdMatched(d)) {\n                                return 1;\n                            }\n                            else {\n                                return 0;\n                            }\n                        })\n                        .attr(\"transform\", function() {\n                            var width = this.getBBox().width;\n                            if(e.depth === 0)\n                            return \"translate(\" + (width / 2 * - 1) + \",0)\";\n                            else if(e.depth === d.depth){\n                                return \"translate(\" + (y(e.y) + 5) + \",0)\";\n                            }\n                            else {\n                                var centerAngle = computeCenterAngle(e);\n                                var rotation = rotationToAvoidUpsideDown(e);\n                                if (rotation === 0) {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + 5) + ',0)';\n                                }\n                                else {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                                }\n                            }\n                        });\n                    }\n                }\n            })\n    }\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n            container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n            radius = Math.min(availableWidth, availableHeight) / 2;\n\n            y.range([0, radius]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.select('g.nvd3.nv-wrap.nv-sunburst');\n            if( !wrap[0][0] ) {\n                wrap = container.append('g')\n                    .attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id)\n                    .attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            } else {\n                wrap.attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            }\n\n            container.on('click', function (d, i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            partition.value(modes[mode] || modes[\"count\"]);\n\n            //reverse the drawing order so that the labels of inner\n            //arcs are drawn on top of the outer arcs.\n            var nodes = partition.nodes(data[0]).reverse()\n\n            storeRetrievePrevPositions(nodes);\n            var cG = wrap.selectAll('.arc-container').data(nodes, key)\n\n            //handle new datapoints\n            var cGE = cG.enter()\n                .append(\"g\")\n                .attr(\"class\",'arc-container')\n\n            cGE.append(\"path\")\n                .attr(\"d\", arc)\n                .style(\"fill\", function (d) {\n                    if (d.color) {\n                        return d.color;\n                    }\n                    else if (groupColorByParent) {\n                        return color((d.children ? d : d.parent).name);\n                    }\n                    else {\n                        return color(d.name);\n                    }\n                })\n                .style(\"stroke\", \"#FFF\")\n                .on(\"click\", function(d,i){\n                    zoomClick(d);\n                    dispatch.elementClick({\n                        data: d,\n                        index: i\n                    })\n                })\n                .on('mouseover', function(d,i){\n                    d3.select(this).classed('hover', true).style('opacity', 0.8);\n                    dispatch.elementMouseover({\n                        data: d,\n                        color: d3.select(this).style(\"fill\"),\n                        percent: computeNodePercentage(d)\n                    });\n                })\n                .on('mouseout', function(d,i){\n                    d3.select(this).classed('hover', false).style('opacity', 1);\n                    dispatch.elementMouseout({\n                        data: d\n                    });\n                })\n                .on('mousemove', function(d,i){\n                    dispatch.elementMousemove({\n                        data: d\n                    });\n                });\n\n            ///Iterating via each and selecting based on the this\n            ///makes it work ... a cG.selectAll('path') doesn't.\n            ///Without iteration the data (in the element) didn't update.\n            cG.each(function(d){\n                d3.select(this).select('path')\n                    .transition()\n                    .duration(duration)\n                    .attrTween('d', arcTweenUpdate);\n            });\n\n            if(showLabels){\n                //remove labels first and add them back\n                cG.selectAll('text').remove();\n\n                //this way labels are on top of newly added arcs\n                cG.append('text')\n                    .text( function(e){ return labelFormat(e)})\n                    .transition()\n                    .duration(duration)\n                    .attr(\"opacity\", function(d){\n                        if(labelThresholdMatched(d)) {\n                            return 1;\n                        }\n                        else {\n                            return 0;\n                        }\n                    })\n                    .attr(\"transform\", function(d) {\n                        var width = this.getBBox().width;\n                        if(d.depth === 0){\n                            return \"rotate(0)translate(\" + (width / 2 * -1) + \",0)\";\n                        }\n                        else {\n                            var centerAngle = computeCenterAngle(d);\n                            var rotation = rotationToAvoidUpsideDown(d);\n                            if (rotation === 0) {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + 5) + ',0)';\n                            }\n                            else {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                            }\n                        }\n                    });\n            }\n\n            //zoom out to the center when the data is updated.\n            zoomClick(nodes[nodes.length - 1])\n\n\n            //remove unmatched elements ...\n            cG.exit()\n                .transition()\n                .duration(duration)\n                .attr('opacity',0)\n                .each('end',function(d){\n                    var k = key(d);\n                    prevPositions[k] = undefined;\n                })\n                .remove();\n        });\n\n\n        renderWatch.renderEnd('sunburst immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        groupColorByParent: {get: function(){return groupColorByParent;}, set: function(_){groupColorByParent=!!_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=!!_}},\n        labelFormat: {get: function(){return labelFormat;}, set: function(_){labelFormat=_}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_}},\n        sort: {get: function(){return sort;}, set: function(_){sort=_}},\n        key: {get: function(){return key;}, set: function(_){key=_}},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sunburstChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sunburst = nv.models.sunburst();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showTooltipPercent = false\n        , id = Math.round(Math.random() * 100000)\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd');\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d){return d;});\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sunburst);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin);\n            var availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0) {\n                    container.call(chart);\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = container;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            sunburst.width(availableWidth).height(availableHeight).margin(margin);\n            container.call(sunburst);\n        });\n\n        renderWatch.renderEnd('sunburstChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.series = {\n            key: evt.data.name,\n            value: (evt.data.value || evt.data.size),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sunburst = sunburst;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            sunburst.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            sunburst.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n            sunburst.margin(margin);\n        }}\n    });\n    nv.utils.inheritOptions(chart, sunburst);\n    nv.utils.initOptions(chart);\n    return chart;\n\n};\n\nnv.version = \"1.8.5\";\n})();\n//# sourceMappingURL=nv.d3.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/nvd3/build/nv.d3.js\n// module id = 690\n// module chunks = 0","!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e(require(\"react\"),require(\"d3\"),require(\"nvd3\")):\"function\"==typeof define&&define.amd?define([\"react\",\"d3\",\"nvd3\"],e):\"object\"==typeof exports?exports.NVD3Chart=e(require(\"react\"),require(\"d3\"),require(\"nvd3\")):t.NVD3Chart=e(t.React,t.d3,t.nv)}(this,function(t,e,n){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p=\"\",e(0)}([function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),i=r(o),u=n(2),c=r(u),s=n(17),a=r(s),f=n(21),p=r(f),l=n(22),d=r(l),h=n(25),y=r(h),v=n(48),b=r(v),g=n(55),m=r(g),_=n(56),x=r(_),O=n(57),j=r(O),w=n(58),S=[\"x\",\"y\",\"type\",\"datum\",\"configure\"],P=[\"width\",\"height\"],E=\"margin\",M=\"containerStyle\",k=\"renderStart\",C=\"renderEnd\",D=\"ready\",F=function(t){function e(){return(0,p[\"default\"])(this,e),(0,y[\"default\"])(this,(0,a[\"default\"])(e).apply(this,arguments))}return(0,b[\"default\"])(e,t),(0,d[\"default\"])(e,[{key:\"componentDidMount\",value:function(){var t=this;j[\"default\"].addGraph(this.renderChart.bind(this),function(e){(0,w.isCallable)(t.props.ready)&&t.props.ready(e,D)})}},{key:\"componentDidUpdate\",value:function(){this.renderChart()}},{key:\"componentWillUnmount\",value:function(){this.resizeHandler&&this.resizeHandler.clear()}},{key:\"renderChart\",value:function(){var t=void 0;switch(this.chart=this.chart&&!this.rendering?this.chart:j[\"default\"].models[this.props.type](),(0,w.isCallable)(this.props.renderStart)&&this.props.renderStart(this.chart,k),this.parsedProps=(0,w.bindFunctions)(this.props,this.props.context),this.chart.x&&this.chart.x((0,w.getValueFunction)(this.parsedProps.x,\"x\")),this.chart.y&&this.chart.y((0,w.getValueFunction)(this.parsedProps.y,\"y\")),this.props.margin&&this.chart.margin(this.options(E,w.pick).margin||(0,w.propsByPrefix)(\"margin\",this.props)||{}),this.configureComponents(this.chart,this.options(S.concat(M),w.without)),!this.props.configure||this.props.configure(this.chart),this.selection=x[\"default\"].select(this.refs.svg).datum(this.props.datum).call(this.chart),this.resizeHandler||(this.resizeHandler=j[\"default\"].utils.windowResize(this.chart.update)),this.props.type){case\"pieChart\":t=this.chart.pie.dispatch;break;case\"lineChart\":t=this.chart.lines.dispatch;break;default:t=this.chart.dispatch}return t.renderEnd&&t.on(\"renderEnd\",this.renderEnd.bind(this)),this.rendering=!0,this.chart}},{key:\"renderEnd\",value:function(t){(0,w.isCallable)(this.props.renderEnd)&&this.props.renderEnd(this.chart,C),this.rendering=!1}},{key:\"configureComponents\",value:function(t,e){for(var n in e){var r=e[n];t&&((0,w.isPlainObject)(r)?this.configureComponents(t[n],r):\"function\"==typeof t[n]&&t[n](r))}}},{key:\"options\",value:function(t,e){var n=this.parsedProps.options||this.parsedProps||this.props.chartOptions;return(e=e||w.pick)(n,t)}},{key:\"render\",value:function(){var t=(0,w.pick)(this.props,P),e=(0,c[\"default\"])({},t,this.props.containerStyle);return m[\"default\"].createElement(\"div\",{ref:\"root\",className:\"nv-chart\",style:e},m[\"default\"].createElement(\"svg\",(0,i[\"default\"])({ref:\"svg\"},t)))}}]),e}(m[\"default\"].Component);e[\"default\"]=F,t.exports=F},function(t,e,n){\"use strict\";var r=n(2)[\"default\"];e[\"default\"]=r||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(3),__esModule:!0}},function(t,e,n){n(4),t.exports=n(7).Object.assign},function(t,e,n){var r=n(5);r(r.S+r.F,\"Object\",{assign:n(10)})},function(t,e,n){var r=n(6),o=n(7),i=n(8),u=\"prototype\",c=function(t,e,n){var s,a,f,p=t&c.F,l=t&c.G,d=t&c.S,h=t&c.P,y=t&c.B,v=t&c.W,b=l?o:o[e]||(o[e]={}),g=l?r:d?r[e]:(r[e]||{})[u];l&&(n=e);for(s in n)a=!p&&g&&s in g,a&&s in b||(f=a?g[s]:n[s],b[s]=l&&\"function\"!=typeof g[s]?n[s]:y&&a?i(f,r):v&&g[s]==f?function(t){var e=function(e){return this instanceof t?new t(e):t(e)};return e[u]=t[u],e}(f):h&&\"function\"==typeof f?i(Function.call,f):f,h&&((b[u]||(b[u]={}))[s]=f))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,t.exports=c},function(t,e){var n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:\"1.2.6\"};\"number\"==typeof __e&&(__e=n)},function(t,e,n){var r=n(9);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,e,n){var r=n(11),o=n(12),i=n(14);t.exports=n(16)(function(){var t=Object.assign,e={},n={},r=Symbol(),o=\"abcdefghijklmnopqrst\";return e[r]=7,o.split(\"\").forEach(function(t){n[t]=t}),7!=t({},e)[r]||Object.keys(t({},n)).join(\"\")!=o})?function(t,e){for(var n=o(t),u=arguments,c=u.length,s=1,a=r.getKeys,f=r.getSymbols,p=r.isEnum;c>s;)for(var l,d=i(u[s++]),h=f?a(d).concat(f(d)):a(d),y=h.length,v=0;y>v;)p.call(d,l=h[v++])&&(n[l]=d[l]);return n}:Object.assign},function(t,e){var n=Object;t.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},function(t,e,n){var r=n(13);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,e,n){var r=n(15);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==r(t)?t.split(\"\"):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},function(t,e,n){t.exports={\"default\":n(18),__esModule:!0}},function(t,e,n){n(19),t.exports=n(7).Object.getPrototypeOf},function(t,e,n){var r=n(12);n(20)(\"getPrototypeOf\",function(t){return function(e){return t(r(e))}})},function(t,e,n){var r=n(5),o=n(7),i=n(16);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),\"Object\",u)}},function(t,e){\"use strict\";e[\"default\"]=function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")},e.__esModule=!0},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(23),i=r(o);e[\"default\"]=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,i[\"default\"])(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(24),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e,n){return r.setDesc(t,e,n)}},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}var o=n(26),i=r(o);e[\"default\"]=function(t,e){if(!t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!e||\"object\"!==(\"undefined\"==typeof e?\"undefined\":(0,i[\"default\"])(e))&&\"function\"!=typeof e?t:e},e.__esModule=!0},function(t,e,n){\"use strict\";var r=n(27)[\"default\"];e[\"default\"]=function(t){return t&&t.constructor===r?\"symbol\":typeof t},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(28),__esModule:!0}},function(t,e,n){n(29),n(47),t.exports=n(7).Symbol},function(t,e,n){\"use strict\";var r=n(11),o=n(6),i=n(30),u=n(31),c=n(5),s=n(32),a=n(16),f=n(35),p=n(36),l=n(38),d=n(37),h=n(39),y=n(41),v=n(42),b=n(43),g=n(44),m=n(40),_=n(34),x=r.getDesc,O=r.setDesc,j=r.create,w=y.get,S=o.Symbol,P=o.JSON,E=P&&P.stringify,M=!1,k=d(\"_hidden\"),C=r.isEnum,D=f(\"symbol-registry\"),F=f(\"symbols\"),N=\"function\"==typeof S,T=Object.prototype,q=u&&a(function(){return 7!=j(O({},\"a\",{get:function(){return O(this,\"a\",{value:7}).a}})).a})?function(t,e,n){var r=x(T,e);r&&delete T[e],O(t,e,n),r&&t!==T&&O(T,e,r)}:O,z=function(t){var e=F[t]=j(S.prototype);return e._k=t,u&&M&&q(T,t,{configurable:!0,set:function(e){i(this,k)&&i(this[k],t)&&(this[k][t]=!1),q(this,t,_(1,e))}}),e},A=function(t){return\"symbol\"==typeof t},V=function(t,e,n){return n&&i(F,e)?(n.enumerable?(i(t,k)&&t[k][e]&&(t[k][e]=!1),n=j(n,{enumerable:_(0,!1)})):(i(t,k)||O(t,k,_(1,{})),t[k][e]=!0),q(t,e,n)):O(t,e,n)},W=function(t,e){g(t);for(var n,r=v(e=m(e)),o=0,i=r.length;i>o;)V(t,n=r[o++],e[n]);return t},B=function(t,e){return void 0===e?j(t):W(j(t),e)},G=function(t){var e=C.call(this,t);return e||!i(this,t)||!i(F,t)||i(this,k)&&this[k][t]?e:!0},H=function(t,e){var n=x(t=m(t),e);return!n||!i(F,e)||i(t,k)&&t[k][e]||(n.enumerable=!0),n},I=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])||e==k||r.push(e);return r},J=function(t){for(var e,n=w(m(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])&&r.push(F[e]);return r},K=function(t){if(void 0!==t&&!A(t)){for(var e,n,r=[t],o=1,i=arguments;i.length>o;)r.push(i[o++]);return e=r[1],\"function\"==typeof e&&(n=e),(n||!b(e))&&(e=function(t,e){return n&&(e=n.call(this,t,e)),A(e)?void 0:e}),r[1]=e,E.apply(P,r)}},R=a(function(){var t=S();return\"[null]\"!=E([t])||\"{}\"!=E({a:t})||\"{}\"!=E(Object(t))});N||(S=function(){if(A(this))throw TypeError(\"Symbol is not a constructor\");return z(l(arguments.length>0?arguments[0]:void 0))},s(S.prototype,\"toString\",function(){return this._k}),A=function(t){return t instanceof S},r.create=B,r.isEnum=G,r.getDesc=H,r.setDesc=V,r.setDescs=W,r.getNames=y.get=I,r.getSymbols=J,u&&!n(46)&&s(T,\"propertyIsEnumerable\",G,!0));var U={\"for\":function(t){return i(D,t+=\"\")?D[t]:D[t]=S(t)},keyFor:function(t){return h(D,t)},useSetter:function(){M=!0},useSimple:function(){M=!1}};r.each.call(\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),function(t){var e=d(t);U[t]=N?e:z(e)}),M=!0,c(c.G+c.W,{Symbol:S}),c(c.S,\"Symbol\",U),c(c.S+c.F*!N,\"Object\",{create:B,defineProperty:V,defineProperties:W,getOwnPropertyDescriptor:H,getOwnPropertyNames:I,getOwnPropertySymbols:J}),P&&c(c.S+c.F*(!N||R),\"JSON\",{stringify:K}),p(S,\"Symbol\"),p(Math,\"Math\",!0),p(o.JSON,\"JSON\",!0)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){t.exports=!n(16)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,e,n){t.exports=n(33)},function(t,e,n){var r=n(11),o=n(34);t.exports=n(31)?function(t,e,n){return r.setDesc(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(6),o=\"__core-js_shared__\",i=r[o]||(r[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,e,n){var r=n(11).setDesc,o=n(30),i=n(37)(\"toStringTag\");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(35)(\"wks\"),o=n(38),i=n(6).Symbol;t.exports=function(t){return r[t]||(r[t]=i&&i[t]||(i||o)(\"Symbol.\"+t))}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++n+r).toString(36))}},function(t,e,n){var r=n(11),o=n(40);t.exports=function(t,e){for(var n,i=o(t),u=r.getKeys(i),c=u.length,s=0;c>s;)if(i[n=u[s++]]===e)return n}},function(t,e,n){var r=n(14),o=n(13);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(40),o=n(11).getNames,i={}.toString,u=\"object\"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return o(t)}catch(e){return u.slice()}};t.exports.get=function(t){return u&&\"[object Window]\"==i.call(t)?c(t):o(r(t))}},function(t,e,n){var r=n(11);t.exports=function(t){var e=r.getKeys(t),n=r.getSymbols;if(n)for(var o,i=n(t),u=r.isEnum,c=0;i.length>c;)u.call(t,o=i[c++])&&e.push(o);return e}},function(t,e,n){var r=n(15);t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},function(t,e,n){var r=n(45);t.exports=function(t){if(!r(t))throw TypeError(t+\" is not an object!\");return t}},function(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,e){t.exports=!0},function(t,e){},function(t,e,n){\"use strict\";var r=n(49)[\"default\"],o=n(51)[\"default\"];e[\"default\"]=function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof e);t.prototype=r(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(o?o(t,e):t.__proto__=e)},e.__esModule=!0},function(t,e,n){t.exports={\"default\":n(50),__esModule:!0}},function(t,e,n){var r=n(11);t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){t.exports={\"default\":n(52),__esModule:!0}},function(t,e,n){n(53),t.exports=n(7).Object.setPrototypeOf},function(t,e,n){var r=n(5);r(r.S,\"Object\",{setPrototypeOf:n(54).set})},function(t,e,n){var r=n(11).getDesc,o=n(45),i=n(44),u=function(t,e){if(i(t),!o(e)&&null!==e)throw TypeError(e+\": can't set as prototype!\")};t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(t,e,o){try{o=n(8)(Function.call,r(Object.prototype,\"__proto__\").set,2),o(t,[]),e=!(t instanceof Array)}catch(i){e=!0}return function(t,n){return u(t,n),e?t.__proto__=n:o(t,n),t}}({},!1):void 0),check:u}},function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{\"default\":t}}function o(t,e){return t.indexOf(e)>=0}function i(t){return function(){return!t.apply(this,arguments)}}function u(t,e,n){for(var r={},o=(0,m[\"default\"])(t),i=0,u=o.length;u>i;i++){var c=o[i],s=t[c];n(e,c)&&(r[c]=s)}return r}function c(t,e){return u(t,e,o)}function s(t,e){return u(t,e,i(o))}function a(t){if(\"object\"==(\"undefined\"==typeof t?\"undefined\":(0,b[\"default\"])(t))&&null!==t){if(\"function\"==typeof y[\"default\"]){var e=(0,y[\"default\"])(t);return e===Object.prototype||null===e}return\"[object Object]\"==Object.prototype.toString.call(t)}return!1}function f(t,e){var n,r,o;n=Array.isArray(t)?[]:{};for(o in t)r=t[o],null!=r&&(\"object\"===(\"undefined\"==typeof r?\"undefined\":(0,b[\"default\"])(r))&&null!==r&&\"function\"!==r.type?n[o]=f(r,e):\"function\"===r.type?n[o]=e[r.name]:n[o]=r);return n}function p(t,e){return\"function\"==typeof t?t:function(n){return\"undefined\"!=typeof n[t]?n[t]:n[e]}}function l(t,e){return console.warn(\"Set margin with prefixes is deprecated use an object instead\"),t+=\"-\",(0,m[\"default\"])(e).reduce(function(n,r){return r.substr(0,t.length)===t&&(n[r.replace(t,\"\")]=e[r]),n},{})}function d(t){return t&&\"function\"==typeof t}Object.defineProperty(e,\"__esModule\",{value:!0}),e.includes=o,e.negate=i,e.filterObject=u,e.pick=c,e.without=s,e.isPlainObject=a,e.bindFunctions=f,e.getValueFunction=p,e.propsByPrefix=l,e.isCallable=d;var h=n(17),y=r(h),v=n(26),b=r(v),g=n(59),m=r(g)},function(t,e,n){t.exports={\"default\":n(60),__esModule:!0}},function(t,e,n){n(61),t.exports=n(7).Object.keys},function(t,e,n){var r=n(12);n(20)(\"keys\",function(t){return function(e){return t(r(e))}})}])});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-nvd3/dist/react-nvd3.min.js\n// module id = 691\n// module chunks = 0"],"sourceRoot":""}